{
  "info": {
    "name": "Canvas API (Generated from Markdown)",
    "description": "Canvas LMS API collection generated from markdown documentation on 2025-09-16 17:20:28",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "7e70421d-9f2d-4c64-89fd-705401415b59"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://canvas.instructure.com",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "your_canvas_access_token_here",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "API Token Scopes",
      "description": "{% hint style=\"warning\" %} BETA: This API resource is not finalized, and there could be breaking changes before its final release. {% endhint %} API for retrieving API scopes",
      "item": [
        {
          "name": "Get Accounts Scopes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/scopes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "scopes"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "group_by",
                  "value": "",
                  "description": "The attribute to group the scopes by. By default no grouping is done.Allowed values: resource_name",
                  "disabled": true
                }
              ]
            },
            "description": "A list of scopes that can be applied to developer keys and access tokens.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/scopes`"
          }
        }
      ]
    },
    {
      "name": "Access Tokens",
      "description": "",
      "item": [
        {
          "name": "Delete Users Tokens",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/tokens/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "tokens",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "The ID can be the actual database ID of the token, or the ‘token\\_hint’ value.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/tokens/:id`"
          }
        },
        {
          "name": "Get Users Tokens",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/tokens/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "tokens",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "The ID can be the actual database ID of the token, or the ‘token\\_hint’ value. ### [Create an access token](#method.tokens.create) <a href=\"#method.tokens.create\" id=\"method.tokens.create\"></a> [TokensController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/tokens_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/tokens/:id`"
          }
        },
        {
          "name": "Post Users Tokens",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/tokens",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "tokens"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Create a new access token for the specified user. If the user is not the current user, the token will be created as “pending”, and must be activated by the user before it can be used.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/tokens`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "token[purpose]",
                  "value": "",
                  "description": "The purpose of the token.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "token[expires_at]",
                  "value": "",
                  "description": "The time at which the token will expire.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "token[scopes][]",
                  "value": "",
                  "description": "The scopes to associate with the token. Ignored if the default developer key does not have the “enable scopes” option enabled. In such cases, the token will inherit the user’s permissions instead.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Tokens",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/tokens/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "tokens",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "token[purpose]",
                  "value": "",
                  "description": "The purpose of the token.",
                  "disabled": true
                },
                {
                  "key": "token[regenerate]",
                  "value": "",
                  "description": "Regenerate the actual token.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing access token. The ID can be the actual database ID of the token, or the ‘token\\_hint’ value. Regenerating an expired token requires a new expiration date.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/tokens/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "token[expires_at]",
                  "value": "",
                  "description": "The time at which the token will expire.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "token[scopes][]",
                  "value": "",
                  "description": "The scopes to associate with the token.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Account Calendars",
      "description": "API for viewing and toggling settings of account calendars. An account calendar is available for each account in Canvas. All account calendars are hidden by default, but administrators with the `manage_account_calendar_visibility` permission may set calendars as visible. Administrators with the `manage_account_calendar_events` permission can create events in visible account calendars, and users associated with an account can add the calendar and see its events (if the calendar is visible). Events on calendars set as `auto_subscribe` calendars will appear on users' calendars even if they do not manually add it.",
      "item": [
        {
          "name": "List Account_Calendars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/account_calendars",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "account_calendars"
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "When included, searches available account calendars for the term. Returns matching results. Term must be at least 2 characters.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of account calendars available to the current user. Includes visible account calendars where the user has an account association.\n\n**OAuth Scope:** `url:GET|/api/v1/account_calendars`"
          }
        },
        {
          "name": "List Account_Calendars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/account_calendars/:account_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "account_calendars",
                ":account_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Get details about a specific account calendar.\n\n**OAuth Scope:** `url:GET|/api/v1/account_calendars/:account_id`"
          }
        },
        {
          "name": "Get Accounts Account_Calendars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_calendars",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_calendars"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "When included, searches all descendent accounts of provided account for the term. Returns matching results. Term must be at least 2 characters. Can be combined with a filter value.",
                  "disabled": true
                },
                {
                  "key": "filter",
                  "value": "",
                  "description": "When included, only returns calendars that are either visible or hidden. Can be combined with a search term.Allowed values: visible, hidden",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of account calendars for the provided account and its first level of sub-accounts. Includes hidden calendars in the response. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/account_calendars`"
          }
        },
        {
          "name": "Get Accounts Visible_Calendars_Count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/visible_calendars_count",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "visible_calendars_count"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the number of visible account calendars.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/visible_calendars_count`"
          }
        },
        {
          "name": "Update Account_Calendars",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/account_calendars/:account_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "account_calendars",
                ":account_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "visible",
                  "value": "",
                  "description": "Allow administrators with ‘manage_account_calendar_events` permission to create events on this calendar, and allow users to view this calendar and its events.",
                  "disabled": true
                },
                {
                  "key": "auto_subscribe",
                  "value": "",
                  "description": "When true, users will automatically see events from this account in their calendar, even if they haven’t manually added that calendar.",
                  "disabled": true
                }
              ]
            },
            "description": "Set an account calendar’s visibility and auto\\_subscribe values. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission on the account.\n\n**OAuth Scope:** `url:PUT|/api/v1/account_calendars/:account_id`"
          }
        },
        {
          "name": "Put Accounts Account_Calendars",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_calendars",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_calendars"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Set visibility and/or auto\\_subscribe on many calendars simultaneously. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission on the account. Accepts a JSON array of objects containing 2-3 keys each: ‘id\\` (the account’s id, required), ‘visible\\` (a boolean indicating whether the account calendar is visible), and \\`auto\\_subscribe\\` (a boolean indicating whether users should see these events in their calendar without manually subscribing). Returns the count of updated accounts.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/account_calendars`"
          }
        }
      ]
    },
    {
      "name": "Account Domain Lookups",
      "description": "",
      "item": [
        {
          "name": "Get Accounts Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/search",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                "search"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "campus name",
                  "disabled": true
                },
                {
                  "key": "domain",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "latitude",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "longitude",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of up to 5 matching account domains Partial match on name / domain are supported\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/search`"
          }
        }
      ]
    },
    {
      "name": "Account Notifications",
      "description": "API for account notifications.",
      "item": [
        {
          "name": "Delete Accounts Account_Notifications",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_notifications/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "remove",
                  "value": "",
                  "description": "Destroy the account notification.",
                  "disabled": true
                }
              ]
            },
            "description": "If the current user no longer wants to see this account notification, it can be closed with this call. This affects the current user only. If the current user is an admin and they pass a remove parameter with a value of “true”, the account notification will be destroyed. This affects all users.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/account_notifications/:id`"
          }
        },
        {
          "name": "Get Accounts Account_Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_notifications",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_notifications"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include_past",
                  "value": "",
                  "description": "Include past and dismissed global announcements.",
                  "disabled": true
                },
                {
                  "key": "include_all",
                  "value": "",
                  "description": "Include all global announcements, regardless of user’s role or availability date. Only available to account admins.",
                  "disabled": true
                },
                {
                  "key": "show_is_closed",
                  "value": "",
                  "description": "Include a flag for each notification indicating whether it has been read by the user.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of all global notifications in the account for the current user Any notifications that have been closed by the user will not be returned, unless a include\\_past parameter is passed in as true. Admins can request all global notifications for the account by passing in an include\\_all parameter.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/account_notifications`"
          }
        },
        {
          "name": "Get Accounts Account_Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_notifications/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns a global notification for the current user A notification that has been closed by the user will not be returned\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/account_notifications/:id`"
          }
        },
        {
          "name": "Post Accounts Account_Notifications",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_notifications",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_notifications"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_notification[icon]",
                  "value": "",
                  "description": "The icon to display with the notification. Note: Defaults to warning.Allowed values: warning, information, question, error, calendar",
                  "disabled": true
                },
                {
                  "key": "account_notification_roles[]",
                  "value": "",
                  "description": "The role(s) to send global notification to. Note: ommitting this field will send to everyone Example:account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new global notification for an account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/account_notifications`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "account_notification[subject]",
                  "value": "",
                  "description": "The subject of the notification.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "account_notification[message]",
                  "value": "",
                  "description": "The message body of the notification.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "account_notification[start_at]",
                  "value": "",
                  "description": "The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "account_notification[end_at]",
                  "value": "",
                  "description": "The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Account_Notifications",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/account_notifications/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "account_notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_notification[subject]",
                  "value": "",
                  "description": "The subject of the notification.",
                  "disabled": true
                },
                {
                  "key": "account_notification[message]",
                  "value": "",
                  "description": "The message body of the notification.",
                  "disabled": true
                },
                {
                  "key": "account_notification[icon]",
                  "value": "",
                  "description": "The icon to display with the notification.Allowed values: warning, information, question, error, calendar",
                  "disabled": true
                },
                {
                  "key": "account_notification_roles[]",
                  "value": "",
                  "description": "The role(s) to send global notification to. Note: ommitting this field will send to everyone Example:account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                  "disabled": true
                }
              ]
            },
            "description": "Update global notification for an account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/account_notifications/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "account_notification[start_at]",
                  "value": "",
                  "description": "The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "account_notification[end_at]",
                  "value": "",
                  "description": "The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Account Reports",
      "description": "API for accessing account reports.",
      "item": [
        {
          "name": "Delete Accounts Reports",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports/:report/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports",
                ":report",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "report",
                  "value": "<report>",
                  "description": "The report identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes a generated report instance.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/reports/:report/:id`"
          }
        },
        {
          "name": "Get Accounts Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“description_html”an HTML description of the report, with example output“parameters_html”an HTML form for the report parametersAllowed values: description_html, params_html",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of reports for the current context.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/reports`"
          }
        },
        {
          "name": "Get Accounts Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports/:report",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports",
                ":report"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "report",
                  "value": "<report>",
                  "description": "The report identifier"
                }
              ]
            },
            "description": "Shows all reports that have been run for the account of a specific type.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/reports/:report`"
          }
        },
        {
          "name": "Get Accounts Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports/:report/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports",
                ":report",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "report",
                  "value": "<report>",
                  "description": "The report identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the status of a report.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/reports/:report/:id`"
          }
        },
        {
          "name": "Post Accounts Reports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports/:report",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports",
                ":report"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "report",
                  "value": "<report>",
                  "description": "The report identifier"
                }
              ],
              "query": [
                {
                  "key": "parameters[skip_message]",
                  "value": "",
                  "description": "If true, no message will be sent to the user upon completion of the report.",
                  "disabled": true
                },
                {
                  "key": "parameters[course_id]",
                  "value": "",
                  "description": "The id of the course to report on. Note: this parameter has been listed to serve as an example and may not be valid for every report.",
                  "disabled": true
                },
                {
                  "key": "parameters[users]",
                  "value": "",
                  "description": "If true, user data will be included. If false, user data will be omitted. Note: this parameter has been listed to serve as an example and may not be valid for every report.",
                  "disabled": true
                }
              ]
            },
            "description": "Generates a report instance for the account. Note that “report” in the request must match one of the available report names. To fetch a list of available report names and parameters for each report (including whether or not those parameters are required), see [List Available Reports](#method.account_reports.available_reports).\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/reports/:report`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "parameters[]",
                  "value": "",
                  "description": "The parameters will vary for each report. To fetch a list of available parameters for each report, see List Available Reports. A few example parameters have been provided below. Note that the example parameters provided below may not be valid for every report.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Abort",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/reports/:report/:id/abort",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "reports",
                ":report",
                ":id",
                "abort"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "report",
                  "value": "<report>",
                  "description": "The report identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Abort a report in progress\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/reports/:report/:id/abort`"
          }
        }
      ]
    },
    {
      "name": "Accounts",
      "description": "API for accessing account data.",
      "item": [
        {
          "name": "Delete Accounts Sub_Accounts",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sub_accounts/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sub_accounts",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Cannot delete an account with active courses or active sub\\_accounts. Cannot delete a root\\_account Returns an [Account](../accounts_-lti#account) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/sub_accounts/:id`"
          }
        },
        {
          "name": "Delete Accounts Users",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Delete multiple users from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts. WARNING: This API will allow a user to remove themselves from the account. If they do this, they won’t be able to make API calls or log into Canvas at that account.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/users`"
          }
        },
        {
          "name": "Delete Accounts Users",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Delete a user record from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts. WARNING: This API will allow a user to remove themselves from the account. If they do this, they won’t be able to make API calls or log into Canvas at that account.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/users/:user_id`"
          }
        },
        {
          "name": "List Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts"
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“lti_guid”the ‘tool_consumer_instance_guid’ that will be sent for this account on LTI launches“registration_settings”returns info about the privacy policy and terms of use“services”returns services and whether they are enabled (requires account management permissions)“course_count”returns the number of courses directly under each account“sub_account_count”returns the number of sub-accounts directly under each accountAllowed values: lti_guid, registration_settings, services, course_count, sub_account_count",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of accounts that the current user can view or manage. Typically, students and even teachers will get an empty list in response, only account admins can view the accounts that they are in.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts`"
          }
        },
        {
          "name": "Get Accounts Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "courses"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "with_enrollments",
                  "value": "",
                  "description": "If true, include only courses with at least one enrollment. If false, include only courses with no enrollments. If not present, do not filter on course enrollment status.",
                  "disabled": true
                },
                {
                  "key": "enrollment_type[]",
                  "value": "",
                  "description": "If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment types.Allowed values: teacher, student, ta, observer, designer",
                  "disabled": true
                },
                {
                  "key": "enrollment_workflow_state[]",
                  "value": "",
                  "description": "If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment workflow states.Allowed values: active, completed, deleted, invited, pending, creation_pending, rejected, inactive",
                  "disabled": true
                },
                {
                  "key": "published",
                  "value": "",
                  "description": "If true, include only published courses. If false, exclude published courses. If not present, do not filter on published status.",
                  "disabled": true
                },
                {
                  "key": "completed",
                  "value": "",
                  "description": "If true, include only completed courses (these may be in state ‘completed’, or their enrollment term may have ended). If false, exclude completed courses. If not present, do not filter on completed status.",
                  "disabled": true
                },
                {
                  "key": "blueprint",
                  "value": "",
                  "description": "If true, include only blueprint courses. If false, exclude them. If not present, do not filter on this basis.",
                  "disabled": true
                },
                {
                  "key": "blueprint_associated",
                  "value": "",
                  "description": "If true, include only courses that inherit content from a blueprint course. If false, exclude them. If not present, do not filter on this basis.",
                  "disabled": true
                },
                {
                  "key": "public",
                  "value": "",
                  "description": "If true, include only public courses. If false, exclude them. If not present, do not filter on this basis.",
                  "disabled": true
                },
                {
                  "key": "by_teachers[]",
                  "value": "",
                  "description": "List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users.",
                  "disabled": true
                },
                {
                  "key": "by_subaccounts[]",
                  "value": "",
                  "description": "List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts.",
                  "disabled": true
                },
                {
                  "key": "hide_enrollmentless_courses",
                  "value": "",
                  "description": "If present, only return courses that have at least one enrollment. Equivalent to ‘with_enrollments=true’; retained for compatibility.",
                  "disabled": true
                },
                {
                  "key": "state[]",
                  "value": "",
                  "description": "If set, only return courses that are in the given state(s). By default, all states but “deleted” are returned.Allowed values: created, claimed, available, completed, deleted, all",
                  "disabled": true
                },
                {
                  "key": "enrollment_term_id",
                  "value": "",
                  "description": "If set, only includes courses from the specified term.",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "All explanations can be seen in the Course API index documentation“sections”, “needs_grading_count” and “total_scores” are not valid options at the account levelAllowed values: syllabus_body, term, course_progress, storage_quota_used_mb, total_students, teachers, account_name, concluded, post_manually",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "",
                  "description": "The column to sort results by.Allowed values: course_status, course_name, sis_course_id, teacher, account_name",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The order to sort the given column by.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "search_by",
                  "value": "",
                  "description": "The filter to search by. “course” searches for course names, course codes, and SIS IDs. “teacher” searches for teacher namesAllowed values: course, teacher",
                  "disabled": true
                },
                {
                  "key": "starts_before",
                  "value": "",
                  "description": "If set, only return courses that start before the value (inclusive) or their enrollment term starts before the value (inclusive) or both the course’s start_at and the enrollment term’s start_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "ends_after",
                  "value": "",
                  "description": "If set, only return courses that end after the value (inclusive) or their enrollment term ends after the value (inclusive) or both the course’s end_at and the enrollment term’s end_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "homeroom",
                  "value": "",
                  "description": "If set, only return homeroom courses.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of courses in this account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/courses`"
          }
        },
        {
          "name": "Get Accounts Help_Links",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/help_links",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "help_links"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the help links for that account Returns a [HelpLinks](#helplinks) object. ### [Get the manually-created courses sub-account for the domain root account](#method.accounts.manually_created_courses_account) <a href=\"#method.accounts.manually_created_courses_account\" id=\"method.accounts.manually_created_courses_account\"></a> [AccountsController#manually\\_created\\_courses\\_account](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/help_links`"
          }
        },
        {
          "name": "Get Accounts Permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/permissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "permissions"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "permissions[]",
                  "value": "",
                  "description": "List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns permission information for the calling user and the given account. You may use ‘self\\` as the account id to check permissions against the domain root account. The caller must have an account role or admin (teacher/TA/designer) enrollment in a course in the account. See also the [Course](../courses#method.courses.permissions) and [Group](../groups#method.groups.permissions) counterparts.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/permissions`"
          }
        },
        {
          "name": "Get Accounts Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "settings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns a JSON object containing a subset of settings for the specified account. It’s possible an empty set will be returned if no settings are applicable. The caller must be an Account admin with the manage\\_account\\_settings permission.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/settings`"
          }
        },
        {
          "name": "Get Accounts Sub_Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sub_accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sub_accounts"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "recursive",
                  "value": "",
                  "description": "If true, the entire account tree underneath this account will be returned (though still paginated). If false, only direct sub-accounts of this account will be returned. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "Sorts the accounts by id or name. Only applies when recursive is false. Defaults to id.Allowed values: id, name",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“course_count”returns the number of courses directly under each account“sub_account_count”returns the number of sub-accounts directly under each accountAllowed values: course_count, sub_account_count",
                  "disabled": true
                }
              ]
            },
            "description": "List accounts that are sub-accounts of the given account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sub_accounts`"
          }
        },
        {
          "name": "Get Accounts Terms_Of_Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms_of_service",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms_of_service"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the terms of service for that account Returns a [TermsOfService](#termsofservice) object. ### [Get help links](#method.accounts.help_links) <a href=\"#method.accounts.help_links\" id=\"method.accounts.help_links\"></a> [AccountsController#help\\_links](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/terms_of_service`"
          }
        },
        {
          "name": "List Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Retrieve information on an individual account, given by id or sis sis\\_account\\_id. Returns an [Account](../accounts_-lti#account) object. ### [Settings](#method.accounts.show_settings) <a href=\"#method.accounts.show_settings\" id=\"method.accounts.show_settings\"></a> [AccountsController#show\\_settings](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:id`"
          }
        },
        {
          "name": "List Course_Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/course_accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "course_accounts"
              ]
            },
            "description": "A paginated list of accounts that the current user can view through their admin course enrollments. (Teacher, TA, or designer enrollments). Only returns “id”, “name”, “workflow\\_state”, “root\\_account\\_id” and “parent\\_account\\_id” Returns a list of [Account](../accounts_-lti#account) objects. ### [Get a single account](#method.accounts.show) <a href=\"#method.accounts.show\" id=\"method.accounts.show\"></a> [AccountsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/course_accounts`"
          }
        },
        {
          "name": "List Course_Creation_Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/course_creation_accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "course_creation_accounts"
              ]
            },
            "description": "A paginated list of accounts where the current user has permission to create courses. Returns a list of [Account](../accounts_-lti#account) objects. ### [List accounts for course admins](#method.accounts.course_accounts) <a href=\"#method.accounts.course_accounts\" id=\"method.accounts.course_accounts\"></a> [AccountsController#course\\_accounts](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/course_creation_accounts`"
          }
        },
        {
          "name": "List Manageable_Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/manageable_accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "manageable_accounts"
              ]
            },
            "description": "A paginated list of accounts where the current user has permission to create or manage courses. List will be empty for students and teachers as only admins can view which accounts they are in. Returns a list of [Account](../accounts_-lti#account) objects. ### [Get accounts that users can create courses in](#method.accounts.course_creation_accounts) <a href=\"#method.accounts.course_creation_accounts\" id=\"method.accounts.course_creation_accounts\"></a> [AccountsController#course\\_creation\\_accounts](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/manageable_accounts`"
          }
        },
        {
          "name": "List Manually_Created_Courses_Account",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/manually_created_courses_account",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "manually_created_courses_account"
              ]
            },
            "description": "Returns the sub-account that contains manually created courses for the domain root account. Returns an [Account](../accounts_-lti#account) object. ### [List active courses in an account](#method.accounts.courses_api) <a href=\"#method.accounts.courses_api\" id=\"method.accounts.courses_api\"></a> [AccountsController#courses\\_api](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/manually_created_courses_account`"
          }
        },
        {
          "name": "Get Settings Environment",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/settings/environment",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "settings",
                "environment"
              ]
            },
            "description": "Return a hash of global settings for the root account This is the same information supplied to the web interface as `ENV.SETTINGS`.\n\n**OAuth Scope:** `url:GET|/api/v1/settings/environment`"
          }
        },
        {
          "name": "Post Accounts Sub_Accounts",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sub_accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sub_accounts"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "account[sis_account_id]",
                  "value": "",
                  "description": "The account’s identifier in the Student Information System.",
                  "disabled": true
                },
                {
                  "key": "account[default_storage_quota_mb]",
                  "value": "",
                  "description": "The default course storage quota to be used, if not otherwise specified.",
                  "disabled": true
                },
                {
                  "key": "account[default_user_storage_quota_mb]",
                  "value": "",
                  "description": "The default user storage quota to be used, if not otherwise specified.",
                  "disabled": true
                },
                {
                  "key": "account[default_group_storage_quota_mb]",
                  "value": "",
                  "description": "The default group storage quota to be used, if not otherwise specified.",
                  "disabled": true
                }
              ]
            },
            "description": "Add a new sub-account to a given account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/sub_accounts`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "account[name]",
                  "value": "",
                  "description": "The name of the new sub-account.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Restore",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users/:user_id/restore",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users",
                ":user_id",
                "restore"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Restore a user record along with the most recently deleted pseudonym from a Canvas root account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/users/:user_id/restore`"
          }
        },
        {
          "name": "Put Accounts Bulk_Update",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users/bulk_update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users",
                "bulk_update"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_ids",
                  "value": "",
                  "description": "ArrayThe IDs of the users to update.",
                  "disabled": true
                }
              ]
            },
            "description": "Updates multiple users in bulk.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/users/bulk_update`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "",
                  "description": "The attributes to update for each user.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Accounts",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "account[name]",
                  "value": "",
                  "description": "Updates the account name",
                  "disabled": true
                },
                {
                  "key": "account[sis_account_id]",
                  "value": "",
                  "description": "Updates the account sis_account_id Must have manage_sis permission and must not be a root_account.",
                  "disabled": true
                },
                {
                  "key": "account[default_time_zone]",
                  "value": "",
                  "description": "The default time zone of the account. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "account[default_storage_quota_mb]",
                  "value": "",
                  "description": "The default course storage quota to be used, if not otherwise specified.",
                  "disabled": true
                },
                {
                  "key": "account[default_user_storage_quota_mb]",
                  "value": "",
                  "description": "The default user storage quota to be used, if not otherwise specified.",
                  "disabled": true
                },
                {
                  "key": "account[default_group_storage_quota_mb]",
                  "value": "",
                  "description": "The default group storage quota to be used, if not otherwise specified.",
                  "disabled": true
                },
                {
                  "key": "account[course_template_id]",
                  "value": "",
                  "description": "The ID of a course to be used as a template for all newly created courses. Empty means to inherit the setting from parent account, 0 means to not use a template even if a parent account has one set. The course must be marked as a template.",
                  "disabled": true
                },
                {
                  "key": "account[parent_account_id]",
                  "value": "",
                  "description": "The ID of a parent account to move the account to. The new parent account must be in the same root account as the original. The hierarchy of sub-accounts will be preserved in the new parent account. The caller must be an administrator in both the original parent account and the new parent account.",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_past_view][value]",
                  "value": "",
                  "description": "Restrict students from viewing courses after end date",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_past_view][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_future_view][value]",
                  "value": "",
                  "description": "Restrict students from viewing courses before start date",
                  "disabled": true
                },
                {
                  "key": "account[settings][microsoft_sync_enabled]",
                  "value": "",
                  "description": "Determines whether this account has Microsoft Teams Sync enabled or not.Note that if you are altering Microsoft Teams sync settings you must enable the Microsoft Group enrollment syncing feature flag. In addition, if you are enabling Microsoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute. Specifying a suffix to use is optional.",
                  "disabled": true
                },
                {
                  "key": "account[settings][microsoft_sync_tenant]",
                  "value": "",
                  "description": "The tenant this account should use when using Microsoft Teams Sync. This should be an Azure Active Directory domain name.",
                  "disabled": true
                },
                {
                  "key": "account[settings][microsoft_sync_login_attribute]",
                  "value": "",
                  "description": "The attribute this account should use to lookup users when using Microsoft Teams Sync. Must be one of “sub”, “email”, “oid”, “preferred_username”, or “integration_id”.",
                  "disabled": true
                },
                {
                  "key": "account[settings][microsoft_sync_login_attribute_suffix]",
                  "value": "",
                  "description": "A suffix that will be appended to the result of the login attribute when associating Canvas users with Microsoft users. Must be under 255 characters and contain no whitespace. This field is optional.",
                  "disabled": true
                },
                {
                  "key": "account[settings][microsoft_sync_remote_attribute]",
                  "value": "",
                  "description": "The Active Directory attribute to use when associating Canvas users with Microsoft users. Must be one of “mail”, “mailNickname”, or “userPrincipalName”.",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_future_view][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][lock_all_announcements][value]",
                  "value": "",
                  "description": "Disable comments on announcements",
                  "disabled": true
                },
                {
                  "key": "account[settings][lock_all_announcements][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][usage_rights_required][value]",
                  "value": "",
                  "description": "Copyright and license information must be provided for files before they are published.",
                  "disabled": true
                },
                {
                  "key": "account[settings][usage_rights_required][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_future_listing][value]",
                  "value": "",
                  "description": "Restrict students from viewing future enrollments in course list",
                  "disabled": true
                },
                {
                  "key": "account[settings][restrict_student_future_listing][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][conditional_release][value]",
                  "value": "",
                  "description": "Enable or disable individual learning paths for students based on assessment",
                  "disabled": true
                },
                {
                  "key": "account[settings][conditional_release][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][enable_course_paces][value]",
                  "value": "",
                  "description": "Enable or disable course pacing",
                  "disabled": true
                },
                {
                  "key": "account[settings][enable_course_paces][locked]",
                  "value": "",
                  "description": "Lock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][enable_as_k5_account][value]",
                  "value": "",
                  "description": "Enable or disable Canvas for Elementary for this account",
                  "disabled": true
                },
                {
                  "key": "account[settings][use_classic_font_in_k5][value]",
                  "value": "",
                  "description": "Whether or not the classic font is used on the dashboard. Only applies if enable_as_k5_account is true.",
                  "disabled": true
                },
                {
                  "key": "account[settings][horizon_account][value]",
                  "value": "",
                  "description": "Enable or disable Canvas Career for this account",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                },
                {
                  "key": "account[settings][lock_outcome_proficiency][value]",
                  "value": "",
                  "description": "DEPRECATEDRestrict instructors from changing mastery scale",
                  "disabled": true
                },
                {
                  "key": "account[lock_outcome_proficiency][locked]",
                  "value": "",
                  "description": "DEPRECATEDLock this setting for sub-accounts and courses",
                  "disabled": true
                },
                {
                  "key": "account[settings][lock_proficiency_calculation][value]",
                  "value": "",
                  "description": "DEPRECATEDRestrict instructors from changing proficiency calculation method",
                  "disabled": true
                },
                {
                  "key": "account[lock_proficiency_calculation][locked]",
                  "value": "",
                  "description": "DEPRECATEDLock this setting for sub-accounts and courses",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "account[settings][password_policy]",
                  "value": "",
                  "description": "Hash of optional password policy configuration parameters for a root accountallow_login_suspension booleanAllow suspension of user logins upon reaching maximum_login_attemptsrequire_number_characters booleanRequire the use of number characters when setting up a new passwordrequire_symbol_characters booleanRequire the use of symbol characters when setting up a new passwordminimum_character_length integerMinimum number of characters required for a new passwordmaximum_login_attempts integerMaximum number of login attempts before a user is locked outRequired feature option:Enhance password options",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "account[services]",
                  "value": "",
                  "description": "Give this a set of keys and boolean values to enable or disable services matching the keys",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Accounts (LTI)",
      "description": "API for accessing account data using an LTI dev key. Allows a tool to get account information via LTI Advantage authorization scheme, which does not require a user session like normal developer keys do. Requires the account lookup scope on the LTI key.",
      "item": [
        {
          "name": "List Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/accounts/:account_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "accounts",
                ":account_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Retrieve information on an individual account, given by local or global ID. Returns an [Account](#account) object.\n\n**OAuth Scope:** `url:GET|/api/lti/accounts/:account_id`"
          }
        }
      ]
    },
    {
      "name": "Admins",
      "description": "Manage account role assignments",
      "item": [
        {
          "name": "Delete Accounts Admins",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/admins/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "admins",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "role",
                  "value": "",
                  "description": "DEPRECATEDAccount role to remove from the user.",
                  "disabled": true
                },
                {
                  "key": "role_id",
                  "value": "",
                  "description": "The id of the role representing the user’s admin relationship with the account.",
                  "disabled": true
                }
              ]
            },
            "description": "Remove the rights associated with an account admin role from a user.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/admins/:user_id`"
          }
        },
        {
          "name": "Get Accounts Admins",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/admins",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "admins"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_id[]",
                  "value": "",
                  "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name or full ID of the admins to match and return in the results list. Must be at least 2 characters.",
                  "disabled": true
                },
                {
                  "key": "include_deleted",
                  "value": "",
                  "description": "When set to true, returns admins who have been deleted",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the admins in the account\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/admins`"
          }
        },
        {
          "name": "Get Accounts Self",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/admins/self",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "admins",
                "self"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "A paginated list of the current user’s roles in the account. The results are the same as those returned by the [List account admins](#method.admins.index) endpoint with `user_id` set to `self`, except the “Admins - Add / Remove” permission is not required. Returns a list of [Admin](#admin) objects.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/admins/self`"
          }
        },
        {
          "name": "Post Accounts Admins",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/admins",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "admins"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "role",
                  "value": "",
                  "description": "DEPRECATEDThe user’s admin relationship with the account will becreated with the given role. Defaults to ‘AccountAdmin’.",
                  "disabled": true
                },
                {
                  "key": "role_id",
                  "value": "",
                  "description": "The user’s admin relationship with the account will be created with the given role. Defaults to the built-in role for ‘AccountAdmin’.",
                  "disabled": true
                },
                {
                  "key": "send_confirmation",
                  "value": "",
                  "description": "Send a notification email to the new admin if true. Default is true.",
                  "disabled": true
                }
              ]
            },
            "description": "Flag an existing user as an admin within the account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/admins`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The id of the user to promote.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Analytics",
      "description": "API for retrieving the data exposed in Canvas Analytics",
      "item": [
        {
          "name": "Get Accounts Activity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/completed/activity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "completed",
                "activity"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns page view hits summed across all courses in the department. Two groupings of these counts are returned; one by day (`by_date`), the other by category (`by_category`). The possible categories are announcements, assignments, collaborations, conferences, discussions, files, general, grades, groups, modules, other, pages, and quizzes. This and the other department-level endpoints have three variations which all return the same style of data but for different subsets of courses. All share the prefix /api/v1/accounts/\\<account\\_id>/analytics. The possible suffixes are: ``` * /current: includes all available courses in the default term * /completed: includes all concluded courses in the default term * /terms/<term_id>: includes all available or concluded courses in the given term. ``` Courses not yet offered or which have been deleted are never included. /current and /completed are intended for use when the account has only one term. /terms/\\<term\\_id> is intended for use when the account has multiple terms. The action follows the suffix.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/completed/activity`"
          }
        },
        {
          "name": "Get Accounts Grades",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/completed/grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "completed",
                "grades"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the distribution of grades for students in courses in the department. Each data point is one student’s current grade in one course; if a student is in multiple courses, he contributes one value per course, but if he’s enrolled multiple times in the same course (e.g. a lecture section and a lab section), he only constributes on value for that course. Grades are binned to the nearest integer score; anomalous grades outside the 0 to 100 range are ignored. The raw counts are returned, not yet normalized by the total count. Shares the same variations on endpoint as the participation data.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/completed/grades`"
          }
        },
        {
          "name": "Get Accounts Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/completed/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "completed",
                "statistics"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns numeric statistics about the department and term (or filter). Shares the same variations on endpoint as the participation data.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/completed/statistics`"
          }
        },
        {
          "name": "Get Accounts Statistics_By_Subaccount",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/completed/statistics_by_subaccount",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "completed",
                "statistics_by_subaccount"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns numeric statistics about the department subaccounts and term (or filter). Shares the same variations on endpoint as the participation data.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/completed/statistics_by_subaccount`"
          }
        },
        {
          "name": "Get Accounts Activity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/current/activity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "current",
                "activity"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/current/activity`"
          }
        },
        {
          "name": "Get Accounts Grades",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/current/grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "current",
                "grades"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/current/grades`"
          }
        },
        {
          "name": "Get Accounts Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/current/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "current",
                "statistics"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/current/statistics`"
          }
        },
        {
          "name": "Get Accounts Statistics_By_Subaccount",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/current/statistics_by_subaccount",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "current",
                "statistics_by_subaccount"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/current/statistics_by_subaccount`"
          }
        },
        {
          "name": "Get Accounts Activity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/terms/:term_id/activity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "terms",
                ":term_id",
                "activity"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "term_id",
                  "value": "<term_id>",
                  "description": "The term_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/activity`"
          }
        },
        {
          "name": "Get Accounts Grades",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/terms/:term_id/grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "terms",
                ":term_id",
                "grades"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "term_id",
                  "value": "<term_id>",
                  "description": "The term_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/grades`"
          }
        },
        {
          "name": "Get Accounts Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "terms",
                ":term_id",
                "statistics"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "term_id",
                  "value": "<term_id>",
                  "description": "The term_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics`"
          }
        },
        {
          "name": "Get Accounts Statistics_By_Subaccount",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics_by_subaccount",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "analytics",
                "terms",
                ":term_id",
                "statistics_by_subaccount"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "term_id",
                  "value": "<term_id>",
                  "description": "The term_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics_by_subaccount`"
          }
        },
        {
          "name": "Get Courses Activity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/activity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "activity"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns page view hits and participation numbers grouped by day through the entire history of the course. Page views is returned as a hash, where the hash keys are dates in the format “YYYY-MM-DD”. The page\\_views result set includes page views broken out by access category. Participations is returned as an array of dates in the format “YYYY-MM-DD”.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/activity`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "async",
                  "value": "",
                  "description": "If async is true, then the course_assignments call can happen asynch- ronously and MAY return a response containing a progress_url key instead of an assignments array. If it does, then it is the caller’s responsibility to poll the API again to see if the progress is complete. If the data is ready (possibly even on the first async call) then it will be passed back normally, as documented in the example response.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown, and a breakdown of on-time/late status of homework submissions.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/assignments`"
          }
        },
        {
          "name": "Get Courses Student_Summaries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/student_summaries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "student_summaries"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sort_column",
                  "value": "",
                  "description": "The order results in which results are returned. Defaults to “name”.Allowed values: name, name_descending, score, score_descending, participations, participations_descending, page_views, page_views_descending",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "If set, returns only the specified student.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a summary of per-user access information for all students in a course. This includes total page views, total participations, and a breakdown of on-time/late status for all homework submissions in the course. Each student’s summary also includes the maximum number of page views and participations by any student in the course, which may be useful for some visualizations (since determining maximums client side can be tricky with pagination).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/student_summaries`"
          }
        },
        {
          "name": "Get Courses Activity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/users/:student_id/activity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "users",
                ":student_id",
                "activity"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "student_id",
                  "value": "<student_id>",
                  "description": "The student_id identifier"
                }
              ]
            },
            "description": "Returns page view hits grouped by hour, and participation details through the entire history of the course. ‘page\\_views\\` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour. \\`participations\\` are returned as an array of hashes, sorted oldest to newest.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/activity`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/users/:student_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "users",
                ":student_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "student_id",
                  "value": "<student_id>",
                  "description": "The student_id identifier"
                }
              ]
            },
            "description": "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown (including the student’s actual grade), and the basic submission information for the student’s submission if it exists.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/assignments`"
          }
        },
        {
          "name": "Get Courses Communication",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/analytics/users/:student_id/communication",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "analytics",
                "users",
                ":student_id",
                "communication"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "student_id",
                  "value": "<student_id>",
                  "description": "The student_id identifier"
                }
              ]
            },
            "description": "Returns messaging “hits” grouped by day through the entire history of the course. Returns a hash containing the number of instructor-to-student messages, and student-to-instructor messages, where the hash keys are dates in the format “YYYY-MM-DD”. Message hits include Conversation messages and comments on homework submissions.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/communication`"
          }
        }
      ]
    },
    {
      "name": "Announcement External Feeds",
      "description": "External feeds represent RSS feeds that can be attached to a Course or Group, in order to automatically create announcements for each new item in the feed.",
      "item": [
        {
          "name": "Delete Courses External_Feeds",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_feeds/:external_feed_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_feeds",
                ":external_feed_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "external_feed_id",
                  "value": "<external_feed_id>",
                  "description": "The external_feed_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/external_feeds/:external_feed_id`"
          }
        },
        {
          "name": "Delete Groups External_Feeds",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/external_feeds/:external_feed_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "external_feeds",
                ":external_feed_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "external_feed_id",
                  "value": "<external_feed_id>",
                  "description": "The external_feed_id identifier"
                }
              ]
            },
            "description": "Deletes the external feed.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/external_feeds/:external_feed_id`"
          }
        },
        {
          "name": "Get Courses External_Feeds",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_feeds",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_feeds"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/external_feeds`"
          }
        },
        {
          "name": "Get Groups External_Feeds",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/external_feeds",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "external_feeds"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of External Feeds this course or group.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/external_feeds`"
          }
        },
        {
          "name": "Post Courses External_Feeds",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_feeds",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_feeds"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/external_feeds`"
          }
        },
        {
          "name": "Post Groups External_Feeds",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/external_feeds",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "external_feeds"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "header_match",
                  "value": "",
                  "description": "If given, only feed entries that contain this string in their title will be imported",
                  "disabled": true
                },
                {
                  "key": "verbosity",
                  "value": "",
                  "description": "Defaults to “full”Allowed values: full, truncate, link_only",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new external feed for the course or group.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/external_feeds`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "url",
                  "value": "",
                  "description": "The url to the external rss or atom feed",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Announcements",
      "description": "API for retrieving announcements. This API is Announcement-specific. See also the Discussion Topics API, which operates on Announcements also.",
      "item": [
        {
          "name": "List Announcements",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/announcements",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "announcements"
              ],
              "query": [
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context_codes to retrieve announcements for (for example, course_123). Only courses are presently supported. The call will fail unless the caller has View Announcements permission in all listed courses.",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Only return announcements posted since the start_date (inclusive). Defaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Only return announcements posted before the end_date (inclusive). Defaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. Announcements scheduled for future posting will only be returned to course administrators.",
                  "disabled": true
                },
                {
                  "key": "available_after",
                  "value": "",
                  "description": "Only return announcements having locked_at nil or after available_after (exclusive). The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. Effective only for students (who don’t have moderate forum right).",
                  "disabled": true
                },
                {
                  "key": "active_only",
                  "value": "",
                  "description": "Only return active announcements that have been published. Applies only to requesting users that have permission to view unpublished items. Defaults to false for users with access to view unpublished items, otherwise true and unmodifiable.",
                  "disabled": true
                },
                {
                  "key": "latest_only",
                  "value": "",
                  "description": "Only return the latest announcement for each associated context. The response will include at most one announcement for each specified context in the context_codes[] parameter. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "include",
                  "value": "",
                  "description": "Optional list of resources to include with the response. May include a string of the name of the resource. Possible values are: “sections”, “sections_user_count” if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of announcements for the given courses and date range. Note that a `context_code` field is added to the responses so you can tell which course each announcement belongs to.\n\n**OAuth Scope:** `url:GET|/api/v1/announcements`"
          }
        }
      ]
    },
    {
      "name": "Appointment Groups",
      "description": "API for creating, accessing and updating appointment groups. Appointment groups provide a way of creating a bundle of time slots that users can sign up for (e.g. \"Office Hours\" or \"Meet with professor about Final Project\"). Both time slots and reservations of time slots are stored as Calendar Events.",
      "item": [
        {
          "name": "Delete Appointment_Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "cancel_reason",
                  "value": "",
                  "description": "Reason for deleting/canceling the appointment group.",
                  "disabled": true
                }
              ]
            },
            "description": "Delete an appointment group (and associated time slots and reservations) and return the deleted group\n\n**OAuth Scope:** `url:DELETE|/api/v1/appointment_groups/:id`"
          }
        },
        {
          "name": "List Appointment_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups"
              ],
              "query": [
                {
                  "key": "scope",
                  "value": "",
                  "description": "Defaults to “reservable”Allowed values: reservable, manageable",
                  "disabled": true
                },
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "Array of context codes used to limit returned results.",
                  "disabled": true
                },
                {
                  "key": "include_past_appointments",
                  "value": "",
                  "description": "Defaults to false. If true, includes past appointment groups",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“appointments”calendar event time slots for this appointment group“child_events”reservations of those time slots“participant_count”number of reservations“reserved_times”the event id, start time and end time of reservations the current user has made)“all_context_codes”all context codes associated with this appointment groupAllowed values: appointments, child_events, participant_count, reserved_times, all_context_codes",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of appointment groups that can be reserved or managed by the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/appointment_groups`"
          }
        },
        {
          "name": "List Appointment_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include. See include[] argument of “List appointment groups” action.“child_events”reservations of time slots time slots“appointments”will always be returned“all_context_codes”all context codes associated with this appointment groupAllowed values: child_events, appointments, all_context_codes",
                  "disabled": true
                }
              ]
            },
            "description": "Returns information for a single appointment group\n\n**OAuth Scope:** `url:GET|/api/v1/appointment_groups/:id`"
          }
        },
        {
          "name": "Get Appointment_Groups Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/:id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                ":id",
                "groups"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "registration_status",
                  "value": "",
                  "description": "Limits results to the a given participation status, defaults to “all”Allowed values: all, registered, registered",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of student groups that are (or may be) participating in this appointment group. Refer to the Groups API for the response fields. Returns no results for appointment groups with the “User” participant\\_type.\n\n**OAuth Scope:** `url:GET|/api/v1/appointment_groups/:id/groups`"
          }
        },
        {
          "name": "Get Appointment_Groups Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/:id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                ":id",
                "users"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "registration_status",
                  "value": "",
                  "description": "Limits results to the a given participation status, defaults to “all”Allowed values: all, registered, registered",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of users that are (or may be) participating in this appointment group. Refer to the Users API for the response fields. Returns no results for appointment groups with the “Group” participant\\_type.\n\n**OAuth Scope:** `url:GET|/api/v1/appointment_groups/:id/users`"
          }
        },
        {
          "name": "Get Appointment_Groups Next_Appointment",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/next_appointment",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                "next_appointment"
              ],
              "query": [
                {
                  "key": "appointment_group_ids[]",
                  "value": "",
                  "description": "List of ids of appointment groups to search.",
                  "disabled": true
                }
              ]
            },
            "description": "Return the next appointment available to sign up for. The appointment is returned in a one-element array. If no future appointments are available, an empty array is returned.\n\n**OAuth Scope:** `url:GET|/api/v1/appointment_groups/next_appointment`"
          }
        },
        {
          "name": "Create Appointment_Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups"
              ],
              "query": [
                {
                  "key": "appointment_group[sub_context_codes][]",
                  "value": "",
                  "description": "Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be “Group” instead of “User”.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[description]",
                  "value": "",
                  "description": "Longer text description of the appointment group.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[location_name]",
                  "value": "",
                  "description": "Location name of the appointment group.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[location_address]",
                  "value": "",
                  "description": "Location address.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[publish]",
                  "value": "",
                  "description": "Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[participants_per_appointment]",
                  "value": "",
                  "description": "Maximum number of participants that may register for each time slot. Defaults to null (no limit).",
                  "disabled": true
                },
                {
                  "key": "appointment_group[min_appointments_per_participant]",
                  "value": "",
                  "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[max_appointments_per_participant]",
                  "value": "",
                  "description": "Maximum number of time slots a user may register for.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[new_appointments][X][]",
                  "value": "",
                  "description": "Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[participant_visibility]",
                  "value": "",
                  "description": "“private”participants cannot see who has signed up for a particular time slot“protected”participants can see who has signed up. Defaults to “private”.Allowed values: private, protected",
                  "disabled": true
                },
                {
                  "key": "appointment_group[allow_observer_signup]",
                  "value": "",
                  "description": "Whether observer users can sign-up for an appointment. Defaults to false.",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new appointment group. If new\\_appointments are specified, the response will return a new\\_appointments array (same format as appointments array, see “List appointment groups” action)\n\n**OAuth Scope:** `url:POST|/api/v1/appointment_groups`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "appointment_group[context_codes][]",
                  "value": "",
                  "description": "Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "appointment_group[title]",
                  "value": "",
                  "description": "Short title for the appointment group.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Appointment_Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/appointment_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "appointment_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "appointment_group[sub_context_codes][]",
                  "value": "",
                  "description": "Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be “Group” instead of “User”.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[title]",
                  "value": "",
                  "description": "Short title for the appointment group.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[description]",
                  "value": "",
                  "description": "Longer text description of the appointment group.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[location_name]",
                  "value": "",
                  "description": "Location name of the appointment group.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[location_address]",
                  "value": "",
                  "description": "Location address.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[publish]",
                  "value": "",
                  "description": "Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[participants_per_appointment]",
                  "value": "",
                  "description": "Maximum number of participants that may register for each time slot. Defaults to null (no limit).",
                  "disabled": true
                },
                {
                  "key": "appointment_group[min_appointments_per_participant]",
                  "value": "",
                  "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[max_appointments_per_participant]",
                  "value": "",
                  "description": "Maximum number of time slots a user may register for.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[new_appointments][X][]",
                  "value": "",
                  "description": "Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request.",
                  "disabled": true
                },
                {
                  "key": "appointment_group[participant_visibility]",
                  "value": "",
                  "description": "“private”participants cannot see who has signed up for a particular time slot“protected”participants can see who has signed up. Defaults to “private”.Allowed values: private, protected",
                  "disabled": true
                },
                {
                  "key": "appointment_group[allow_observer_signup]",
                  "value": "",
                  "description": "Whether observer users can sign-up for an appointment.",
                  "disabled": true
                }
              ]
            },
            "description": "Update and return an appointment group. If new\\_appointments are specified, the response will return a new\\_appointments array (same format as appointments array, see “List appointment groups” action).\n\n**OAuth Scope:** `url:PUT|/api/v1/appointment_groups/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "appointment_group[context_codes][]",
                  "value": "",
                  "description": "Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Assignment Extensions",
      "description": "API for setting extensions on student assignment submissions. These cannot be set for discussion assignments or quizzes. For quizzes, use [Quiz Extensions](quiz_extensions) instead.",
      "item": [
        {
          "name": "Post Courses Extensions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/extensions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "extensions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/extensions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment_extensions[][user_id]",
                  "value": "",
                  "description": "The ID of the user we want to add assignment extensions for.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_extensions[][extra_attempts]",
                  "value": "",
                  "description": "Number of times the student is allowed to re-take the assignment over the limit.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Assignment Groups",
      "description": "API for accessing Assignment Group and Assignment information.",
      "item": [
        {
          "name": "Delete Courses Assignment_Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups/:assignment_group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups",
                ":assignment_group_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_group_id",
                  "value": "<assignment_group_id>",
                  "description": "The assignment_group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "move_assignments_to",
                  "value": "",
                  "description": "The ID of an active Assignment Group to which the assignments that are currently assigned to the destroyed Assignment Group will be assigned. NOTE: If this argument is not provided, any assignments in this Assignment Group will be deleted.",
                  "disabled": true
                }
              ]
            },
            "description": "Deletes the assignment group with the given id.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id`"
          }
        },
        {
          "name": "Get Courses Assignment_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group. “discussion_topic”, “all_dates”, “can_edit”, “assignment_visibility” & “submission” are only valid if “assignments” is also included. “score_statistics” requires that the “assignments” and “submission” options are included. The “assignment_visibility” option additionally requires that the Differentiated Assignments course feature be turned on. If “observed_users” is passed along with “assignments” and “submission”, submissions for observed users will also be included as an array.Allowed values: assignments, discussion_topic, all_dates, assignment_visibility, overrides, submission, observed_users, can_edit, score_statistics",
                  "disabled": true
                },
                {
                  "key": "assignment_ids[]",
                  "value": "",
                  "description": "If “assignments” are included, optionally return only assignments having their ID in this array. This argument may also be passed as a comma separated string.",
                  "disabled": true
                },
                {
                  "key": "exclude_assignment_submission_types[]",
                  "value": "",
                  "description": "If “assignments” are included, those with the specified submission types will be excluded from the assignment groups.Allowed values: online_quiz, discussion_topic, wiki_page, external_tool",
                  "disabled": true
                },
                {
                  "key": "override_assignment_dates",
                  "value": "",
                  "description": "Apply assignment overrides for each assignment, defaults to true.",
                  "disabled": true
                },
                {
                  "key": "grading_period_id",
                  "value": "",
                  "description": "The id of the grading period in which assignment groups are being requested (Requires grading periods to exist.)",
                  "disabled": true
                },
                {
                  "key": "scope_assignments_to_student",
                  "value": "",
                  "description": "If true, all assignments returned will apply to the current user in the specified grading period. If assignments apply to other students in the specified grading period, but not the current user, they will not be returned. (Requires the grading_period_id argument and grading periods to exist. In addition, the current user must be a student.)",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of assignment groups for the current context. The returned groups are sorted by their position field.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignment_groups`"
          }
        },
        {
          "name": "Get Courses Assignment_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups/:assignment_group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups",
                ":assignment_group_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_group_id",
                  "value": "<assignment_group_id>",
                  "description": "The assignment_group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group. “discussion_topic” and “assignment_visibility” and “submission” are only valid if “assignments” is also included. “score_statistics” is only valid if “submission” and “assignments” are also included. The “assignment_visibility” option additionally requires that the Differentiated Assignments course feature be turned on.Allowed values: assignments, discussion_topic, assignment_visibility, submission, score_statistics",
                  "disabled": true
                },
                {
                  "key": "override_assignment_dates",
                  "value": "",
                  "description": "Apply assignment overrides for each assignment, defaults to true.",
                  "disabled": true
                },
                {
                  "key": "grading_period_id",
                  "value": "",
                  "description": "The id of the grading period in which assignment groups are being requested (Requires grading periods to exist on the account)",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the assignment group with the given id.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id`"
          }
        },
        {
          "name": "Post Courses Assignment_Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The assignment group’s name",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "The position of this assignment group in relation to the other assignment groups",
                  "disabled": true
                },
                {
                  "key": "sis_source_id",
                  "value": "",
                  "description": "The sis source id of the Assignment Group",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new assignment group for this course.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignment_groups`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "group_weight",
                  "value": "",
                  "description": "The percent of the total grade that this assignment group represents",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "integration_data",
                  "value": "",
                  "description": "The integration data of the Assignment Group",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Assignment_Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups/:assignment_group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups",
                ":assignment_group_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_group_id",
                  "value": "<assignment_group_id>",
                  "description": "The assignment_group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The assignment group’s name",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "The position of this assignment group in relation to the other assignment groups",
                  "disabled": true
                },
                {
                  "key": "sis_source_id",
                  "value": "",
                  "description": "The sis source id of the Assignment Group",
                  "disabled": true
                },
                {
                  "key": "rules",
                  "value": "",
                  "description": "The grading rules that are applied within this assignment group See the Assignment Group object definition for format",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing Assignment Group.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "group_weight",
                  "value": "",
                  "description": "The percent of the total grade that this assignment group represents",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "integration_data",
                  "value": "",
                  "description": "The integration data of the Assignment Group",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Assignments",
      "description": "API for accessing assignment information.",
      "item": [
        {
          "name": "Delete Courses Overrides",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes an override and returns its former details.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id`"
          }
        },
        {
          "name": "Delete Courses Assignments",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the given assignment.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignments/:id`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignment_groups/:assignment_group_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignment_groups",
                ":assignment_group_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_group_id",
                  "value": "<assignment_group_id>",
                  "description": "The assignment_group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Optional information to include with each assignment:submissionThe current user’s current Submissionassignment_visibilityAn array of ids of students who can see the assignmentall_datesAn array of AssignmentDate structures, one for each override, and also a base if the assignment has an “Everyone” / “Everyone Else” dateoverridesAn array of AssignmentOverride structuresobserved_usersAn array of submissions for observed userscan_editan extra Boolean value will be included with each Assignment (and AssignmentDate if all_dates is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user’s ability to edit an assignment.score_statisticsAn object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if ‘submission’ is also included.ab_guidAn array of guid strings for academic benchmarksAllowed values: submission, assignment_visibility, all_dates, overrides, observed_users, can_edit, score_statistics, ab_guid",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial title of the assignments to match and return.",
                  "disabled": true
                },
                {
                  "key": "override_assignment_dates",
                  "value": "",
                  "description": "Apply assignment overrides for each assignment, defaults to true.",
                  "disabled": true
                },
                {
                  "key": "needs_grading_count_by_section",
                  "value": "",
                  "description": "Split up “needs_grading_count” by sections into the “needs_grading_count_by_section” key, defaults to false",
                  "disabled": true
                },
                {
                  "key": "bucket",
                  "value": "",
                  "description": "If included, only return certain assignments depending on due date and submission status.Allowed values: past, overdue, undated, ungraded, unsubmitted, upcoming, future",
                  "disabled": true
                },
                {
                  "key": "assignment_ids[]",
                  "value": "",
                  "description": "if set, return only assignments specified",
                  "disabled": true
                },
                {
                  "key": "order_by",
                  "value": "",
                  "description": "Determines the order of the assignments. Defaults to “position”.Allowed values: position, name, due_at",
                  "disabled": true
                },
                {
                  "key": "post_to_sis",
                  "value": "",
                  "description": "Return only assignments that have post_to_sis set or not set.",
                  "disabled": true
                },
                {
                  "key": "new_quizzes",
                  "value": "",
                  "description": "Return only New Quizzes assignments",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of assignments for the current course or assignment group.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id/assignments`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments`"
          }
        },
        {
          "name": "Get Courses Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of overrides for this assignment that target sections/groups/students visible to the current user. Returns a list of [AssignmentOverride](#assignmentoverride) objects. ### [Get a single assignment override](#method.assignment_overrides.show) <a href=\"#method.assignment_overrides.show\" id=\"method.assignment_overrides.show\"></a> [AssignmentOverridesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/overrides`"
          }
        },
        {
          "name": "Get Courses Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns details of the the override with the given id. Returns an [AssignmentOverride](#assignmentoverride) object. ### [Redirect to the assignment override for a group](#method.assignment_overrides.group_alias) <a href=\"#method.assignment_overrides.group_alias\" id=\"method.assignment_overrides.group_alias\"></a> [AssignmentOverridesController#group\\_alias](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id`"
          }
        },
        {
          "name": "Get Courses Group_Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/users/:user_id/group_members",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "users",
                ":user_id",
                "group_members"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns student ids and names for the group.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/users/:user_id/group_members`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the assignment. The “assignment_visibility” option requires that the Differentiated Assignments course feature be turned on. If “observed_users” is passed, submissions for observed users will also be included. For “score_statistics” to be included, the “submission” option must also be set. The “peer_review” option requires that the Peer Review Allocation and Grading course feature be turned on.Allowed values: submission, assignment_visibility, overrides, observed_users, can_edit, score_statistics, ab_guid, peer_review",
                  "disabled": true
                },
                {
                  "key": "override_assignment_dates",
                  "value": "",
                  "description": "Apply assignment overrides to the assignment, defaults to true.",
                  "disabled": true
                },
                {
                  "key": "needs_grading_count_by_section",
                  "value": "",
                  "description": "Split up “needs_grading_count” by sections into the “needs_grading_count_by_section” key, defaults to false",
                  "disabled": true
                },
                {
                  "key": "all_dates",
                  "value": "",
                  "description": "All dates associated with the assignment, if applicable",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the assignment with the given id.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:id`"
          }
        },
        {
          "name": "Get Courses Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                "overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_overrides[][id]",
                  "value": "",
                  "description": "Ids of overrides to retrieve",
                  "disabled": true
                },
                {
                  "key": "assignment_overrides[][assignment_id]",
                  "value": "",
                  "description": "Ids of assignments for each override",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of specified overrides in this course, providing they target sections/groups/students visible to the current user. Returns null elements in the list for requests that were not found.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/overrides`"
          }
        },
        {
          "name": "Get Groups Override",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/assignments/:assignment_id/override",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "assignments",
                ":assignment_id",
                "override"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Responds with a redirect to the override for the given group, if any (404 otherwise). ### [Redirect to the assignment override for a section](#method.assignment_overrides.section_alias) <a href=\"#method.assignment_overrides.section_alias\" id=\"method.assignment_overrides.section_alias\"></a> [AssignmentOverridesController#section\\_alias](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/assignments/:assignment_id/override`"
          }
        },
        {
          "name": "Get Sections Override",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:course_section_id/assignments/:assignment_id/override",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":course_section_id",
                "assignments",
                ":assignment_id",
                "override"
              ],
              "variable": [
                {
                  "key": "course_section_id",
                  "value": "<course_section_id>",
                  "description": "The course_section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Responds with a redirect to the override for the given section, if any (404 otherwise). ### [Create an assignment override](#method.assignment_overrides.create) <a href=\"#method.assignment_overrides.create\" id=\"method.assignment_overrides.create\"></a> [AssignmentOverridesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:course_section_id/assignments/:assignment_id/override`"
          }
        },
        {
          "name": "Get Users Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/courses/:course_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "courses",
                ":course_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view. See [List assignments](#method.assignments_api.index) for valid arguments. ### [Duplicate assignment](#method.assignments_api.duplicate) <a href=\"#method.assignments_api.duplicate\" id=\"method.assignments_api.duplicate\"></a> [AssignmentsApiController#duplicate](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/courses/:course_id/assignments`"
          }
        },
        {
          "name": "Post Courses Assignments",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment[position]",
                  "value": "",
                  "description": "The position of this assignment in the group when displaying assignment lists.",
                  "disabled": true
                },
                {
                  "key": "assignment[submission_types][]",
                  "value": "",
                  "description": "List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.If not allowing online submissions, your options are:\"online_quiz\"\n\"none\"\n\"on_paper\"\n\"discussion_topic\"\n\"external_tool\"\nIf you are allowing online submissions, you can have one or many allowed submission types:\"online_upload\"\n\"online_text_entry\"\n\"online_url\"\n\"media_recording\" (Only valid when the Kaltura plugin is enabled)\n\"student_annotation\"\nAllowed values: online_quiz, none, on_paper, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording, student_annotation",
                  "disabled": true
                },
                {
                  "key": "assignment[allowed_extensions][]",
                  "value": "",
                  "description": "Allowed extensions if submission_types includes “online_upload”Example:allowed_extensions: [\"docx\",\"ppt\"]",
                  "disabled": true
                },
                {
                  "key": "assignment[turnitin_enabled]",
                  "value": "",
                  "description": "Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[vericite_enabled]",
                  "value": "",
                  "description": "Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[turnitin_settings]",
                  "value": "",
                  "description": "Settings to send along to turnitin. See Assignment object definition for format.",
                  "disabled": true
                },
                {
                  "key": "assignment[integration_data]",
                  "value": "",
                  "description": "Data used for SIS integrations. Requires admin-level token with the “Manage SIS” permission. JSON string required.",
                  "disabled": false
                },
                {
                  "key": "assignment[integration_id]",
                  "value": "",
                  "description": "Unique ID from third party integrations",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_reviews]",
                  "value": "",
                  "description": "If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.",
                  "disabled": true
                },
                {
                  "key": "assignment[automatic_peer_reviews]",
                  "value": "",
                  "description": "Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.",
                  "disabled": true
                },
                {
                  "key": "assignment[notify_of_update]",
                  "value": "",
                  "description": "If true, Canvas will send a notification to students in the class notifying them that the content has changed.",
                  "disabled": true
                },
                {
                  "key": "assignment[group_category_id]",
                  "value": "",
                  "description": "If present, the assignment will become a group assignment assigned to the group.",
                  "disabled": true
                },
                {
                  "key": "assignment[grade_group_students_individually]",
                  "value": "",
                  "description": "If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment’s score to each member of the group. If true, the teacher can manually assign scores to each member of the group.",
                  "disabled": true
                },
                {
                  "key": "assignment[external_tool_tag_attributes]",
                  "value": "",
                  "description": "Hash of external tool parameters if submission_types is [“external_tool”]. See Assignment object definition for format.",
                  "disabled": true
                },
                {
                  "key": "assignment[grading_type]",
                  "value": "",
                  "description": "The strategy used for grading the assignment. The assignment defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded",
                  "disabled": true
                },
                {
                  "key": "assignment[description]",
                  "value": "",
                  "description": "The assignment’s description, supports HTML.",
                  "disabled": true
                },
                {
                  "key": "assignment[assignment_group_id]",
                  "value": "",
                  "description": "The assignment group id to put the assignment in. Defaults to the top assignment group in the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[only_visible_to_overrides]",
                  "value": "",
                  "description": "Whether this assignment is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on)",
                  "disabled": true
                },
                {
                  "key": "assignment[published]",
                  "value": "",
                  "description": "Whether this assignment is published. (Only useful if ‘draft state’ account setting is on) Unpublished assignments are not visible to students.",
                  "disabled": true
                },
                {
                  "key": "assignment[grading_standard_id]",
                  "value": "",
                  "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to ‘letter_grade’ unless it is already ‘gpa_scale’.",
                  "disabled": true
                },
                {
                  "key": "assignment[omit_from_final_grade]",
                  "value": "",
                  "description": "Whether this assignment is counted towards a student’s final grade.",
                  "disabled": true
                },
                {
                  "key": "assignment[hide_in_gradebook]",
                  "value": "",
                  "description": "Whether this assignment is shown in the gradebook.",
                  "disabled": true
                },
                {
                  "key": "assignment[quiz_lti]",
                  "value": "",
                  "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the submission type to ‘external_tool’ and configures the external tool attributes to use the Quizzes 2 LTI tool configured for this course. Has no effect if no Quizzes 2 LTI tool is configured.",
                  "disabled": true
                },
                {
                  "key": "assignment[moderated_grading]",
                  "value": "",
                  "description": "Whether this assignment is moderated.",
                  "disabled": true
                },
                {
                  "key": "assignment[grader_count]",
                  "value": "",
                  "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.",
                  "disabled": true
                },
                {
                  "key": "assignment[final_grader_id]",
                  "value": "",
                  "description": "The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[grader_comments_visible_to_graders]",
                  "value": "",
                  "description": "Boolean indicating if provisional graders’ comments are visible to other provisional graders. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[graders_anonymous_to_graders]",
                  "value": "",
                  "description": "Boolean indicating if provisional graders’ identities are hidden from other provisional graders. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[graders_names_visible_to_final_grader]",
                  "value": "",
                  "description": "Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[anonymous_grading]",
                  "value": "",
                  "description": "Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.",
                  "disabled": true
                },
                {
                  "key": "assignment[allowed_attempts]",
                  "value": "",
                  "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.",
                  "disabled": true
                },
                {
                  "key": "assignment[annotatable_attachment_id]",
                  "value": "",
                  "description": "The Attachment ID of the document being annotated.Only applies when submission_types includes “student_annotation”.",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][grading_type]",
                  "value": "",
                  "description": "The strategy used for grading peer reviews. Defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new assignment for this course. The assignment is created in the active state.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment[name]",
                  "value": "",
                  "description": "The assignment name.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[points_possible]",
                  "value": "",
                  "description": "The maximum points possible on the assignment.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[due_at]",
                  "value": "",
                  "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[lock_at]",
                  "value": "",
                  "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[unlock_at]",
                  "value": "",
                  "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[assignment_overrides][]",
                  "value": "",
                  "description": "List of overrides for the assignment.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][points_possible]",
                  "value": "",
                  "description": "The maximum points possible for peer reviews.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][due_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2025-08-20T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][lock_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-25T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][unlock_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-15T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Duplicate",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/duplicate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "duplicate"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "result_type",
                  "value": "",
                  "description": "Optional information: When the root account has the feature ‘newquizzes_on_quiz_pageenabled and this argument is set to “Quiz” the response will be serialized into a quiz format(<a href=\"doc/api/quizzes.md#Quiz\" title=\"quizzes\">quizzes</a>); When this argument isn’t specified the response will be serialized into an assignment format;</p> Allowed values:Quiz`",
                  "disabled": true
                }
              ]
            },
            "description": "Duplicate an assignment and return a json based on result\\_type argument.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/duplicate`"
          }
        },
        {
          "name": "Post Courses Overrides",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_override[student_ids][]",
                  "value": "",
                  "description": "The IDs of the override’s target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override.",
                  "disabled": true
                },
                {
                  "key": "assignment_override[title]",
                  "value": "",
                  "description": "The title of the adhoc assignment override. Required if student_ids is present, ignored otherwise (the title is set to the name of the targetted group or section instead).",
                  "disabled": false
                },
                {
                  "key": "assignment_override[group_id]",
                  "value": "",
                  "description": "The ID of the override’s target group. If present, the following conditions must be met for the override to be successful:the assignment MUST be a group assignment (a group_category_id is assigned to it)the ID must identify an active group in the group set the assignment is inthe ID must not be targetted by a different overrideSee Appendix: Group assignments for more info.",
                  "disabled": true
                },
                {
                  "key": "assignment_override[course_section_id]",
                  "value": "",
                  "description": "The ID of the override’s target section. If present, must identify an active section of the assignment’s course not already targetted by a different override.",
                  "disabled": true
                }
              ]
            },
            "description": "One of student\\_ids, group\\_id, or course\\_section\\_id must be present. At most one should be present; if multiple are present only the most specific (student\\_ids first, then group\\_id, then course\\_section\\_id) is used and any others are ignored.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/overrides`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment_override[due_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_override[unlock_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_override[lock_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Overrides",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                "overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Creates the specified overrides for each assignment. Handles creation in a transaction, so all records are created or none are. One of student\\_ids, group\\_id, or course\\_section\\_id must be present. At most one should be present; if multiple are present only the most specific (student\\_ids first, then group\\_id, then course\\_section\\_id) is used and any others are ignored. Errors are reported in an errors attribute, an array of errors corresponding to inputs. Global errors will be reported as a single element errors array\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/overrides`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment_overrides[]",
                  "value": "",
                  "description": "Attributes for the new assignment overrides. See Create an assignment override for available attributes",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Overrides",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_override[student_ids][]",
                  "value": "",
                  "description": "The IDs of the override’s target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override. Ignored unless the override being updated is adhoc.",
                  "disabled": true
                },
                {
                  "key": "assignment_override[title]",
                  "value": "",
                  "description": "The title of an adhoc assignment override. Ignored unless the override being updated is adhoc.",
                  "disabled": true
                }
              ]
            },
            "description": "All current overridden values must be supplied if they are to be retained; e.g. if due\\_at was overridden, but this PUT omits a value for due\\_at, due\\_at will no longer be overridden. If the override is adhoc and student\\_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment_override[due_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_override[unlock_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_override[lock_at]",
                  "value": "",
                  "description": "The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Assignments",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment[name]",
                  "value": "",
                  "description": "The assignment name.",
                  "disabled": true
                },
                {
                  "key": "assignment[position]",
                  "value": "",
                  "description": "The position of this assignment in the group when displaying assignment lists.",
                  "disabled": true
                },
                {
                  "key": "assignment[submission_types][]",
                  "value": "",
                  "description": "Only applies if the assignment doesn’t have student submissions.List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.If not allowing online submissions, your options are:\"online_quiz\"\n\"none\"\n\"on_paper\"\n\"discussion_topic\"\n\"external_tool\"\nIf you are allowing online submissions, you can have one or many allowed submission types:\"online_upload\"\n\"online_text_entry\"\n\"online_url\"\n\"media_recording\" (Only valid when the Kaltura plugin is enabled)\n\"student_annotation\"\nAllowed values: online_quiz, none, on_paper, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording, student_annotation",
                  "disabled": true
                },
                {
                  "key": "assignment[allowed_extensions][]",
                  "value": "",
                  "description": "Allowed extensions if submission_types includes “online_upload”Example:allowed_extensions: [\"docx\",\"ppt\"]",
                  "disabled": true
                },
                {
                  "key": "assignment[turnitin_enabled]",
                  "value": "",
                  "description": "Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[vericite_enabled]",
                  "value": "",
                  "description": "Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[turnitin_settings]",
                  "value": "",
                  "description": "Settings to send along to turnitin. See Assignment object definition for format.",
                  "disabled": true
                },
                {
                  "key": "assignment[sis_assignment_id]",
                  "value": "",
                  "description": "The sis id of the Assignment",
                  "disabled": true
                },
                {
                  "key": "assignment[integration_data]",
                  "value": "",
                  "description": "Data used for SIS integrations. Requires admin-level token with the “Manage SIS” permission. JSON string required.",
                  "disabled": false
                },
                {
                  "key": "assignment[integration_id]",
                  "value": "",
                  "description": "Unique ID from third party integrations",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_reviews]",
                  "value": "",
                  "description": "If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.",
                  "disabled": true
                },
                {
                  "key": "assignment[automatic_peer_reviews]",
                  "value": "",
                  "description": "Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.",
                  "disabled": true
                },
                {
                  "key": "assignment[notify_of_update]",
                  "value": "",
                  "description": "If true, Canvas will send a notification to students in the class notifying them that the content has changed.",
                  "disabled": true
                },
                {
                  "key": "assignment[group_category_id]",
                  "value": "",
                  "description": "If present, the assignment will become a group assignment assigned to the group.",
                  "disabled": true
                },
                {
                  "key": "assignment[grade_group_students_individually]",
                  "value": "",
                  "description": "If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment’s score to each member of the group. If true, the teacher can manually assign scores to each member of the group.",
                  "disabled": true
                },
                {
                  "key": "assignment[external_tool_tag_attributes]",
                  "value": "",
                  "description": "Hash of external tool parameters if submission_types is [“external_tool”]. See Assignment object definition for format.",
                  "disabled": true
                },
                {
                  "key": "assignment[grading_type]",
                  "value": "",
                  "description": "The strategy used for grading the assignment. The assignment defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded",
                  "disabled": true
                },
                {
                  "key": "assignment[description]",
                  "value": "",
                  "description": "The assignment’s description, supports HTML.",
                  "disabled": true
                },
                {
                  "key": "assignment[assignment_group_id]",
                  "value": "",
                  "description": "The assignment group id to put the assignment in. Defaults to the top assignment group in the course.",
                  "disabled": true
                },
                {
                  "key": "assignment[only_visible_to_overrides]",
                  "value": "",
                  "description": "Whether this assignment is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on)",
                  "disabled": true
                },
                {
                  "key": "assignment[published]",
                  "value": "",
                  "description": "Whether this assignment is published. (Only useful if ‘draft state’ account setting is on) Unpublished assignments are not visible to students.",
                  "disabled": true
                },
                {
                  "key": "assignment[grading_standard_id]",
                  "value": "",
                  "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to ‘letter_grade’ unless it is already ‘gpa_scale’.",
                  "disabled": true
                },
                {
                  "key": "assignment[omit_from_final_grade]",
                  "value": "",
                  "description": "Whether this assignment is counted towards a student’s final grade.",
                  "disabled": true
                },
                {
                  "key": "assignment[hide_in_gradebook]",
                  "value": "",
                  "description": "Whether this assignment is shown in the gradebook.",
                  "disabled": true
                },
                {
                  "key": "assignment[moderated_grading]",
                  "value": "",
                  "description": "Whether this assignment is moderated.",
                  "disabled": true
                },
                {
                  "key": "assignment[grader_count]",
                  "value": "",
                  "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.",
                  "disabled": true
                },
                {
                  "key": "assignment[final_grader_id]",
                  "value": "",
                  "description": "The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[grader_comments_visible_to_graders]",
                  "value": "",
                  "description": "Boolean indicating if provisional graders’ comments are visible to other provisional graders. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[graders_anonymous_to_graders]",
                  "value": "",
                  "description": "Boolean indicating if provisional graders’ identities are hidden from other provisional graders. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[graders_names_visible_to_final_grader]",
                  "value": "",
                  "description": "Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.",
                  "disabled": true
                },
                {
                  "key": "assignment[anonymous_grading]",
                  "value": "",
                  "description": "Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.",
                  "disabled": true
                },
                {
                  "key": "assignment[allowed_attempts]",
                  "value": "",
                  "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for unlimited attempts.",
                  "disabled": true
                },
                {
                  "key": "assignment[annotatable_attachment_id]",
                  "value": "",
                  "description": "The Attachment ID of the document being annotated.Only applies when submission_types includes “student_annotation”.",
                  "disabled": true
                },
                {
                  "key": "assignment[force_updated_at]",
                  "value": "",
                  "description": "If true, updated_at will be set even if no changes were made.",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][grading_type]",
                  "value": "",
                  "description": "The strategy used for grading peer reviews. Defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded",
                  "disabled": true
                },
                {
                  "key": "assignment[submission_types][]",
                  "value": "",
                  "description": "[DEPRECATED] Effective 2021-05-26 (notice given 2021-02-18)Only applies if the assignment doesn’t have student submissions.",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing assignment.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment[points_possible]",
                  "value": "",
                  "description": "The maximum points possible on the assignment.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[due_at]",
                  "value": "",
                  "description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[lock_at]",
                  "value": "",
                  "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[unlock_at]",
                  "value": "",
                  "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[assignment_overrides][]",
                  "value": "",
                  "description": "List of overrides for the assignment. If the assignment[assignment_overrides] key is absent, any existing overrides are kept as is. If the assignment[assignment_overrides] key is present, existing overrides are updated or deleted (and new ones created, as necessary) to match the provided list.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][points_possible]",
                  "value": "",
                  "description": "The maximum points possible for peer reviews.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][due_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2025-08-20T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][lock_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-25T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment[peer_review][unlock_at]",
                  "value": "",
                  "description": "The day/time the peer reviews are unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-15T12:10:00Z.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Bulk_Update",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/bulk_update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                "bulk_update"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Update due dates and availability dates for multiple assignments in a course. Accepts a JSON array of objects containing two keys each: `id`, the assignment id, and `all_dates`, an array of `AssignmentDate` structures containing the base and/or override dates for the assignment, as returned from the [List assignments](#method.assignments_api.index) endpoint with include\\[]=all\\_dates. This endpoint cannot create or destroy assignment overrides; any existing assignment overrides that are not referenced in the arguments will be left alone. If an override is given, any dates that are not supplied with it will be defaulted. To clear a date, specify null explicitly. All referenced assignments will be validated before any are saved. A list of errors will be returned if any provided dates are invalid, and no changes will be saved. The bulk update is performed in a background job, use the [Progress API](../progress#method.progress.show) to check its status.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/bulk_update`"
          }
        },
        {
          "name": "Put Courses Overrides",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                "overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Updates a list of specified overrides for each assignment. Handles overrides in a transaction, so either all updates are applied or none. See [Update an assignment override](#method.assignment_overrides.update) for available attributes. All current overridden values must be supplied if they are to be retained; e.g. if due\\_at was overridden, but this PUT omits a value for due\\_at, due\\_at will no longer be overridden. If the override is adhoc and student\\_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides. Errors are reported in an errors attribute, an array of errors corresponding to inputs. Global errors will be reported as a single element errors array\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/overrides`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "assignment_overrides[]",
                  "value": "",
                  "description": "Attributes for the updated overrides.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Authentication Providers",
      "description": "",
      "item": [
        {
          "name": "Delete Accounts Authentication_Providers",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the config\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/authentication_providers/:id`"
          }
        },
        {
          "name": "Get Accounts Authentication_Providers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of authentication providers\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/authentication_providers`"
          }
        },
        {
          "name": "Get Accounts Authentication_Providers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get the specified authentication provider\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/authentication_providers/:id`"
          }
        },
        {
          "name": "Get Accounts Sso_Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sso_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sso_settings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "The way to get the current state of each account level setting that’s relevant to Single Sign On configuration You can list the current state of each setting with “update\\_sso\\_settings”\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sso_settings`"
          }
        },
        {
          "name": "Post Accounts Authentication_Providers",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, or SAML. Each authentication provider is specified as a set of parameters as described below. A provider specification must include an ‘auth\\_type’ parameter with a value of ‘apple’, ‘canvas’, ‘cas’, ‘clever’, ‘facebook’, ‘github’, ‘google’, ‘ldap’, ‘linkedin’, ‘microsoft’, ‘openid\\_connect’, or ‘saml’. The other recognized parameters depend on this auth\\_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth\\_type are ignored. You can set the ‘position’ for any provider. The config in the 1st position is considered the default. You can set ‘jit\\_provisioning’ for any provider besides Canvas. You can set ‘mfa\\_required’ for any provider. For Apple, the additional recognized parameters are: *   client\\_id \\[Required] The developer’s client identifier, as provided by WWDR. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘sub’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘firstName’, ‘lastName’, and ‘sub’. For Canvas, the additional recognized parameter is: *   self\\_registration ‘all’, ‘none’, or ‘observer’ - who is allowed to register as a new user For CAS, the additional recognized parameters are: *   auth\\_base The CAS server’s URL. *   log\\_in\\_url \\[Optional] An alternate SSO URL for logging into CAS. You probably should not set this. For Clever, the additional recognized parameters are: *   client\\_id \\[Required] The Clever application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The Clever application’s Client Secret. Not available if configured globally for Canvas. *   district\\_id \\[Optional] A district’s Clever ID. Leave this blank to let Clever handle the details with its District Picker. This is required for Clever Instant Login to work in a multi-tenant environment. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), ‘sis\\_id’, ‘email’, ‘student\\_number’, or ‘teacher\\_number’. Note that some fields may not be populated for all users at Clever. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘id’, ‘sis\\_id’, ‘email’, ‘student\\_number’, and ‘teacher\\_number’. For Facebook, the additional recognized parameters are: *   app\\_id \\[Required] The Facebook App ID. Not available if configured globally for Canvas. *   app\\_secret \\[Required] The Facebook App Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘first\\_name’, ‘id’, ‘last\\_name’, ‘locale’, and ‘name’. For GitHub, the additional recognized parameters are: *   domain \\[Optional] The domain of a GitHub Enterprise installation. I.e. github.mycompany.com. If not set, it will default to the public github.com. *   client\\_id \\[Required] The GitHub application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The GitHub application’s Client Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘login’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘id’, ‘login’, and ‘name’. For Google, the additional recognized parameters are: *   client\\_id \\[Required] The Google application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The Google application’s Client Secret. Not available if configured globally for Canvas. *   hosted\\_domain \\[Optional] A Google Apps domain to restrict logins to. See [developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param](https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param) *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘sub’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘family\\_name’, ‘given\\_name’, ‘locale’, ‘name’, and ‘sub’. For LDAP, the additional recognized parameters are: *   auth\\_host The LDAP server’s URL. *   auth\\_port \\[Optional, Integer] The LDAP server’s TCP port. (default: 389) *   auth\\_over\\_tls \\[Optional] Whether to use TLS. Can be ‘simple\\_tls’, or ‘start\\_tls’. For backwards compatibility, booleans are also accepted, with true meaning simple\\_tls. If not provided, it will default to start\\_tls. *   auth\\_base \\[Optional] A default treebase parameter for searches performed against the LDAP server. *   auth\\_filter LDAP search filter. Use \\{{login\\}} as a placeholder for the username supplied by the user. For example: “(sAMAccountName=\\{{login\\}})”. *   identifier\\_format \\[Optional] The LDAP attribute to use to look up the Canvas login. Omit to use the username supplied by the user. *   auth\\_username Username *   auth\\_password Password For LinkedIn, the additional recognized parameters are: *   client\\_id \\[Required] The LinkedIn application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The LinkedIn application’s Client Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘emailAddress’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘emailAddress’, ‘firstName’, ‘id’, ‘formattedName’, and ‘lastName’. For Microsoft, the additional recognized parameters are: *   application\\_id \\[Required] The application’s ID. *   application\\_secret \\[Required] The application’s Client Secret (Password) *   tenant \\[Optional] See [azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols](https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols)/ Valid values are ‘common’, ‘organizations’, ‘consumers’, or an Azure Active Directory Tenant (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to ‘common’ *   login\\_attribute \\[Optional] See [azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens](https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens) Valid values are ‘sub’, ‘email’, ‘oid’, or ‘preferred\\_username’. Note that email may not always be populated in the user’s profile at Microsoft. Oid will not be populated for personal Microsoft accounts. Defaults to ‘sub’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘name’, ‘preferred\\_username’, ‘oid’, and ‘sub’. For OpenID Connect, the additional recognized parameters are: *   client\\_id \\[Required] The application’s Client ID. *   client\\_secret \\[Required] The application’s Client Secret. *   authorize\\_url \\[Required] The URL for getting starting the OAuth 2.0 web flow *   token\\_url \\[Required] The URL for exchanging the OAuth 2.0 authorization code for an Access Token and ID Token *   scope \\[Optional] Space separated additional scopes to request for the token. Note that you need not specify the ‘openid’ scope, or any scopes that can be automatically inferred by the rules defined at [openid.net/specs/openid-connect-core-1\\_0.html#ScopeClaims](http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) *   end\\_session\\_endpoint \\[Optional] URL to send the end user to after logging out of Canvas. See [openid.net/specs/openid-connect-session-1\\_0.html#RPLogout](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout) *   userinfo\\_endpoint \\[Optional] URL to request additional claims from. If the initial ID Token received from the provider cannot be used to satisfy the login\\_attribute and all federated\\_attributes, this endpoint will be queried for additional information. *   login\\_attribute \\[Optional] The attribute of the ID Token to look up the user’s login in Canvas. Defaults to ‘sub’. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Any value is allowed for the provider attribute names, but standard claims are listed at [openid.net/specs/openid-connect-core-1\\_0.html#StandardClaims](http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) For SAML, the additional recognized parameters are: *   metadata \\[Optional] An XML document to parse as SAML metadata, and automatically populate idp\\_entity\\_id, log\\_in\\_url, log\\_out\\_url, certificate\\_fingerprint, and identifier\\_format *   metadata\\_uri \\[Optional] A URI to download the SAML metadata from, and automatically populate idp\\_entity\\_id, log\\_in\\_url, log\\_out\\_url, certificate\\_fingerprint, and identifier\\_format. This URI will also be saved, and the metadata periodically refreshed, automatically. If the metadata contains multiple entities, also supply idp\\_entity\\_id to distinguish which one you want (otherwise the only entity in the metadata will be inferred). If you provide the URI ‘urn:mace:incommon’ or ‘[ukfederation.org.uk](http://ukfederation.org.uk)’, the InCommon or UK Access Management Federation metadata aggregate, respectively, will be used instead, and additional validation checks will happen (including validating that the metadata has been properly signed with the appropriate key). *   idp\\_entity\\_id The SAML IdP’s entity ID *   log\\_in\\_url The SAML service’s SSO target URL *   log\\_out\\_url \\[Optional] The SAML service’s SLO target URL *   certificate\\_fingerprint The SAML service’s certificate fingerprint. *   identifier\\_format The SAML service’s identifier format. Must be one of: * urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress * urn:oasis:names:tc:SAML:2.0:nameid-format:entity * urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos * urn:oasis:names:tc:SAML:2.0:nameid-format:persistent * urn:oasis:names:tc:SAML:2.0:nameid-format:transient * urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified * urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName * urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName *   requested\\_authn\\_context \\[Optional] The SAML AuthnContext *   sig\\_alg \\[Optional] If set, `AuthnRequest`, `LogoutRequest`, and `LogoutResponse` messages are signed with the corresponding algorithm. Supported algorithms are: * [http://www.w3.org/2000/09/xmldsig#rsa-sha1](http://www.w3.org/2000/09/xmldsig#rsa-sha1) * [http://www.w3.org/2001/04/xmldsig-more#rsa-sha256](http://www.w3.org/2001/04/xmldsig-more#rsa-sha256) RSA-SHA1 and RSA-SHA256 are acceptable aliases. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/authentication_providers`"
          }
        },
        {
          "name": "Put Accounts Authentication_Providers",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update an authentication provider using the same options as the [Add authentication provider](#method.authentication_providers.create) endpoint. You cannot update an existing provider to a new authentication type.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/authentication_providers/:id`"
          }
        },
        {
          "name": "Put Accounts Restore",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/authentication_providers/:id/restore",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "authentication_providers",
                ":id",
                "restore"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Restore an authentication provider back to active that was previously deleted. Only available to admins who can manage\\_account\\_settings for given root account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/authentication_providers/:id/restore`"
          }
        },
        {
          "name": "Put Accounts Sso_Settings",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sso_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sso_settings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup. This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is. Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set. You can list the current state of each setting with “show\\_sso\\_settings”\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/sso_settings`"
          }
        }
      ]
    },
    {
      "name": "Authentications Log",
      "description": "Query audit log of authentication events (logins and logouts). For each endpoint, a compound document is returned. The primary collection of event objects is paginated, ordered by date descending. Secondary collections of logins, accounts, page views, and users related to the returned events are also included. Refer to the Logins, Accounts, Page Views, and Users APIs for descriptions of the objects in those collections. Authentication logs are stored for one year.",
      "item": [
        {
          "name": "Get Audit Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/authentication/accounts/:account_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "authentication",
                "accounts",
                ":account_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events. Events are stored for one year.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List authentication events for a given account.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/authentication/accounts/:account_id`"
          }
        },
        {
          "name": "Get Audit Logins",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/authentication/logins/:login_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "authentication",
                "logins",
                ":login_id"
              ],
              "variable": [
                {
                  "key": "login_id",
                  "value": "<login_id>",
                  "description": "The login_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events. Events are stored for one year.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List authentication events for a given login.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/authentication/logins/:login_id`"
          }
        },
        {
          "name": "Get Audit Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/authentication/users/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "authentication",
                "users",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events. Events are stored for one year.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List authentication events for a given user.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/authentication/users/:user_id`"
          }
        }
      ]
    },
    {
      "name": "Blackout Dates",
      "description": "API for accessing blackout date information.",
      "item": [
        {
          "name": "Delete Accounts Blackout_Dates",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a blackout date for the given context. Returns a [BlackoutDate](#blackoutdate) object. ### [Update a list of Blackout Dates](#method.blackout_dates.bulk_update) <a href=\"#method.blackout_dates.bulk_update\" id=\"method.blackout_dates.bulk_update\"></a> [BlackoutDatesController#bulk\\_update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/blackout_dates/:id`"
          }
        },
        {
          "name": "Delete Courses Blackout_Dates",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/blackout_dates/:id`"
          }
        },
        {
          "name": "Get Accounts Blackout_Dates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the list of blackout dates for the current context. Returns a list of [BlackoutDate](#blackoutdate) objects. ### [Get a single blackout date](#method.blackout_dates.show) <a href=\"#method.blackout_dates.show\" id=\"method.blackout_dates.show\"></a> [BlackoutDatesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/blackout_dates`"
          }
        },
        {
          "name": "Get Accounts Blackout_Dates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the blackout date with the given id. Returns a [BlackoutDate](#blackoutdate) object. ### [New Blackout Date](#method.blackout_dates.new) <a href=\"#method.blackout_dates.new\" id=\"method.blackout_dates.new\"></a> [BlackoutDatesController#new](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/blackout_dates/:id`"
          }
        },
        {
          "name": "Get Accounts New",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates/new",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates",
                "new"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Initialize an unsaved Blackout Date for the given context. Returns a [BlackoutDate](#blackoutdate) object. ### [Create Blackout Date](#method.blackout_dates.create) <a href=\"#method.blackout_dates.create\" id=\"method.blackout_dates.create\"></a> [BlackoutDatesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/blackout_dates/new`"
          }
        },
        {
          "name": "Get Courses Blackout_Dates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blackout_dates`"
          }
        },
        {
          "name": "Get Courses Blackout_Dates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blackout_dates/:id`"
          }
        },
        {
          "name": "Get Courses New",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates/new",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates",
                "new"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blackout_dates/new`"
          }
        },
        {
          "name": "Post Accounts Blackout_Dates",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "event_title",
                  "value": "",
                  "description": "The title of the blackout date.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a blackout date for the given context.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/blackout_dates`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "start_date",
                  "value": "",
                  "description": "The start date of the blackout date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "The end date of the blackout date.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Blackout_Dates",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/blackout_dates`"
          }
        },
        {
          "name": "Put Accounts Blackout_Dates",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "event_title",
                  "value": "",
                  "description": "The title of the blackout date.",
                  "disabled": true
                }
              ]
            },
            "description": "Update a blackout date for the given context.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/blackout_dates/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "start_date",
                  "value": "",
                  "description": "The start date of the blackout date.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "The end date of the blackout date.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Blackout_Dates",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "blackout_dates:",
                  "value": "",
                  "description": "blackout_date, …An object containing the array of BlackoutDates we want to exist after this operation. For array entries, if it has an id it will be updated, if not created, and if an existing BlackoutDate id is missing from the array, it will be deleted.",
                  "disabled": true
                }
              ]
            },
            "description": "Create, update, and delete blackout dates to sync the db with the incoming data.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/blackout_dates`"
          }
        },
        {
          "name": "Put Courses Blackout_Dates",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blackout_dates/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blackout_dates",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/blackout_dates/:id`"
          }
        }
      ]
    },
    {
      "name": "BlockEditorTemplate",
      "description": "Block Editor Templates are pre-build templates that can be used to create pages. The BlockEditorTemplate API allows you to create, retrieve, update, and delete templates.",
      "item": [
        {
          "name": "Get Courses Block_Editor_Templates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/block_editor_templates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "block_editor_templates"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "",
                  "description": "Sort results by this field.Allowed values: name, created_at, updated_at",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The sorting order. Defaults to ‘asc’.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "drafts",
                  "value": "",
                  "description": "If true, include draft templates. If false or omitted only published templates will be returned.",
                  "disabled": true
                },
                {
                  "key": "type[]",
                  "value": "",
                  "description": "What type of templates should be returned.Allowed values: page, section, block",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "no descriptionAllowed values: node_tree, thumbnail",
                  "disabled": true
                }
              ]
            },
            "description": "A list of the block templates available to the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/block_editor_templates`"
          }
        }
      ]
    },
    {
      "name": "Blueprint Courses",
      "description": "Configure blueprint courses",
      "item": [
        {
          "name": "Get Courses Blueprint_Subscriptions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_subscriptions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_subscriptions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_subscriptions`"
          }
        },
        {
          "name": "Get Courses Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_subscriptions",
                ":subscription_id",
                "migrations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "subscription_id",
                  "value": "<subscription_id>",
                  "description": "The subscription_id identifier"
                }
              ]
            },
            "description": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also [the blueprint course side](#method.master_courses/master_templates.migrations_index). Use ‘default’ as the subscription\\_id to use the currently active blueprint subscription.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations`"
          }
        },
        {
          "name": "Get Courses Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_subscriptions",
                ":subscription_id",
                "migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "subscription_id",
                  "value": "<subscription_id>",
                  "description": "The subscription_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Shows the status of an import into a course associated with a blueprint. See also [the blueprint course side](#method.master_courses/master_templates.migrations_show).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id`"
          }
        },
        {
          "name": "Get Courses Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id/details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_subscriptions",
                ":subscription_id",
                "migrations",
                ":id",
                "details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "subscription_id",
                  "value": "<subscription_id>",
                  "description": "The subscription_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Show the changes that were propagated to a course associated with a blueprint. See also [the blueprint course side](#method.master_courses/master_templates.migration_details).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id/details`"
          }
        },
        {
          "name": "Get Courses Blueprint_Templates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ]
            },
            "description": "Using ‘default’ as the template\\_id should suffice for the current implmentation (as there should be only one template per course). However, using specific template ids may become necessary in the future\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id`"
          }
        },
        {
          "name": "Get Courses Associated_Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/associated_courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "associated_courses"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ]
            },
            "description": "Returns a list of courses that are configured to receive updates from this blueprint\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/associated_courses`"
          }
        },
        {
          "name": "Get Courses Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "migrations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ]
            },
            "description": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.imports_index).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations`"
          }
        },
        {
          "name": "Get Courses Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.imports_show).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id`"
          }
        },
        {
          "name": "Get Courses Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id/details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "migrations",
                ":id",
                "details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.import_details).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id/details`"
          }
        },
        {
          "name": "Get Courses Unsynced_Changes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/unsynced_changes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "unsynced_changes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ]
            },
            "description": "Retrieve a list of learning objects that have changed since the last blueprint sync operation. If no syncs have been completed, a ChangeRecord with a change\\_type of `initial_sync` is returned. Returns a list of [ChangeRecord](#changerecord) objects. ### [List blueprint migrations](#method.master_courses/master_templates.migrations_index) <a href=\"#method.master_courses-master_templates.migrations_index\" id=\"method.master_courses-master_templates.migrations_index\"></a> [MasterCourses::MasterTemplatesController#migrations\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/unsynced_changes`"
          }
        },
        {
          "name": "Post Courses Migrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "migrations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment",
                  "value": "",
                  "description": "An optional comment to be included in the sync history.",
                  "disabled": true
                },
                {
                  "key": "send_notification",
                  "value": "",
                  "description": "Send a notification to the calling user when the sync completes.",
                  "disabled": true
                },
                {
                  "key": "copy_settings",
                  "value": "",
                  "description": "Whether course settings should be copied over to associated courses. Defaults to true for newly associated courses.",
                  "disabled": true
                },
                {
                  "key": "send_item_notifications",
                  "value": "",
                  "description": "By default, new-item notifications are suppressed in blueprint syncs. If this option is set, teachers and students may receive notifications for items such as announcements and assignments that are created in associated courses (subject to the usual notification settings). This option requires the Blueprint Item Notifications feature to be enabled.",
                  "disabled": true
                },
                {
                  "key": "publish_after_initial_sync",
                  "value": "",
                  "description": "If set, newly associated courses will be automatically published after the sync completes",
                  "disabled": true
                }
              ]
            },
            "description": "Begins a migration to push recently updated content to all associated courses. Only one migration can be running at a time.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations`"
          }
        },
        {
          "name": "Put Courses Restrict_Item",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/restrict_item",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "restrict_item"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ],
              "query": [
                {
                  "key": "content_type",
                  "value": "",
                  "description": "String, “assignment”",
                  "disabled": true
                },
                {
                  "key": "content_id",
                  "value": "",
                  "description": "The ID of the object.",
                  "disabled": true
                },
                {
                  "key": "restricted",
                  "value": "",
                  "description": "Whether to apply restrictions.",
                  "disabled": true
                }
              ]
            },
            "description": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/blueprint_templates/:template_id/restrict_item`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "restrictions",
                  "value": "",
                  "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified, the course-level restrictions will be used. See Course API update documentation",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Update_Associations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/blueprint_templates/:template_id/update_associations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "blueprint_templates",
                ":template_id",
                "update_associations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "template_id",
                  "value": "<template_id>",
                  "description": "The template_id identifier"
                }
              ]
            },
            "description": "Send a list of course ids to add or remove new associations for the template. Cannot add courses that do not belong to the blueprint course’s account. Also cannot add other blueprint courses or courses that already have an association with another blueprint course. After associating new courses, [start a sync](#method.master_courses/master_templates.queue_migration) to populate their contents from the blueprint.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/blueprint_templates/:template_id/update_associations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_ids_to_add",
                  "value": "",
                  "description": "Courses to add as associated courses",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course_ids_to_remove",
                  "value": "",
                  "description": "Courses to remove as associated courses",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Bookmarks",
      "description": "",
      "item": [
        {
          "name": "Delete Users Bookmarks",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/bookmarks/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "bookmarks",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes a bookmark\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/bookmarks/:id`"
          }
        },
        {
          "name": "Get Users Bookmarks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/bookmarks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "bookmarks"
              ]
            },
            "description": "Returns the paginated list of bookmarks.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/bookmarks`"
          }
        },
        {
          "name": "Get Users Bookmarks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/bookmarks/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "bookmarks",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the details for a bookmark.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/bookmarks/:id`"
          }
        },
        {
          "name": "Post Users Bookmarks",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/bookmarks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "bookmarks"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the bookmark",
                  "disabled": true
                },
                {
                  "key": "url",
                  "value": "",
                  "description": "The url of the bookmark",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "The position of the bookmark. Defaults to the bottom.",
                  "disabled": true
                },
                {
                  "key": "data",
                  "value": "",
                  "description": "The data associated with the bookmark",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a bookmark.\n\n**OAuth Scope:** `url:POST|/api/v1/users/self/bookmarks`"
          }
        },
        {
          "name": "Put Users Bookmarks",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/bookmarks/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "bookmarks",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the bookmark",
                  "disabled": true
                },
                {
                  "key": "url",
                  "value": "",
                  "description": "The url of the bookmark",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "The position of the bookmark. Defaults to the bottom.",
                  "disabled": true
                },
                {
                  "key": "data",
                  "value": "",
                  "description": "The data associated with the bookmark",
                  "disabled": true
                }
              ]
            },
            "description": "Updates a bookmark\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/bookmarks/:id`"
          }
        }
      ]
    },
    {
      "name": "Brand Configs",
      "description": "",
      "item": [
        {
          "name": "Get Accounts Brand_Variables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/brand_variables",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "brand_variables"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/brand_variables`"
          }
        },
        {
          "name": "List Brand_Variables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/brand_variables",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "brand_variables"
              ]
            },
            "description": "Will redirect to a static json file that has all of the brand variables used by this account. Even though this is a redirect, do not store the redirected url since if the account makes any changes it will redirect to a new url. Needs no authentication.\n\n**OAuth Scope:** `url:GET|/api/v1/brand_variables`"
          }
        },
        {
          "name": "Get Courses Brand_Variables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/brand_variables",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "brand_variables"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Will redirect to a static json file that has all of the brand variables used by the provided context. Even though this is a redirect, do not store the redirected url since if the sub-account makes any changes it will redirect to a new url.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/brand_variables`"
          }
        }
      ]
    },
    {
      "name": "Calendar Events",
      "description": "API for creating, accessing and updating calendar events.",
      "item": [
        {
          "name": "Delete Calendar_Events",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "cancel_reason",
                  "value": "",
                  "description": "Reason for deleting/canceling the event.",
                  "disabled": true
                },
                {
                  "key": "which",
                  "value": "",
                  "description": "Valid if the event whose ID is in the URL is part of a series. Delete just the event whose ID is in in the URL, all events in the series, or the given event and all those following.Allowed values: one, all, following",
                  "disabled": true
                }
              ]
            },
            "description": "Delete an event from the calendar and return the deleted event\n\n**OAuth Scope:** `url:DELETE|/api/v1/calendar_events/:id`"
          }
        },
        {
          "name": "List Calendar_Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "",
                  "description": "Defaults to “event”Allowed values: event, assignment, sub_assignment",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Only return events since the start_date (inclusive). Defaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Only return events before the end_date (inclusive). Defaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date is the same as start_date, then only events on that day are returned.",
                  "disabled": true
                },
                {
                  "key": "undated",
                  "value": "",
                  "description": "Defaults to false (dated events only). If true, only return undated events and ignore start_date and end_date.",
                  "disabled": true
                },
                {
                  "key": "all_events",
                  "value": "",
                  "description": "Defaults to false (uses start_date, end_date, and undated criteria). If true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                  "disabled": true
                },
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context codes of courses, groups, users, or accounts whose events you want to see. If not specified, defaults to the current user (i.e personal calendar, no course/group events). Limited to 10 context codes, additional ones are ignored. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42",
                  "disabled": true
                },
                {
                  "key": "excludes[]",
                  "value": "",
                  "description": "Array of attributes to exclude. Possible values are “description”, “child_events” and “assignment”",
                  "disabled": true
                },
                {
                  "key": "includes[]",
                  "value": "",
                  "description": "Array of optional attributes to include. Possible values are “web_conference” and “series_natural_language”",
                  "disabled": true
                },
                {
                  "key": "important_dates",
                  "value": "",
                  "description": "Defaults to false. If true, only events with important dates set to true will be returned.",
                  "disabled": true
                },
                {
                  "key": "blackout_date",
                  "value": "",
                  "description": "Defaults to false. If true, only events with blackout date set to true will be returned.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of calendar events or assignments for the current user\n\n**OAuth Scope:** `url:GET|/api/v1/calendar_events`"
          }
        },
        {
          "name": "List Calendar_Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns detailed information about a specific calendar event or assignment. Returns a [CalendarEvent](#calendarevent) object. ### [Reserve a time slot](#method.calendar_events_api.reserve) <a href=\"#method.calendar_events_api.reserve\" id=\"method.calendar_events_api.reserve\"></a> [CalendarEventsApiController#reserve](https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/calendar_events/:id`"
          }
        },
        {
          "name": "Get Courses Timetable",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/calendar_events/timetable",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "calendar_events",
                "timetable"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the last timetable set by the [Set a course timetable](#method.calendar_events_api.set_course_timetable) endpoint ### [Create or update events directly for a course timetable](#method.calendar_events_api.set_course_timetable_events) <a href=\"#method.calendar_events_api.set_course_timetable_events\" id=\"method.calendar_events_api.set_course_timetable_events\"></a> [CalendarEventsApiController#set\\_course\\_timetable\\_events](https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/calendar_events/timetable`"
          }
        },
        {
          "name": "Get Users Calendar_Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/calendar_events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "calendar_events"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "type",
                  "value": "",
                  "description": "Defaults to “event”Allowed values: event, assignment",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Only return events since the start_date (inclusive). Defaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Only return events before the end_date (inclusive). Defaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date is the same as start_date, then only events on that day are returned.",
                  "disabled": true
                },
                {
                  "key": "undated",
                  "value": "",
                  "description": "Defaults to false (dated events only). If true, only return undated events and ignore start_date and end_date.",
                  "disabled": true
                },
                {
                  "key": "all_events",
                  "value": "",
                  "description": "Defaults to false (uses start_date, end_date, and undated criteria). If true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                  "disabled": true
                },
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context codes of courses, groups, users, or accounts whose events you want to see. If not specified, defaults to the current user (i.e personal calendar, no course/group events). Limited to 10 context codes, additional ones are ignored. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42",
                  "disabled": true
                },
                {
                  "key": "excludes[]",
                  "value": "",
                  "description": "Array of attributes to exclude. Possible values are “description”, “child_events” and “assignment”",
                  "disabled": true
                },
                {
                  "key": "submission_types[]",
                  "value": "",
                  "description": "When type is “assignment”, specifies the allowable submission types for returned assignments. Ignored if type is not “assignment” or if exclude_submission_types is provided.",
                  "disabled": true
                },
                {
                  "key": "exclude_submission_types[]",
                  "value": "",
                  "description": "When type is “assignment”, specifies the submission types to be excluded from the returned assignments. Ignored if type is not “assignment”.",
                  "disabled": true
                },
                {
                  "key": "includes[]",
                  "value": "",
                  "description": "Array of optional attributes to include. Possible values are “web_conference” and “series_natural_language”",
                  "disabled": true
                },
                {
                  "key": "important_dates",
                  "value": "",
                  "description": "Defaults to false If true, only events with important dates set to true will be returned.",
                  "disabled": true
                },
                {
                  "key": "blackout_date",
                  "value": "",
                  "description": "Defaults to false If true, only events with blackout date set to true will be returned.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of calendar events or assignments for the specified user. To view calendar events for a user other than yourself, you must either be an observer of that user or an administrator.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/calendar_events`"
          }
        },
        {
          "name": "Create Calendar_Events",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events"
              ],
              "query": [
                {
                  "key": "calendar_event[title]",
                  "value": "",
                  "description": "Short title for the calendar event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[description]",
                  "value": "",
                  "description": "Longer HTML description of the event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[location_name]",
                  "value": "",
                  "description": "Location name of the event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[location_address]",
                  "value": "",
                  "description": "Location address",
                  "disabled": true
                },
                {
                  "key": "calendar_event[time_zone_edited]",
                  "value": "",
                  "description": "Time zone of the user editing the event. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[all_day]",
                  "value": "",
                  "description": "When true event is considered to span the whole day and times are ignored.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][context_code]",
                  "value": "",
                  "description": "Context code(s) corresponding to the section-level start and end time(s).",
                  "disabled": true
                },
                {
                  "key": "calendar_event[duplicate][frequency]",
                  "value": "",
                  "description": "Defaults to “weekly”. The frequency at which to duplicate the eventAllowed values: daily, weekly, monthly",
                  "disabled": true
                },
                {
                  "key": "calendar_event[duplicate][append_iterator]",
                  "value": "",
                  "description": "Defaults to false. If set to ‘true`, an increasing counter number will be appended to the event title when the event is duplicated. (e.g. Event 1, Event 2, Event 3, etc)",
                  "disabled": true
                },
                {
                  "key": "calendar_event[rrule]",
                  "value": "",
                  "description": "The recurrence rule to create a series of recurring events. Its value is the iCalendar RRULE defining how the event repeats. Unending series not supported.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[blackout_date]",
                  "value": "",
                  "description": "If the blackout_date is true, this event represents a holiday or some other special day that does not count in course pacing.",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new calendar event\n\n**OAuth Scope:** `url:POST|/api/v1/calendar_events`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "calendar_event[context_code]",
                  "value": "",
                  "description": "Context code of the course, group, user, or account whose calendar this event should be added to.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[start_at]",
                  "value": "",
                  "description": "Start date/time of the event.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[end_at]",
                  "value": "",
                  "description": "End date/time of the event.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][start_at]",
                  "value": "",
                  "description": "Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][end_at]",
                  "value": "",
                  "description": "Section-level end time(s) if this is a course event.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[duplicate][count]",
                  "value": "",
                  "description": "Number of times to copy/duplicate the event. Count cannot exceed 200.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[duplicate][interval]",
                  "value": "",
                  "description": "Defaults to 1 if duplicate ‘count` is set. The interval between the duplicated events.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Calendar_Events Reservations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/:id/reservations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                ":id",
                "reservations"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/calendar_events/:id/reservations`"
          }
        },
        {
          "name": "Post Calendar_Events Reservations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/:id/reservations/:participant_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                ":id",
                "reservations",
                ":participant_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "participant_id",
                  "value": "<participant_id>",
                  "description": "The participant_id identifier"
                }
              ],
              "query": [
                {
                  "key": "participant_id",
                  "value": "",
                  "description": "User or group id for whom you are making the reservation (depends on the participant type). Defaults to the current user (or user’s candidate group).",
                  "disabled": true
                },
                {
                  "key": "comments",
                  "value": "",
                  "description": "Comments to associate with this reservation",
                  "disabled": true
                },
                {
                  "key": "cancel_existing",
                  "value": "",
                  "description": "Defaults to false. If true, cancel any previous reservation(s) for this participant and appointment group.",
                  "disabled": true
                }
              ]
            },
            "description": "Reserves a particular time slot and return the new reservation\n\n**OAuth Scope:** `url:POST|/api/v1/calendar_events/:id/reservations/:participant_id`"
          }
        },
        {
          "name": "Post Calendar_Events Save_Enabled_Account_Calendars",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/save_enabled_account_calendars",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                "save_enabled_account_calendars"
              ],
              "query": [
                {
                  "key": "mark_feature_as_seen",
                  "value": "",
                  "description": "Flag to mark account calendars feature as seen",
                  "disabled": true
                }
              ]
            },
            "description": "Creates and updates the enabled\\_account\\_calendars and mark\\_feature\\_as\\_seen user preferences\n\n**OAuth Scope:** `url:POST|/api/v1/calendar_events/save_enabled_account_calendars`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enabled_account_calendars[]",
                  "value": "",
                  "description": "An array of account Ids to remember in the calendars list of the user",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Timetable",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/calendar_events/timetable",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "calendar_events",
                "timetable"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "timetables[course_section_id][][weekdays]",
                  "value": "",
                  "description": "A comma-separated list of abbreviated weekdays (Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)",
                  "disabled": true
                },
                {
                  "key": "timetables[course_section_id][][start_time]",
                  "value": "",
                  "description": "Time to start each event at (e.g. “9:00 am”)",
                  "disabled": true
                },
                {
                  "key": "timetables[course_section_id][][end_time]",
                  "value": "",
                  "description": "Time to end each event at (e.g. “9:00 am”)",
                  "disabled": true
                },
                {
                  "key": "timetables[course_section_id][][location_name]",
                  "value": "",
                  "description": "A location name to set for each event",
                  "disabled": true
                }
              ]
            },
            "description": "Creates and updates “timetable” events for a course. Can automaticaly generate a series of calendar events based on simple schedules (e.g. “Monday and Wednesday at 2:00pm” ) Existing timetable events for the course and course sections will be updated if they still are part of the timetable. Otherwise, they will be deleted.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/calendar_events/timetable`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "timetables[course_section_id][]",
                  "value": "",
                  "description": "An array of timetable objects for the course section specified by course_section_id. If course_section_id is set to “all”, events will be created for the entire course.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Timetable_Events",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/calendar_events/timetable_events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "calendar_events",
                "timetable_events"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_section_id",
                  "value": "",
                  "description": "Events will be created for the course section specified by course_section_id. If not present, events will be created for the entire course.",
                  "disabled": true
                },
                {
                  "key": "events[][location_name]",
                  "value": "",
                  "description": "Location name for the event",
                  "disabled": true
                },
                {
                  "key": "events[][code]",
                  "value": "",
                  "description": "A unique identifier that can be used to update the event at a later time If one is not specified, an identifier will be generated based on the start and end times",
                  "disabled": true
                },
                {
                  "key": "events[][title]",
                  "value": "",
                  "description": "Title for the meeting. If not present, will default to the associated course’s name",
                  "disabled": true
                }
              ]
            },
            "description": "Creates and updates “timetable” events for a course or course section. Similar to [setting a course timetable](#method.calendar_events_api.set_course_timetable), but instead of generating a list of events based on a timetable schedule, this endpoint expects a complete list of events.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/calendar_events/timetable_events`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "events[]",
                  "value": "",
                  "description": "An array of event objects to use.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "events[][start_at]",
                  "value": "",
                  "description": "Start time for the event",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "events[][end_at]",
                  "value": "",
                  "description": "End time for the event",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Calendar_Events",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/calendar_events/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "calendar_events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "calendar_event[context_code]",
                  "value": "",
                  "description": "Context code of the course, group, user, or account to move this event to. Scheduler appointments and events with section-specific times cannot be moved between calendars.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[title]",
                  "value": "",
                  "description": "Short title for the calendar event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[description]",
                  "value": "",
                  "description": "Longer HTML description of the event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[location_name]",
                  "value": "",
                  "description": "Location name of the event.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[location_address]",
                  "value": "",
                  "description": "Location address",
                  "disabled": true
                },
                {
                  "key": "calendar_event[time_zone_edited]",
                  "value": "",
                  "description": "Time zone of the user editing the event. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[all_day]",
                  "value": "",
                  "description": "When true event is considered to span the whole day and times are ignored.",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][context_code]",
                  "value": "",
                  "description": "Context code(s) corresponding to the section-level start and end time(s).",
                  "disabled": true
                },
                {
                  "key": "calendar_event[rrule]",
                  "value": "",
                  "description": "Valid if the event whose ID is in the URL is part of a series. This defines the shape of the recurring event series after it’s updated. Its value is the iCalendar RRULE. Unending series are not supported.",
                  "disabled": true
                },
                {
                  "key": "which",
                  "value": "",
                  "description": "Valid if the event whose ID is in the URL is part of a series. Update just the event whose ID is in in the URL, all events in the series, or the given event and all those following. Some updates may create a new series. For example, changing the start time of this and all following events from the middle of a series.Allowed values: one, all, following",
                  "disabled": true
                },
                {
                  "key": "calendar_event[blackout_date]",
                  "value": "",
                  "description": "If the blackout_date is true, this event represents a holiday or some other special day that does not count in course pacing.",
                  "disabled": true
                }
              ]
            },
            "description": "Update and return a calendar event\n\n**OAuth Scope:** `url:PUT|/api/v1/calendar_events/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "calendar_event[start_at]",
                  "value": "",
                  "description": "Start date/time of the event.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[end_at]",
                  "value": "",
                  "description": "End date/time of the event.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][start_at]",
                  "value": "",
                  "description": "Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "calendar_event[child_event_data][X][end_at]",
                  "value": "",
                  "description": "Section-level end time(s) if this is a course event.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Canvas Career Experiences",
      "description": "API for managing user career experience and role preferences in Canvas.",
      "item": [
        {
          "name": "Get Career Experience_Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/career/experience_summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "career",
                "experience_summary"
              ]
            },
            "description": "Returns the current user’s active experience and available experiences they can switch to.\n\n**OAuth Scope:** `url:GET|/api/v1/career/experience_summary`"
          }
        },
        {
          "name": "Post Career Switch_Experience",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/career/switch_experience",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "career",
                "switch_experience"
              ]
            },
            "description": "Switch the current user’s active experience to the specified one.\n\n**OAuth Scope:** `url:POST|/api/v1/career/switch_experience`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "experience",
                  "value": "",
                  "description": "The experience to switch to.Allowed values: academic, career",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Career Switch_Role",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/career/switch_role",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "career",
                "switch_role"
              ]
            },
            "description": "Switch the current user’s role within the current experience.\n\n**OAuth Scope:** `url:POST|/api/v1/career/switch_role`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "role",
                  "value": "",
                  "description": "The role to switch to.Allowed values: learner, learning_provider",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Collaborations",
      "description": "API for accessing course and group collaboration information.",
      "item": [
        {
          "name": "Get Collaborations Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/collaborations/:id/members",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "collaborations",
                ":id",
                "members"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“collaborator_lti_id”: Optional information to include with each member. Represents an identifier to be used for the member in an LTI context.“avatar_image_url”: Optional information to include with each member. The url for the avatar of a collaborator with type ‘user’.Allowed values: collaborator_lti_id, avatar_image_url",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the collaborators of a given collaboration\n\n**OAuth Scope:** `url:GET|/api/v1/collaborations/:id/members`"
          }
        },
        {
          "name": "Get Courses Collaborations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/collaborations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "collaborations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/collaborations`"
          }
        },
        {
          "name": "Get Courses Potential_Collaborators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/potential_collaborators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "potential_collaborators"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/potential_collaborators`"
          }
        },
        {
          "name": "Get Groups Collaborations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/collaborations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "collaborations"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "A paginated list of collaborations the current user has access to in the context of the course provided in the url. NOTE: this only returns ExternalToolCollaboration type collaborations. ``` curl https://<canvas>/api/v1/courses/1/collaborations/ ``` Returns a list of [Collaboration](#collaboration) objects. ### [List members of a collaboration.](#method.collaborations.members) <a href=\"#method.collaborations.members\" id=\"method.collaborations.members\"></a> [CollaborationsController#members](https://github.com/instructure/canvas-lms/blob/master/app/controllers/collaborations_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/collaborations`"
          }
        },
        {
          "name": "Get Groups Potential_Collaborators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/potential_collaborators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "potential_collaborators"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "A paginated list of the users who can potentially be added to a collaboration in the given context. For courses, this consists of all enrolled users. For groups, it is comprised of the group members plus the admins of the course containing the group. Returns a list of [User](../users#user) objects.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/potential_collaborators`"
          }
        }
      ]
    },
    {
      "name": "CommMessages",
      "description": "API for accessing the messages (emails, sms, etc) that have been sent to a user.",
      "item": [
        {
          "name": "List Comm_Messages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/comm_messages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "comm_messages"
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The user id for whom you want to retrieve CommMessages",
                  "disabled": true
                },
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range you want to retrieve message from. Up to a year prior to the current date is available.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range you want to retrieve messages for. Up to a year prior to the current date is available.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of messages sent to a user.\n\n**OAuth Scope:** `url:GET|/api/v1/comm_messages`"
          }
        }
      ]
    },
    {
      "name": "Communication Channels",
      "description": "API for accessing users' email and SMS communication channels. In this API, the `:user_id` parameter can always be replaced with `self` if the requesting user is asking for his/her own information.",
      "item": [
        {
          "name": "Delete Users Communication_Channels",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/communication_channels/:id`"
          }
        },
        {
          "name": "Delete Users Communication_Channels",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:type/:address",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":type",
                ":address"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "type",
                  "value": "<type>",
                  "description": "The type identifier"
                },
                {
                  "key": "address",
                  "value": "<address>",
                  "description": "The address identifier"
                }
              ]
            },
            "description": "Delete an existing communication channel.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/communication_channels/:type/:address`"
          }
        },
        {
          "name": "Delete Users Push",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/push",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                "push"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/communication_channels/push`"
          }
        },
        {
          "name": "Get Users Communication_Channels",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of communication channels for the specified user, sorted by position.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels`"
          }
        },
        {
          "name": "Post Users Communication_Channels",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "communication_channel[token]",
                  "value": "",
                  "description": "A registration id, device token, or equivalent token given to an app when registering with a push notification provider. Only valid for “push” type channels.",
                  "disabled": true
                },
                {
                  "key": "skip_confirmation",
                  "value": "",
                  "description": "Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new communication channel for the specified user.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/communication_channels`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "communication_channel[address]",
                  "value": "",
                  "description": "An email address or SMS number. Not required for “push” type channels.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "communication_channel[type]",
                  "value": "",
                  "description": "The type of communication channel.In order to enable push notification support, the server must be properly configured (via ‘sns_credsin Vault) to communicate with Amazon Simple Notification Services, and the developer key used to create the access token from this request must have an SNS ARN configured on it.</p> Allowed values:email, sms, push`",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Conferences",
      "description": "API for accessing information on conferences.",
      "item": [
        {
          "name": "List Conferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conferences"
              ],
              "query": [
                {
                  "key": "state",
                  "value": "",
                  "description": "If set to “live”, returns only conferences that are live (i.e., have started and not finished yet). If omitted, returns all conferences for this user’s groups and courses.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of conferences for all courses and groups the current user belongs to This API returns a JSON object containing the list of conferences. The key for the list of conferences is “conferences”.\n\n**OAuth Scope:** `url:GET|/api/v1/conferences`"
          }
        },
        {
          "name": "Get Courses Conferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/conferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "conferences"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/conferences`"
          }
        },
        {
          "name": "Get Groups Conferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/conferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "conferences"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Retrieve the paginated list of conferences for this context This API returns a JSON object containing the list of conferences, the key for the list of conferences is “conferences”\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/conferences`"
          }
        }
      ]
    },
    {
      "name": "Content Exports",
      "description": "API for exporting courses and course content",
      "item": [
        {
          "name": "Get Courses Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_exports`"
          }
        },
        {
          "name": "Get Courses Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_exports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_exports",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_exports/:id`"
          }
        },
        {
          "name": "Get Groups Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_exports`"
          }
        },
        {
          "name": "Get Groups Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_exports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_exports",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_exports/:id`"
          }
        },
        {
          "name": "Get Users Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "A paginated list of the past and pending content export jobs for a course, group, or user. Exports are returned newest first. Returns a list of [ContentExport](#contentexport) objects. ### [Show content export](#method.content_exports_api.show) <a href=\"#method.content_exports_api.show\" id=\"method.content_exports_api.show\"></a> [ContentExportsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_exports`"
          }
        },
        {
          "name": "Get Users Content_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_exports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_exports",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get information about a single content export. Returns a [ContentExport](#contentexport) object. ### [Export content](#method.content_exports_api.create) <a href=\"#method.content_exports_api.create\" id=\"method.content_exports_api.create\"></a> [ContentExportsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_exports/:id`"
          }
        },
        {
          "name": "Post Courses Content_Exports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/content_exports`"
          }
        },
        {
          "name": "Post Groups Content_Exports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/content_exports`"
          }
        },
        {
          "name": "Post Users Content_Exports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_exports"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "skip_notifications",
                  "value": "",
                  "description": "Don’t send the notifications about the export to the user. Default: false",
                  "disabled": true
                }
              ]
            },
            "description": "Begin a content export job for a course, group, or user. You can use the [Progress API](../progress#method.progress.show) to track the progress of the export. The migration’s progress is linked to with the _progress\\_url_ value. When the export completes, use the [Show content export](#method.content_exports_api.show) endpoint to retrieve a download URL for the exported content.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/content_exports`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "export_type",
                  "value": "",
                  "description": "“common_cartridge”Export the contents of the course in the Common Cartridge (.imscc) format“qti”Export quizzes from a course in the QTI format“zip”Export files from a course, group, or user in a zip fileAllowed values: common_cartridge, qti, zip",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "select",
                  "value": "",
                  "description": "The select parameter allows exporting specific data. The keys are object types like ‘files’, ‘folders’, ‘pages’, etc. The value for each key is a list of object ids. An id can be an integer or a string.Multiple object types can be selected in the same call. However, not all object types are valid for every export_type. Common Cartridge supports all object types. Zip and QTI only support the object types as described below.“folders”Also supported for zip export_type.“files”Also supported for zip export_type.“quizzes”Also supported for qti export_type.Allowed values: folders, files, attachments, quizzes, assignments, announcements, calendar_events, discussion_topics, modules, module_items, pages, rubrics",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Content Migrations",
      "description": "API for accessing content migrations and migration issues",
      "item": [
        {
          "name": "Get Accounts Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations`"
          }
        },
        {
          "name": "Get Accounts Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues`"
          }
        },
        {
          "name": "Get Accounts Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Get Accounts Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations/:id`"
          }
        },
        {
          "name": "Get Accounts Selective_Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:id/selective_data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":id",
                "selective_data"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations/:id/selective_data`"
          }
        },
        {
          "name": "Get Accounts Migrators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/migrators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                "migrators"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/content_migrations/migrators`"
          }
        },
        {
          "name": "Get Courses Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations`"
          }
        },
        {
          "name": "Get Courses Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues`"
          }
        },
        {
          "name": "Get Courses Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Get Courses Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/:id`"
          }
        },
        {
          "name": "Get Courses Asset_Id_Mapping",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:id/asset_id_mapping",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":id",
                "asset_id_mapping"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Given a complete course copy or blueprint import content migration, return a mapping of asset ids from the source course to the destination course that were copied in this migration or an earlier one with the same course pair and migration\\_type (course copy or blueprint). The returned object’s keys are asset types as they appear in API URLs (`announcements`, `assignments`, `discussion_topics`, `files`, `module_items`, `modules`, `pages`, and `quizzes`). The values are a mapping from id in source course to id in destination course for objects of this type.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/:id/asset_id_mapping`"
          }
        },
        {
          "name": "Get Courses Selective_Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:id/selective_data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":id",
                "selective_data"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/:id/selective_data`"
          }
        },
        {
          "name": "Get Courses Migrators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/migrators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                "migrators"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_migrations/migrators`"
          }
        },
        {
          "name": "Get Groups Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations`"
          }
        },
        {
          "name": "Get Groups Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues`"
          }
        },
        {
          "name": "Get Groups Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Get Groups Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations/:id`"
          }
        },
        {
          "name": "Get Groups Selective_Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:id/selective_data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":id",
                "selective_data"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations/:id/selective_data`"
          }
        },
        {
          "name": "Get Groups Migrators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/migrators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                "migrators"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_migrations/migrators`"
          }
        },
        {
          "name": "Get Users Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns paginated content migrations\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations`"
          }
        },
        {
          "name": "Get Users Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                }
              ]
            },
            "description": "Returns paginated migration issues\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues`"
          }
        },
        {
          "name": "Get Users Migration_Issues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns data on an individual migration issue\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Get Users Content_Migrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns data on an individual content migration\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations/:id`"
          }
        },
        {
          "name": "Get Users Selective_Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:id/selective_data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":id",
                "selective_data"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "type",
                  "value": "",
                  "description": "The type of content to enumerate.Allowed values: context_modules, assignments, quizzes, assessment_question_banks, discussion_topics, wiki_pages, context_external_tools, tool_profiles, announcements, calendar_events, rubrics, groups, learning_outcomes, attachments",
                  "disabled": true
                }
              ]
            },
            "description": "Enumerates the content available for selective import in a tree structure. Each node provides a `property` copy argument that can be supplied to the [Update endpoint](#method.content_migrations.update) to selectively copy the content associated with that tree node and its children. Each node may also provide a `sub_items_url` or an array of `sub_items` which you can use to obtain copy parameters for a subset of the resources in a given node. If no `type` is sent you will get a list of the top-level sections in the content. It will look something like this: ``` [{ \"type\": \"course_settings\", \"property\": \"copy[all_course_settings]\", \"title\": \"Course Settings\" }, { \"type\": \"context_modules\", \"property\": \"copy[all_context_modules]\", \"title\": \"Modules\", \"count\": 5, \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\" }, { \"type\": \"assignments\", \"property\": \"copy[all_assignments]\", \"title\": \"Assignments\", \"count\": 2, \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\" }] ``` When a `type` is provided, nodes may be further divided via `sub_items`. For example, using type=assignments results in a node for each assignment group and a sub\\_item for each assignment, like this: ``` [{ \"type\": \"assignment_groups\", \"title\": \"An Assignment Group\", \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\", \"sub_items\": [{ \"type\": \"assignments\", \"title\": \"Assignment 1\", \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\" }, { \"type\": \"assignments\", \"title\": \"Assignment 2\", \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\" }] }] ``` To import the items corresponding to a particular tree node, use the `property` as a parameter to the [Update endpoint](#method.content_migrations.update) and assign a value of 1, for example: ``` copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1 ``` You can include multiple copy parameters to selectively import multiple items or groups of items.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations/:id/selective_data`"
          }
        },
        {
          "name": "Get Users Migrators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/migrators",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                "migrators"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Lists the currently available migration types. These values may change. Returns a list of [Migrator](#migrator) objects. ### [List items for selective import](#method.content_migrations.content_list) <a href=\"#method.content_migrations.content_list\" id=\"method.content_migrations.content_list\"></a> [ContentMigrationsController#content\\_list](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_migrations/migrators`"
          }
        },
        {
          "name": "Post Accounts Content_Migrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/content_migrations`"
          }
        },
        {
          "name": "Post Courses Content_Migrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/content_migrations`"
          }
        },
        {
          "name": "Post Groups Content_Migrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/content_migrations`"
          }
        },
        {
          "name": "Post Users Content_Migrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "pre_attachment[name]",
                  "value": "",
                  "description": "Required if uploading a file. This is the first step in uploading a file to the content migration. See the File Upload Documentation for details on the file upload workflow.",
                  "disabled": false
                },
                {
                  "key": "pre_attachment[*]",
                  "value": "",
                  "description": "Other file upload properties, See File Upload Documentation",
                  "disabled": true
                },
                {
                  "key": "settings[file_url]",
                  "value": "",
                  "description": "A URL to download the file from. Must not require authentication.",
                  "disabled": true
                },
                {
                  "key": "settings[content_export_id]",
                  "value": "",
                  "description": "The id of a ContentExport to import. This allows you to import content previously exported from Canvas without needing to download and re-upload it.",
                  "disabled": true
                },
                {
                  "key": "settings[source_course_id]",
                  "value": "",
                  "description": "The course to copy from for a course copy migration. (required if doing course copy)",
                  "disabled": false
                },
                {
                  "key": "settings[folder_id]",
                  "value": "",
                  "description": "The folder to unzip the .zip file into for a zip_file_import.",
                  "disabled": true
                },
                {
                  "key": "settings[overwrite_quizzes]",
                  "value": "",
                  "description": "Whether to overwrite quizzes with the same identifiers between content packages.",
                  "disabled": true
                },
                {
                  "key": "settings[question_bank_id]",
                  "value": "",
                  "description": "The existing question bank ID to import questions into if not specified in the content package.",
                  "disabled": true
                },
                {
                  "key": "settings[question_bank_name]",
                  "value": "",
                  "description": "The question bank to import questions into if not specified in the content package, if both bank id and name are set, id will take precedence.",
                  "disabled": true
                },
                {
                  "key": "settings[insert_into_module_id]",
                  "value": "",
                  "description": "The id of a module in the target course. This will add all imported items (that can be added to a module) to the given module.",
                  "disabled": true
                },
                {
                  "key": "settings[insert_into_module_type]",
                  "value": "",
                  "description": "If provided (and insert_into_module_id is supplied), only add objects of the specified type to the module.Allowed values: assignment, discussion_topic, file, page, quiz",
                  "disabled": true
                },
                {
                  "key": "settings[insert_into_module_position]",
                  "value": "",
                  "description": "The (1-based) position to insert the imported items into the course (if insert_into_module_id is supplied). If this parameter is omitted, items will be added to the end of the module.",
                  "disabled": true
                },
                {
                  "key": "settings[move_to_assignment_group_id]",
                  "value": "",
                  "description": "The id of an assignment group in the target course. If provided, all imported assignments will be moved to the given assignment group.",
                  "disabled": true
                },
                {
                  "key": "settings[import_blueprint_settings]",
                  "value": "",
                  "description": "Import the “use as blueprint course” setting as well as the list of locked items from the source course or package. The destination course must not be associated with an existing blueprint course and cannot have any student or observer enrollments.",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[shift_dates]",
                  "value": "",
                  "description": "Whether to shift dates in the copied course",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[day_substitutions][X]",
                  "value": "",
                  "description": "Move anything scheduled for day ‘X’ to the specified day. (0-Sunday, 1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[remove_dates]",
                  "value": "",
                  "description": "Whether to remove dates in the copied course. Cannot be used in conjunction with shift_dates.",
                  "disabled": true
                },
                {
                  "key": "selective_import",
                  "value": "",
                  "description": "If set, perform a selective import instead of importing all content. The migration will identify the contents of the package and then stop in the waiting_for_select workflow state. At this point, use the List items endpoint to enumerate the contents of the package, identifying the copy parameters for the desired content. Then call the Update endpoint and provide these copy parameters to start the import.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a content migration. If the migration requires a file to be uploaded the actual processing of the file will start once the file upload process is completed. File uploading works as described in the [File Upload Documentation](../basics/file.file_uploads) except that the values are set on a **pre\\_attachment** sub-hash. For migrations that don’t require a file to be uploaded, like course copy, the processing will begin as soon as the migration is created. You can use the [Progress API](../progress#method.progress.show) to track the progress of the migration. The migration’s progress is linked to with the _progress\\_url_ value. The two general workflows are: If no file upload is needed: 1. POST to create 2. Use the [Progress](../progress#method.progress.show) specified in _progress\\_url_ to monitor progress For file uploading: 1. POST to create with file info in **pre\\_attachment** 2. Do [file upload processing](../basics/file.file_uploads) using the data in the **pre\\_attachment** data 3. [GET](#method.content_migrations.show) the ContentMigration 4. Use the [Progress](../progress#method.progress.show) specified in _progress\\_url_ to monitor progress ``` (required if doing .zip file upload) ```\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/content_migrations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "migration_type",
                  "value": "",
                  "description": "The type of the migration. Use the Migrator endpoint to see all available migrators. Default allowed values: canvas_cartridge_importer, common_cartridge_importer, course_copy_importer, zip_file_importer, qti_converter, moodle_converter",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "settings[importer_skips]",
                  "value": "",
                  "description": "Set of importers to skip, even if otherwise selected by migration settings.Allowed values: all_course_settings, visibility_settings",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[old_start_date]",
                  "value": "",
                  "description": "The original start date of the source content/course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[old_end_date]",
                  "value": "",
                  "description": "The original end date of the source content/course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[new_start_date]",
                  "value": "",
                  "description": "The new start date for the content/course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "date_shift_options[new_end_date]",
                  "value": "",
                  "description": "The new end date for the source content/course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "select",
                  "value": "",
                  "description": "For course_copy_importer migrations, this parameter allows you to select the objects to copy without using the selective_import argument and waiting_for_select state as is required for uploaded imports (though that workflow is also supported for course copy migrations). The keys are object types like ‘files’, ‘folders’, ‘pages’, etc. The value for each key is a list of object ids. An id can be an integer or a string. Multiple object types can be selected in the same call.Allowed values: folders, files, attachments, quizzes, assignments, announcements, calendar_events, discussion_topics, modules, module_items, pages, rubrics",
                  "type": "text",
                  "disabled": false
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Migration_Issues",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Put Accounts Content_Migrations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/content_migrations/:id`"
          }
        },
        {
          "name": "Put Courses Migration_Issues",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Put Courses Content_Migrations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/content_migrations/:id`"
          }
        },
        {
          "name": "Put Groups Migration_Issues",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id`"
          }
        },
        {
          "name": "Put Groups Content_Migrations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/content_migrations/:id`"
          }
        },
        {
          "name": "Put Users Migration_Issues",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":content_migration_id",
                "migration_issues",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "content_migration_id",
                  "value": "<content_migration_id>",
                  "description": "The content_migration_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update the workflow\\_state of a migration issue\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "Set the workflow_state of the issue.Allowed values: active, resolved",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Content_Migrations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_migrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_migrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update a content migration. Takes same arguments as [create](#method.content_migrations.create) except that you can’t change the migration type. However, changing most settings after the migration process has started will not do anything. Generally updating the content migration will be used when there is a file upload problem, or when importing content selectively. If the first upload has a problem you can supply new _pre\\_attachment_ values to start the process again. Returns a [ContentMigration](#contentmigration) object. ### [List Migration Systems](#method.content_migrations.available_migrators) <a href=\"#method.content_migrations.available_migrators\" id=\"method.content_migrations.available_migrators\"></a> [ContentMigrationsController#available\\_migrators](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb)\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/content_migrations/:id`"
          }
        }
      ]
    },
    {
      "name": "Content Security Policy Settings",
      "description": "{% hint style=\"warning\" %} BETA: This API resource is not finalized, and there could be breaking changes before its final release. {% endhint %} API for enabling/disabling the use of Content Security Policy headers and configuring allowed domains",
      "item": [
        {
          "name": "Delete Accounts Domains",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings/domains",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings",
                "domains"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "domain",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Removes an allowed domain from the current account.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/csp_settings/domains`"
          }
        },
        {
          "name": "Get Accounts Csp_Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Update multiple modules in an account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/csp_settings`"
          }
        },
        {
          "name": "Get Courses Csp_Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/csp_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "csp_settings"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/csp_settings`"
          }
        },
        {
          "name": "Post Accounts Domains",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings/domains",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings",
                "domains"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Adds an allowed domain for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/csp_settings/domains`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "domain",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Accounts Batch_Create",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings/domains/batch_create",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings",
                "domains",
                "batch_create"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Adds multiple allowed domains for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/csp_settings/domains/batch_create`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "domains",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Csp_Settings",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Either explicitly sets CSP to be on or off for courses and sub-accounts, or clear the explicit settings to default to those set by a parent account Note: If “inherited” and “settings\\_locked” are both true for this account or course, then the CSP setting cannot be modified.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/csp_settings`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "status",
                  "value": "",
                  "description": "If set to “enabled” for an account, CSP will be enabled for all its courses and sub-accounts (that have not explicitly enabled or disabled it), using the allowed domains set on this account. If set to “disabled”, CSP will be disabled for this account or course and for all sub-accounts that have not explicitly re-enabled it. If set to “inherited”, this account or course will reset to the default state where CSP settings are inherited from the first parent account to have them explicitly set.Allowed values: enabled, disabled, inherited",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Lock",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/csp_settings/lock",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "csp_settings",
                "lock"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. “inherited” is false).\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/csp_settings/lock`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "settings_locked",
                  "value": "",
                  "description": "Whether sub-accounts and courses will be prevented from overriding settings inherited from this account.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Csp_Settings",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/csp_settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "csp_settings"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/csp_settings`"
          }
        }
      ]
    },
    {
      "name": "Content Shares",
      "description": "API for creating, accessing and updating Content Sharing. Content shares are used to share content directly between users.",
      "item": [
        {
          "name": "Delete Users Content_Shares",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Remove a content share from your list. Use `self` as the user\\_id. Note that this endpoint does not delete other users’ copies of the content share.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/content_shares/:id`"
          }
        },
        {
          "name": "Get Users Content_Shares",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Return information about a single content share. You may use `self` as the user\\_id to retrieve your own content share.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_shares/:id`"
          }
        },
        {
          "name": "Get Users Received",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/received",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                "received"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return a paginated list of content shares a user has sent or received. Use `self` as the user\\_id to retrieve your own content shares. Only linked observers and administrators may view other users’ content shares.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_shares/received`"
          }
        },
        {
          "name": "Get Users Sent",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/sent",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                "sent"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_shares/sent`"
          }
        },
        {
          "name": "Get Users Unread_Count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/unread_count",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                "unread_count"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return the number of content shares a user has received that have not yet been read. Use `self` as the user\\_id to retrieve your own content shares. Only linked observers and administrators may view other users’ content shares.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_shares/unread_count`"
          }
        },
        {
          "name": "Post Users Content_Shares",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Share content directly between two or more users\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/content_shares`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "receiver_ids",
                  "value": "",
                  "description": "IDs of users to share the content with.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "content_type",
                  "value": "",
                  "description": "Type of content you are sharing.Allowed values: assignment, discussion_topic, page, quiz, module, module_item",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "content_id",
                  "value": "",
                  "description": "The id of the content that you are sharing",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Users Add_Users",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/:id/add_users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                ":id",
                "add_users"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Send a previously created content share to additional users\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/content_shares/:id/add_users`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "receiver_ids",
                  "value": "",
                  "description": "IDs of users to share the content with.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Content_Shares",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_shares/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_shares",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "read_state",
                  "value": "",
                  "description": "Read state for the content shareAllowed values: read, unread",
                  "disabled": true
                }
              ]
            },
            "description": "Mark a content share read or unread\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/content_shares/:id`"
          }
        }
      ]
    },
    {
      "name": "Conversations",
      "description": "API for creating, accessing and updating user conversations.",
      "item": [
        {
          "name": "Delete Conversations",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete this conversation and its messages. Note that this only deletes this user’s view of the conversation. Response includes same fields as UPDATE action\n\n**OAuth Scope:** `url:DELETE|/api/v1/conversations/:id`"
          }
        },
        {
          "name": "List Conversations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations"
              ],
              "query": [
                {
                  "key": "scope",
                  "value": "",
                  "description": "When set, only return conversations of the specified type. For example, set to “unread” to return only conversations that haven’t been read. The default behavior is to return all non-archived conversations (i.e. read and unread).Allowed values: unread, starred, archived, sent",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "When set, only return conversations for the specified courses, groups or users. The id should be prefixed with its type, e.g. “user_123”,",
                  "disabled": true
                },
                {
                  "key": "filter_mode",
                  "value": "",
                  "description": "When filter[] contains multiple filters, combine them with this mode, filtering conversations that at have at least all of the contexts (“and”) or at least one of the contexts (“or”)Allowed values: and, or, default or",
                  "disabled": true
                },
                {
                  "key": "interleave_submissions",
                  "value": "",
                  "description": "(Obsolete) Submissions are no longer linked to conversations. This parameter is ignored.",
                  "disabled": true
                },
                {
                  "key": "include_all_conversation_ids",
                  "value": "",
                  "description": "Default is false. If true, the top-level element of the response will be an object rather than an array, and will have the keys “conversations” which will contain the paged conversation data, and “conversation_ids” which will contain the ids of all conversations under this scope/filter in the same order.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“participant_avatars”Optionally include an “avatar_url” key for each user participating in the conversation“uuid”Optionally include an “uuid” key for each user participating in the conversationAllowed values: participant_avatars, uuid",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of conversations for the current user, most recent ones first. ``` \"uuid:W9GQIcdoDTqwX8mxIunDQQVL6WZTaGmpa5xovmCB\", or \"course_456\". For users, you can use either their numeric ID or UUID prefixed with \"uuid:\". Can be an array (by setting \"filter[]\") or single value (by setting \"filter\") ```\n\n**OAuth Scope:** `url:GET|/api/v1/conversations`"
          }
        },
        {
          "name": "List Conversations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "interleave_submissions",
                  "value": "",
                  "description": "(Obsolete) Submissions are no longer linked to conversations. This parameter is ignored.",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API action",
                  "disabled": true
                },
                {
                  "key": "filter_mode",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or",
                  "disabled": true
                },
                {
                  "key": "auto_mark_as_read",
                  "value": "",
                  "description": "Default true. If true, unread conversations will be automatically marked as read. This will default to false in a future API release, so clients should explicitly send true if that is the desired behavior.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns information for a single conversation for the current user. Response includes all fields that are present in the list/index action as well as messages and extended participant information.\n\n**OAuth Scope:** `url:GET|/api/v1/conversations/:id`"
          }
        },
        {
          "name": "Get Conversations Batches",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/batches",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                "batches"
              ]
            },
            "description": "Returns any currently running conversation batches for the current user. Conversation batches are created when a bulk private message is sent asynchronously (see the mode argument to the [create API action](#method.conversations.create)).\n\n**OAuth Scope:** `url:GET|/api/v1/conversations/batches`"
          }
        },
        {
          "name": "Get Conversations Find_Recipients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/find_recipients",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                "find_recipients"
              ]
            },
            "description": "Deprecated, see the [Find recipients endpoint](../search#method.search.recipients) in the Search API ### [Unread count](#method.conversations.unread_count) <a href=\"#method.conversations.unread_count\" id=\"method.conversations.unread_count\"></a> [ConversationsController#unread\\_count](https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/conversations/find_recipients`"
          }
        },
        {
          "name": "Get Conversations Unread_Count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/unread_count",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                "unread_count"
              ]
            },
            "description": "Get the number of unread conversations for the current user\n\n**OAuth Scope:** `url:GET|/api/v1/conversations/unread_count`"
          }
        },
        {
          "name": "Create Conversations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations"
              ],
              "query": [
                {
                  "key": "subject",
                  "value": "",
                  "description": "The subject of the conversation. This is ignored when reusing a conversation. Maximum length is 255 characters.",
                  "disabled": true
                },
                {
                  "key": "force_new",
                  "value": "",
                  "description": "Forces a new message to be created, even if there is an existing private conversation.",
                  "disabled": true
                },
                {
                  "key": "group_conversation",
                  "value": "",
                  "description": "Defaults to false. When false, individual private conversations will be created with each recipient. If true, this will be a group conversation (i.e. all recipients may see all messages and replies). Must be set true if the number of recipients is over the set maximum (default is 100).",
                  "disabled": true
                },
                {
                  "key": "attachment_ids[]",
                  "value": "",
                  "description": "An array of attachments ids. These must be files that have been previously uploaded to the sender’s “conversation attachments” folder.",
                  "disabled": true
                },
                {
                  "key": "media_comment_id",
                  "value": "",
                  "description": "Media comment id of an audio or video file to be associated with this message.",
                  "disabled": true
                },
                {
                  "key": "media_comment_type",
                  "value": "",
                  "description": "Type of the associated media fileAllowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "mode",
                  "value": "",
                  "description": "Determines whether the messages will be created/sent synchronously or asynchronously. Defaults to sync, and this option is ignored if this is a group conversation or there is just one recipient (i.e. it must be a bulk private message). When sent async, the response will be an empty array (batch status can be queried via the batches API)Allowed values: sync, async",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API action",
                  "disabled": true
                },
                {
                  "key": "filter_mode",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or",
                  "disabled": true
                },
                {
                  "key": "context_code",
                  "value": "",
                  "description": "The course or group that is the context for this conversation. Same format as courses or groups in the recipients argument.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“uuid”Optionally include an “uuid” key for each user participating in the conversationAllowed values: uuid",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new conversation with one or more recipients. If there is already an existing private conversation with the given recipients, it will be reused. ``` (either numeric IDs or UUIDs prefixed with \"uuid:\"), or course/group ids prefixed with \"course_\" or \"group_\" respectively, e.g. recipients[]=1&recipients[]=uuid:W9GQIcdoDTqwX8mxIunDQQVL6WZTaGmpa5xovmCBx&recipients[]=course_3. If the course/group has over 100 enrollments, 'bulk_message' and 'group_conversation' must be set to true. ```\n\n**OAuth Scope:** `url:POST|/api/v1/conversations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "recipients[]",
                  "value": "",
                  "description": "An array of recipient ids. These may be user ids",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "body",
                  "value": "",
                  "description": "The message to be sent",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Conversations Add_Message",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id/add_message",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id",
                "add_message"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "attachment_ids[]",
                  "value": "",
                  "description": "An array of attachments ids. These must be files that have been previously uploaded to the sender’s “conversation attachments” folder.",
                  "disabled": true
                },
                {
                  "key": "media_comment_id",
                  "value": "",
                  "description": "Media comment id of an audio of video file to be associated with this message.",
                  "disabled": true
                },
                {
                  "key": "media_comment_type",
                  "value": "",
                  "description": "Type of the associated media file.Allowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "recipients[]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "included_messages[]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Add a message to an existing conversation. Response is similar to the GET/show action, except that only includes the latest message (i.e. what we just sent) An array of user ids. Defaults to all of the current conversation recipients. To explicitly send a message to no other recipients, this array should consist of the logged-in user id. An array of message ids from this conversation to send to recipients of the new message. Recipients who already had a copy of included messages will not be affected.\n\n**OAuth Scope:** `url:POST|/api/v1/conversations/:id/add_message`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "body",
                  "value": "",
                  "description": "The message to be sent.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Conversations Add_Recipients",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id/add_recipients",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id",
                "add_recipients"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Add recipients to an existing group conversation. Response is similar to the GET/show action, except that only includes the latest message (e.g. “joe was added to the conversation by bob”)\n\n**OAuth Scope:** `url:POST|/api/v1/conversations/:id/add_recipients`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "recipients[]",
                  "value": "",
                  "description": "An array of recipient ids. These may be user ids or course/group ids prefixed with “course_” or “group_” respectively, e.g. recipients[]=1\\&recipients=2\\&recipients[]=course_3",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Conversations Remove_Messages",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id/remove_messages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id",
                "remove_messages"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete messages from this conversation. Note that this only affects this user’s view of the conversation. If all messages are deleted, the conversation will be as well (equivalent to DELETE)\n\n**OAuth Scope:** `url:POST|/api/v1/conversations/:id/remove_messages`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "remove[]",
                  "value": "",
                  "description": "Array of message ids to be deleted",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Conversations Mark_All_As_Read",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/mark_all_as_read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                "mark_all_as_read"
              ]
            },
            "description": "Mark all conversations as read. ### [Delete a conversation](#method.conversations.destroy) <a href=\"#method.conversations.destroy\" id=\"method.conversations.destroy\"></a> [ConversationsController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/conversations/mark_all_as_read`"
          }
        },
        {
          "name": "Update Conversations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations"
              ]
            },
            "description": "Perform a change on a set of conversations. Operates asynchronously; use the [progress endpoint](../progress#method.progress.show) to query the status of an operation.\n\n**OAuth Scope:** `url:PUT|/api/v1/conversations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "conversation_ids[]",
                  "value": "",
                  "description": "List of conversations to update. Limited to 500 conversations.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "event",
                  "value": "",
                  "description": "The action to take on each conversation.Allowed values: mark_as_read, mark_as_unread, star, unstar, archive, destroy",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Conversations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "conversation[workflow_state]",
                  "value": "",
                  "description": "Change the state of this conversationAllowed values: read, unread, archived",
                  "disabled": true
                },
                {
                  "key": "conversation[subscribed]",
                  "value": "",
                  "description": "Toggle the current user’s subscription to the conversation (only valid for group conversations). If unsubscribed, the user will still have access to the latest messages, but the conversation won’t be automatically flagged as unread, nor will it jump to the top of the inbox.",
                  "disabled": true
                },
                {
                  "key": "conversation[starred]",
                  "value": "",
                  "description": "Toggle the starred state of the current user’s view of the conversation.",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API action",
                  "disabled": true
                },
                {
                  "key": "filter_mode",
                  "value": "",
                  "description": "Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or",
                  "disabled": true
                }
              ]
            },
            "description": "Updates attributes for a single conversation.\n\n**OAuth Scope:** `url:PUT|/api/v1/conversations/:id`"
          }
        }
      ]
    },
    {
      "name": "Course Audit log",
      "description": "Query audit log of course events. For each endpoint, a compound document is returned. The primary collection of event objects is paginated, ordered by date descending. Secondary collections of courses, users and page\\_views related to the returned events are also included. The event data for `ConcludedEventData`, `UnconcludedEventData`, `PublishedEventData`, `UnpublishedEventData`, `DeletedEventData`, `RestoredEventData`, `ResetFromEventData`, `ResetToEventData`, `CopiedFromEventData`, and `CopiedToEventData` objects will return a empty objects as these do not have any additional log data associated.",
      "item": [
        {
          "name": "Get Audit Accounts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/course/accounts/:account_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "course",
                "accounts",
                ":account_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List course change events for a given account.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/course/accounts/:account_id`"
          }
        },
        {
          "name": "Get Audit Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/course/courses/:course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "course",
                "courses",
                ":course_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List course change events for a given course.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/course/courses/:course_id`"
          }
        }
      ]
    },
    {
      "name": "Course Pace",
      "description": "API for accessing and building Course Paces.",
      "item": [
        {
          "name": "Delete Courses Course_Pacing",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_pacing/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_pacing",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "disabled": true
                },
                {
                  "key": "course_pace_id",
                  "value": "",
                  "description": "The id of the course_pace",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the updated course pace\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/course_pacing/:id`"
          }
        },
        {
          "name": "Get Courses Course_Pacing",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_pacing/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_pacing",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "disabled": true
                },
                {
                  "key": "course_pace_id",
                  "value": "",
                  "description": "The id of the course_pace",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a course pace for the course and pace id provided\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/course_pacing/:id`"
          }
        },
        {
          "name": "Post Courses Course_Pacing",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_pacing",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_pacing"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "end_date_context",
                  "value": "",
                  "description": "End date context (course, section, hupothetical)",
                  "disabled": true
                },
                {
                  "key": "start_date_context",
                  "value": "",
                  "description": "Start date context (course, section, hupothetical)",
                  "disabled": true
                },
                {
                  "key": "exclude_weekends",
                  "value": "",
                  "description": "Course pace dates excludes weekends if true",
                  "disabled": true
                },
                {
                  "key": "selected_days_to_skip",
                  "value": "",
                  "description": "ArrayCourse pace dates excludes weekends if true",
                  "disabled": true
                },
                {
                  "key": "hard_end_dates",
                  "value": "",
                  "description": "Course pace uess hard end dates if true",
                  "disabled": true
                },
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The state of the course pace",
                  "disabled": true
                },
                {
                  "key": "course_pace_module_item_attributes[]",
                  "value": "",
                  "description": "Module Items attributes",
                  "disabled": true
                },
                {
                  "key": "context_id",
                  "value": "",
                  "description": "Pace Context ID",
                  "disabled": true
                },
                {
                  "key": "context_type",
                  "value": "",
                  "description": "Pace Context Type (Course, Section, User)",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new course pace with specified parameters.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/course_pacing`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End date of the course pace",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start date of the course pace",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Course_Pacing",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_pacing/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_pacing",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "exclude_weekends",
                  "value": "",
                  "description": "Course pace dates excludes weekends if true",
                  "disabled": true
                },
                {
                  "key": "selected_days_to_skip",
                  "value": "",
                  "description": "ArrayCourse pace dates excludes weekends if true",
                  "disabled": true
                },
                {
                  "key": "hard_end_dates",
                  "value": "",
                  "description": "Course pace uess hard end dates if true",
                  "disabled": true
                },
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The state of the course pace",
                  "disabled": true
                },
                {
                  "key": "course_pace_module_item_attributes[]",
                  "value": "",
                  "description": "Module Items attributes",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the updated course pace\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/course_pacing/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course_pace_id",
                  "value": "",
                  "description": "The id of the course pace",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End date of the course pace",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Course Quiz Extensions",
      "description": "API for setting extensions on student quiz submissions at the course level",
      "item": [
        {
          "name": "Post Courses Quiz_Extensions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quiz_extensions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quiz_extensions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "extra_attempts",
                  "value": "",
                  "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.",
                  "disabled": true
                },
                {
                  "key": "extra_time",
                  "value": "",
                  "description": "The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)",
                  "disabled": true
                },
                {
                  "key": "manually_unlocked",
                  "value": "",
                  "description": "Allow the student to take the quiz even if it’s locked for everyone else.",
                  "disabled": true
                },
                {
                  "key": "extend_from_now",
                  "value": "",
                  "description": "The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)",
                  "disabled": true
                },
                {
                  "key": "extend_from_end_at",
                  "value": "",
                  "description": "The number of minutes to extend the quiz beyond the quiz’s current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)",
                  "disabled": true
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quiz_extensions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The ID of the user we want to add quiz extensions for.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Course Reports",
      "description": "API for accessing course reports.",
      "item": [
        {
          "name": "Get Courses Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/reports/:report_type",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "reports",
                ":report_type"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "report_type",
                  "value": "<report_type>",
                  "description": "The report_type identifier"
                }
              ]
            },
            "description": "Returns the status of the last report initiated by the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/reports/:report_type`"
          }
        },
        {
          "name": "Get Courses Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/reports/:report_type/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "reports",
                ":report_type",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "report_type",
                  "value": "<report_type>",
                  "description": "The report_type identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the status of a report.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/reports/:report_type/:id`"
          }
        },
        {
          "name": "Post Courses Reports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/reports/:report_type",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "reports",
                ":report_type"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "report_type",
                  "value": "<report_type>",
                  "description": "The report_type identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course to report on.",
                  "disabled": true
                },
                {
                  "key": "report_type",
                  "value": "",
                  "description": "The type of report to generate.",
                  "disabled": true
                },
                {
                  "key": "parameters[section_ids[]]",
                  "value": "",
                  "description": "The sections of the course to report on. Note: this parameter has been listed to serve as an example and may not be valid for every report.",
                  "disabled": true
                }
              ]
            },
            "description": "Generates a report instance for the account. Note that “report” in the request must match one of the available report names.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/reports/:report_type`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "parameters[]",
                  "value": "",
                  "description": "The parameters will vary for each report. A few example parameters have been provided below. Note: the example parameters provided below may not be valid for every report.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Courses",
      "description": "API for accessing course information.",
      "item": [
        {
          "name": "Delete Courses",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "event",
                  "value": "",
                  "description": "The action to take on the course.Allowed values: delete, conclude",
                  "disabled": true
                }
              ]
            },
            "description": "Delete or conclude an existing course\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:id`"
          }
        },
        {
          "name": "Get Accounts Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“all_courses”: Also search recently deleted courses.“permissions”: Include permissions the current user has for the course.“observed_users”: Include observed users in the enrollments“course_image”: Include course image url if a course image has been set“banner_image”: Include course banner image url if the course is a Canvas for Elementary subject and a banner image has been set“concluded”: Optional information to include with Course. Indicates whether the course has been concluded, taking course and term dates into account.“lti_context_id”: Include course LTI tool id.“post_manually”: Include course post policy. If the post policy is manually post grades, the value will be true. If the post policy is automatically post grades, the value will be false.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, all_courses, permissions, course_image, banner_image, concluded, lti_context_id, post_manually",
                  "disabled": true
                },
                {
                  "key": "teacher_limit",
                  "value": "",
                  "description": "The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a teacher_count key.",
                  "disabled": true
                }
              ]
            },
            "description": "Return information on a single course. Accepts the same include\\[] parameters as the list action plus:\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/courses/:id`"
          }
        },
        {
          "name": "List Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses"
              ],
              "query": [
                {
                  "key": "enrollment_type",
                  "value": "",
                  "description": "When set, only return courses where the user is enrolled as this type. For example, set to “teacher” to return only courses where the user is enrolled as a Teacher. This argument is ignored if enrollment_role is given.Allowed values: teacher, student, ta, observer, designer",
                  "disabled": true
                },
                {
                  "key": "enrollment_role",
                  "value": "",
                  "description": "Deprecated When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a base role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.",
                  "disabled": true
                },
                {
                  "key": "enrollment_role_id",
                  "value": "",
                  "description": "When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a built_in role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.",
                  "disabled": true
                },
                {
                  "key": "enrollment_state",
                  "value": "",
                  "description": "When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.Allowed values: active, invited_or_pending, completed",
                  "disabled": true
                },
                {
                  "key": "exclude_blueprint_courses",
                  "value": "",
                  "description": "When set, only return courses that are not configured as blueprint courses.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“needs_grading_count”: Optional information to include with each Course. When needs_grading_count is given, and the current user has grading rights, the total number of submissions needing grading for all assignments is returned.“syllabus_body”: Optional information to include with each Course. When syllabus_body is given the user-generated html for the course syllabus is returned.“public_description”: Optional information to include with each Course. When public_description is given the user-generated text for the course public description is returned.“total_scores”: Optional information to include with each Course. When total_scores is given, any student enrollments will also include the fields ‘computed_current_score’, ‘computed_final_score’, ‘computed_current_grade’, and ‘computed_final_grade’, as well as (if the user has permission) ‘unposted_current_score’, ‘unposted_final_score’, ‘unposted_current_grade’, and ‘unposted_final_grade’ (see Enrollment documentation for more information on these fields). This argument is ignored if the course is configured to hide final grades.“current_grading_period_scores”: Optional information to include with each Course. When current_grading_period_scores is given and total_scores is given, any student enrollments will also include the fields ‘has_grading_periods’, ‘totals_for_all_grading_periods_option’, ‘current_grading_period_title’, ‘current_grading_period_id’, current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, and ‘current_period_computed_final_grade’, as well as (if the user has permission) ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’ (see Enrollment documentation for more information on these fields). In addition, when this argument is passed, the course will have a ‘has_grading_periods’ attribute on it. This argument is ignored if the total_scores argument is not included. If the course is configured to hide final grades, the following fields are not returned: ‘totals_for_all_grading_periods_option’, ‘current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, ‘current_period_computed_final_grade’, ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’“grading_periods”: Optional information to include with each Course. When grading_periods is given, a list of the grading periods associated with each course is returned.“term”: Optional information to include with each Course. When term is given, the information for the enrollment term for each course is returned.“account”: Optional information to include with each Course. When account is given, the account json for each course is returned.“course_progress”: Optional information to include with each Course. When course_progress is given, each course will include a ‘course_progress’ object with the fields: ‘requirement_count’, an integer specifying the total number of requirements in the course, ‘requirement_completed_count’, an integer specifying the total number of requirements in this course that have been completed, and ‘next_requirement_url’, a string url to the next requirement item, and ‘completed_at’, the date the course was completed (null if incomplete). ‘next_requirement_url’ will be null if all requirements have been completed or the current module does not require sequential progress. “course_progress” will return an error message if the course is not module based or the user is not enrolled as a student in the course.“sections”: Section enrollment information to include with each Course. Returns an array of hashes containing the section ID (id), section name (name), start and end dates (start_at, end_at), as well as the enrollment type (enrollment_role, e.g. ‘StudentEnrollment’).“storage_quota_used_mb”: The amount of storage space used by the files in this course“total_students”: Optional information to include with each Course. Returns an integer for the total amount of active and invited students.“passback_status”: Include the grade passback_status“favorites”: Optional information to include with each Course. Indicates if the user has marked the course as a favorite course.“teachers”: Teacher information to include with each Course. Returns an array of hashes containing the UserDisplay information for each teacher in the course.“observed_users”: Optional information to include with each Course. Will include data for observed users if the current user has an observer enrollment.“tabs”: Optional information to include with each Course. Will include the list of tabs configured for each course. See the List available tabs API for more information.“course_image”: Optional information to include with each Course. Returns course image url if a course image has been set.“banner_image”: Optional information to include with each Course. Returns course banner image url if the course is a Canvas for Elementary subject and a banner image has been set.“concluded”: Optional information to include with each Course. Indicates whether the course has been concluded, taking course and term dates into account.“post_manually”: Optional information to include with each Course. Returns true if the course post policy is set to Manually post grades. Returns false if the the course post policy is set to Automatically post grades.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, grading_periods, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, course_image, banner_image, concluded, post_manually",
                  "disabled": true
                },
                {
                  "key": "state[]",
                  "value": "",
                  "description": "If set, only return courses that are in the given state(s). By default, “available” is returned for students and observers, and anything except “deleted”, for all other enrollment typesAllowed values: unpublished, available, completed, deleted",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of active courses for the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses`"
          }
        },
        {
          "name": "Get Courses Activity_Stream",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/activity_stream",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "activity_stream"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the current user’s course-specific activity stream, paginated. For full documentation, see the API documentation for the user activity stream, in the user api. ### [Course activity stream summary](#method.courses.activity_stream_summary) <a href=\"#method.courses.activity_stream_summary\" id=\"method.courses.activity_stream_summary\"></a> [CoursesController#activity\\_stream\\_summary](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/activity_stream`"
          }
        },
        {
          "name": "Get Courses Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/activity_stream/summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "activity_stream",
                "summary"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns a summary of the current user’s course-specific activity stream. For full documentation, see the API documentation for the user activity stream summary, in the user api. ### [Course TODO items](#method.courses.todo_items) <a href=\"#method.courses.todo_items\" id=\"method.courses.todo_items\"></a> [CoursesController#todo\\_items](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/activity_stream/summary`"
          }
        },
        {
          "name": "Get Courses Bulk_User_Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/bulk_user_progress",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "bulk_user_progress"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns progress information for all users enrolled in the given course. You must be a user who has permission to view all grades in the course (such as a teacher or administrator).\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/bulk_user_progress`"
          }
        },
        {
          "name": "Get Courses Content_Share_Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_share_users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_share_users"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "Term used to find users. Will search available share users with the search term in their name.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of users you can share content with. Requires the content share feature and the user must have the manage content permission for the course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_share_users`"
          }
        },
        {
          "name": "Get Courses Course_Copy",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_copy/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_copy",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "DEPRECATED: Please use the [Content Migrations API](../content_migrations#method.content_migrations.create) Retrieve the status of a course copy\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/course_copy/:id`"
          }
        },
        {
          "name": "Get Courses Effective_Due_Dates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/effective_due_dates",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "effective_due_dates"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_ids[]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "For each assignment in the course, returns each assigned student’s ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student’s effective due\\_at, the grading\\_period\\_id of which the due\\_at falls in, and whether or not the grading period is closed (in\\_closed\\_grading\\_period) The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/effective_due_dates`"
          }
        },
        {
          "name": "Get Courses Permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/permissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "permissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "permissions[]",
                  "value": "",
                  "description": "List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns permission information for the calling user in the given course. See also the [Account](../accounts#method.accounts.permissions) and [Group](../groups#method.groups.permissions) counterparts.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/permissions`"
          }
        },
        {
          "name": "Get Courses Recent_Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/recent_students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "recent_students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the ‘last\\_login’ field which contains a timestamp of the last time that user logged into canvas. The querying user must have the ‘View usage reports’ permission.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/recent_students`"
          }
        },
        {
          "name": "Get Courses Search_Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/search_users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "search_users"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name or full ID of the users to match and return in the results list.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "",
                  "description": "When set, sort the results of the search based on the given field.Allowed values: username, last_login, email, sis_id",
                  "disabled": true
                },
                {
                  "key": "enrollment_type[]",
                  "value": "",
                  "description": "When set, only return users where the user is enrolled as this type. “student_view” implies include[]=test_student. This argument is ignored if enrollment_role is given.Allowed values: teacher, student, student_view, ta, observer, designer",
                  "disabled": true
                },
                {
                  "key": "enrollment_role",
                  "value": "",
                  "description": "Deprecated When set, only return users enrolled with the specified course-level role. This can be a role created with the Add Role API or a base role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.",
                  "disabled": true
                },
                {
                  "key": "enrollment_role_id",
                  "value": "",
                  "description": "When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a built_in role id with type ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“enrollments”:Optionally include with each Course the user’s current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a ‘grades’ key with ‘current_score’, ‘final_score’, ‘current_grade’ and ‘final_grade’ values.“locked”: Optionally include whether an enrollment is locked.“avatar_url”: Optionally include avatar_url.“bio”: Optionally include each user’s bio.“test_student”: Optionally include the course’s Test Student,if present. Default is to not include Test Student.“custom_links”: Optionally include plugin-supplied custom links for each student,such as analytics information“current_grading_period_scores”: if enrollments is included aswell as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A ‘grading_period_id’ value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score.“uuid”: Optionally include the users uuidAllowed values: enrollments, locked, avatar_url, test_student, bio, custom_links, current_grading_period_scores, uuid",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "If this parameter is given and it corresponds to a user in the course, the page parameter will be ignored and the page containing the specified user will be returned instead.",
                  "disabled": true
                },
                {
                  "key": "user_ids[]",
                  "value": "",
                  "description": "If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the “user_id” argument but multiple user_ids can be included.",
                  "disabled": true
                },
                {
                  "key": "enrollment_state[]",
                  "value": "",
                  "description": "When set, only return users where the enrollment workflow state is of one of the given types. “active” and “invited” enrollments are returned by default.Allowed values: active, invited, rejected, completed, inactive",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of users in this course. And optionally the user’s enrollments in the course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/search_users`"
          }
        },
        {
          "name": "Get Courses Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "settings"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns some of a course’s settings.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/settings`"
          }
        },
        {
          "name": "Get Courses Student_View_Student",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/student_view_student",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "student_view_student"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course’s student view.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/student_view_student`"
          }
        },
        {
          "name": "Get Courses Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of students enrolled in this course. DEPRECATED: Please use the [course users](#method.courses.users) endpoint and pass “student” as the enrollment\\_type. Returns a list of [User](../users#user) objects. ### [List users in course](#method.courses.users) <a href=\"#method.courses.users\" id=\"method.courses.users\"></a> [CoursesController#users](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/students`"
          }
        },
        {
          "name": "Get Courses Todo",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/todo",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "todo"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the current user’s course-specific todo items. For full documentation, see the API documentation for the user todo items, in the user api. ### [Delete/Conclude a course](#method.courses.destroy) <a href=\"#method.courses.destroy\" id=\"method.courses.destroy\"></a> [CoursesController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/todo`"
          }
        },
        {
          "name": "Get Courses Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "users"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/users`"
          }
        },
        {
          "name": "Get Courses Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/users/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Return information on a single user. Accepts the same include\\[] parameters as the :users: action, and returns a single user with the same fields as that action. Returns an [User](../users#user) object. ### [Search for content share users](#method.courses.content_share_users) <a href=\"#method.courses.content_share_users\" id=\"method.courses.content_share_users\"></a> [CoursesController#content\\_share\\_users](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/users/:id`"
          }
        },
        {
          "name": "Get Courses Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/users/:user_id/progress",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "users",
                ":user_id",
                "progress"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return progress information for the user and course You can supply `self` as the user\\_id to query your own progress in a course. To query another user’s progress, you must be a teacher in the course, an administrator, or a linked observer of the user. Returns a [CourseProgress](#courseprogress) object. ### [Create a new course](#method.courses.create) <a href=\"#method.courses.create\" id=\"method.courses.create\"></a> [CoursesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/users/:user_id/progress`"
          }
        },
        {
          "name": "List Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:id`"
          }
        },
        {
          "name": "Get Users Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "courses"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“needs_grading_count”: Optional information to include with each Course. When needs_grading_count is given, and the current user has grading rights, the total number of submissions needing grading for all assignments is returned.“syllabus_body”: Optional information to include with each Course. When syllabus_body is given the user-generated html for the course syllabus is returned.“public_description”: Optional information to include with each Course. When public_description is given the user-generated text for the course public description is returned.“total_scores”: Optional information to include with each Course. When total_scores is given, any student enrollments will also include the fields ‘computed_current_score’, ‘computed_final_score’, ‘computed_current_grade’, and ‘computed_final_grade’ (see Enrollment documentation for more information on these fields). This argument is ignored if the course is configured to hide final grades.“current_grading_period_scores”: Optional information to include with each Course. When current_grading_period_scores is given and total_scores is given, any student enrollments will also include the fields ‘has_grading_periods’, ‘totals_for_all_grading_periods_option’, ‘current_grading_period_title’, ‘current_grading_period_id’, current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, and ‘current_period_computed_final_grade’, as well as (if the user has permission) ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’ (see Enrollment documentation for more information on these fields). In addition, when this argument is passed, the course will have a ‘has_grading_periods’ attribute on it. This argument is ignored if the course is configured to hide final grades or if the total_scores argument is not included.“grading_periods”: Optional information to include with each Course. When grading_periods is given, a list of the grading periods associated with each course is returned.“term”: Optional information to include with each Course. When term is given, the information for the enrollment term for each course is returned.“account”: Optional information to include with each Course. When account is given, the account json for each course is returned.“course_progress”: Optional information to include with each Course. When course_progress is given, each course will include a ‘course_progress’ object with the fields: ‘requirement_count’, an integer specifying the total number of requirements in the course, ‘requirement_completed_count’, an integer specifying the total number of requirements in this course that have been completed, and ‘next_requirement_url’, a string url to the next requirement item, and ‘completed_at’, the date the course was completed (null if incomplete). ‘next_requirement_url’ will be null if all requirements have been completed or the current module does not require sequential progress. “course_progress” will return an error message if the course is not module based or the user is not enrolled as a student in the course.“sections”: Section enrollment information to include with each Course. Returns an array of hashes containing the section ID (id), section name (name), start and end dates (start_at, end_at), as well as the enrollment type (enrollment_role, e.g. ‘StudentEnrollment’).“storage_quota_used_mb”: The amount of storage space used by the files in this course“total_students”: Optional information to include with each Course. Returns an integer for the total amount of active and invited students.“passback_status”: Include the grade passback_status“favorites”: Optional information to include with each Course. Indicates if the user has marked the course as a favorite course.“teachers”: Teacher information to include with each Course. Returns an array of hashes containing the UserDisplay information for each teacher in the course.“observed_users”: Optional information to include with each Course. Will include data for observed users if the current user has an observer enrollment.“tabs”: Optional information to include with each Course. Will include the list of tabs configured for each course. See the List available tabs API for more information.“course_image”: Optional information to include with each Course. Returns course image url if a course image has been set.“banner_image”: Optional information to include with each Course. Returns course banner image url if the course is a Canvas for Elementary subject and a banner image has been set.“concluded”: Optional information to include with each Course. Indicates whether the course has been concluded, taking course and term dates into account.“post_manually”: Optional information to include with each Course. Returns true if the course post policy is set to “Manually”. Returns false if the the course post policy is set to “Automatically”.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, grading_periods, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, course_image, banner_image, concluded, post_manually",
                  "disabled": true
                },
                {
                  "key": "state[]",
                  "value": "",
                  "description": "If set, only return courses that are in the given state(s). By default, “available” is returned for students and observers, and anything except “deleted”, for all other enrollment typesAllowed values: unpublished, available, completed, deleted",
                  "disabled": true
                },
                {
                  "key": "enrollment_state",
                  "value": "",
                  "description": "When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.Allowed values: active, invited_or_pending, completed",
                  "disabled": true
                },
                {
                  "key": "homeroom",
                  "value": "",
                  "description": "If set, only return homeroom courses.",
                  "disabled": true
                },
                {
                  "key": "account_id",
                  "value": "",
                  "description": "If set, only include courses associated with this account",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/courses`"
          }
        },
        {
          "name": "Post Accounts Courses",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "courses"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course[name]",
                  "value": "",
                  "description": "The name of the course. If omitted, the course will be named “Unnamed Course.”",
                  "disabled": true
                },
                {
                  "key": "course[course_code]",
                  "value": "",
                  "description": "The course code for the course.",
                  "disabled": true
                },
                {
                  "key": "course[license]",
                  "value": "",
                  "description": "The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference):‘private’ (Private Copyrighted)‘cc_by_nc_nd’ (CC Attribution Non-Commercial No Derivatives)‘cc_by_nc_sa’ (CC Attribution Non-Commercial Share Alike)‘cc_by_nc’ (CC Attribution Non-Commercial)‘cc_by_nd’ (CC Attribution No Derivatives)‘cc_by_sa’ (CC Attribution Share Alike)‘cc_by’ (CC Attribution)‘public_domain’ (Public Domain).",
                  "disabled": true
                },
                {
                  "key": "course[is_public]",
                  "value": "",
                  "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[is_public_to_auth_users]",
                  "value": "",
                  "description": "Set to true if course is public only to authenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[public_syllabus]",
                  "value": "",
                  "description": "Set to true to make the course syllabus public.",
                  "disabled": true
                },
                {
                  "key": "course[public_syllabus_to_auth]",
                  "value": "",
                  "description": "Set to true to make the course syllabus public for authenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[public_description]",
                  "value": "",
                  "description": "A publicly visible description of the course.",
                  "disabled": true
                },
                {
                  "key": "course[allow_student_wiki_edits]",
                  "value": "",
                  "description": "If true, students will be able to modify the course wiki.",
                  "disabled": true
                },
                {
                  "key": "course[allow_wiki_comments]",
                  "value": "",
                  "description": "If true, course members will be able to comment on wiki pages.",
                  "disabled": true
                },
                {
                  "key": "course[allow_student_forum_attachments]",
                  "value": "",
                  "description": "If true, students can attach files to forum posts.",
                  "disabled": true
                },
                {
                  "key": "course[open_enrollment]",
                  "value": "",
                  "description": "Set to true if the course is open enrollment.",
                  "disabled": true
                },
                {
                  "key": "course[self_enrollment]",
                  "value": "",
                  "description": "Set to true if the course is self enrollment.",
                  "disabled": true
                },
                {
                  "key": "course[restrict_enrollments_to_course_dates]",
                  "value": "",
                  "description": "Set to true to restrict user enrollments to the start and end dates of the course. This value must be set to true in order to specify a course start date and/or end date.",
                  "disabled": true
                },
                {
                  "key": "course[term_id]",
                  "value": "",
                  "description": "The unique ID of the term to create to course in.",
                  "disabled": true
                },
                {
                  "key": "course[sis_course_id]",
                  "value": "",
                  "description": "The unique SIS identifier.",
                  "disabled": true
                },
                {
                  "key": "course[integration_id]",
                  "value": "",
                  "description": "The unique Integration identifier.",
                  "disabled": true
                },
                {
                  "key": "course[hide_final_grades]",
                  "value": "",
                  "description": "If this option is set to true, the totals in student grades summary will be hidden.",
                  "disabled": true
                },
                {
                  "key": "course[apply_assignment_group_weights]",
                  "value": "",
                  "description": "Set to true to weight final grade based on assignment groups percentages.",
                  "disabled": true
                },
                {
                  "key": "course[time_zone]",
                  "value": "",
                  "description": "The time zone for the course. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "offer",
                  "value": "",
                  "description": "If this option is set to true, the course will be available to students immediately.",
                  "disabled": true
                },
                {
                  "key": "enroll_me",
                  "value": "",
                  "description": "Set to true to enroll the current user as the teacher.",
                  "disabled": true
                },
                {
                  "key": "skip_course_template",
                  "value": "",
                  "description": "If this option is set to true, the template of the account will not be applied to this course It means copy_from_course_template will not be executed. This option is thought for a course copy.",
                  "disabled": true
                },
                {
                  "key": "course[default_view]",
                  "value": "",
                  "description": "The type of page that users will see when they first visit the course‘feed’ Recent Activity Dashboard‘modules’ Course Modules/Sections Page‘assignments’ Course Assignments List‘syllabus’ Course Syllabus Pageother types may be added in the futureAllowed values: feed, wiki, modules, syllabus, assignments",
                  "disabled": true
                },
                {
                  "key": "course[syllabus_body]",
                  "value": "",
                  "description": "The syllabus body for the course",
                  "disabled": true
                },
                {
                  "key": "course[grading_standard_id]",
                  "value": "",
                  "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.",
                  "disabled": true
                },
                {
                  "key": "course[grade_passback_setting]",
                  "value": "",
                  "description": "Optional. The grade_passback_setting for the course. Only ‘nightly_sync’, ‘disabled’, and ” are allowed",
                  "disabled": true
                },
                {
                  "key": "course[course_format]",
                  "value": "",
                  "description": "Optional. Specifies the format of the course. (Should be ‘on_campus’, ‘online’, or ‘blended’)",
                  "disabled": true
                },
                {
                  "key": "course[post_manually]",
                  "value": "",
                  "description": "Default is false. When true, all grades in the course must be posted manually, and will not be automatically posted. When false, all grades in the course will be automatically posted.",
                  "disabled": true
                },
                {
                  "key": "enable_sis_reactivation",
                  "value": "",
                  "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new course\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/courses`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course[start_at]",
                  "value": "",
                  "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course[end_at]",
                  "value": "",
                  "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Course_Copy",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/course_copy",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "course_copy"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "source_course",
                  "value": "",
                  "description": "ID or SIS-ID of the course to copy the content from",
                  "disabled": true
                },
                {
                  "key": "except[]",
                  "value": "",
                  "description": "A list of the course content types to exclude, all areas not listed will be copied.Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes",
                  "disabled": true
                },
                {
                  "key": "only[]",
                  "value": "",
                  "description": "A list of the course content types to copy, all areas not listed will not be copied.Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes",
                  "disabled": true
                }
              ]
            },
            "description": "DEPRECATED: Please use the [Content Migrations API](../content_migrations#method.content_migrations.create) Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the ‘except’ option or the ‘only’ option. The response is the same as the course copy status endpoint\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/course_copy`"
          }
        },
        {
          "name": "Post Courses Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Upload a file to the course. This API endpoint is the first step in uploading a file to a course. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a course can upload files to the course. By default, this is Teachers, TAs and Designers. ### [List students](#method.courses.students) <a href=\"#method.courses.students\" id=\"method.courses.students\"></a> [CoursesController#students](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/files`"
          }
        },
        {
          "name": "Post Courses Preview_Html",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/preview_html",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "preview_html"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "html",
                  "value": "",
                  "description": "The html content to process",
                  "disabled": true
                }
              ]
            },
            "description": "Preview html content processed for this course\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/preview_html`"
          }
        },
        {
          "name": "Post Courses Reset_Content",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/reset_content",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "reset_content"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over. Returns a [Course](#course) object. ### [Get effective due dates](#method.courses.effective_due_dates) <a href=\"#method.courses.effective_due_dates\" id=\"method.courses.effective_due_dates\"></a> [CoursesController#effective\\_due\\_dates](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/reset_content`"
          }
        },
        {
          "name": "Post Courses Dismiss_Migration_Limitation_Message",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id/dismiss_migration_limitation_message",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id",
                "dismiss_migration_limitation_message"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Remove alert about the limitations of quiz migrations that is displayed to a user in a course you must be logged in to use this endpoint\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:id/dismiss_migration_limitation_message`"
          }
        },
        {
          "name": "Put Accounts Courses",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "courses"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Update multiple courses in an account. Operates asynchronously; use the [progress endpoint](../progress#method.progress.show) to query the status of an operation.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/courses`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_ids[]",
                  "value": "",
                  "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "event",
                  "value": "",
                  "description": "The action to take on each course. Must be one of ‘offer’, ‘conclude’, ‘delete’, or ‘undelete’.‘offer’ makes a course visible to students. This action is also called “publish” on the web site.‘conclude’ prevents future enrollments and makes a course read-only for all participants. The course still appears in prior-enrollment lists.‘delete’ completely removes the course from the web site (including course menus and prior-enrollment lists). All enrollments are deleted. Course content may be physically deleted at a future date.‘undelete’ attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.Allowed values: offer, conclude, delete, undelete",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Settings",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "settings"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "allow_final_grade_override",
                  "value": "",
                  "description": "Let student final grades for a grading period or the total grades for the course be overridden",
                  "disabled": true
                },
                {
                  "key": "allow_student_discussion_topics",
                  "value": "",
                  "description": "Let students create discussion topics",
                  "disabled": true
                },
                {
                  "key": "allow_student_forum_attachments",
                  "value": "",
                  "description": "Let students attach files to discussions",
                  "disabled": true
                },
                {
                  "key": "allow_student_discussion_editing",
                  "value": "",
                  "description": "Let students edit or delete their own discussion replies",
                  "disabled": true
                },
                {
                  "key": "allow_student_organized_groups",
                  "value": "",
                  "description": "Let students organize their own groups",
                  "disabled": true
                },
                {
                  "key": "allow_student_discussion_reporting",
                  "value": "",
                  "description": "Let students report offensive discussion content",
                  "disabled": true
                },
                {
                  "key": "allow_student_anonymous_discussion_topics",
                  "value": "",
                  "description": "Let students create anonymous discussion topics",
                  "disabled": true
                },
                {
                  "key": "filter_speed_grader_by_student_group",
                  "value": "",
                  "description": "Filter SpeedGrader to only the selected student group",
                  "disabled": true
                },
                {
                  "key": "hide_final_grades",
                  "value": "",
                  "description": "Hide totals in student grades summary",
                  "disabled": true
                },
                {
                  "key": "hide_distribution_graphs",
                  "value": "",
                  "description": "Hide grade distribution graphs from students",
                  "disabled": true
                },
                {
                  "key": "hide_sections_on_course_users_page",
                  "value": "",
                  "description": "Disallow students from viewing students in sections they do not belong to",
                  "disabled": true
                },
                {
                  "key": "lock_all_announcements",
                  "value": "",
                  "description": "Disable comments on announcements",
                  "disabled": true
                },
                {
                  "key": "usage_rights_required",
                  "value": "",
                  "description": "Copyright and license information must be provided for files before they are published.",
                  "disabled": true
                },
                {
                  "key": "restrict_student_past_view",
                  "value": "",
                  "description": "Restrict students from viewing courses after end date",
                  "disabled": true
                },
                {
                  "key": "restrict_student_future_view",
                  "value": "",
                  "description": "Restrict students from viewing courses before start date",
                  "disabled": true
                },
                {
                  "key": "show_announcements_on_home_page",
                  "value": "",
                  "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit). Canvas for Elementary subjects ignore this setting.",
                  "disabled": true
                },
                {
                  "key": "home_page_announcement_limit",
                  "value": "",
                  "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page",
                  "disabled": true
                },
                {
                  "key": "syllabus_course_summary",
                  "value": "",
                  "description": "Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.",
                  "disabled": true
                },
                {
                  "key": "default_due_time",
                  "value": "",
                  "description": "Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface when setting a due date for an assignment. It does not change when any existing assignment is due. It should be given in 24-hour HH:MM:SS format. The default is “23:59:59”. Use “inherit” to inherit the account setting.",
                  "disabled": true
                },
                {
                  "key": "conditional_release",
                  "value": "",
                  "description": "Enable or disable individual learning paths for students based on assessment",
                  "disabled": true
                }
              ]
            },
            "description": "Can update the following course settings:\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/settings`"
          }
        },
        {
          "name": "Update Courses",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "course[account_id]",
                  "value": "",
                  "description": "The unique ID of the account to move the course to.",
                  "disabled": true
                },
                {
                  "key": "course[name]",
                  "value": "",
                  "description": "The name of the course. If omitted, the course will be named “Unnamed Course.”",
                  "disabled": true
                },
                {
                  "key": "course[course_code]",
                  "value": "",
                  "description": "The course code for the course.",
                  "disabled": true
                },
                {
                  "key": "course[license]",
                  "value": "",
                  "description": "The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference):‘private’ (Private Copyrighted)‘cc_by_nc_nd’ (CC Attribution Non-Commercial No Derivatives)‘cc_by_nc_sa’ (CC Attribution Non-Commercial Share Alike)‘cc_by_nc’ (CC Attribution Non-Commercial)‘cc_by_nd’ (CC Attribution No Derivatives)‘cc_by_sa’ (CC Attribution Share Alike)‘cc_by’ (CC Attribution)‘public_domain’ (Public Domain).",
                  "disabled": true
                },
                {
                  "key": "course[is_public]",
                  "value": "",
                  "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[is_public_to_auth_users]",
                  "value": "",
                  "description": "Set to true if course is public only to authenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[public_syllabus]",
                  "value": "",
                  "description": "Set to true to make the course syllabus public.",
                  "disabled": true
                },
                {
                  "key": "course[public_syllabus_to_auth]",
                  "value": "",
                  "description": "Set to true to make the course syllabus to public for authenticated users.",
                  "disabled": true
                },
                {
                  "key": "course[public_description]",
                  "value": "",
                  "description": "A publicly visible description of the course.",
                  "disabled": true
                },
                {
                  "key": "course[allow_student_wiki_edits]",
                  "value": "",
                  "description": "If true, students will be able to modify the course wiki.",
                  "disabled": true
                },
                {
                  "key": "course[allow_wiki_comments]",
                  "value": "",
                  "description": "If true, course members will be able to comment on wiki pages.",
                  "disabled": true
                },
                {
                  "key": "course[allow_student_forum_attachments]",
                  "value": "",
                  "description": "If true, students can attach files to forum posts.",
                  "disabled": true
                },
                {
                  "key": "course[open_enrollment]",
                  "value": "",
                  "description": "Set to true if the course is open enrollment.",
                  "disabled": true
                },
                {
                  "key": "course[self_enrollment]",
                  "value": "",
                  "description": "Set to true if the course is self enrollment.",
                  "disabled": true
                },
                {
                  "key": "course[restrict_enrollments_to_course_dates]",
                  "value": "",
                  "description": "Set to true to restrict user enrollments to the start and end dates of the course. Setting this value to false will remove the course end date (if it exists), as well as the course start date (if the course is unpublished).",
                  "disabled": true
                },
                {
                  "key": "course[term_id]",
                  "value": "",
                  "description": "The unique ID of the term to create to course in.",
                  "disabled": true
                },
                {
                  "key": "course[sis_course_id]",
                  "value": "",
                  "description": "The unique SIS identifier.",
                  "disabled": true
                },
                {
                  "key": "course[integration_id]",
                  "value": "",
                  "description": "The unique Integration identifier.",
                  "disabled": true
                },
                {
                  "key": "course[hide_final_grades]",
                  "value": "",
                  "description": "If this option is set to true, the totals in student grades summary will be hidden.",
                  "disabled": true
                },
                {
                  "key": "course[time_zone]",
                  "value": "",
                  "description": "The time zone for the course. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "course[apply_assignment_group_weights]",
                  "value": "",
                  "description": "Set to true to weight final grade based on assignment groups percentages.",
                  "disabled": true
                },
                {
                  "key": "course[storage_quota_mb]",
                  "value": "",
                  "description": "Set the storage quota for the course, in megabytes. The caller must have the “Manage storage quotas” account permission.",
                  "disabled": true
                },
                {
                  "key": "offer",
                  "value": "",
                  "description": "If this option is set to true, the course will be available to students immediately.",
                  "disabled": true
                },
                {
                  "key": "course[event]",
                  "value": "",
                  "description": "The action to take on each course.‘claim’ makes a course no longer visible to students. This action is also called “unpublish” on the web site. A course cannot be unpublished if students have received graded submissions.‘offer’ makes a course visible to students. This action is also called “publish” on the web site.‘conclude’ prevents future enrollments and makes a course read-only for all participants. The course still appears in prior-enrollment lists.‘delete’ completely removes the course from the web site (including course menus and prior-enrollment lists). All enrollments are deleted. Course content may be physically deleted at a future date.‘undelete’ attempts to recover a course that has been deleted. This action requires account administrative rights. (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.Allowed values: claim, offer, conclude, delete, undelete",
                  "disabled": true
                },
                {
                  "key": "course[default_view]",
                  "value": "",
                  "description": "The type of page that users will see when they first visit the course‘feed’ Recent Activity Dashboard‘wiki’ Wiki Front Page‘modules’ Course Modules/Sections Page‘assignments’ Course Assignments List‘syllabus’ Course Syllabus Pageother types may be added in the futureAllowed values: feed, wiki, modules, syllabus, assignments",
                  "disabled": true
                },
                {
                  "key": "course[syllabus_body]",
                  "value": "",
                  "description": "The syllabus body for the course",
                  "disabled": true
                },
                {
                  "key": "course[syllabus_course_summary]",
                  "value": "",
                  "description": "Optional. Indicates whether the Course Summary (consisting of the course’s assignments and calendar events) is displayed on the syllabus page. Defaults to true.",
                  "disabled": true
                },
                {
                  "key": "course[grading_standard_id]",
                  "value": "",
                  "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.",
                  "disabled": true
                },
                {
                  "key": "course[grade_passback_setting]",
                  "value": "",
                  "description": "Optional. The grade_passback_setting for the course. Only ‘nightly_sync’ and ” are allowed",
                  "disabled": true
                },
                {
                  "key": "course[course_format]",
                  "value": "",
                  "description": "Optional. Specifies the format of the course. (Should be either ‘on_campus’ or ‘online’)",
                  "disabled": true
                },
                {
                  "key": "course[image_id]",
                  "value": "",
                  "description": "This is a file ID corresponding to an image file in the course that will be used as the course image. This will clear the course’s image_url setting if set. If you attempt to provide image_url and image_id in a request it will fail.",
                  "disabled": true
                },
                {
                  "key": "course[image_url]",
                  "value": "",
                  "description": "This is a URL to an image to be used as the course image. This will clear the course’s image_id setting if set. If you attempt to provide image_url and image_id in a request it will fail.",
                  "disabled": true
                },
                {
                  "key": "course[remove_image]",
                  "value": "",
                  "description": "If this option is set to true, the course image url and course image ID are both set to nil",
                  "disabled": true
                },
                {
                  "key": "course[remove_banner_image]",
                  "value": "",
                  "description": "If this option is set to true, the course banner image url and course banner image ID are both set to nil",
                  "disabled": true
                },
                {
                  "key": "course[blueprint]",
                  "value": "",
                  "description": "Sets the course as a blueprint course.",
                  "disabled": true
                },
                {
                  "key": "course[use_blueprint_restrictions_by_object_type]",
                  "value": "",
                  "description": "When enabled, the blueprint_restrictions parameter will be ignored in favor of the blueprint_restrictions_by_object_type parameter",
                  "disabled": true
                },
                {
                  "key": "course[homeroom_course]",
                  "value": "",
                  "description": "Sets the course as a homeroom course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.",
                  "disabled": true
                },
                {
                  "key": "course[sync_enrollments_from_homeroom]",
                  "value": "",
                  "description": "Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                  "disabled": true
                },
                {
                  "key": "course[homeroom_course_id]",
                  "value": "",
                  "description": "Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.",
                  "disabled": true
                },
                {
                  "key": "course[template]",
                  "value": "",
                  "description": "Enable or disable the course as a template that can be selected by an account",
                  "disabled": true
                },
                {
                  "key": "course[course_color]",
                  "value": "",
                  "description": "Sets a color in hex code format to be associated with the course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.",
                  "disabled": true
                },
                {
                  "key": "course[friendly_name]",
                  "value": "",
                  "description": "Set a friendly name for the course. If this is provided and the course is associated with a Canvas for Elementary account, it will be shown instead of the course name. This setting takes priority over course nicknames defined by individual users.",
                  "disabled": true
                },
                {
                  "key": "course[enable_course_paces]",
                  "value": "",
                  "description": "Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is enabled for the sub-account. Otherwise, Course Pacing are always disabled.",
                  "disabled": true
                },
                {
                  "key": "course[conditional_release]",
                  "value": "",
                  "description": "Enable or disable individual learning paths for students based on assessment",
                  "disabled": true
                },
                {
                  "key": "course[post_manually]",
                  "value": "",
                  "description": "When true, all grades in the course will be posted manually. When false, all grades in the course will be automatically posted. Use with caution as this setting will override any assignment level post policy.",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing course. Arguments are the same as Courses#create, with a few exceptions (enroll\\_me). If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be “syllabus\\_body” If an account has set prevent\\_course\\_availability\\_editing\\_by\\_teachers, a teacher cannot change `course[start_at]`, `course[conclude_at]`, or `course[restrict_enrollments_to_course_dates]` here.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course[start_at]",
                  "value": "",
                  "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true, or the course is already published.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course[end_at]",
                  "value": "",
                  "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course[blueprint_restrictions]",
                  "value": "",
                  "description": "Sets a default set to apply to blueprint course objects when restricted, unless use_blueprint_restrictions_by_object_type is enabled. See the Blueprint Restriction documentation",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course[blueprint_restrictions_by_object_type]",
                  "value": "",
                  "description": "Allows setting multiple Blueprint Restriction to apply to blueprint course objects of the matching type when restricted. The possible object types are “assignment”, “attachment”, “discussion_topic”, “quiz” and “wiki_page”. Example usage:course[blueprint_restrictions_by_object_type][assignment][content]=1",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Custom Gradebook Columns",
      "description": "API for adding additional columns to the gradebook. Custom gradebook columns will be displayed with the other frozen gradebook columns.",
      "item": [
        {
          "name": "Delete Courses Custom_Gradebook_Columns",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Permanently deletes a custom column and its associated data Returns a [CustomColumn](#customcolumn) object. ### [Reorder custom columns](#method.custom_gradebook_columns_api.reorder) <a href=\"#method.custom_gradebook_columns_api.reorder\" id=\"method.custom_gradebook_columns_api.reorder\"></a> [CustomGradebookColumnsApiController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/custom_gradebook_columns/:id`"
          }
        },
        {
          "name": "Get Courses Custom_Gradebook_Columns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include_hidden",
                  "value": "",
                  "description": "Include hidden parameters (defaults to false)",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of all custom gradebook columns for a course\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/custom_gradebook_columns`"
          }
        },
        {
          "name": "Get Courses Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns/:id/data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns",
                ":id",
                "data"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include_hidden",
                  "value": "",
                  "description": "If true, hidden columns will be included in the result. If false or absent, only visible columns will be returned.",
                  "disabled": true
                }
              ]
            },
            "description": "This does not list entries for students without associated data.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/custom_gradebook_columns/:id/data`"
          }
        },
        {
          "name": "Post Courses Custom_Gradebook_Columns",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "column[position]",
                  "value": "",
                  "description": "The position of the column relative to other custom columns",
                  "disabled": true
                },
                {
                  "key": "column[hidden]",
                  "value": "",
                  "description": "Hidden columns are not displayed in the gradebook",
                  "disabled": true
                },
                {
                  "key": "column[teacher_notes]",
                  "value": "",
                  "description": "Set this if the column is created by a teacher. The gradebook only supports one teacher_notes column.",
                  "disabled": true
                },
                {
                  "key": "column[read_only]",
                  "value": "",
                  "description": "Set this to prevent the column from being editable in the gradebook ui",
                  "disabled": true
                }
              ]
            },
            "description": "Create a custom gradebook column\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/custom_gradebook_columns`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "column[title]",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Reorder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns/reorder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns",
                "reorder"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Puts the given columns in the specified order\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/custom_gradebook_columns/reorder`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "order[]",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Custom_Gradebook_Column_Data",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_column_data",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_column_data"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Set the content of custom columns { ``` \"column_data\": [ { \"column_id\": example_column_id, \"user_id\": example_student_id, \"content\": example_content }, { \"column_id\": example_column_id, \"user_id\": example_student_id, \"content: example_content } ] ``` }\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/custom_gradebook_column_data`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "column_data[]",
                  "value": "",
                  "description": "Column content. Setting this to an empty string will delete the data object.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Custom_Gradebook_Columns",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Accepts the same parameters as custom gradebook column creation Returns a [CustomColumn](#customcolumn) object. ### [Delete a custom gradebook column](#method.custom_gradebook_columns_api.destroy) <a href=\"#method.custom_gradebook_columns_api.destroy\" id=\"method.custom_gradebook_columns_api.destroy\"></a> [CustomGradebookColumnsApiController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb)\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/custom_gradebook_columns/:id`"
          }
        },
        {
          "name": "Put Courses Data",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/custom_gradebook_columns/:id/data/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "custom_gradebook_columns",
                ":id",
                "data",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Set the content of a custom column\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/custom_gradebook_columns/:id/data/:user_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "column_data[content]",
                  "value": "",
                  "description": "Column content. Setting this to blank will delete the datum object.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Developer Key Account Bindings",
      "description": "Developer key account bindings API for binding a developer key to a context and specifying a workflow state for that relationship.",
      "item": [
        {
          "name": "Post Accounts Developer_Key_Account_Bindings",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/developer_keys/:developer_key_id/developer_key_account_bindings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "developer_keys",
                ":developer_key_id",
                "developer_key_account_bindings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "developer_key_id",
                  "value": "<developer_key_id>",
                  "description": "The developer_key_id identifier"
                }
              ],
              "query": [
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The workflow state for the binding. Must be one of “on”, “off”, or “allow”. Defaults to “off”.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new Developer Key Account Binding. The developer key specified in the request URL must be available in the requested account or the requested account’s account chain. If the binding already exists for the specified account/key combination it will be updated.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/developer_keys/:developer_key_id/developer_key_account_bindings`"
          }
        }
      ]
    },
    {
      "name": "Developer Keys",
      "description": "Manage Canvas API Keys, used for OAuth access to this API. See [the OAuth access docs](../oauth2/file.oauth) for usage of these keys. Note that DeveloperKeys are also (currently) used for LTI 1.3 registration and OIDC access, but this endpoint deals with Canvas API keys. See [LTI Registration](../external-tools/lti/file.registration) for details.",
      "item": [
        {
          "name": "Delete Developer_Keys",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/developer_keys/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "developer_keys",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete an existing Canvas API key. Deleting an LTI 1.3 registration should be done via the LTI Registration API. Returns a [DeveloperKey](#developerkey) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/developer_keys/:id`"
          }
        },
        {
          "name": "Get Accounts Developer_Keys",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/developer_keys",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "developer_keys"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "inherited",
                  "value": "",
                  "description": "Defaults to false. If true, lists keys inherited from Site Admin (and consortium parent account, if applicable).",
                  "disabled": true
                }
              ]
            },
            "description": "List all developer keys created in the current account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/developer_keys`"
          }
        },
        {
          "name": "Post Accounts Developer_Keys",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/developer_keys",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "developer_keys"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "developer_key[auto_expire_tokens]",
                  "value": "",
                  "description": "Defaults to false. If true, access tokens generated by this key will expire after 1 hour.",
                  "disabled": true
                },
                {
                  "key": "developer_key[email]",
                  "value": "",
                  "description": "Contact email for the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[icon_url]",
                  "value": "",
                  "description": "URL for a small icon to display in key list.",
                  "disabled": true
                },
                {
                  "key": "developer_key[name]",
                  "value": "",
                  "description": "The display name.",
                  "disabled": true
                },
                {
                  "key": "developer_key[notes]",
                  "value": "",
                  "description": "User-provided notes about the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[redirect_uri]",
                  "value": "",
                  "description": "Deprecated in favor of redirect_uris. Do not use.",
                  "disabled": true
                },
                {
                  "key": "developer_key[vendor_code]",
                  "value": "",
                  "description": "User-specified code representing the vendor that uses the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[visible]",
                  "value": "",
                  "description": "Defaults to true. If false, key will not be visible in the UI.",
                  "disabled": true
                },
                {
                  "key": "developer_key[test_cluster_only]",
                  "value": "",
                  "description": "Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.",
                  "disabled": true
                },
                {
                  "key": "developer_key[client_credentials_audience]",
                  "value": "",
                  "description": "Used in OAuth2 client credentials flow to specify the audience for the access token.",
                  "disabled": true
                },
                {
                  "key": "developer_key[require_scopes]",
                  "value": "",
                  "description": "If true, then token requests with this key must include scopes.",
                  "disabled": true
                },
                {
                  "key": "developer_key[allow_includes]",
                  "value": "",
                  "description": "If true, allows ‘includes` parameters in API requests that match the scopes of this key.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new Canvas API key. Creating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/developer_keys`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "developer_key",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "developer_key[redirect_uris]",
                  "value": "",
                  "description": "List of URLs used during OAuth2 flow to validate given redirect URI.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "developer_key[scopes]",
                  "value": "",
                  "description": "List of API endpoints key is allowed to access.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Developer_Keys",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/developer_keys/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "developer_keys",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "developer_key[auto_expire_tokens]",
                  "value": "",
                  "description": "Defaults to false. If true, access tokens generated by this key will expire after 1 hour.",
                  "disabled": true
                },
                {
                  "key": "developer_key[email]",
                  "value": "",
                  "description": "Contact email for the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[icon_url]",
                  "value": "",
                  "description": "URL for a small icon to display in key list.",
                  "disabled": true
                },
                {
                  "key": "developer_key[name]",
                  "value": "",
                  "description": "The display name.",
                  "disabled": true
                },
                {
                  "key": "developer_key[notes]",
                  "value": "",
                  "description": "User-provided notes about the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[redirect_uri]",
                  "value": "",
                  "description": "Deprecated in favor of redirect_uris. Do not use.",
                  "disabled": true
                },
                {
                  "key": "developer_key[vendor_code]",
                  "value": "",
                  "description": "User-specified code representing the vendor that uses the key.",
                  "disabled": true
                },
                {
                  "key": "developer_key[visible]",
                  "value": "",
                  "description": "Defaults to true. If false, key will not be visible in the UI.",
                  "disabled": true
                },
                {
                  "key": "developer_key[test_cluster_only]",
                  "value": "",
                  "description": "Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.",
                  "disabled": true
                },
                {
                  "key": "developer_key[client_credentials_audience]",
                  "value": "",
                  "description": "Used in OAuth2 client credentials flow to specify the audience for the access token.",
                  "disabled": true
                },
                {
                  "key": "developer_key[require_scopes]",
                  "value": "",
                  "description": "If true, then token requests with this key must include scopes.",
                  "disabled": true
                },
                {
                  "key": "developer_key[allow_includes]",
                  "value": "",
                  "description": "If true, allows ‘includes` parameters in API requests that match the scopes of this key.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing Canvas API key. Updating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.\n\n**OAuth Scope:** `url:PUT|/api/v1/developer_keys/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "developer_key",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "developer_key[redirect_uris]",
                  "value": "",
                  "description": "List of URLs used during OAuth2 flow to validate given redirect URI.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "developer_key[scopes]",
                  "value": "",
                  "description": "List of API endpoints key is allowed to access.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Discussion Topics",
      "description": "API for accessing and participating in discussion topics in groups and courses.",
      "item": [
        {
          "name": "Delete Courses Discussion_Topics",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id`"
          }
        },
        {
          "name": "Delete Courses Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read`"
          }
        },
        {
          "name": "Delete Courses Entries",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id`"
          }
        },
        {
          "name": "Delete Courses Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/read`"
          }
        },
        {
          "name": "Delete Courses Read_All",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "read_all"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all`"
          }
        },
        {
          "name": "Delete Courses Subscribed",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "subscribed"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed`"
          }
        },
        {
          "name": "Delete Groups Discussion_Topics",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Deletes the discussion topic. This will also delete the assignment, if it’s an assignment discussion.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id`"
          }
        },
        {
          "name": "Delete Groups Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "read"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ],
              "query": [
                {
                  "key": "forced_read_state",
                  "value": "",
                  "description": "A boolean value to set the entry’s forced_read_state. No change is made if this argument is not specified.",
                  "disabled": true
                }
              ]
            },
            "description": "Mark a discussion entry as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read`"
          }
        },
        {
          "name": "Delete Groups Entries",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a discussion entry. The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the delete is not allowed, a 401 will be returned. The discussion will be marked deleted, and the user\\_id and message will be cleared out.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id`"
          }
        },
        {
          "name": "Delete Groups Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "read"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Mark the initial text of the discussion topic as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/read`"
          }
        },
        {
          "name": "Delete Groups Read_All",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "read_all"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "forced_read_state",
                  "value": "",
                  "description": "A boolean value to set all of the entries’ forced_read_state. No change is made if this argument is not specified.",
                  "disabled": true
                }
              ]
            },
            "description": "Mark the discussion topic and all its entries as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all`"
          }
        },
        {
          "name": "Delete Groups Subscribed",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "subscribed"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Unsubscribe from a topic to stop receiving notifications about new entries On success, the response will be 204 No Content with an empty body\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed`"
          }
        },
        {
          "name": "Get Courses Discussion_Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics`"
          }
        },
        {
          "name": "Get Courses Discussion_Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id`"
          }
        },
        {
          "name": "Get Courses Entries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries`"
          }
        },
        {
          "name": "Get Courses Replies",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "replies"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies`"
          }
        },
        {
          "name": "Get Courses Entry_List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entry_list",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entry_list"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entry_list`"
          }
        },
        {
          "name": "Get Courses Summaries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "summaries"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries`"
          }
        },
        {
          "name": "Get Courses View",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/view",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "view"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/view`"
          }
        },
        {
          "name": "Get Groups Discussion_Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "If “all_dates” is passed, all dates associated with graded discussions’ assignments will be included. if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to.\nIf “overrides” is passed, the overrides for the assignment will be includedAllowed values: all_dates, sections, sections_user_count, overrides",
                  "disabled": true
                },
                {
                  "key": "order_by",
                  "value": "",
                  "description": "Determines the order of the discussion topic list. Defaults to “position”.Allowed values: position, recent_activity, title",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "",
                  "description": "Only return discussion topics in the given state(s). Defaults to including all topics. Filtering is done after pagination, so pages may be smaller than requested if topics are filtered. Can pass multiple states as comma separated string.Allowed values: locked, unlocked, pinned, unpinned",
                  "disabled": true
                },
                {
                  "key": "only_announcements",
                  "value": "",
                  "description": "Return announcements instead of discussion topics. Defaults to false",
                  "disabled": true
                },
                {
                  "key": "filter_by",
                  "value": "",
                  "description": "The state of the discussion topic to return. Currently only supports unread state.Allowed values: all, unread",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial title of the discussion topics to match and return.",
                  "disabled": true
                },
                {
                  "key": "exclude_context_module_locked_topics",
                  "value": "",
                  "description": "For students, exclude topics that are locked by module progression. Defaults to false.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of discussion topics for this course or group.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics`"
          }
        },
        {
          "name": "Get Groups Discussion_Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "If “all_dates” is passed, all dates associated with graded discussions’ assignments will be included. if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to.\nIf “overrides” is passed, the overrides for the assignment will be includedAllowed values: all_dates, sections, sections_user_count, overrides",
                  "disabled": true
                }
              ]
            },
            "description": "Returns data on an individual discussion topic. See the List action for the response formatting.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id`"
          }
        },
        {
          "name": "Get Groups Entries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Retrieve the (paginated) top-level entries in a discussion topic. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. Will include the 10 most recent replies, if any, for each entry returned. If the topic is a root topic with children corresponding to groups of a group assignment, entries from those subtopics for which the user belongs to the corresponding group will be returned. Ordering of returned entries is newest-first by posting timestamp (reply activity is ignored).\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries`"
          }
        },
        {
          "name": "Get Groups Replies",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "replies"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "Retrieve the (paginated) replies to a top-level entry in a discussion topic. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. Ordering of returned entries is newest-first by creation timestamp.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies`"
          }
        },
        {
          "name": "Get Groups Entry_List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entry_list",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entry_list"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "ids[]",
                  "value": "",
                  "description": "A list of entry ids to retrieve. Entries will be returned in id order, smallest id first.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of discussion entries, given a list of ids. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entry_list`"
          }
        },
        {
          "name": "Get Groups Summaries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "summaries"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Returns: (1) last userInput (what current user had keyed in to produce the last discussion summary), (2) last discussion summary generated by the current user for current discussion topic, based on userInput, (3) and some usage information.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries`"
          }
        },
        {
          "name": "Get Groups View",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/view",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "view"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Return a cached structure of the discussion topic, containing all entries, their authors, and their message bodies. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. In some rare situations, this cached structure may not be available yet. In that case, the server will respond with a 503 error, and the caller should try again soon. The response is an object containing the following keys: * “participants”: A list of summary information on users who have posted to the discussion. Each value is an object containing their id, display\\_name, and avatar\\_url. * “unread\\_entries”: A list of entry ids that are unread by the current user. this implies that any entry not in this list is read. * “entry\\_ratings”: A map of entry ids to ratings by the current user. Entries not in this list have no rating. Only populated if rating is enabled. * “forced\\_entries”: A list of entry ids that have forced\\_read\\_state set to true. This flag is meant to indicate the entry’s read\\_state has been manually set to ‘unread’ by the user, so the entry should not be automatically marked as read. * “view”: A threaded view of all the entries in the discussion, containing the id, user\\_id, and message. * “new\\_entries”: Because this view is eventually consistent, it’s possible that newly created or updated entries won’t yet be reflected in the view. If the application wants to also get a flat list of all entries not yet reflected in the view, pass include\\_new\\_entries=1 to the request and this array of entries will be returned. These entries are returned in a flat array, in ascending created\\_at order.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/view`"
          }
        },
        {
          "name": "Post Courses Discussion_Topics",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics`"
          }
        },
        {
          "name": "Post Courses Duplicate",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/duplicate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "duplicate"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/duplicate`"
          }
        },
        {
          "name": "Post Courses Entries",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries`"
          }
        },
        {
          "name": "Post Courses Rating",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/rating",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "rating"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/rating`"
          }
        },
        {
          "name": "Post Courses Replies",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "replies"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies`"
          }
        },
        {
          "name": "Post Courses Summaries",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "summaries"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries`"
          }
        },
        {
          "name": "Post Courses Feedback",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/:summary_id/feedback",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "summaries",
                ":summary_id",
                "feedback"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "summary_id",
                  "value": "<summary_id>",
                  "description": "The summary_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/:summary_id/feedback`"
          }
        },
        {
          "name": "Post Courses Reorder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/reorder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                "reorder"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/discussion_topics/reorder`"
          }
        },
        {
          "name": "Post Groups Discussion_Topics",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "message",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "discussion_type",
                  "value": "",
                  "description": "The type of discussion. Defaults to side_comment or not_threaded if not value is given. Accepted values are ‘side_comment’, ‘not_threaded’ for discussions that only allow one level of nested comments, and ‘threaded’ for fully threaded discussions.Allowed values: side_comment, threaded, not_threaded",
                  "disabled": true
                },
                {
                  "key": "published",
                  "value": "",
                  "description": "Whether this topic is published (true) or draft state (false). Only teachers and TAs have the ability to create draft state topics.",
                  "disabled": true
                },
                {
                  "key": "allow_rating",
                  "value": "",
                  "description": "Whether or not users can rate entries in this topic.",
                  "disabled": true
                },
                {
                  "key": "podcast_enabled",
                  "value": "",
                  "description": "If true, the topic will have an associated podcast feed.",
                  "disabled": true
                },
                {
                  "key": "podcast_has_student_posts",
                  "value": "",
                  "description": "If true, the podcast will include posts from students as well. Implies podcast_enabled.",
                  "disabled": true
                },
                {
                  "key": "require_initial_post",
                  "value": "",
                  "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "is_announcement",
                  "value": "",
                  "description": "If true, this topic is an announcement. It will appear in the announcement’s section rather than the discussions section. This requires announcment-posting permissions.",
                  "disabled": true
                },
                {
                  "key": "pinned",
                  "value": "",
                  "description": "If true, this topic will be listed in the “Pinned Discussion” section",
                  "disabled": true
                },
                {
                  "key": "position_after",
                  "value": "",
                  "description": "By default, discussions are sorted chronologically by creation date, you can pass the id of another topic to have this one show up after the other when they are listed.",
                  "disabled": true
                },
                {
                  "key": "group_category_id",
                  "value": "",
                  "description": "If present, the topic will become a group discussion assigned to the group.",
                  "disabled": true
                },
                {
                  "key": "only_graders_can_rate",
                  "value": "",
                  "description": "If true, only graders will be allowed to rate entries.",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Default sort order of the discussion. Accepted values are “asc”, “desc”.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "sort_order_locked",
                  "value": "",
                  "description": "If true, users cannot choose their prefered sort order",
                  "disabled": true
                },
                {
                  "key": "expanded",
                  "value": "",
                  "description": "If true, thread will be expanded by default",
                  "disabled": true
                },
                {
                  "key": "expanded_locked",
                  "value": "",
                  "description": "If true, users cannot choose their prefered thread expansion setting",
                  "disabled": true
                },
                {
                  "key": "sort_by_rating",
                  "value": "",
                  "description": "(DEPRECATED) If true, entries will be sorted by rating.",
                  "disabled": true
                },
                {
                  "key": "specific_sections",
                  "value": "",
                  "description": "A comma-separated list of sections ids to which the discussion topic should be made specific to. If it is not desired to make the discussion topic specific to sections, then this parameter may be omitted or set to “all”. Can only be present only on announcements and only those that are for a course (as opposed to a group).",
                  "disabled": true
                },
                {
                  "key": "lock_comment",
                  "value": "",
                  "description": "If is_announcement and lock_comment are true, ‘Allow Participants to Comment’ setting is disabled.",
                  "disabled": true
                }
              ]
            },
            "description": "Create an new discussion topic for the course or group.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "delayed_post_at",
                  "value": "",
                  "description": "If a timestamp is given, the topic will not be published until that time.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "If a timestamp is given, the topic will be scheduled to lock at the provided timestamp. If the timestamp is in the past, the topic will be locked.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment",
                  "value": "",
                  "description": "To create an assignment discussion, pass the assignment parameters as a sub-object. See the Create an Assignment API for the available parameters. The name parameter will be ignored, as it’s taken from the discussion title. If you want to make a discussion that was an assignment NOT an assignment, pass set_assignment = false as part of the assignment object",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "attachment",
                  "value": "",
                  "description": "A multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Groups Duplicate",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/duplicate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "duplicate"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Duplicate a discussion topic according to context (Course/Group)\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/duplicate`"
          }
        },
        {
          "name": "Post Groups Entries",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "message",
                  "value": "",
                  "description": "The body of the entry.",
                  "disabled": true
                },
                {
                  "key": "attachment",
                  "value": "",
                  "description": "a multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new entry in a discussion topic. Returns a json representation of the created entry (see documentation for ‘entries’ method) on success.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries`"
          }
        },
        {
          "name": "Post Groups Rating",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/rating",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "rating"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ],
              "query": [
                {
                  "key": "rating",
                  "value": "",
                  "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                  "disabled": true
                }
              ]
            },
            "description": "Rate a discussion entry. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/rating`"
          }
        },
        {
          "name": "Post Groups Replies",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "replies"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ],
              "query": [
                {
                  "key": "message",
                  "value": "",
                  "description": "The body of the entry.",
                  "disabled": true
                },
                {
                  "key": "attachment",
                  "value": "",
                  "description": "a multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.",
                  "disabled": true
                }
              ]
            },
            "description": "Add a reply to an entry in a discussion topic. Returns a json representation of the created reply (see documentation for ‘replies’ method) on success. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies`"
          }
        },
        {
          "name": "Post Groups Summaries",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "summaries"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "userInput",
                  "value": "",
                  "description": "Areas or topics for the summary to focus on.",
                  "disabled": true
                }
              ]
            },
            "description": "Generates a summary for a discussion topic. Returns the summary text and usage information.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries`"
          }
        },
        {
          "name": "Post Groups Feedback",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/:summary_id/feedback",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "summaries",
                ":summary_id",
                "feedback"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "summary_id",
                  "value": "<summary_id>",
                  "description": "The summary_id identifier"
                }
              ],
              "query": [
                {
                  "key": "_action",
                  "value": "",
                  "description": "Required The action to take on the summary. Possible values are:“seen”: Marks the summary as seen. This action saves the feedback if it’s not already persisted.“like”: Marks the summary as liked.“dislike”: Marks the summary as disliked.“reset_like”: Resets the like status of the summary.“regenerate”: Regenerates the summary feedback.“disable_summary”: Disables the summary feedback.Any other value will result in an error response.",
                  "disabled": false
                }
              ]
            },
            "description": "Persists feedback on a discussion topic summary.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/:summary_id/feedback`"
          }
        },
        {
          "name": "Post Groups Reorder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/reorder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                "reorder"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Puts the pinned discussion topics in the specified order. All pinned topics should be included.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/discussion_topics/reorder`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "order[]",
                  "value": "",
                  "description": "The ids of the pinned discussion topics in the desired order. (For example, “order=104,102,103”.)",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Discussion_Topics",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read`"
          }
        },
        {
          "name": "Put Courses Entries",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/read`"
          }
        },
        {
          "name": "Put Courses Read_All",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "read_all"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all`"
          }
        },
        {
          "name": "Put Courses Subscribed",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "subscribed"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed`"
          }
        },
        {
          "name": "Put Courses Disable",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/disable",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":topic_id",
                "summaries",
                "disable"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/disable`"
          }
        },
        {
          "name": "Put Courses Read_All",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                "read_all"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/read_all`"
          }
        },
        {
          "name": "Put Groups Discussion_Topics",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "message",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "discussion_type",
                  "value": "",
                  "description": "The type of discussion. Defaults to side_comment or not_threaded if not value is given. Accepted values are ‘side_comment’, ‘not_threaded’ for discussions that only allow one level of nested comments, and ‘threaded’ for fully threaded discussions.Allowed values: side_comment, threaded, not_threaded",
                  "disabled": true
                },
                {
                  "key": "published",
                  "value": "",
                  "description": "Whether this topic is published (true) or draft state (false). Only teachers and TAs have the ability to create draft state topics.",
                  "disabled": true
                },
                {
                  "key": "podcast_enabled",
                  "value": "",
                  "description": "If true, the topic will have an associated podcast feed.",
                  "disabled": true
                },
                {
                  "key": "podcast_has_student_posts",
                  "value": "",
                  "description": "If true, the podcast will include posts from students as well. Implies podcast_enabled.",
                  "disabled": true
                },
                {
                  "key": "require_initial_post",
                  "value": "",
                  "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "is_announcement",
                  "value": "",
                  "description": "If true, this topic is an announcement. It will appear in the announcement’s section rather than the discussions section. This requires announcment-posting permissions.",
                  "disabled": true
                },
                {
                  "key": "pinned",
                  "value": "",
                  "description": "If true, this topic will be listed in the “Pinned Discussion” section",
                  "disabled": true
                },
                {
                  "key": "position_after",
                  "value": "",
                  "description": "By default, discussions are sorted chronologically by creation date, you can pass the id of another topic to have this one show up after the other when they are listed.",
                  "disabled": true
                },
                {
                  "key": "group_category_id",
                  "value": "",
                  "description": "If present, the topic will become a group discussion assigned to the group.",
                  "disabled": true
                },
                {
                  "key": "allow_rating",
                  "value": "",
                  "description": "If true, users will be allowed to rate entries.",
                  "disabled": true
                },
                {
                  "key": "only_graders_can_rate",
                  "value": "",
                  "description": "If true, only graders will be allowed to rate entries.",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Default sort order of the discussion. Accepted values are “asc”, “desc”.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "sort_order_locked",
                  "value": "",
                  "description": "If true, users cannot choose their prefered sort order",
                  "disabled": true
                },
                {
                  "key": "expanded",
                  "value": "",
                  "description": "If true, thread will be expanded by default",
                  "disabled": true
                },
                {
                  "key": "expanded_locked",
                  "value": "",
                  "description": "If true, users cannot choose their prefered thread expansion setting",
                  "disabled": true
                },
                {
                  "key": "sort_by_rating",
                  "value": "",
                  "description": "(DEPRECATED) If true, entries will be sorted by rating.",
                  "disabled": true
                },
                {
                  "key": "specific_sections",
                  "value": "",
                  "description": "A comma-separated list of sections ids to which the discussion topic should be made specific too. If it is not desired to make the discussion topic specific to sections, then this parameter may be omitted or set to “all”. Can only be present only on announcements and only those that are for a course (as opposed to a group).",
                  "disabled": true
                },
                {
                  "key": "lock_comment",
                  "value": "",
                  "description": "If is_announcement and lock_comment are true, ‘Allow Participants to Comment’ setting is disabled.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing discussion topic for the course or group.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "delayed_post_at",
                  "value": "",
                  "description": "If a timestamp is given, the topic will not be published until that time.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "If a timestamp is given, the topic will be scheduled to lock at the provided timestamp. If the timestamp is in the past, the topic will be locked.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment",
                  "value": "",
                  "description": "To create an assignment discussion, pass the assignment parameters as a sub-object. See the Create an Assignment API for the available parameters. The name parameter will be ignored, as it’s taken from the discussion title. If you want to make a discussion that was an assignment NOT an assignment, pass set_assignment = false as part of the assignment object",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Groups Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":entry_id",
                "read"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "entry_id",
                  "value": "<entry_id>",
                  "description": "The entry_id identifier"
                }
              ],
              "query": [
                {
                  "key": "forced_read_state",
                  "value": "",
                  "description": "A boolean value to set the entry’s forced_read_state. No change is made if this argument is not specified.",
                  "disabled": true
                }
              ]
            },
            "description": "Mark a discussion entry as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read`"
          }
        },
        {
          "name": "Put Groups Entries",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "entries",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "message",
                  "value": "",
                  "description": "The updated body of the entry.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing discussion entry. The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id`"
          }
        },
        {
          "name": "Put Groups Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "read"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Mark the initial text of the discussion topic as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/read`"
          }
        },
        {
          "name": "Put Groups Read_All",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "read_all"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ],
              "query": [
                {
                  "key": "forced_read_state",
                  "value": "",
                  "description": "A boolean value to set all of the entries’ forced_read_state. No change is made if this argument is not specified.",
                  "disabled": true
                }
              ]
            },
            "description": "Mark the discussion topic and all its entries as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all`"
          }
        },
        {
          "name": "Put Groups Subscribed",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "subscribed"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Subscribe to a topic to receive notifications about new entries On success, the response will be 204 No Content with an empty body\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed`"
          }
        },
        {
          "name": "Put Groups Disable",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/disable",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                ":topic_id",
                "summaries",
                "disable"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "topic_id",
                  "value": "<topic_id>",
                  "description": "The topic_id identifier"
                }
              ]
            },
            "description": "Deprecated, to remove after VICE-5047 gets merged Disables the summary for a discussion topic.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/disable`"
          }
        },
        {
          "name": "Put Groups Read_All",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/discussion_topics/read_all",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "discussion_topics",
                "read_all"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Mark the initial text of all the discussion topics as read in the context. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/discussion_topics/read_all`"
          }
        }
      ]
    },
    {
      "name": "Enrollment Terms",
      "description": "API for viewing enrollment terms. For all actions, the specified account must be a root account and the caller must have permission to manage the account (when called on non-root accounts, the errorwill be indicate the appropriate root account).",
      "item": [
        {
          "name": "Delete Accounts Terms",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the specified enrollment term. Returns an [EnrollmentTerm](#enrollmentterm) object. ### [List enrollment terms](#method.terms_api.index) <a href=\"#method.terms_api.index\" id=\"method.terms_api.index\"></a> [TermsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_api_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/terms/:id`"
          }
        },
        {
          "name": "Get Accounts Terms",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "workflow_state[]",
                  "value": "",
                  "description": "If set, only returns terms that are in the given state. Defaults to ‘active’.Allowed values: active, deleted, all",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“overrides”term start/end dates overridden for different enrollment types“course_count”the number of courses in each termAllowed values: overrides",
                  "disabled": true
                },
                {
                  "key": "term_name",
                  "value": "",
                  "description": "If set, only returns terms that match the given search keyword. Search keyword is matched against term name.",
                  "disabled": true
                }
              ]
            },
            "description": "An object with a paginated list of all of the terms in the account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/terms`"
          }
        },
        {
          "name": "Get Accounts Terms",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Retrieves the details for an enrollment term in the account. Includes overrides by default.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/terms/:id`"
          }
        },
        {
          "name": "Post Accounts Terms",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "enrollment_term[name]",
                  "value": "",
                  "description": "The name of the term.",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[sis_term_id]",
                  "value": "",
                  "description": "The unique SIS identifier for the term.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new enrollment term for the specified account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/terms`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enrollment_term[start_at]",
                  "value": "",
                  "description": "The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[end_at]",
                  "value": "",
                  "description": "The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[overrides][enrollment_type][start_at]",
                  "value": "",
                  "description": "The day/time the term starts, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[overrides][enrollment_type][end_at]",
                  "value": "",
                  "description": "The day/time the term ends, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Terms",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/terms/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "terms",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "enrollment_term[name]",
                  "value": "",
                  "description": "The name of the term.",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[sis_term_id]",
                  "value": "",
                  "description": "The unique SIS identifier for the term.",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing enrollment term for the specified account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/terms/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enrollment_term[start_at]",
                  "value": "",
                  "description": "The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[end_at]",
                  "value": "",
                  "description": "The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[overrides][enrollment_type][start_at]",
                  "value": "",
                  "description": "The day/time the term starts, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment_term[overrides][enrollment_type][end_at]",
                  "value": "",
                  "description": "The day/time the term ends, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Enrollments",
      "description": "API for creating and viewing course enrollments",
      "item": [
        {
          "name": "Delete Courses Enrollments",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "task",
                  "value": "",
                  "description": "The action to take on the enrollment. When inactive, a user will still appear in the course roster to admins, but be unable to participate. (“inactivate” and “deactivate” are equivalent tasks)Allowed values: conclude, delete, inactivate, deactivate",
                  "disabled": true
                }
              ]
            },
            "description": "Conclude, deactivate, or delete an enrollment. If the `task` argument isn’t given, the enrollment will be concluded.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/enrollments/:id`"
          }
        },
        {
          "name": "Get Accounts Enrollments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/enrollments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "enrollments",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The ID of the enrollment object",
                  "disabled": true
                }
              ]
            },
            "description": "Get an Enrollment object by Enrollment ID\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/enrollments/:id`"
          }
        },
        {
          "name": "Get Courses Enrollments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/enrollments`"
          }
        },
        {
          "name": "Get Sections Enrollments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/enrollments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "enrollments"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/enrollments`"
          }
        },
        {
          "name": "Get Users Enrollments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/enrollments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "enrollments"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "type[]",
                  "value": "",
                  "description": "A list of enrollment types to return. Accepted values are ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘DesignerEnrollment’, and ‘ObserverEnrollment.’ If omitted, all enrollment types are returned. This argument is ignored if ‘role` is given.",
                  "disabled": true
                },
                {
                  "key": "role[]",
                  "value": "",
                  "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the Add Role API as well as the base enrollment types accepted by the ‘type` argument above.",
                  "disabled": true
                },
                {
                  "key": "state[]",
                  "value": "",
                  "description": "Filter by enrollment state. If omitted, ‘active’ and ‘invited’ enrollments are returned. The following synthetic states are supported only when querying a user’s enrollments (either via user_id argument or via user enrollments endpoint): current_and_invited, current_and_future, current_future_and_restricted, current_and_concludedAllowed values: active, invited, creation_pending, deleted, rejected, completed, inactive, current_and_invited, current_and_future, current_future_and_restricted, current_and_concluded",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include on the enrollment or user records. “avatar_url” and “group_ids” will be returned on the user record. If “current_points” is specified, the fields “current_points” and (if the caller has permissions to manage grades) “unposted_current_points” will be included in the “grades” hash for student enrollments.Allowed values: avatar_url, group_ids, locked, observed_users, can_be_removed, uuid, current_points",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user’s id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
                  "disabled": true
                },
                {
                  "key": "grading_period_id",
                  "value": "",
                  "description": "Return grades for the given grading_period. If this parameter is not specified, the returned grades will be for the whole course.",
                  "disabled": true
                },
                {
                  "key": "enrollment_term_id",
                  "value": "",
                  "description": "Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with ‘sis_term_id:’.",
                  "disabled": true
                },
                {
                  "key": "sis_account_id[]",
                  "value": "",
                  "description": "Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.",
                  "disabled": true
                },
                {
                  "key": "sis_course_id[]",
                  "value": "",
                  "description": "Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.",
                  "disabled": true
                },
                {
                  "key": "sis_section_id[]",
                  "value": "",
                  "description": "Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.",
                  "disabled": true
                },
                {
                  "key": "sis_user_id[]",
                  "value": "",
                  "description": "Returns only enrollments for the specified SIS user ID(s). May pass in array or string.",
                  "disabled": true
                },
                {
                  "key": "created_for_sis_id[]",
                  "value": "",
                  "description": "If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id’s, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id",
                  "disabled": true
                }
              ]
            },
            "description": "Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user’s enrollments. This includes student, teacher, TA, and observer enrollments. If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately. note: Currently, only a root level admin user can return other users’ enrollments. A user can, however, return his/her own enrollments. Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state\\[] parameter is omitted.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/enrollments`"
          }
        },
        {
          "name": "Get Users Temporary_Enrollment_Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/temporary_enrollment_status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "temporary_enrollment_status"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "",
                  "description": "The ID of the account to check for temporary enrollment status. Defaults to the domain root account if not provided.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a JSON Object containing the temporary enrollment status for a user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/temporary_enrollment_status`"
          }
        },
        {
          "name": "Post Accounts Bulk_Enrollment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/bulk_enrollment",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "bulk_enrollment"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "enrollment_type",
                  "value": "",
                  "description": "Enroll each user as a student, teacher, TA, observer, or designer. If no value is given, the type will be ‘StudentEnrollment’.Allowed values: StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment",
                  "disabled": true
                }
              ]
            },
            "description": "Enrolls multiple users in one or more courses in a single operation.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/bulk_enrollment`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user_ids[]",
                  "value": "",
                  "description": "The user IDs to enroll in the courses.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course_ids[]",
                  "value": "",
                  "description": "The course IDs to enroll each user in.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Enrollments",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/enrollments`"
          }
        },
        {
          "name": "Post Courses Accept",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments/:id/accept",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments",
                ":id",
                "accept"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "accepts a pending course invitation for the current user\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/enrollments/:id/accept`"
          }
        },
        {
          "name": "Post Courses Reject",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments/:id/reject",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments",
                ":id",
                "reject"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "rejects a pending course invitation for the current user\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/enrollments/:id/reject`"
          }
        },
        {
          "name": "Post Sections Enrollments",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/enrollments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "enrollments"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                }
              ],
              "query": [
                {
                  "key": "enrollment[role_id]",
                  "value": "",
                  "description": "Assigns a custom course-level role to the user.",
                  "disabled": true
                },
                {
                  "key": "enrollment[enrollment_state]",
                  "value": "",
                  "description": "If set to ‘active,’ student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is ‘invited.’.If set to ‘inactive’, student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.Allowed values: active, invited, inactive",
                  "disabled": false
                },
                {
                  "key": "enrollment[course_section_id]",
                  "value": "",
                  "description": "The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.",
                  "disabled": true
                },
                {
                  "key": "enrollment[limit_privileges_to_course_section]",
                  "value": "",
                  "description": "If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id.For teachers and TAs, this includes grading privileges.Section-limited students will not see any users (including teachers and TAs) not enrolled in their sections.Users may have other enrollments that grant privileges to multiple sections in the same course.",
                  "disabled": true
                },
                {
                  "key": "enrollment[notify]",
                  "value": "",
                  "description": "If true, a notification will be sent to the enrolled user. Notifications are not sent by default.",
                  "disabled": true
                },
                {
                  "key": "enrollment[self_enrollment_code]",
                  "value": "",
                  "description": "If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be ‘self’. The enrollment_state will be set to ‘active’ and all other arguments will be ignored.",
                  "disabled": true
                },
                {
                  "key": "enrollment[self_enrolled]",
                  "value": "",
                  "description": "If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "enrollment[associated_user_id]",
                  "value": "",
                  "description": "For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student’s enrollments (for example, as a parent), please use the User Observees API.",
                  "disabled": true
                },
                {
                  "key": "enrollment[sis_user_id]",
                  "value": "",
                  "description": "Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.",
                  "disabled": false
                },
                {
                  "key": "enrollment[integration_id]",
                  "value": "",
                  "description": "Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.",
                  "disabled": false
                },
                {
                  "key": "root_account",
                  "value": "",
                  "description": "The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new user enrollment for a course or section.\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/enrollments`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enrollment[start_at]",
                  "value": "",
                  "description": "The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment[end_at]",
                  "value": "",
                  "description": "The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment[user_id]",
                  "value": "",
                  "description": "The ID of the user to be enrolled in the course.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment[type]",
                  "value": "",
                  "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise ‘StudentEnrollment’ will be used.Allowed values: StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "enrollment[role]",
                  "value": "",
                  "description": "Assigns a custom course-level role to the user.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Reactivate",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/enrollments/:id/reactivate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "enrollments",
                ":id",
                "reactivate"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Activates an inactive enrollment\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/enrollments/:id/reactivate`"
          }
        },
        {
          "name": "Put Courses Last_Attended",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/users/:user_id/last_attended",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "users",
                ":user_id",
                "last_attended"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Add last attended date to student enrollment in course\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/users/:user_id/last_attended`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "date",
                  "value": "",
                  "description": "The last attended date of a student enrollment in a course.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Reports",
      "description": "",
      "item": [
        {
          "name": "Create Error_Reports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/error_reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "error_reports"
              ],
              "query": [
                {
                  "key": "error[url]",
                  "value": "",
                  "description": "URL from which the report was issued",
                  "disabled": true
                },
                {
                  "key": "error[email]",
                  "value": "",
                  "description": "Email address for the reporting user",
                  "disabled": true
                },
                {
                  "key": "error[comments]",
                  "value": "",
                  "description": "The long version of the story from the user one what they experienced",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new error report documenting an experienced problem Performs the same action as when a user uses the “help -> report a problem” dialog.\n\n**OAuth Scope:** `url:POST|/api/v1/error_reports`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "error[subject]",
                  "value": "",
                  "description": "The summary of the problem",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "error[http_env]",
                  "value": "",
                  "description": "A collection of metadata about the users’ environment. If not provided, canvas will collect it based on information found in the request. (Doesn’t have to be HTTPENV info, could be anything JSON object that can be serialized as a hash, a mobile app might include relevant metadata for itself)",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "External Tools",
      "description": "API for accessing and configuring external tools on accounts and courses. \"External tools\" are IMS LTI links: http://www.imsglobal.org/developers/LTI/index.cfm. For a definitive list of all supported placements for external tools and more information on configuring them, see the [Placements Documentation](https://github.com/instructure/api-docu-portal/blob/prod/gitbook/services/canvas/file.placements_overview).",
      "item": [
        {
          "name": "Delete Accounts External_Tools",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "Remove the specified external tool\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/external_tools/:external_tool_id`"
          }
        },
        {
          "name": "Delete Accounts Rce_Favorites",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/rce_favorites/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                "rce_favorites",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Unmark the specified external tool as a favorite in the RCE editor for the given account. The tool will remain available but will no longer appear in the preferred favorites location.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/external_tools/rce_favorites/:id`"
          }
        },
        {
          "name": "Delete Accounts Top_Nav_Favorites",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                "top_nav_favorites",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Removes the dedicated button in Top Navigation for the specified tool for the given account.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id`"
          }
        },
        {
          "name": "Delete Courses External_Tools",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/external_tools/:external_tool_id`"
          }
        },
        {
          "name": "Get Accounts External_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/external_tools`"
          }
        },
        {
          "name": "Get Accounts External_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "Returns the specified external tool. Returns a [ContextExternalTool](#contextexternaltool) object. ### [Create an external tool](#method.external_tools.create) <a href=\"#method.external_tools.create\" id=\"method.external_tools.create\"></a> [ExternalToolsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/external_tools/:external_tool_id`"
          }
        },
        {
          "name": "Get Accounts Sessionless_Launch",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/sessionless_launch",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                "sessionless_launch"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The external id of the tool to launch.",
                  "disabled": true
                },
                {
                  "key": "url",
                  "value": "",
                  "description": "The LTI launch url for the external tool.",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The assignment id for an assignment launch. Required if launch_type is set to “assessment”.",
                  "disabled": false
                },
                {
                  "key": "module_item_id",
                  "value": "",
                  "description": "The assignment id for a module item launch. Required if launch_type is set to “module_item”.",
                  "disabled": false
                },
                {
                  "key": "launch_type",
                  "value": "",
                  "description": "The type of launch to perform on the external tool. Placement names (eg. “course_navigation”) can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.Allowed values: assessment, module_item",
                  "disabled": true
                },
                {
                  "key": "resource_link_lookup_uuid",
                  "value": "",
                  "description": "The identifier to lookup a resource link.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a sessionless launch url for an external tool. Prefers the resource\\_link\\_lookup\\_uuid, but defaults to the other passed ``` parameters id, url, and launch_type ``` NOTE: Either the resource\\_link\\_lookup\\_uuid, id, or url must be provided unless launch\\_type is assessment or module\\_item.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/external_tools/sessionless_launch`"
          }
        },
        {
          "name": "Get Courses External_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/external_tools`"
          }
        },
        {
          "name": "Get Courses External_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/external_tools/:external_tool_id`"
          }
        },
        {
          "name": "Get Courses Sessionless_Launch",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools/sessionless_launch",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools",
                "sessionless_launch"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/external_tools/sessionless_launch`"
          }
        },
        {
          "name": "Get Courses Visible_Course_Nav_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools/visible_course_nav_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools",
                "visible_course_nav_tools"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Get a list of external tools with the course\\_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation. The response format is the same as Get visible course navigation tools.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/external_tools/visible_course_nav_tools`"
          }
        },
        {
          "name": "Get External_Tools Visible_Course_Nav_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/external_tools/visible_course_nav_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "external_tools",
                "visible_course_nav_tools"
              ],
              "query": [
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context_codes to retrieve visible course nav tools for (for example, course_123). Only courses are presently supported.",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of external tools with the course\\_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation. The response format is the same as for List external tools, but with additional context\\_id and context\\_name fields on each element in the array.\n\n**OAuth Scope:** `url:GET|/api/v1/external_tools/visible_course_nav_tools`"
          }
        },
        {
          "name": "Get Groups External_Tools",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/external_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "external_tools"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name of the tools to match and return.",
                  "disabled": true
                },
                {
                  "key": "selectable",
                  "value": "",
                  "description": "If true, then only tools that are meant to be selectable are returned.",
                  "disabled": true
                },
                {
                  "key": "include_parents",
                  "value": "",
                  "description": "If true, then include tools installed in all accounts above the current context",
                  "disabled": true
                },
                {
                  "key": "placement",
                  "value": "",
                  "description": "The placement type to filter by.Return all tools at the current context as well as all tools from the parent, and filter the tools list to only those with a placement of ‘editor_button’",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/external_tools`"
          }
        },
        {
          "name": "Post Accounts External_Tools",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "description",
                  "value": "",
                  "description": "A description of the tool",
                  "disabled": true
                },
                {
                  "key": "url",
                  "value": "",
                  "description": "The url to match links against. Either “url” or “domain” should be set, not both.",
                  "disabled": true
                },
                {
                  "key": "domain",
                  "value": "",
                  "description": "The domain to match links against. Either “url” or “domain” should be set, not both.",
                  "disabled": true
                },
                {
                  "key": "icon_url",
                  "value": "",
                  "description": "The url of the icon to show for this tool",
                  "disabled": true
                },
                {
                  "key": "text",
                  "value": "",
                  "description": "The default text to show for this tool",
                  "disabled": true
                },
                {
                  "key": "custom_fields[field_name]",
                  "value": "",
                  "description": "Custom fields that will be sent to the tool consumer; can be used multiple times",
                  "disabled": true
                },
                {
                  "key": "is_rce_favorite",
                  "value": "",
                  "description": "(Deprecated in favor of Mark tool to RCE Favorites and Unmark tool from RCE Favorites) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.",
                  "disabled": true
                },
                {
                  "key": "config_type",
                  "value": "",
                  "description": "Configuration can be passed in as Common Cartridge XML instead of using query parameters. If this value is “by_url” or “by_xml” then an XML configuration will be expected in either the “config_xml” or “config_url” parameter. Note that the name parameter overrides the tool name provided in the XML.Allowed values: by_url, by_xml",
                  "disabled": true
                },
                {
                  "key": "config_xml",
                  "value": "",
                  "description": "XML tool configuration, as specified in the Common Cartridge XML specification. This is required if “config_type” is set to “by_xml”",
                  "disabled": false
                },
                {
                  "key": "config_url",
                  "value": "",
                  "description": "URL where the server can retrieve an XML tool configuration, as specified in the Common Cartridge XML specification. This is required if “config_type” is set to “by_url”",
                  "disabled": false
                },
                {
                  "key": "not_selectable",
                  "value": "",
                  "description": "Default: false. If set to true, and if resource_selection is set to false, the tool won’t show up in the external tool selection UI in modules and assignments",
                  "disabled": true
                },
                {
                  "key": "oauth_compliant",
                  "value": "",
                  "description": "Default: false, if set to true LTI query params will not be copied to the post body.",
                  "disabled": true
                },
                {
                  "key": "unified_tool_id",
                  "value": "",
                  "description": "The unique identifier for the tool in LearnPlatform",
                  "disabled": true
                }
              ]
            },
            "description": "Create an external tool in the specified course/account. The created tool will be returned, see the “show” endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard. See the \\<a href=“file.lti\\_dev\\_key\\_config.html#placements-params”>Placements Documentation\\</a> for more information on what placements are available, the possible fields, and their accepted values.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/external_tools`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "client_id",
                  "value": "",
                  "description": "The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the tool",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "privacy_level",
                  "value": "",
                  "description": "How much user information to send to the external tool.Allowed values: anonymous, name_only, email_only, public",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "consumer_key",
                  "value": "",
                  "description": "The consumer key for the external tool",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "shared_secret",
                  "value": "",
                  "description": "The shared secret with the external tool",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "<placement_name>[<placement_configuration_key>]",
                  "value": "",
                  "description": "Set the \\ value for a specific placement.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Accounts Rce_Favorites",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/rce_favorites/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                "rce_favorites",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Mark the specified editor\\_button external tool as a favorite in the RCE editor for courses in the given account and its subaccounts (if the subaccounts haven’t set their own RCE Favorites). This places the tool in a preferred location in the RCE. Cannot mark more than 2 tools as RCE Favorites.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/external_tools/rce_favorites/:id`"
          }
        },
        {
          "name": "Post Accounts Top_Nav_Favorites",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                "top_nav_favorites",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Adds a dedicated button in Top Navigation for the specified tool for the given account. Cannot set more than 2 top\\_navigation Favorites.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id`"
          }
        },
        {
          "name": "Post Courses External_Tools",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/external_tools`"
          }
        },
        {
          "name": "Put Accounts External_Tools",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "Update the specified external tool. Uses same parameters as create. Returns the updated tool. NOTE: Any updates made to LTI 1.3 tools with this API will be overridden if any changes are made to the tool’s associated LTI Registration/Developer Key configuration. In almost all cases, changes should be made to the tool’s associated LTI Registration configuration, not individual tools.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/external_tools/:external_tool_id`"
          }
        },
        {
          "name": "Put Courses External_Tools",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/external_tools/:external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "external_tools",
                ":external_tool_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "external_tool_id",
                  "value": "<external_tool_id>",
                  "description": "The external_tool_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/external_tools/:external_tool_id`"
          }
        }
      ]
    },
    {
      "name": "Favorites",
      "description": "",
      "item": [
        {
          "name": "Delete Users Courses",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "courses"
              ]
            },
            "description": "Reset the current user’s course favorites to the default automatically generated list of enrolled courses\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/favorites/courses`"
          }
        },
        {
          "name": "Delete Users Courses",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "the ID or SIS ID of the course to remove",
                  "disabled": true
                }
              ]
            },
            "description": "Remove a course from the current user’s favorites.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/favorites/courses/:id`"
          }
        },
        {
          "name": "Delete Users Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "groups"
              ]
            },
            "description": "Reset the current user’s group favorites to the default automatically generated list of enrolled group\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/favorites/groups`"
          }
        },
        {
          "name": "Delete Users Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "the ID or SIS ID of the group to remove",
                  "disabled": true
                }
              ]
            },
            "description": "Remove a group from the current user’s favorites.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/favorites/groups/:id`"
          }
        },
        {
          "name": "Get Users Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "courses"
              ],
              "query": [
                {
                  "key": "exclude_blueprint_courses",
                  "value": "",
                  "description": "When set, only return courses that are not configured as blueprint courses.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen any favorites, then a selection of currently enrolled courses will be returned. See the [List courses API](../courses#method.courses.index) for details on accepted include\\[] parameters.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/favorites/courses`"
          }
        },
        {
          "name": "Get Users Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "groups"
              ]
            },
            "description": "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen any favorites, then a selection of groups that the user is a member of will be returned.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/favorites/groups`"
          }
        },
        {
          "name": "Post Users Courses",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/courses/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "courses",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Add a course to the current user’s favorites. If the course is already in the user’s favorites, nothing happens. Canvas for Elementary subject and homeroom courses can be added to favorites, but this has no effect in the UI.\n\n**OAuth Scope:** `url:POST|/api/v1/users/self/favorites/courses/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The ID or SIS ID of the course to add. The current user must be registered in the course.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Users Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/favorites/groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "favorites",
                "groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Add a group to the current user’s favorites. If the group is already in the user’s favorites, nothing happens.\n\n**OAuth Scope:** `url:POST|/api/v1/users/self/favorites/groups/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The ID or SIS ID of the group to add. The current user must be a member of the group.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Feature Flags",
      "description": "Manage optional features in Canvas. _Deprecated_\\[2016-01-15] FeatureFlags previously had a locking\\_account\\_id field; it was never used, and has been removed. It is still included in API responses for backwards compatibility reasons. Its value is always null.",
      "item": [
        {
          "name": "Delete Accounts Flags",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/features/flags/:feature`"
          }
        },
        {
          "name": "Delete Courses Flags",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/features/flags/:feature`"
          }
        },
        {
          "name": "Delete Users Flags",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "Remove feature flag for a given Account, Course, or User. (Note that the flag must be defined on the Account, Course, or User directly.) The object will then inherit the feature flags from a higher account, if any exist. If this flag was ‘on’ or ‘off’, then lower-level account flags that were masked by this one will apply again.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/features/flags/:feature`"
          }
        },
        {
          "name": "Get Accounts Features",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/features",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "features"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/features`"
          }
        },
        {
          "name": "Get Accounts Enabled",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/features/enabled",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "features",
                "enabled"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/features/enabled`"
          }
        },
        {
          "name": "Get Accounts Flags",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/features/flags/:feature`"
          }
        },
        {
          "name": "Get Courses Features",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/features",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "features"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/features`"
          }
        },
        {
          "name": "Get Courses Enabled",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/features/enabled",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "features",
                "enabled"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/features/enabled`"
          }
        },
        {
          "name": "Get Courses Flags",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/features/flags/:feature`"
          }
        },
        {
          "name": "Get Features Environment",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/features/environment",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "features",
                "environment"
              ]
            },
            "description": "Return a hash of global feature options that pertain to the Canvas user interface. This is the same information supplied to the web interface as `ENV.FEATURES`.\n\n**OAuth Scope:** `url:GET|/api/v1/features/environment`"
          }
        },
        {
          "name": "Get Users Features",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/features",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "features"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "A paginated list of all features that apply to a given Account, Course, or User.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/features`"
          }
        },
        {
          "name": "Get Users Enabled",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/features/enabled",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "features",
                "enabled"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "A paginated list of all features that are enabled on a given Account, Course, or User. Only the feature names are returned.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/features/enabled`"
          }
        },
        {
          "name": "Get Users Flags",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "Get the feature flag that applies to a given Account, Course, or User. The flag may be defined on the object, or it may be inherited from a parent account. You can look at the context\\_id and context\\_type of the returned object to determine which is the case. If these fields are missing, then the object is the global Canvas default.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/features/flags/:feature`"
          }
        },
        {
          "name": "Put Accounts Flags",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/features/flags/:feature`"
          }
        },
        {
          "name": "Put Courses Flags",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/features/flags/:feature`"
          }
        },
        {
          "name": "Put Users Flags",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/features/flags/:feature",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "features",
                "flags",
                ":feature"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "feature",
                  "value": "<feature>",
                  "description": "The feature identifier"
                }
              ],
              "query": [
                {
                  "key": "state",
                  "value": "",
                  "description": "“off”The feature is not available for the course, user, or account and sub-accounts.“allowed”(valid only on accounts) The feature is off in the account, but may be enabled in sub-accounts and courses by setting a feature flag on the sub-account or course.“on”The feature is turned on unconditionally for the user, course, or account and sub-accounts.Allowed values: off, allowed, on",
                  "disabled": true
                }
              ]
            },
            "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets a feature flag for the same feature in any state other than “allowed”.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/features/flags/:feature`"
          }
        }
      ]
    },
    {
      "name": "Files",
      "description": "An API for managing files and folders See the File Upload Documentation for details on the file upload workflow.",
      "item": [
        {
          "name": "Delete Courses Usage_Rights",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/usage_rights`"
          }
        },
        {
          "name": "Delete Files",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "replace",
                  "value": "",
                  "description": "This action is irreversible. If replace is set to true the file contents will be replaced with a generic “file has been removed” file. This also destroys any previews that have been generated for the file. Must have manage files and become other users permissions",
                  "disabled": true
                }
              ]
            },
            "description": "Remove the specified file. Unlike most other DELETE endpoints, using this endpoint will result in comprehensive, irretrievable destruction of the file. It should be used with the ‘replace\\` parameter set to true in cases where the file preview also needs to be destroyed (such as to remove files that violate privacy laws).\n\n**OAuth Scope:** `url:DELETE|/api/v1/files/:id`"
          }
        },
        {
          "name": "Delete Folders",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "force",
                  "value": "",
                  "description": "Set to ‘true’ to allow deleting a non-empty folder",
                  "disabled": true
                }
              ]
            },
            "description": "Remove the specified folder. You can only delete empty folders unless you set the ‘force’ flag\n\n**OAuth Scope:** `url:DELETE|/api/v1/folders/:id`"
          }
        },
        {
          "name": "Delete Groups Usage_Rights",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/usage_rights`"
          }
        },
        {
          "name": "Delete Users Usage_Rights",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "file_ids[]",
                  "value": "",
                  "description": "List of ids of files to remove associated usage rights from.",
                  "disabled": true
                },
                {
                  "key": "folder_ids[]",
                  "value": "",
                  "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                  "disabled": true
                }
              ]
            },
            "description": "Removes copyright and license information associated with one or more files\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/usage_rights`"
          }
        },
        {
          "name": "Get Courses Content_Licenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/content_licenses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "content_licenses"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/content_licenses`"
          }
        },
        {
          "name": "Get Courses Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/files`"
          }
        },
        {
          "name": "Get Courses Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/files/:id`"
          }
        },
        {
          "name": "Get Courses File_Ref",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files/file_ref/:migration_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files",
                "file_ref",
                ":migration_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "migration_id",
                  "value": "<migration_id>",
                  "description": "The migration_id identifier"
                }
              ]
            },
            "description": "Get information about a file from a course copy file reference\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/files/file_ref/:migration_id`"
          }
        },
        {
          "name": "Get Courses Quota",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files/quota",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files",
                "quota"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/files/quota`"
          }
        },
        {
          "name": "Get Courses Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/folders`"
          }
        },
        {
          "name": "Get Courses Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/folders/:id`"
          }
        },
        {
          "name": "Get Courses By_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders/by_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders",
                "by_path"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/folders/by_path`"
          }
        },
        {
          "name": "Get Courses *Full_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders/by_path/*full_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders",
                "by_path",
                "*full_path"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/folders/by_path/*full_path`"
          }
        },
        {
          "name": "Get Courses Media",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders/media",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders",
                "media"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/folders/media`"
          }
        },
        {
          "name": "List Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/files/:id`"
          }
        },
        {
          "name": "Get Files Icon_Metadata",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id/icon_metadata",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id",
                "icon_metadata"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the icon maker file attachment metadata\n\n**OAuth Scope:** `url:GET|/api/v1/files/:id/icon_metadata`"
          }
        },
        {
          "name": "Get Files Public_Url",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id/public_url",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id",
                "public_url"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "submission_id",
                  "value": "",
                  "description": "The id of the submission the file is associated with. Provide this argument to gain access to a file that has been submitted to an assignment (Canvas will verify that the file belongs to the submission and the calling user has rights to view the submission).",
                  "disabled": true
                }
              ]
            },
            "description": "Determine the URL that should be used for inline preview of the file.\n\n**OAuth Scope:** `url:GET|/api/v1/files/:id/public_url`"
          }
        },
        {
          "name": "List Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the details for a folder You can get the root folder from a context by using ‘root’ as the :id. For example, you could get the root folder for a course like:\n\n**OAuth Scope:** `url:GET|/api/v1/folders/:id`"
          }
        },
        {
          "name": "Get Folders Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":id",
                "files"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "content_types[]",
                  "value": "",
                  "description": "Filter results by content-type. You can specify type/subtype pairs (e.g., ‘image/jpeg’), or simply types (e.g., ‘image’, which will match ‘image/gif’, ‘image/jpeg’, etc.).",
                  "disabled": true
                },
                {
                  "key": "exclude_content_types[]",
                  "value": "",
                  "description": "Exclude given content-types from your results. You can specify type/subtype pairs (e.g., ‘image/jpeg’), or simply types (e.g., ‘image’, which will match ‘image/gif’, ‘image/jpeg’, etc.).",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name of the files to match and return.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“user”the user who uploaded the file or last edited its content“usage_rights”copyright and license information for the file (see UsageRights)Allowed values: user",
                  "disabled": true
                },
                {
                  "key": "only[]",
                  "value": "",
                  "description": "Array of information to restrict to. Overrides include[]“names”only returns file name information",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "",
                  "description": "Sort results by this field. Defaults to ‘name’. Note that ‘sort=userimpliesinclude[]=user.</p> Allowed values: name, size, created_at, updated_at, content_type, user`",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The sorting order. Defaults to ‘asc’.Allowed values: asc, desc",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of files for the folder or course.\n\n**OAuth Scope:** `url:GET|/api/v1/folders/:id/files`"
          }
        },
        {
          "name": "Get Folders Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":id",
                "folders"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of folders in the folder.\n\n**OAuth Scope:** `url:GET|/api/v1/folders/:id/folders`"
          }
        },
        {
          "name": "Get Groups Content_Licenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/content_licenses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "content_licenses"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/content_licenses`"
          }
        },
        {
          "name": "Get Groups Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "files"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/files`"
          }
        },
        {
          "name": "Get Groups Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/files/:id`"
          }
        },
        {
          "name": "Get Groups Quota",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/files/quota",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "files",
                "quota"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/files/quota`"
          }
        },
        {
          "name": "Get Groups Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of all folders for the given context. This will be returned as a flat list containing all subfolders as well.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/folders`"
          }
        },
        {
          "name": "Get Groups Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/folders/:id`"
          }
        },
        {
          "name": "Get Groups By_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders/by_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders",
                "by_path"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy, starting at the root folder, and ending at the requested folder. The given path is relative to the context’s root folder and does not include the root folder’s name (e.g., “course files”). If an empty path is given, the context’s root folder alone is returned. Otherwise, if no folder exists with the given full path, a Not Found error is returned.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/folders/by_path`"
          }
        },
        {
          "name": "Get Groups *Full_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders/by_path/*full_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders",
                "by_path",
                "*full_path"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/folders/by_path/*full_path`"
          }
        },
        {
          "name": "Get Groups Media",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders/media",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders",
                "media"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Returns the details for a designated upload folder that the user has rights to upload to, and creates it if it doesn’t exist. If the current user does not have the permissions to manage files in the course or group, the folder will belong to the current user directly.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/folders/media`"
          }
        },
        {
          "name": "Get Users Content_Licenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/content_licenses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "content_licenses"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "A paginated list of licenses that can be applied Returns a list of [License](#license) objects.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/content_licenses`"
          }
        },
        {
          "name": "Get Users Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "files"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/files`"
          }
        },
        {
          "name": "Get Users Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“user”the user who uploaded the file or last edited its content“usage_rights”copyright and license information for the file (see UsageRights)Allowed values: user",
                  "disabled": true
                },
                {
                  "key": "replacement_chain_context_type",
                  "value": "",
                  "description": "When a user replaces a file during upload, Canvas keeps track of the “replacement chain.”Include this parameter if you wish Canvas to follow the replacement chain if the requested file was deleted and replaced by another.Must be set to ‘course’ or ‘account’. The “replacement_chain_context_id” parameter must also be included.",
                  "disabled": true
                },
                {
                  "key": "replacement_chain_context_id",
                  "value": "",
                  "description": "When a user replaces a file during upload, Canvas keeps track of the “replacement chain.”Include this parameter if you wish Canvas to follow the replacement chain if the requested file was deleted and replaced by another.Indicates the context ID Canvas should use when following the “replacement chain.” The “replacement_chain_context_type” parameter must also be included.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the standard attachment json object\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/files/:id`"
          }
        },
        {
          "name": "Get Users Quota",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/files/quota",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "files",
                "quota"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns the total and used storage quota for the course, group, or user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/files/quota`"
          }
        },
        {
          "name": "Get Users Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/folders`"
          }
        },
        {
          "name": "Get Users Folders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/folders/:id`"
          }
        },
        {
          "name": "Get Users By_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/folders/by_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "folders",
                "by_path"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/folders/by_path`"
          }
        },
        {
          "name": "Get Users *Full_Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/folders/by_path/*full_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "folders",
                "by_path",
                "*full_path"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/folders/by_path/*full_path`"
          }
        },
        {
          "name": "Post Accounts Folders",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "parent_folder_id",
                  "value": "",
                  "description": "The id of the folder to store the new folder in. An error will be returned if this does not correspond to an existing folder. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                  "disabled": true
                },
                {
                  "key": "parent_folder_path",
                  "value": "",
                  "description": "The path of the folder to store the new folder in. The path separator is the forward slash ‘/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                  "disabled": true
                },
                {
                  "key": "locked",
                  "value": "",
                  "description": "Flag the folder as locked",
                  "disabled": true
                },
                {
                  "key": "hidden",
                  "value": "",
                  "description": "Flag the folder as hidden",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "Set an explicit sort position for the folder",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a folder in the specified context\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/folders`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the folder",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "The datetime to lock the folder at",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "unlock_at",
                  "value": "",
                  "description": "The datetime to unlock the folder at",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Folders",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/folders`"
          }
        },
        {
          "name": "Create Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/files/:id`"
          }
        },
        {
          "name": "Post Files Reset_Verifier",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id/reset_verifier",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id",
                "reset_verifier"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Resets the link verifier. Any existing links to the file using the previous hard-coded “verifier” parameter will no longer automatically grant access. Must have manage files and become other users permissions\n\n**OAuth Scope:** `url:POST|/api/v1/files/:id/reset_verifier`"
          }
        },
        {
          "name": "Post Folders Copy_File",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:dest_folder_id/copy_file",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":dest_folder_id",
                "copy_file"
              ],
              "variable": [
                {
                  "key": "dest_folder_id",
                  "value": "<dest_folder_id>",
                  "description": "The dest_folder_id identifier"
                }
              ],
              "query": [
                {
                  "key": "on_duplicate",
                  "value": "",
                  "description": "What to do if a file with the same name already exists at the destination. If such a file exists and this parameter is not given, the call will fail.“overwrite”Replace an existing file with the same name“rename”Add a qualifier to make the new filename uniqueAllowed values: overwrite, rename",
                  "disabled": true
                }
              ]
            },
            "description": "Copy a file from elsewhere in Canvas into a folder. Copying a file across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution.\n\n**OAuth Scope:** `url:POST|/api/v1/folders/:dest_folder_id/copy_file`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "source_file_id",
                  "value": "",
                  "description": "The id of the source file",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Folders Copy_Folder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:dest_folder_id/copy_folder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":dest_folder_id",
                "copy_folder"
              ],
              "variable": [
                {
                  "key": "dest_folder_id",
                  "value": "<dest_folder_id>",
                  "description": "The dest_folder_id identifier"
                }
              ]
            },
            "description": "Copy a folder (and its contents) from elsewhere in Canvas into a folder. Copying a folder across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution. If the source and destination folders are in the same context, the source folder may not contain the destination folder. A folder will be renamed at its destination if another folder with the same name already exists.\n\n**OAuth Scope:** `url:POST|/api/v1/folders/:dest_folder_id/copy_folder`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "source_folder_id",
                  "value": "",
                  "description": "The id of the source folder",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Folders Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:folder_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":folder_id",
                "files"
              ],
              "variable": [
                {
                  "key": "folder_id",
                  "value": "<folder_id>",
                  "description": "The folder_id identifier"
                }
              ]
            },
            "description": "Upload a file to a folder. This API endpoint is the first step in uploading a file. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a course or group can upload files to a folder in that course or group. ### [Copy a file](#method.folders.copy_file) <a href=\"#method.folders.copy_file\" id=\"method.folders.copy_file\"></a> [FoldersController#copy\\_file](https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/folders/:folder_id/files`"
          }
        },
        {
          "name": "Post Folders Folders",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:folder_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":folder_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "folder_id",
                  "value": "<folder_id>",
                  "description": "The folder_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/folders/:folder_id/folders`"
          }
        },
        {
          "name": "Post Groups Folders",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/folders`"
          }
        },
        {
          "name": "Post Users Folders",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/folders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "folders"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/folders`"
          }
        },
        {
          "name": "Put Courses Usage_Rights",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/usage_rights`"
          }
        },
        {
          "name": "Update Files",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The new display name of the file, with a limit of 255 characters.",
                  "disabled": true
                },
                {
                  "key": "parent_folder_id",
                  "value": "",
                  "description": "The id of the folder to move this file into. The new folder must be in the same context as the original parent folder. If the file is in a context without folders this does not apply.",
                  "disabled": true
                },
                {
                  "key": "on_duplicate",
                  "value": "",
                  "description": "If the file is moved to a folder containing a file with the same name, or renamed to a name matching an existing file, the API call will fail unless this parameter is supplied.“overwrite”Replace the existing file with the same name“rename”Add a qualifier to make the new filename uniqueAllowed values: overwrite, rename",
                  "disabled": true
                },
                {
                  "key": "locked",
                  "value": "",
                  "description": "Flag the file as locked",
                  "disabled": true
                },
                {
                  "key": "hidden",
                  "value": "",
                  "description": "Flag the file as hidden",
                  "disabled": true
                },
                {
                  "key": "visibility_level",
                  "value": "",
                  "description": "Configure which roles can access this file",
                  "disabled": true
                }
              ]
            },
            "description": "Update some settings on the specified file\n\n**OAuth Scope:** `url:PUT|/api/v1/files/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "The datetime to lock the file at",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "unlock_at",
                  "value": "",
                  "description": "The datetime to unlock the file at",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Folders",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/folders/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "folders",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The new name of the folder",
                  "disabled": true
                },
                {
                  "key": "parent_folder_id",
                  "value": "",
                  "description": "The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder.",
                  "disabled": true
                },
                {
                  "key": "locked",
                  "value": "",
                  "description": "Flag the folder as locked",
                  "disabled": true
                },
                {
                  "key": "hidden",
                  "value": "",
                  "description": "Flag the folder as hidden",
                  "disabled": true
                },
                {
                  "key": "position",
                  "value": "",
                  "description": "Set an explicit sort position for the folder",
                  "disabled": true
                }
              ]
            },
            "description": "Updates a folder\n\n**OAuth Scope:** `url:PUT|/api/v1/folders/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "The datetime to lock the folder at",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "unlock_at",
                  "value": "",
                  "description": "The datetime to unlock the folder at",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Groups Usage_Rights",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/usage_rights`"
          }
        },
        {
          "name": "Put Users Usage_Rights",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/usage_rights",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "usage_rights"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "folder_ids[]",
                  "value": "",
                  "description": "List of ids of folders to search for files to set usage rights for. Note that new files uploaded to these folders do not automatically inherit these rights.",
                  "disabled": true
                },
                {
                  "key": "publish",
                  "value": "",
                  "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to ‘true` to publish on save).",
                  "disabled": true
                },
                {
                  "key": "usage_rights[legal_copyright]",
                  "value": "",
                  "description": "The legal copyright line for the files",
                  "disabled": true
                },
                {
                  "key": "usage_rights[license]",
                  "value": "",
                  "description": "The license that applies to the files. See the List licenses endpoint for the supported license types.",
                  "disabled": true
                }
              ]
            },
            "description": "Sets copyright and license information for one or more files\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/usage_rights`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file_ids[]",
                  "value": "",
                  "description": "List of ids of files to set usage rights for.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "usage_rights[use_justification]",
                  "value": "",
                  "description": "The intellectual property justification for using the files in CanvasAllowed values: own_copyright, used_by_permission, fair_use, public_domain, creative_commons",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Grade Change Log",
      "description": "Query audit log of grade change events. For each endpoint, a compound document is returned. The primary collection of event objects is paginated, ordered by date descending. Secondary collections of assignments, courses, students and graders related to the returned events are also included. Refer to the Assignment, Courses, and Users APIs for descriptions of the objects in those collections.",
      "item": [
        {
          "name": "Get Audit Grade_Change",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/grade_change",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "grade_change"
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "Restrict query to events in the specified course.",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "Restrict query to the given assignment. If “override” is given, query the course final grade override instead.",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "User id of a student to search grading events for.",
                  "disabled": true
                },
                {
                  "key": "grader_id",
                  "value": "",
                  "description": "User id of a grader to search grading events for.",
                  "disabled": true
                },
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List grade change events satisfying all given parameters. Teachers may query for events in courses they teach. Queries without `course_id` require account administrator rights. At least one of `course_id`, `assignment_id`, `student_id`, or `grader_id` must be specified.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/grade_change`"
          }
        },
        {
          "name": "Get Audit Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/grade_change/assignments/:assignment_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "grade_change",
                "assignments",
                ":assignment_id"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List grade change events for a given assignment.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/grade_change/assignments/:assignment_id`"
          }
        },
        {
          "name": "Get Audit Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/grade_change/courses/:course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "grade_change",
                "courses",
                ":course_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List grade change events for a given course.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/grade_change/courses/:course_id`"
          }
        },
        {
          "name": "Get Audit Graders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/grade_change/graders/:grader_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "grade_change",
                "graders",
                ":grader_id"
              ],
              "variable": [
                {
                  "key": "grader_id",
                  "value": "<grader_id>",
                  "description": "The grader_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List grade change events for a given grader.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/grade_change/graders/:grader_id`"
          }
        },
        {
          "name": "Get Audit Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/audit/grade_change/students/:student_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "audit",
                "grade_change",
                "students",
                ":student_id"
              ],
              "variable": [
                {
                  "key": "student_id",
                  "value": "<student_id>",
                  "description": "The student_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want events.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want events.",
                  "disabled": true
                }
              ]
            },
            "description": "List grade change events for a given student.\n\n**OAuth Scope:** `url:GET|/api/v1/audit/grade_change/students/:student_id`"
          }
        }
      ]
    },
    {
      "name": "Gradebook History",
      "description": "API for accessing the versioned history of student submissions along with their grade changes, organized by the date of the submission.",
      "item": [
        {
          "name": "Get Courses Gradebook_History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/gradebook_history/:date",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "gradebook_history",
                ":date"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "date",
                  "value": "<date>",
                  "description": "The date identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the contextual course for this API call",
                  "disabled": true
                },
                {
                  "key": "date",
                  "value": "",
                  "description": "The date for which you would like to see detailed information",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the graders who worked on this day, along with the assignments they worked on. More details can be obtained by selecting a grader and assignment and calling the ‘submissions’ api endpoint for a given date.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/gradebook_history/:date`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/gradebook_history/:date/graders/:grader_id/assignments/:assignment_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "gradebook_history",
                ":date",
                "graders",
                ":grader_id",
                "assignments",
                ":assignment_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "date",
                  "value": "<date>",
                  "description": "The date identifier"
                },
                {
                  "key": "grader_id",
                  "value": "<grader_id>",
                  "description": "The grader_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the contextual course for this API call",
                  "disabled": true
                },
                {
                  "key": "date",
                  "value": "",
                  "description": "The date for which you would like to see submissions",
                  "disabled": true
                },
                {
                  "key": "grader_id",
                  "value": "",
                  "description": "The ID of the grader for which you want to see submissions",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The ID of the assignment for which you want to see submissions",
                  "disabled": true
                }
              ]
            },
            "description": "Gives a nested list of submission versions\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/gradebook_history/:date/graders/:grader_id/assignments/:assignment_id/submissions`"
          }
        },
        {
          "name": "Get Courses Days",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/gradebook_history/days",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "gradebook_history",
                "days"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the contextual course for this API call",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a map of dates to grader/assignment groups\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/gradebook_history/days`"
          }
        },
        {
          "name": "Get Courses Feed",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/gradebook_history/feed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "gradebook_history",
                "feed"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the contextual course for this API call",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The ID of the assignment for which you want to see submissions. If absent, versions of submissions from any assignment in the course are included.",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The ID of the user for which you want to see submissions. If absent, versions of submissions from any user in the course are included.",
                  "disabled": true
                },
                {
                  "key": "ascending",
                  "value": "",
                  "description": "Returns submission versions in ascending date order (oldest first). If absent, returns submission versions in descending date order (newest first).",
                  "disabled": true
                }
              ]
            },
            "description": "Gives a paginated, uncollated list of submission versions for all matching submissions in the context. This SubmissionVersion objects will not include the `new_grade` or `previous_grade` keys, only the `grade`; same for `graded_at` and `grader`.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/gradebook_history/feed`"
          }
        }
      ]
    },
    {
      "name": "Grading Period Sets",
      "description": "Manage grading period sets",
      "item": [
        {
          "name": "Delete Accounts Grading_Period_Sets",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_period_sets/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_period_sets",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/grading_period_sets/:id`"
          }
        },
        {
          "name": "Get Accounts Grading_Period_Sets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_period_sets",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_period_sets"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of grading period sets\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/grading_period_sets`"
          }
        },
        {
          "name": "Patch Accounts Grading_Period_Sets",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_period_sets/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_period_sets",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "grading_period_set[][weighted]",
                  "value": "",
                  "description": "A boolean to determine whether the grading periods in the set are weighted",
                  "disabled": true
                },
                {
                  "key": "grading_period_set[][display_totals_for_all_grading_periods]",
                  "value": "",
                  "description": "A boolean to determine whether the totals for all grading periods in the set are displayed",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing grading period set\n\n**OAuth Scope:** `url:PATCH|/api/v1/accounts/:account_id/grading_period_sets/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enrollment_term_ids[]",
                  "value": "",
                  "description": "A list of associated term ids for the grading period set",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_period_set[][title]",
                  "value": "",
                  "description": "The title of the grading period set",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Accounts Grading_Period_Sets",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_period_sets",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_period_sets"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "grading_period_set[weighted]",
                  "value": "",
                  "description": "A boolean to determine whether the grading periods in the set are weighted",
                  "disabled": true
                },
                {
                  "key": "grading_period_set[display_totals_for_all_grading_periods]",
                  "value": "",
                  "description": "A boolean to determine whether the totals for all grading periods in the set are displayed",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new grading period set\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/grading_period_sets`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "enrollment_term_ids[]",
                  "value": "",
                  "description": "A list of associated term ids for the grading period set",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_period_set[title]",
                  "value": "",
                  "description": "The title of the grading period set",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Grading Periods",
      "description": "Manage grading periods",
      "item": [
        {
          "name": "Delete Accounts Grading_Periods",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_periods/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_periods",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/grading_periods/:id`"
          }
        },
        {
          "name": "Delete Courses Grading_Periods",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_periods/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_periods",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/grading_periods/:id`"
          }
        },
        {
          "name": "Get Accounts Grading_Periods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_periods",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_periods"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/grading_periods`"
          }
        },
        {
          "name": "Get Courses Grading_Periods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_periods",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_periods"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of grading periods for the current course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/grading_periods`"
          }
        },
        {
          "name": "Get Courses Grading_Periods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_periods/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_periods",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the grading period with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/grading_periods/:id`"
          }
        },
        {
          "name": "Patch Courses Batch_Update",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_periods/batch_update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_periods",
                "batch_update"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PATCH|/api/v1/courses/:course_id/grading_periods/batch_update`"
          }
        },
        {
          "name": "Patch Grading_Period_Sets Batch_Update",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/grading_period_sets/:set_id/grading_periods/batch_update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "grading_period_sets",
                ":set_id",
                "grading_periods",
                "batch_update"
              ],
              "variable": [
                {
                  "key": "set_id",
                  "value": "<set_id>",
                  "description": "The set_id identifier"
                }
              ],
              "query": [
                {
                  "key": "grading_periods[][id]",
                  "value": "",
                  "description": "The id of the grading period. If the id parameter does not exist, a new grading period will be created.",
                  "disabled": true
                }
              ]
            },
            "description": "Update multiple grading periods\n\n**OAuth Scope:** `url:PATCH|/api/v1/grading_period_sets/:set_id/grading_periods/batch_update`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "set_id",
                  "value": "",
                  "description": "The id of the grading period set.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_periods[][title]",
                  "value": "",
                  "description": "The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "grading_periods[][start_date]",
                  "value": "",
                  "description": "The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "grading_periods[][end_date]",
                  "value": "",
                  "description": "The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "grading_periods[][close_date]",
                  "value": "",
                  "description": "The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "grading_periods[][weight]",
                  "value": "",
                  "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Grading_Periods",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_periods/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_periods",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update an existing grading period.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/grading_periods/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "grading_periods[][start_date]",
                  "value": "",
                  "description": "The date the grading period starts.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_periods[][end_date]",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_periods[][weight]",
                  "value": "",
                  "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Grading Standards",
      "description": "",
      "item": [
        {
          "name": "Delete Accounts Grading_Standards",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ]
            },
            "description": "Deletes the grading standard with the given id\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id`"
          }
        },
        {
          "name": "Delete Courses Grading_Standards",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/grading_standards/:grading_standard_id`"
          }
        },
        {
          "name": "Get Accounts Grading_Standards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_standards",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_standards"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of grading standards for the given context that are visible to the user.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/grading_standards`"
          }
        },
        {
          "name": "Get Accounts Grading_Standards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ]
            },
            "description": "Returns a grading standard for the given context that is visible to the user.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id`"
          }
        },
        {
          "name": "Get Courses Grading_Standards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_standards",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_standards"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/grading_standards`"
          }
        },
        {
          "name": "Get Courses Grading_Standards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/grading_standards/:grading_standard_id`"
          }
        },
        {
          "name": "Post Accounts Grading_Standards",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_standards",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_standards"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/grading_standards`"
          }
        },
        {
          "name": "Post Courses Grading_Standards",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_standards",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_standards"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "points_based",
                  "value": "",
                  "description": "Whether or not a grading scheme is points based. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "scaling_factor",
                  "value": "",
                  "description": "The factor by which to scale a percentage into a points based scheme grade. This is the maximum number of points possible in the grading scheme. Defaults to 1. Not required for percentage based grading schemes.",
                  "disabled": false
                }
              ]
            },
            "description": "Create a new grading standard\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/grading_standards`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title for the Grading Standard.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_scheme_entry[][name]",
                  "value": "",
                  "description": "The name for an entry value within a GradingStandard that describes the range of the value e.g. A-",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "grading_scheme_entry[][value]",
                  "value": "",
                  "description": "The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Grading_Standards",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title for the Grading Standard",
                  "disabled": true
                },
                {
                  "key": "points_based",
                  "value": "",
                  "description": "Whether or not a grading scheme is points based. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "scaling_factor",
                  "value": "",
                  "description": "The factor by which to scale a percentage into a points based scheme grade. This is the maximum number of points possible in the grading scheme. Defaults to 1. Not required for percentage based grading schemes.",
                  "disabled": false
                },
                {
                  "key": "grading_scheme_entry[][name]",
                  "value": "",
                  "description": "The name for an entry value within a GradingStandard that describes the range of the value e.g. A-",
                  "disabled": true
                }
              ]
            },
            "description": "Updates the grading standard with the given id If the grading standard has been used for grading, only the title can be updated. The data, points\\_based, and scaling\\_factor cannot be modified once the grading standard has been used to grade assignments.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "grading_scheme_entry[][value]",
                  "value": "",
                  "description": "The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Grading_Standards",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/grading_standards/:grading_standard_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "grading_standards",
                ":grading_standard_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "grading_standard_id",
                  "value": "<grading_standard_id>",
                  "description": "The grading_standard_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/grading_standards/:grading_standard_id`"
          }
        }
      ]
    },
    {
      "name": "Group Categories",
      "description": "Group Categories allow grouping of groups together in canvas. There are a few different built-in group categories used, or custom ones can be created. The built in group categories are: \"communities\", \"student\\_organized\", and \"imported\".",
      "item": [
        {
          "name": "Delete Group_Categories",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ]
            },
            "description": "Deletes a group category and all groups under it. Protected group categories can not be deleted, i.e. “communities” and “student\\_organized”.\n\n**OAuth Scope:** `url:DELETE|/api/v1/group_categories/:group_category_id`"
          }
        },
        {
          "name": "Get Accounts Group_Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/group_categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "group_categories"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/group_categories`"
          }
        },
        {
          "name": "Get Courses Group_Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/group_categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "group_categories"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "collaboration_state",
                  "value": "",
                  "description": "Filter group categories by their collaboration state:“all”: Return both collaborative and non-collaborative group categories“collaborative”: Return only collaborative group categories (default)“non_collaborative”: Return only non-collaborative group categories",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of group categories in a context. The list returned depends on the permissions of the current user and the specified collaboration state.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/group_categories`"
          }
        },
        {
          "name": "List Group_Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ]
            },
            "description": "Returns the data for a single group category, or a 401 if the caller doesn’t have the rights to see it.\n\n**OAuth Scope:** `url:GET|/api/v1/group_categories/:group_category_id`"
          }
        },
        {
          "name": "Get Group_Categories Export",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/export",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "export"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ]
            },
            "description": "Returns a csv file of users in format ready to import.\n\n**OAuth Scope:** `url:GET|/api/v1/group_categories/:group_category_id/export`"
          }
        },
        {
          "name": "Get Group_Categories Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "groups"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of groups in a group category\n\n**OAuth Scope:** `url:GET|/api/v1/group_categories/:group_category_id/groups`"
          }
        },
        {
          "name": "Get Group_Categories Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "users"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.",
                  "disabled": true
                },
                {
                  "key": "unassigned",
                  "value": "",
                  "description": "Set this value to true if you wish only to search unassigned users in the group category.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of users in the group category.\n\n**OAuth Scope:** `url:GET|/api/v1/group_categories/:group_category_id/users`"
          }
        },
        {
          "name": "Post Accounts Group_Categories",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/group_categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "group_categories"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/group_categories`"
          }
        },
        {
          "name": "Post Courses Group_Categories",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/group_categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "group_categories"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "non_collaborative",
                  "value": "",
                  "description": "Can only be set by users with the Differentiation Tag - Add permissionIf set to true, groups in this category will be only be visible to users with the Differentiation Tag - Manage permission.",
                  "disabled": true
                },
                {
                  "key": "self_signup",
                  "value": "",
                  "description": "Allow students to sign up for a group themselves (Course Only). valid values are:“enabled”allows students to self sign up for any group in course“restricted”allows students to self sign up only for groups in the same section null disallows self sign upAllowed values: enabled, restricted",
                  "disabled": true
                },
                {
                  "key": "auto_leader",
                  "value": "",
                  "description": "Assigns group leaders automatically when generating and allocating students to groups Valid values are:“first”the first student to be allocated to a group is the leader“random”a random student from all members is chosen as the leaderAllowed values: first, random",
                  "disabled": true
                },
                {
                  "key": "group_limit",
                  "value": "",
                  "description": "Limit the maximum number of users in each group (Course Only). Requires self signup.",
                  "disabled": true
                },
                {
                  "key": "sis_group_category_id",
                  "value": "",
                  "description": "The unique SIS identifier.",
                  "disabled": true
                },
                {
                  "key": "create_group_count",
                  "value": "",
                  "description": "Create this number of groups (Course Only).",
                  "disabled": true
                },
                {
                  "key": "split_group_count",
                  "value": "",
                  "description": "(Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with “enable_self_signup”. because the group assignment happens synchronously, it’s recommended that you instead use the assign_unassigned_members endpoint. (Course Only)",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new group category\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/group_categories`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "",
                  "description": "Name of the group category",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Bulk_Manage_Differentiation_Tag",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/group_categories/bulk_manage_differentiation_tag",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "group_categories",
                "bulk_manage_differentiation_tag"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "This API is only meant for Groups and GroupCategories where non\\_collaborative is true. Perform bulk operations on groups within a group category, or create a new group category along with the groups in one transaction. If creation of the GroupCategory or any Group fails, the entire operation will be rolled back.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/group_categories/bulk_manage_differentiation_tag`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "operations",
                  "value": "",
                  "description": "A hash containing arrays of create/update/delete operations: {\"create\": [\n  { \"name\": \"New Group A\" },\n  { \"name\": \"New Group B\" }\n],\n\"update\": [\n  { \"id\": 123, \"name\": \"Updated Group Name A\" },\n  { \"id\": 456, \"name\": \"Updated Group Name B\" }\n],\n\"delete\": [\n  { \"id\": 789 },\n  { \"id\": 101 }\n]\n}",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "group_category",
                  "value": "",
                  "description": "Attributes for the GroupCategory. May include:- id [Optional, Integer]: The ID of an existing GroupCategory.\n- name [Optional, String]: A new name for the GroupCategory. If provided with an ID, the category name will be updated.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Import_Tags",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/group_categories/import_tags",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "group_categories",
                "import_tags"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "attachment",
                  "value": "",
                  "description": "There are two ways to post differentiation tag import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be tag data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/import_tags'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories_tags'",
                  "disabled": false
                }
              ]
            },
            "description": "Create Differentiation Tags through a CSV import For more information on the format that’s expected here, please see the “Differentiation Tag CSV” section in the API docs.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/group_categories/import_tags`"
          }
        },
        {
          "name": "Post Group_Categories Assign_Unassigned_Members",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/assign_unassigned_members",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "assign_unassigned_members"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sync",
                  "value": "",
                  "description": "The assigning is done asynchronously by default. If you would like to override this and have the assigning done synchronously, set this value to true.",
                  "disabled": true
                }
              ]
            },
            "description": "Assign all unassigned members as evenly as possible among the existing student groups.\n\n**OAuth Scope:** `url:POST|/api/v1/group_categories/:group_category_id/assign_unassigned_members`"
          }
        },
        {
          "name": "Post Group_Categories Import",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/import",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "import"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ],
              "query": [
                {
                  "key": "attachment",
                  "value": "",
                  "description": "There are two ways to post group category import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/<category_id>/import'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/<category_id>/import'",
                  "disabled": false
                }
              ]
            },
            "description": "Create Groups in a Group Category through a CSV import For more information on the format that’s expected here, please see the “Group Category CSV” section in the API docs.\n\n**OAuth Scope:** `url:POST|/api/v1/group_categories/:group_category_id/import`"
          }
        },
        {
          "name": "Update Group_Categories",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "Name of the group category",
                  "disabled": true
                },
                {
                  "key": "self_signup",
                  "value": "",
                  "description": "Allow students to sign up for a group themselves (Course Only). Valid values are:“enabled”allows students to self sign up for any group in course“restricted”allows students to self sign up only for groups in the same section null disallows self sign upAllowed values: enabled, restricted",
                  "disabled": true
                },
                {
                  "key": "auto_leader",
                  "value": "",
                  "description": "Assigns group leaders automatically when generating and allocating students to groups Valid values are:“first”the first student to be allocated to a group is the leader“random”a random student from all members is chosen as the leaderAllowed values: first, random",
                  "disabled": true
                },
                {
                  "key": "group_limit",
                  "value": "",
                  "description": "Limit the maximum number of users in each group (Course Only). Requires self signup.",
                  "disabled": true
                },
                {
                  "key": "sis_group_category_id",
                  "value": "",
                  "description": "The unique SIS identifier.",
                  "disabled": true
                },
                {
                  "key": "create_group_count",
                  "value": "",
                  "description": "Create this number of groups (Course Only).",
                  "disabled": true
                },
                {
                  "key": "split_group_count",
                  "value": "",
                  "description": "(Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with “enable_self_signup”. because the group assignment happens synchronously, it’s recommended that you instead use the assign_unassigned_members endpoint. (Course Only)",
                  "disabled": true
                }
              ]
            },
            "description": "Modifies an existing group category.\n\n**OAuth Scope:** `url:PUT|/api/v1/group_categories/:group_category_id`"
          }
        }
      ]
    },
    {
      "name": "Groups",
      "description": "Groups serve as the data for a few different ideas in Canvas. The first is that they can be a community in the canvas network. The second is that they can be organized by students in a course, for study or communication (but not grading). The third is that they can be organized by teachers or account administrators for the purpose of projects, assignments, and grading. This last kind of group is always part of a group category, which adds the restriction that a user may only be a member of one group per category. All of these types of groups function similarly, and can be the parent context for many other types of functionality and interaction, such as collections, discussions, wikis, and shared files. Group memberships are the objects that tie users and groups together.",
      "item": [
        {
          "name": "Delete Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Deletes a group and removes all members.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id`"
          }
        },
        {
          "name": "Delete Groups Memberships",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/memberships/:membership_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "memberships",
                ":membership_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "membership_id",
                  "value": "<membership_id>",
                  "description": "The membership_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/memberships/:membership_id`"
          }
        },
        {
          "name": "Delete Groups Users",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "users"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/users`"
          }
        },
        {
          "name": "Delete Groups Users",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/users/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "users",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Leave a group if you are allowed to leave (some groups, such as sets of course groups created by teachers, cannot be left). You may also use ‘self’ in place of a membership\\_id.\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/users/:user_id`"
          }
        },
        {
          "name": "Get Accounts Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "groups"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/groups`"
          }
        },
        {
          "name": "Get Courses Bulk_User_Tags",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/bulk_user_tags",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "bulk_user_tags"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course context (from the route).",
                  "disabled": true
                },
                {
                  "key": "user_ids[]",
                  "value": "",
                  "description": "An array of user IDs to fetch tags for.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a mapping of user IDs to arrays of non-collaborative group (tag) IDs for each user in the given course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/bulk_user_tags`"
          }
        },
        {
          "name": "Get Courses Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "groups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "only_own_groups",
                  "value": "",
                  "description": "Will only include groups that the user belongs to if this is set",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: tabs",
                  "disabled": true
                },
                {
                  "key": "collaboration_state",
                  "value": "",
                  "description": "Filter groups by their collaboration state:“all”: Return both collaborative and non-collaborative groups“collaborative”: Return only collaborative groups (default)“non_collaborative”: Return only non-collaborative groups",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of active groups in the given context that are visible to user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/groups`"
          }
        },
        {
          "name": "List Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“permissions”: Include permissions the current user has for the group.“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: permissions, tabs",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the data for a single group, or a 401 if the caller doesn’t have the rights to see it.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id`"
          }
        },
        {
          "name": "Get Groups Activity_Stream",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/activity_stream",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "activity_stream"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Returns the current user’s group-specific activity stream, paginated. For full documentation, see the API documentation for the user activity stream, in the user api. ### [Group activity stream summary](#method.groups.activity_stream_summary) <a href=\"#method.groups.activity_stream_summary\" id=\"method.groups.activity_stream_summary\"></a> [GroupsController#activity\\_stream\\_summary](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/activity_stream`"
          }
        },
        {
          "name": "Get Groups Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/activity_stream/summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "activity_stream",
                "summary"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Returns a summary of the current user’s group-specific activity stream. For full documentation, see the API documentation for the user activity stream summary, in the user api. ### [Permissions](#method.groups.permissions) <a href=\"#method.groups.permissions\" id=\"method.groups.permissions\"></a> [GroupsController#permissions](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/activity_stream/summary`"
          }
        },
        {
          "name": "Get Groups Memberships",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/memberships",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "memberships"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "filter_states[]",
                  "value": "",
                  "description": "Only list memberships with the given workflow_states. By default it will return all memberships.Allowed values: accepted, invited, requested",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the members of a group.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/memberships`"
          }
        },
        {
          "name": "Get Groups Memberships",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/memberships/:membership_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "memberships",
                ":membership_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "membership_id",
                  "value": "<membership_id>",
                  "description": "The membership_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/memberships/:membership_id`"
          }
        },
        {
          "name": "Get Groups Permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/permissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "permissions"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "permissions[]",
                  "value": "",
                  "description": "List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns permission information for the calling user in the given group. See also the [Account](../accounts#method.accounts.permissions) and [Course](../courses#method.courses.permissions) counterparts.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/permissions`"
          }
        },
        {
          "name": "Get Groups Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "users"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“avatar_url”: Include users’ avatar_urls.Allowed values: avatar_url",
                  "disabled": true
                },
                {
                  "key": "exclude_inactive",
                  "value": "",
                  "description": "Whether to filter out inactive users from the results. Defaults to false unless explicitly provided.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of users in the group.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/users`"
          }
        },
        {
          "name": "Get Groups Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/users/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "users",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns the group membership with the given membership id or user id.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/users/:user_id`"
          }
        },
        {
          "name": "Get Users Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "groups"
              ],
              "query": [
                {
                  "key": "context_type",
                  "value": "",
                  "description": "Only include groups that are in this type of context.Allowed values: Account, Course",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: tabs",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of active groups for the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/groups`"
          }
        },
        {
          "name": "Post Group_Categories Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/group_categories/:group_category_id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "group_categories",
                ":group_category_id",
                "groups"
              ],
              "variable": [
                {
                  "key": "group_category_id",
                  "value": "<group_category_id>",
                  "description": "The group_category_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the group",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "A description of the group",
                  "disabled": true
                },
                {
                  "key": "is_public",
                  "value": "",
                  "description": "whether the group is public (applies only to community groups)",
                  "disabled": true
                },
                {
                  "key": "join_level",
                  "value": "",
                  "description": "no descriptionAllowed values: parent_context_auto_join, parent_context_request, invitation_only",
                  "disabled": true
                },
                {
                  "key": "storage_quota_mb",
                  "value": "",
                  "description": "The allowed file storage for the group, in megabytes. This parameter is ignored if the caller does not have the manage_storage_quotas permission.",
                  "disabled": true
                },
                {
                  "key": "sis_group_id",
                  "value": "",
                  "description": "The sis ID of the group. Must have manage_sis permission to set.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new group. Groups created using the “/api/v1/groups/” endpoint will be community groups.\n\n**OAuth Scope:** `url:POST|/api/v1/group_categories/:group_category_id/groups`"
          }
        },
        {
          "name": "Create Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/groups`"
          }
        },
        {
          "name": "Post Groups Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "files"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Upload a file to the group. This API endpoint is the first step in uploading a file to a group. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a group can upload files to the group. By default, this is anybody participating in the group, or any admin over the group. ### [Preview processed html](#method.groups.preview_html) <a href=\"#method.groups.preview_html\" id=\"method.groups.preview_html\"></a> [GroupsController#preview\\_html](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/files`"
          }
        },
        {
          "name": "Post Groups Invite",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/invite",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "invite"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Sends an invitation to all supplied email addresses which will allow the receivers to join the group.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/invite`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "invitees[]",
                  "value": "",
                  "description": "An array of email addresses to be sent invitations.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Groups Memberships",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/memberships",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "memberships"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The ID of the user for individual membership creation.",
                  "disabled": true
                },
                {
                  "key": "members[]",
                  "value": "",
                  "description": "Bulk add multiple users to a differentiation tag.",
                  "disabled": true
                },
                {
                  "key": "all_in_group_course",
                  "value": "",
                  "description": "If true, add all enrolled students from the course.",
                  "disabled": true
                },
                {
                  "key": "exclude_user_ids[]",
                  "value": "",
                  "description": "An array of user IDs to exclude when using all_in_group_course.",
                  "disabled": true
                }
              ]
            },
            "description": "Join, or request to join, a group, depending on the join\\_level of the group. If the membership or join request already exists, then it is simply returned. For differentiation tags, you can bulk add users using one of two methods: 1. Provide an array of user IDs via the ‘members\\[]\\` parameter. 2. Use the course-wide option with the following parameters: * ‘all\\_in\\_group\\_course\\` \\[Boolean]: If set to true, the endpoint will add every currently enrolled student (from the course context) to the differentiation tag. * ‘exclude\\_user\\_ids\\[]\\` \\[Integer]: When using \\`all\\_in\\_group\\_course\\`, you can optionally exclude specific users by providing their IDs in this parameter. In this context, these parameters only apply to differentiation tag memberships.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/memberships`"
          }
        },
        {
          "name": "Post Groups Preview_Html",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/preview_html",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "preview_html"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "html",
                  "value": "",
                  "description": "The html content to process",
                  "disabled": true
                }
              ]
            },
            "description": "Preview html content processed for this group\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/preview_html`"
          }
        },
        {
          "name": "Update Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the group",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "A description of the group",
                  "disabled": true
                },
                {
                  "key": "is_public",
                  "value": "",
                  "description": "Whether the group is public (applies only to community groups). Currently you cannot set a group back to private once it has been made public.",
                  "disabled": true
                },
                {
                  "key": "join_level",
                  "value": "",
                  "description": "no descriptionAllowed values: parent_context_auto_join, parent_context_request, invitation_only",
                  "disabled": true
                },
                {
                  "key": "avatar_id",
                  "value": "",
                  "description": "The id of the attachment previously uploaded to the group that you would like to use as the avatar image for this group.",
                  "disabled": true
                },
                {
                  "key": "storage_quota_mb",
                  "value": "",
                  "description": "The allowed file storage for the group, in megabytes. This parameter is ignored if the caller does not have the manage_storage_quotas permission.",
                  "disabled": true
                },
                {
                  "key": "members[]",
                  "value": "",
                  "description": "An array of user ids for users you would like in the group. Users not in the group will be sent invitations. Existing group members who aren’t in the list will be removed from the group.",
                  "disabled": true
                },
                {
                  "key": "sis_group_id",
                  "value": "",
                  "description": "The sis ID of the group. Must have manage_sis permission to set.",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Modifies an existing group. Note that to set an avatar image for the group, you must first upload the image file to the group, and the use the id in the response as the argument to this function. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id`"
          }
        },
        {
          "name": "Put Groups Memberships",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/memberships/:membership_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "memberships",
                ":membership_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "membership_id",
                  "value": "<membership_id>",
                  "description": "The membership_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/memberships/:membership_id`"
          }
        },
        {
          "name": "Put Groups Users",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/users/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "users",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "Currently, the only allowed value is “accepted”Allowed values: accepted",
                  "disabled": true
                },
                {
                  "key": "moderator",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Accept a membership request, or add/remove moderator rights.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/users/:user_id`"
          }
        }
      ]
    },
    {
      "name": "History",
      "description": "",
      "item": [
        {
          "name": "Get Users History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/history",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "history"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return a paginated list of the user’s recent history. History entries are returned in descending order, newest to oldest. You may list history entries for yourself (use `self` as the user\\_id), for a student you observe, or for a user you manage as an administrator. Note that the `per_page` pagination argument is not supported and the number of history entries returned per page will vary. Returns a list of [HistoryEntry](#historyentry) objects.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/history`"
          }
        }
      ]
    },
    {
      "name": "InstAccess tokens",
      "description": "Short term JWT tokens that can be used to authenticate with Canvas and other Instructure services. InstAccess tokens expire after one hour. Canvas hands out encrypted tokens that need to be decrypted by the API Gateway before they can be accepted by Canvas or other services.",
      "item": [
        {
          "name": "Create Inst_Access_Tokens",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/inst_access_tokens",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "inst_access_tokens"
              ]
            },
            "description": "Create a unique, encrypted InstAccess token. Generates a different InstAccess token each time it’s called, each one expires after a short window (1 hour).\n\n**OAuth Scope:** `url:POST|/api/v1/inst_access_tokens`"
          }
        }
      ]
    },
    {
      "name": "JWTs",
      "description": "Short term tokens useful for talking to other services in the Canvas Ecosystem. Note: JWTs have no value or use directly against the Canvas API, and expire after one hour",
      "item": [
        {
          "name": "Create Jwts",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/jwts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "jwts"
              ],
              "query": [
                {
                  "key": "workflows[]",
                  "value": "",
                  "description": "Adds additional data to the JWT to be used by the consuming service workflow",
                  "disabled": true
                },
                {
                  "key": "context_type",
                  "value": "",
                  "description": "The type of the context to generate the JWT for, in case the workflow requires it. Case insensitive.Allowed values: Course, User, Account",
                  "disabled": true
                },
                {
                  "key": "context_id",
                  "value": "",
                  "description": "The id of the context to generate the JWT for, in case the workflow requires it.",
                  "disabled": true
                },
                {
                  "key": "context_uuid",
                  "value": "",
                  "description": "The uuid of the context to generate the JWT for, in case the workflow requires it. Note that context_id and context_uuid are mutually exclusive. If both are provided, an error will be returned.",
                  "disabled": true
                },
                {
                  "key": "canvas_audience",
                  "value": "",
                  "description": "Defaults to true. If false, the JWT will be signed, but not encrypted, for use in downstream services. The default encrypted behaviour can be used to talk to Canvas itself.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a unique JWT for use with other Canvas services Generates a different JWT each time it’s called. Each JWT expires after a short window (1 hour)\n\n**OAuth Scope:** `url:POST|/api/v1/jwts`"
          }
        },
        {
          "name": "Post Jwts Refresh",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/jwts/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "jwts",
                "refresh"
              ]
            },
            "description": "Refresh a JWT for use with other canvas services Generates a different JWT each time it’s called, each one expires after a short window (1 hour).\n\n**OAuth Scope:** `url:POST|/api/v1/jwts/refresh`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "jwt",
                  "value": "",
                  "description": "An existing JWT token to be refreshed. The new token will have the same context and workflows as the existing token.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "LTI Launch Definitions",
      "description": "",
      "item": [
        {
          "name": "Get Accounts Launch_Definitions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_apps/launch_definitions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_apps",
                "launch_definitions"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "placements[Array]",
                  "value": "",
                  "description": "The placements to return launch definitions for. If not provided, an empty list will be returned.",
                  "disabled": true
                },
                {
                  "key": "only_visible[Boolean]",
                  "value": "",
                  "description": "If true, only return launch definitions that are visible to the current user. Defaults to true.",
                  "disabled": true
                }
              ]
            },
            "description": "List all tools available in this context for the given placements, in the form of Launch Definitions. Used primarily by the Canvas frontend. API users should consider using the External Tools API instead. This endpoint is cached for 10 minutes!\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_apps/launch_definitions`"
          }
        },
        {
          "name": "Get Courses Launch_Definitions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_apps/launch_definitions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_apps",
                "launch_definitions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/lti_apps/launch_definitions`"
          }
        }
      ]
    },
    {
      "name": "LTI Registrations",
      "description": "{% hint style=\"warning\" %} BETA: This API resource is not finalized, and there could be breaking changes before its final release. {% endhint %} API for accessing and configuring LTI registrations in a root account. LTI Registrations can be any of: * 1.3 Dynamic Registration * 1.3 manual installation (via JSON, URL, or UI) * 1.1 manual installation (via XML, URL, or UI) The Dynamic Registration process uses a different API endpoint to finalize the process and create the registration. The [Registration guide](../external-tools/lti/file.registration) has more details on that process.",
      "item": [
        {
          "name": "Delete Accounts Lti_Registrations",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Remove the specified LTI registration\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/lti_registrations/:id`"
          }
        },
        {
          "name": "Get Accounts Lti_Registration_By_Client_Id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registration_by_client_id/:client_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registration_by_client_id",
                ":client_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "client_id",
                  "value": "<client_id>",
                  "description": "The client_id identifier"
                }
              ]
            },
            "description": "Returns details about the specified LTI registration, including the configuration and account binding.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_registration_by_client_id/:client_id`"
          }
        },
        {
          "name": "Get Accounts Lti_Registrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "per_page",
                  "value": "",
                  "description": "The number of registrations to return per page. Defaults to 15.",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "The page number to return. Defaults to 1.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "",
                  "description": "The field to sort by. Choices are: name, nickname, lti_version, installed, installed_by, updated_by, updated, and on. Defaults to installed.",
                  "disabled": true
                },
                {
                  "key": "dir",
                  "value": "",
                  "description": "The order to sort the given column by. Defaults to desc.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional data to include. Always includes [account_binding].“account_binding”the registration’s binding to the given account“configuration”the registration’s Canvas-style tool configuration, without any overlays applied.“overlaid_configuration”the registration’s Canvas-style tool configuration, with all overlays applied.“overlay”the registration’s admin-defined configuration overlay",
                  "disabled": true
                }
              ]
            },
            "description": "Returns all LTI registrations in the specified account. Includes registrations created in this account, those set to ‘allow’ from a parent root account (like Site Admin) and ‘on’ for this account, and those enabled ‘on’ at the parent root account level.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_registrations`"
          }
        },
        {
          "name": "Get Accounts Lti_Registrations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional data to include. Always includes [account_binding configuration].“account_binding”the registration’s binding to the given account“configuration”the registration’s Canvas-style tool configuration, without any overlays applied.“overlaid_configuration”the registration’s Canvas-style tool configuration, with all overlays applied.“overlaid_legacy_configuration”the registration’s legacy-style configuration, with all overlays applied.“overlay”the registration’s admin-defined configuration overlay“overlay_versions”the registration’s overlay’s edit history",
                  "disabled": true
                }
              ]
            },
            "description": "Return details about the specified LTI registration, including the configuration and account binding.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_registrations/:id`"
          }
        },
        {
          "name": "Get Accounts Overlay_History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id/overlay_history",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id",
                "overlay_history"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "The maximum number of history items to return. Defaults to 101. Maximum allowed is 500.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the overlay history items for the specified LTI registration.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_registrations/:id/overlay_history`"
          }
        },
        {
          "name": "Get Accounts Context_Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:registration_id/deployments/:deployment_id/context_search",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":registration_id",
                "deployments",
                ":deployment_id",
                "context_search"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "registration_id",
                  "value": "<registration_id>",
                  "description": "The registration_id identifier"
                },
                {
                  "key": "deployment_id",
                  "value": "<deployment_id>",
                  "description": "The deployment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "only_children_of",
                  "value": "",
                  "description": "Account ID. If provided, only searches within this account and only returns direct children of this account.",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "String to search for in account names, SIS ids, or course codes.",
                  "disabled": true
                }
              ]
            },
            "description": "This is a utility endpoint used by the Canvas Apps UI and may not serve general use cases. Search for accounts and courses that match the search term on name, SIS id, or course code. Returns all matching accounts and courses, including those nested in sub-accounts. Returns bare-bones data about each account and course, and only up to 20 of each. Used to populate the search dropdowns when managing LTI registration availability.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/lti_registrations/:registration_id/deployments/:deployment_id/context_search`"
          }
        },
        {
          "name": "Post Accounts Lti_Registrations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the tool. If one isn’t provided, it will be inferred from the configuration’s title.",
                  "disabled": true
                },
                {
                  "key": "admin_nickname",
                  "value": "",
                  "description": "A friendly nickname set by admins to override the tool name",
                  "disabled": true
                },
                {
                  "key": "vendor",
                  "value": "",
                  "description": "The vendor of the tool",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "A description of the tool. Cannot exceed 2048 bytes.",
                  "disabled": true
                },
                {
                  "key": "configuration",
                  "value": "",
                  "description": "Required, Lti::ToolConfiguration",
                  "disabled": false
                },
                {
                  "key": "overlay",
                  "value": "",
                  "description": "Lti::OverlayThe overlay configuration for the tool. Overrides values in the base configuration.",
                  "disabled": true
                },
                {
                  "key": "unified_tool_id",
                  "value": "",
                  "description": "The unique identifier for the tool, used for analytics. If not provided, one will be generated.",
                  "disabled": true
                },
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations. Defaults to “off”.Allowed values: on, off, allow",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new LTI Registration, as well as an associated Tool Configuration, Developer Key, and Registration Account binding. To install/create using Dynamic Registration, please use the [Dynamic Registration API](../external-tools/lti/file.registration).\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/lti_registrations`"
          }
        },
        {
          "name": "Post Accounts Bind",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id/bind",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id",
                "bind"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Enable or disable the specified LTI registration for the specified account. To enable an inherited registration (eg from Site Admin), pass the registration’s global ID. Only allowed for root accounts.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/lti_registrations/:id/bind`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations.Allowed values: on, off, allow",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Lti_Registrations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the tool",
                  "disabled": true
                },
                {
                  "key": "admin_nickname",
                  "value": "",
                  "description": "The admin-configured friendly display name for the registration",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "A description of the tool. Cannot exceed 2048 bytes.",
                  "disabled": true
                },
                {
                  "key": "configuration",
                  "value": "",
                  "description": "Lti::ToolConfiguration",
                  "disabled": true
                },
                {
                  "key": "overlay",
                  "value": "",
                  "description": "Lti::OverlayThe overlay configuration for the tool. Overrides values in the base configuration. Note that updating the overlay of a registration associated with a Dynamic Registration IS allowed.",
                  "disabled": true
                },
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations.Allowed values: on, off, allow",
                  "disabled": true
                }
              ]
            },
            "description": "Update the specified LTI registration with the provided parameters. Note that updating the base tool configuration of a registration that is associated with a Dynamic Registration will return a 422. All other fields can be updated freely.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/lti_registrations/:id`"
          }
        },
        {
          "name": "Put Accounts Reset",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/lti_registrations/:id/reset",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "lti_registrations",
                ":id",
                "reset"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Reset the specified LTI registration to its default settings in this context. This removes all customizations that were present in the overlay associated with this context.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/lti_registrations/:id/reset`"
          }
        }
      ]
    },
    {
      "name": "LTI Resource Links",
      "description": "API that exposes LTI Resource Links for viewing and editing. LTI Resource Links are artifacts created by the LTI 1.3 Deep Linking process, where a user selects a content item that is returned to Canvas for future launches. Resource Links can be associated with Assignments, Module Items, Collaborations, and Rich Content embeddings. Use of this API requires the `manage_lti_add` and `manage_assignments_add` permissions. Caution! Resource Links are usually managed by the tool that created them via LTI Deep Linking, and using this API to create or modify links may result in errors when launching the link. Common patterns for using this API include: * facilitating migration between two different versions of the same tool by updating the domain of the launch URL * creating new links to embed in rich content in Canvas * responding to a course copy or other Canvas content migration by updating the launch URL",
      "item": [
        {
          "name": "Delete Courses Lti_Resource_Links",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the specified resource link. The ID can be in the standard Canvas format (“1”), or in these special formats: * resource\\_link\\_uuid:\\<uuid> - Find the resource link by its resource\\_link\\_uuid * lookup\\_uuid:\\<uuid> - Find the resource link by its lookup\\_uuid Only links that are not associated with Assignments, Module Items, or Collaborations can be deleted.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/lti_resource_links/:id`"
          }
        },
        {
          "name": "Get Courses Lti_Resource_Links",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include_deleted",
                  "value": "",
                  "description": "Include deleted resource links and links associated with deleted content in response. Default is false.",
                  "disabled": true
                },
                {
                  "key": "per_page",
                  "value": "",
                  "description": "The number of registrations to return per page. Defaults to 50.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns all Resource Links in the specified course. This includes links that are associated with Assignments, Module Items, Collaborations, and that are embedded in rich content. This endpoint is paginated, and will return 50 links per page by default. Links are sorted by the order in which they were created.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/lti_resource_links`"
          }
        },
        {
          "name": "Get Courses Lti_Resource_Links",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include_deleted",
                  "value": "",
                  "description": "Include deleted resource links in search. Default is false.",
                  "disabled": true
                }
              ]
            },
            "description": "Return details about the specified resource link. The ID can be in the standard Canvas format (“1”), or in these special formats: * resource\\_link\\_uuid:\\<uuid> - Find the resource link by its resource\\_link\\_uuid * lookup\\_uuid:\\<uuid> - Find the resource link by its lookup\\_uuid\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/lti_resource_links/:id`"
          }
        },
        {
          "name": "Post Courses Lti_Resource_Links",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title of the resource link.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new LTI Resource Link in the specified course with the provided parameters.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/lti_resource_links`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "url",
                  "value": "",
                  "description": "The launch URL for this resource link.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "custom",
                  "value": "",
                  "description": "Custom parameters to be sent to the tool when launching this link.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Bulk",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links/bulk",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links",
                "bulk"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "POST",
                  "value": "",
                  "description": "body [Required, Array] The POST body should be a JSON array of objects containing the parameters for each link to create.",
                  "disabled": false
                },
                {
                  "key": "[]title",
                  "value": "",
                  "description": "Each object may contain a title.",
                  "disabled": true
                }
              ]
            },
            "description": "Create up to 100 new LTI Resource Links in the specified course with the provided parameters.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/lti_resource_links/bulk`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "[]url",
                  "value": "",
                  "description": "Each object must contain a launch URL.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "[]custom",
                  "value": "",
                  "description": "Custom parameters to be sent to the tool when launching this link.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Lti_Resource_Links",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/lti_resource_links/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "lti_resource_links",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "url",
                  "value": "",
                  "description": "The launch URL for this resource link. Caution! URL must match the URL or domain of the tool associated with this resource link",
                  "disabled": true
                },
                {
                  "key": "include_deleted",
                  "value": "",
                  "description": "Update link even if it is deleted. Default is false.",
                  "disabled": true
                },
                {
                  "key": "context_external_tool_id",
                  "value": "",
                  "description": "The Canvas identifier for the LTI 1.3 External Tool that the LTI Resource Link was originally installed from. Caution! The resource link url must match the tool’s domain or url.",
                  "disabled": true
                }
              ]
            },
            "description": "Update the specified resource link with the provided parameters.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/lti_resource_links/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "custom",
                  "value": "",
                  "description": "Custom parameters to be sent to the tool when launching this link. Caution! Changing these from what the tool provided could result in errors if the tool doesn’t see what it’s expecting.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Late Policy",
      "description": "Manage a course's late policy.",
      "item": [
        {
          "name": "Get Courses Late_Policy",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id/late_policy",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id",
                "late_policy"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the late policy for a course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:id/late_policy`"
          }
        },
        {
          "name": "Patch Courses Late_Policy",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id/late_policy",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id",
                "late_policy"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "late_policy[missing_submission_deduction_enabled]",
                  "value": "",
                  "description": "Whether to enable the missing submission deduction late policy.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_deduction_enabled]",
                  "value": "",
                  "description": "Whether to enable the late submission deduction late policy.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_interval]",
                  "value": "",
                  "description": "The interval for late policies.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_minimum_percent_enabled]",
                  "value": "",
                  "description": "Whether to enable the late submission minimum percent for a late policy.",
                  "disabled": true
                }
              ]
            },
            "description": "Patch a late policy. No body is returned upon success.\n\n**OAuth Scope:** `url:PATCH|/api/v1/courses/:id/late_policy`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "late_policy[missing_submission_deduction]",
                  "value": "",
                  "description": "How many percentage points to deduct from a missing submission.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_deduction]",
                  "value": "",
                  "description": "How many percentage points to deduct per the late submission interval.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_minimum_percent]",
                  "value": "",
                  "description": "The minimum grade a submissions can have in percentage points.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Late_Policy",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:id/late_policy",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":id",
                "late_policy"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "late_policy[missing_submission_deduction_enabled]",
                  "value": "",
                  "description": "Whether to enable the missing submission deduction late policy.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_deduction_enabled]",
                  "value": "",
                  "description": "Whether to enable the late submission deduction late policy.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_interval]",
                  "value": "",
                  "description": "The interval for late policies.",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_minimum_percent_enabled]",
                  "value": "",
                  "description": "Whether to enable the late submission minimum percent for a late policy.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a late policy. If the course already has a late policy, a bad\\_request is returned since there can only be one late policy per course.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:id/late_policy`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "late_policy[missing_submission_deduction]",
                  "value": "",
                  "description": "How many percentage points to deduct from a missing submission.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_deduction]",
                  "value": "",
                  "description": "How many percentage points to deduct per the late submission interval.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "late_policy[late_submission_minimum_percent]",
                  "value": "",
                  "description": "The minimum grade a submissions can have in percentage points.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Learning Object Dates",
      "description": "API for accessing date-related attributes on assignments, quizzes, modules, discussions, pages, and files. Note that support for files is not yet available.",
      "item": [
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/date_details`"
          }
        },
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":discussion_topic_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "discussion_topic_id",
                  "value": "<discussion_topic_id>",
                  "description": "The discussion_topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details`"
          }
        },
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files/:attachment_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files",
                ":attachment_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "attachment_id",
                  "value": "<attachment_id>",
                  "description": "The attachment_id identifier"
                }
              ]
            },
            "description": "Get a learning object’s date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item. Returns a [LearningObjectDates](#learningobjectdates) object. ### [Update a learning object's date information](#method.learning_object_dates.update) <a href=\"#method.learning_object_dates.update\" id=\"method.learning_object_dates.update\"></a> [LearningObjectDatesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/learning_object_dates_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/files/:attachment_id/date_details`"
          }
        },
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:context_module_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":context_module_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "context_module_id",
                  "value": "<context_module_id>",
                  "description": "The context_module_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules/:context_module_id/date_details`"
          }
        },
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages/:url_or_id/date_details`"
          }
        },
        {
          "name": "Get Courses Date_Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/date_details`"
          }
        },
        {
          "name": "Put Courses Date_Details",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/date_details`"
          }
        },
        {
          "name": "Put Courses Date_Details",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "discussion_topics",
                ":discussion_topic_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "discussion_topic_id",
                  "value": "<discussion_topic_id>",
                  "description": "The discussion_topic_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details`"
          }
        },
        {
          "name": "Put Courses Date_Details",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/files/:attachment_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "files",
                ":attachment_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "attachment_id",
                  "value": "<attachment_id>",
                  "description": "The attachment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "only_visible_to_overrides",
                  "value": "",
                  "description": "Whether the learning object is only assigned to students who are targeted by an override.",
                  "disabled": true
                }
              ]
            },
            "description": "Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides. Returns 204 No Content response code if successful.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/files/:attachment_id/date_details`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "due_at",
                  "value": "",
                  "description": "The learning object’s due date. Not applicable for ungraded discussions, pages, and files.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "unlock_at",
                  "value": "",
                  "description": "The learning object’s unlock date. Must be before the due date if there is one.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "lock_at",
                  "value": "",
                  "description": "The learning object’s lock date. Must be after the due date if there is one.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_overrides[]",
                  "value": "",
                  "description": "List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object’s overrides. Keys for each override object can include: ‘id’, ‘title’, ‘due_at’, ‘unlock_at’, ‘lock_at’, ‘student_ids’, and ‘course_section_id’, ‘course_id’, ‘noop_id’, and ‘unassign_item’.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Date_Details",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/pages/:url_or_id/date_details`"
          }
        },
        {
          "name": "Put Courses Date_Details",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/date_details",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "date_details"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/date_details`"
          }
        }
      ]
    },
    {
      "name": "Line Items",
      "description": "Line Item API for 1EdTech (IMS) [Assignment and Grade Services](../external-tools/lti/file.assignment_tools).",
      "item": [
        {
          "name": "Delete Courses Line_Items",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete an existing Line Item Returns a [LineItem](#lineitem) object.\n\n**OAuth Scope:** `url:DELETE|/api/lti/courses/:course_id/line_items/:id`"
          }
        },
        {
          "name": "Get Courses Line_Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "tag",
                  "value": "",
                  "description": "If specified only Line Items with this tag will be included.",
                  "disabled": true
                },
                {
                  "key": "resource_id",
                  "value": "",
                  "description": "If specified only Line Items with this resource_id will be included.",
                  "disabled": true
                },
                {
                  "key": "resource_link_id",
                  "value": "",
                  "description": "If specified only Line Items attached to the specified resource_link_id will be included.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "May be used to limit the number of Line Items returned in a page",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“launch_url”includes the launch URL for each line item using the “https://canvas.instructure.com/lti/launch_url” extensionAllowed values: launch_url",
                  "disabled": true
                }
              ]
            },
            "description": "List all Line Items for a course\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/line_items`"
          }
        },
        {
          "name": "Get Courses Line_Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include.“launch_url”includes the launch URL for this line item using the “https://canvas.instructure.com/lti/launch_url” extensionAllowed values: launch_url",
                  "disabled": true
                }
              ]
            },
            "description": "Show existing Line Item\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/line_items/:id`"
          }
        },
        {
          "name": "Post Courses Line_Items",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "resourceId",
                  "value": "",
                  "description": "A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.",
                  "disabled": true
                },
                {
                  "key": "tag",
                  "value": "",
                  "description": "A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.",
                  "disabled": true
                },
                {
                  "key": "resourceLinkId",
                  "value": "",
                  "description": "The resource link id the Line Item should be attached to. This value should match the LTI id of the Canvas assignment associated with the tool.",
                  "disabled": true
                },
                {
                  "key": "startDateTime",
                  "value": "",
                  "description": "The ISO8601 date and time when the line item is made available. Corresponds to the assignment’s unlock_at date.",
                  "disabled": true
                },
                {
                  "key": "endDateTime",
                  "value": "",
                  "description": "The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment’s due_at date.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new Line Item\n\n**OAuth Scope:** `url:POST|/api/lti/courses/:course_id/line_items`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "scoreMaximum",
                  "value": "",
                  "description": "The maximum score for the line item. Scores created for the Line Item may exceed this value.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "label",
                  "value": "",
                  "description": "The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission_type",
                  "value": "",
                  "description": "(EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created.type - ‘none’ or ‘external_tool’external_tool_url - Submission URL only used when type: ‘external_tool’",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Line_Items",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "label",
                  "value": "",
                  "description": "The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.",
                  "disabled": true
                },
                {
                  "key": "resourceId",
                  "value": "",
                  "description": "A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.",
                  "disabled": true
                },
                {
                  "key": "tag",
                  "value": "",
                  "description": "A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.",
                  "disabled": true
                },
                {
                  "key": "startDateTime",
                  "value": "",
                  "description": "The ISO8601 date and time when the line item is made available. Corresponds to the assignment’s unlock_at date.",
                  "disabled": true
                },
                {
                  "key": "endDateTime",
                  "value": "",
                  "description": "The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment’s due_at date.",
                  "disabled": true
                }
              ]
            },
            "description": "Update new Line Item\n\n**OAuth Scope:** `url:PUT|/api/lti/courses/:course_id/line_items/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "scoreMaximum",
                  "value": "",
                  "description": "The maximum score for the line item. Scores created for the Line Item may exceed this value.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "LiveAssessments",
      "description": "Manage live assessment results Manage live assessments",
      "item": [
        {
          "name": "Get Courses Live_Assessments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/live_assessments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "live_assessments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of live assessments.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/live_assessments`"
          }
        },
        {
          "name": "Get Courses Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/live_assessments/:assessment_id/results",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "live_assessments",
                ":assessment_id",
                "results"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assessment_id",
                  "value": "<assessment_id>",
                  "description": "The assessment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "If set, restrict results to those for this user",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of live assessment results\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/live_assessments/:assessment_id/results`"
          }
        },
        {
          "name": "Post Courses Live_Assessments",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/live_assessments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "live_assessments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Creates or finds an existing live assessment with the given key and aligns it with the linked outcome\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/live_assessments`"
          }
        },
        {
          "name": "Post Courses Results",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/live_assessments/:assessment_id/results",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "live_assessments",
                ":assessment_id",
                "results"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assessment_id",
                  "value": "<assessment_id>",
                  "description": "The assessment_id identifier"
                }
              ]
            },
            "description": "Creates live assessment results and adds them to a live assessment\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/live_assessments/:assessment_id/results`"
          }
        }
      ]
    },
    {
      "name": "Logins",
      "description": "API for creating and viewing user logins under an account",
      "item": [
        {
          "name": "Delete Users Logins",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/logins/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "logins",
                ":id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete an existing login.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/logins/:id`"
          }
        },
        {
          "name": "Get Accounts Logins",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/logins",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "logins"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/logins`"
          }
        },
        {
          "name": "Get Users Logins",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/logins",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "logins"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Given a user ID, return a paginated list of that user’s logins for the given account.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/logins`"
          }
        },
        {
          "name": "Post Accounts Logins",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/logins",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "logins"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "login[password]",
                  "value": "",
                  "description": "The new login’s password.",
                  "disabled": true
                },
                {
                  "key": "login[sis_user_id]",
                  "value": "",
                  "description": "SIS ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account.",
                  "disabled": true
                },
                {
                  "key": "login[integration_id]",
                  "value": "",
                  "description": "Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account. The Integration ID is a secondary identifier useful for more complex SIS integrations.",
                  "disabled": true
                },
                {
                  "key": "login[authentication_provider_id]",
                  "value": "",
                  "description": "The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider).",
                  "disabled": true
                },
                {
                  "key": "login[declared_user_type]",
                  "value": "",
                  "description": "The declared intention of the user type. This can be set, but does not change any Canvas functionality with respect to their access. A user can still be a teacher, admin, student, etc. in any particular context without regard to this setting. This can be used for administrative purposes for integrations to be able to more easily identify why the user was created. Valid values are:* administrative\n* observer\n* staff\n* student\n* student_other\n* teacher",
                  "disabled": true
                },
                {
                  "key": "user[existing_user_id]",
                  "value": "",
                  "description": "A Canvas User ID to identify a user in a trusted account (alternative to ‘id, existing_sis_user_id, or existing_integration_id`). This parameter is not available in OSS Canvas.",
                  "disabled": true
                },
                {
                  "key": "user[existing_integration_id]",
                  "value": "",
                  "description": "An Integration ID to identify a user in a trusted account (alternative to ‘id, existing_user_id, or existing_sis_user_id`). This parameter is not available in OSS Canvas.",
                  "disabled": true
                },
                {
                  "key": "user[existing_sis_user_id]",
                  "value": "",
                  "description": "An SIS User ID to identify a user in a trusted account (alternative to ‘id, existing_integration_id, or existing_user_id`). This parameter is not available in OSS Canvas.",
                  "disabled": true
                },
                {
                  "key": "user[trusted_account]",
                  "value": "",
                  "description": "The domain of the account to search for the user. This field is required when identifying a user in a trusted account. This parameter is not available in OSS Canvas.",
                  "disabled": false
                }
              ]
            },
            "description": "Create a new login for an existing user in the given account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/logins`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user[id]",
                  "value": "",
                  "description": "The ID of the user to create the login for.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "login[unique_id]",
                  "value": "",
                  "description": "The unique ID for the new login.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Users Reset_Password",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/reset_password",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "reset_password"
              ]
            },
            "description": "Given a user email, generate a nonce and email it to the user\n\n**OAuth Scope:** `url:POST|/api/v1/users/reset_password`"
          }
        },
        {
          "name": "Put Accounts Logins",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/logins/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "logins",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "login[unique_id]",
                  "value": "",
                  "description": "The new unique ID for the login.",
                  "disabled": true
                },
                {
                  "key": "login[password]",
                  "value": "",
                  "description": "The new password for the login. Admins can only set a password for another user if the “Password setting by admins” account setting is enabled.",
                  "disabled": true
                },
                {
                  "key": "login[old_password]",
                  "value": "",
                  "description": "The prior password for the login. Required if the caller is changing their own password.",
                  "disabled": false
                },
                {
                  "key": "login[sis_user_id]",
                  "value": "",
                  "description": "SIS ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account.",
                  "disabled": true
                },
                {
                  "key": "login[integration_id]",
                  "value": "",
                  "description": "Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account. The Integration ID is a secondary identifier useful for more complex SIS integrations.",
                  "disabled": true
                },
                {
                  "key": "login[authentication_provider_id]",
                  "value": "",
                  "description": "The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider). To unassociate from a known provider, specify null or an empty string.",
                  "disabled": true
                },
                {
                  "key": "login[workflow_state]",
                  "value": "",
                  "description": "Used to suspend or re-activate a login.Allowed values: active, suspended",
                  "disabled": true
                },
                {
                  "key": "login[declared_user_type]",
                  "value": "",
                  "description": "The declared intention of the user type. This can be set, but does not change any Canvas functionality with respect to their access. A user can still be a teacher, admin, student, etc. in any particular context without regard to this setting. This can be used for administrative purposes for integrations to be able to more easily identify why the user was created. Valid values are:* administrative\n* observer\n* staff\n* student\n* student_other\n* teacher",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing login for a user in the given account.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/logins/:id`"
          }
        }
      ]
    },
    {
      "name": "Media Objects",
      "description": "Closed captions added to a video MediaObject When you upload or record webcam video/audio to kaltura, it makes a Media Object",
      "item": [
        {
          "name": "Get Courses Media_Attachments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/media_attachments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "media_attachments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/media_attachments`"
          }
        },
        {
          "name": "Get Courses Media_Objects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/media_objects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "media_objects"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/media_objects`"
          }
        },
        {
          "name": "Get Groups Media_Attachments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/media_attachments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "media_attachments"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "",
                  "description": "Field to sort on. Default is “title”titlesorts on user_entered_title if available, title if not.created_atsorts on the object’s creation time.Allowed values: title, created_at",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "Sort direction. Default is “asc”Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "exclude[]",
                  "value": "",
                  "description": "Array of data to exclude. By excluding “sources” and “tracks”, the api will not need to query kaltura, which greatly speeds up its response.sourcesDo not query kaltura for media_sourcestracksDo not query kaltura for media_tracksAllowed values: sources, tracks",
                  "disabled": true
                }
              ]
            },
            "description": "Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/media_attachments`"
          }
        },
        {
          "name": "Get Groups Media_Objects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/media_objects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "media_objects"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/media_objects`"
          }
        },
        {
          "name": "List Media_Attachments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_attachments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_attachments"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/media_attachments`"
          }
        },
        {
          "name": "Get Media_Attachments Media_Tracks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_attachments/:attachment_id/media_tracks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_attachments",
                ":attachment_id",
                "media_tracks"
              ],
              "variable": [
                {
                  "key": "attachment_id",
                  "value": "<attachment_id>",
                  "description": "The attachment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=contentAllowed values: content, webvtt_content, updated_at, created_at",
                  "disabled": true
                }
              ]
            },
            "description": "List the media tracks associated with a media object or attachment\n\n**OAuth Scope:** `url:GET|/api/v1/media_attachments/:attachment_id/media_tracks`"
          }
        },
        {
          "name": "List Media_Objects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_objects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_objects"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/media_objects`"
          }
        },
        {
          "name": "Get Media_Objects Media_Tracks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_objects/:media_object_id/media_tracks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_objects",
                ":media_object_id",
                "media_tracks"
              ],
              "variable": [
                {
                  "key": "media_object_id",
                  "value": "<media_object_id>",
                  "description": "The media_object_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/media_objects/:media_object_id/media_tracks`"
          }
        },
        {
          "name": "Update Media_Attachments",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_attachments/:attachment_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_attachments",
                ":attachment_id"
              ],
              "variable": [
                {
                  "key": "attachment_id",
                  "value": "<attachment_id>",
                  "description": "The attachment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_entered_title",
                  "value": "",
                  "description": "The new title.",
                  "disabled": true
                }
              ]
            },
            "description": "Updates the title of a media object.\n\n**OAuth Scope:** `url:PUT|/api/v1/media_attachments/:attachment_id`"
          }
        },
        {
          "name": "Put Media_Attachments Media_Tracks",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_attachments/:attachment_id/media_tracks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_attachments",
                ":attachment_id",
                "media_tracks"
              ],
              "variable": [
                {
                  "key": "attachment_id",
                  "value": "<attachment_id>",
                  "description": "The attachment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=contentAllowed values: content, webvtt_content, updated_at, created_at",
                  "disabled": true
                }
              ]
            },
            "description": "Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.\n\n**OAuth Scope:** `url:PUT|/api/v1/media_attachments/:attachment_id/media_tracks`"
          }
        },
        {
          "name": "Update Media_Objects",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_objects/:media_object_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_objects",
                ":media_object_id"
              ],
              "variable": [
                {
                  "key": "media_object_id",
                  "value": "<media_object_id>",
                  "description": "The media_object_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/media_objects/:media_object_id`"
          }
        },
        {
          "name": "Put Media_Objects Media_Tracks",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/media_objects/:media_object_id/media_tracks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "media_objects",
                ":media_object_id",
                "media_tracks"
              ],
              "variable": [
                {
                  "key": "media_object_id",
                  "value": "<media_object_id>",
                  "description": "The media_object_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/media_objects/:media_object_id/media_tracks`"
          }
        }
      ]
    },
    {
      "name": "Moderated Grading",
      "description": "API for viewing and adding students to the list of people in moderation for an assignment API for manipulating provisional grades Provisional grades are created by using the Submissions API endpoint \"Grade or comment on a submission\" with `provisional=true`. They can be viewed by using \"List assignment submissions\", \"Get a single submission\", or \"List gradeable students\" with `include[]=provisional_grades`. This API performs other operations on provisional grades for use with the Moderated Grading feature.",
      "item": [
        {
          "name": "Get Courses Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_provisional_grades/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "anonymous_provisional_grades",
                "status"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "anonymous_id",
                  "value": "",
                  "description": "The id of the student to show the status for",
                  "disabled": true
                }
              ]
            },
            "description": "Determine whether or not the student’s submission needs one or more provisional grades.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_provisional_grades/status`"
          }
        },
        {
          "name": "Get Courses Moderated_Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "moderated_students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of students selected for moderation Returns a list of [User](../users#user) objects. ### [Select students for moderation](#method.moderation_set.create) <a href=\"#method.moderation_set.create\" id=\"method.moderation_set.create\"></a> [ModerationSetController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/moderation_set_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students`"
          }
        },
        {
          "name": "Get Courses Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "provisional_grades",
                "status"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "student_id",
                  "value": "",
                  "description": "The id of the student to show the status for",
                  "disabled": true
                }
              ]
            },
            "description": "Tell whether the student’s submission needs one or more provisional grades.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/status`"
          }
        },
        {
          "name": "Post Courses Moderated_Students",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "moderated_students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Returns an array of users that were selected for moderation\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "student_ids[]",
                  "value": "",
                  "description": "user ids for students to select for moderation",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Publish",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/publish",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "provisional_grades",
                "publish"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Publish the selected provisional grade for all submissions to an assignment. Use the “Select provisional grade” endpoint to choose which provisional grade to publish for a particular submission. Students not in the moderation set will have their one and only provisional grade published. WARNING: This is irreversible. This will overwrite existing grades in the gradebook.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/publish`"
          }
        },
        {
          "name": "Put Courses Select",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/:provisional_grade_id/select",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "provisional_grades",
                ":provisional_grade_id",
                "select"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "provisional_grade_id",
                  "value": "<provisional_grade_id>",
                  "description": "The provisional_grade_id identifier"
                }
              ]
            },
            "description": "Choose which provisional grade the student should receive for a submission. The caller must be the final grader for the assignment or an admin with :select\\_final\\_grade rights.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/:provisional_grade_id/select`"
          }
        },
        {
          "name": "Put Courses Bulk_Select",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/bulk_select",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "provisional_grades",
                "bulk_select"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Choose which provisional grades will be received by associated students for an assignment. The caller must be the final grader for the assignment or an admin with :select\\_final\\_grade rights.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/bulk_select`"
          }
        }
      ]
    },
    {
      "name": "Modules",
      "description": "Modules are collections of learning materials useful for organizing courses and optionally providing a linear flow through them. Module items can be accessed linearly or sequentially depending on module configuration. Items can be unlocked by various criteria such as reading a page or achieving a minimum score on a quiz. Modules themselves can be unlocked by the completion of other Modules. If any active AssignmentOverrides exist on a ContextModule, then only students who have an applicable override can access the module and are assigned its items. AssignmentOverrides can be created for a (group of) student(s) or a section.",
      "item": [
        {
          "name": "Delete Courses Modules",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a module\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/modules/:id`"
          }
        },
        {
          "name": "Delete Courses Items",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a module item\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/modules/:module_id/items/:id`"
          }
        },
        {
          "name": "Get Courses Module_Item_Sequence",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/module_item_sequence",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "module_item_sequence"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "asset_type",
                  "value": "",
                  "description": "The type of asset to find module sequence information for. Use the ModuleItem if it is known (e.g., the user navigated from a module item), since this will avoid ambiguity if the asset appears more than once in the module sequence.Allowed values: ModuleItem, File, Page, Discussion, Assignment, Quiz, ExternalTool",
                  "disabled": true
                },
                {
                  "key": "asset_id",
                  "value": "",
                  "description": "The id of the asset (or the url in the case of a Page)",
                  "disabled": true
                }
              ]
            },
            "description": "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items in the course sequence, and also any applicable mastery path rules\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/module_item_sequence`"
          }
        },
        {
          "name": "Get Courses Modules",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“items”: Return module items inline if possible. This parameter suggests that Canvas return module items directly in the Module object JSON, to avoid having to make separate API requests for each module when enumerating modules and items. Canvas is free to omit ‘items’ for any particular module if it deems them too numerous to return inline. Callers must be prepared to use the List Module Items API if items are not returned.“content_details”: Requires ‘items’. Returns additional details with module items specific to their associated content items. Includes standard lock information for each item.Allowed values: items, content_details",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name of the modules (and module items, if ‘items’ is specified with include[]) to match and return.",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "Returns module completion information for the student with this id.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the modules in a course\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules`"
          }
        },
        {
          "name": "Get Courses Assignment_Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":context_module_id",
                "assignment_overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "context_module_id",
                  "value": "<context_module_id>",
                  "description": "The context_module_id identifier"
                }
              ]
            },
            "description": "Returns a paginated list of AssignmentOverrides that apply to the ContextModule.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides`"
          }
        },
        {
          "name": "Get Courses Modules",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“items”: Return module items inline if possible. This parameter suggests that Canvas return module items directly in the Module object JSON, to avoid having to make separate API requests for each module when enumerating modules and items. Canvas is free to omit ‘items’ for any particular module if it deems them too numerous to return inline. Callers must be prepared to use the List Module Items API if items are not returned.“content_details”: Requires ‘items’. Returns additional details with module items specific to their associated content items. Includes standard lock information for each item.Allowed values: items, content_details",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "Returns module completion information for the student with this id.",
                  "disabled": true
                }
              ]
            },
            "description": "Get information about a single module\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules/:id`"
          }
        },
        {
          "name": "Get Courses Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "If included, will return additional details specific to the content associated with each item. Refer to the Module Item specification for more details. Includes standard lock information for each item.Allowed values: content_details",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial title of the items to match and return.",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "Returns module completion information for the student with this id.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the items in a module\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules/:module_id/items`"
          }
        },
        {
          "name": "Get Courses Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "If included, will return additional details specific to the content associated with this item. Refer to the Module Item specification for more details. Includes standard lock information for each item.Allowed values: content_details",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "Returns module completion information for the student with this id.",
                  "disabled": true
                }
              ]
            },
            "description": "Get information about a single module item\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/modules/:module_id/items/:id`"
          }
        },
        {
          "name": "Post Courses Modules",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "module[position]",
                  "value": "",
                  "description": "The position of this module in the course (1-based)",
                  "disabled": true
                },
                {
                  "key": "module[require_sequential_progress]",
                  "value": "",
                  "description": "Whether module items must be unlocked in order",
                  "disabled": true
                },
                {
                  "key": "module[prerequisite_module_ids][]",
                  "value": "",
                  "description": "IDs of Modules that must be completed before this one is unlocked. Prerequisite modules must precede this module (i.e. have a lower position value), otherwise they will be ignored",
                  "disabled": true
                },
                {
                  "key": "module[publish_final_grade]",
                  "value": "",
                  "description": "Whether to publish the student’s final grade for the course upon completion of this module.",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new module\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/modules`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "module[name]",
                  "value": "",
                  "description": "The name of the module",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "module[unlock_at]",
                  "value": "",
                  "description": "The date the module will unlock",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Items",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                }
              ],
              "query": [
                {
                  "key": "module_item[title]",
                  "value": "",
                  "description": "The name of the module item and associated content",
                  "disabled": true
                },
                {
                  "key": "module_item[position]",
                  "value": "",
                  "description": "The position of this item in the module (1-based).",
                  "disabled": true
                },
                {
                  "key": "module_item[indent]",
                  "value": "",
                  "description": "0-based indent level; module items may be indented to show a hierarchy",
                  "disabled": true
                },
                {
                  "key": "module_item[page_url]",
                  "value": "",
                  "description": "Suffix for the linked wiki page (e.g. ‘front-page’). Required for ‘Page’ type.",
                  "disabled": false
                },
                {
                  "key": "module_item[external_url]",
                  "value": "",
                  "description": "External url that the item points to. [Required for ‘ExternalUrl’ and ‘ExternalTool’ types.",
                  "disabled": false
                },
                {
                  "key": "module_item[new_tab]",
                  "value": "",
                  "description": "Whether the external tool opens in a new tab. Only applies to ‘ExternalTool’ type.",
                  "disabled": true
                },
                {
                  "key": "module_item[completion_requirement][type]",
                  "value": "",
                  "description": "Completion requirement for this module item. “must_view”: Applies to all item types “must_contribute”: Only applies to “Assignment”, “Discussion”, and “Page” types “must_submit”, “min_score”: Only apply to “Assignment” and “Quiz” types “must_mark_done”: Only applies to “Assignment” and “Page” types Inapplicable types will be ignoredAllowed values: must_view, must_contribute, must_submit, must_mark_done",
                  "disabled": true
                },
                {
                  "key": "module_item[completion_requirement][min_score]",
                  "value": "",
                  "description": "Minimum score required to complete. Required for completion_requirement type ‘min_score’.",
                  "disabled": false
                },
                {
                  "key": "module_item[iframe][width]",
                  "value": "",
                  "description": "Width of the ExternalTool on launch",
                  "disabled": true
                },
                {
                  "key": "module_item[iframe][height]",
                  "value": "",
                  "description": "Height of the ExternalTool on launch",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new module item\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/modules/:module_id/items`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "module_item[type]",
                  "value": "",
                  "description": "The type of content linked to the itemAllowed values: File, Page, Discussion, Assignment, Quiz, SubHeader, ExternalUrl, ExternalTool",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "module_item[content_id]",
                  "value": "",
                  "description": "The id of the content to link to the module item. Required, except for ‘ExternalUrl’, ‘Page’, and ‘SubHeader’ types.",
                  "type": "text",
                  "disabled": false
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Mark_Read",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id/mark_read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id",
                "mark_read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Fulfills “must view” requirement for a module item. It is generally not necessary to do this explicitly, but it is provided for applications that need to access external content directly (bypassing the html\\_url redirect that normally allows Canvas to fulfill “must view” requirements). This endpoint cannot be used to complete requirements on locked or unpublished module items.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/modules/:module_id/items/:id/mark_read`"
          }
        },
        {
          "name": "Post Courses Select_Mastery_Path",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id/select_mastery_path",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id",
                "select_mastery_path"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_set_id",
                  "value": "",
                  "description": "Assignment set chosen, as specified in the mastery_paths portion of the context module item response",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "Which student the selection applies to. If not specified, current user is implied.",
                  "disabled": true
                }
              ]
            },
            "description": "Select a mastery path when module item includes several possible paths. Requires Mastery Paths feature to be enabled. Returns a compound document with the assignments included in the given path and any module items related to those assignments\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/modules/:module_id/items/:id/select_mastery_path`"
          }
        },
        {
          "name": "Put Courses Assignment_Overrides",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":context_module_id",
                "assignment_overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "context_module_id",
                  "value": "<context_module_id>",
                  "description": "The context_module_id identifier"
                }
              ]
            },
            "description": "Accepts a list of overrides and applies them to the ContextModule. Returns 204 No Content response code if successful.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "overrides[]",
                  "value": "",
                  "description": "List of overrides to apply to the module. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the module’s overrides. Keys for each override object can include: ‘id’, ‘title’, ‘student_ids’, and ‘course_section_id’. ‘group_id’ is accepted if the Differentiation Tags account setting is enabled.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Modules",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "module[name]",
                  "value": "",
                  "description": "The name of the module",
                  "disabled": true
                },
                {
                  "key": "module[position]",
                  "value": "",
                  "description": "The position of the module in the course (1-based)",
                  "disabled": true
                },
                {
                  "key": "module[require_sequential_progress]",
                  "value": "",
                  "description": "Whether module items must be unlocked in order",
                  "disabled": true
                },
                {
                  "key": "module[prerequisite_module_ids][]",
                  "value": "",
                  "description": "IDs of Modules that must be completed before this one is unlocked Prerequisite modules must precede this module (i.e. have a lower position value), otherwise they will be ignored",
                  "disabled": true
                },
                {
                  "key": "module[publish_final_grade]",
                  "value": "",
                  "description": "Whether to publish the student’s final grade for the course upon completion of this module.",
                  "disabled": true
                },
                {
                  "key": "module[published]",
                  "value": "",
                  "description": "Whether the module is published and visible to students",
                  "disabled": true
                }
              ]
            },
            "description": "Update and return an existing module\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/modules/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "module[unlock_at]",
                  "value": "",
                  "description": "The date the module will unlock",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Relock",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:id/relock",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":id",
                "relock"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Resets module progressions to their default locked state and recalculates them based on the current requirements. Adding progression requirements to an active course will not lock students out of modules they have already unlocked unless this action is called.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/modules/:id/relock`"
          }
        },
        {
          "name": "Put Courses Items",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "module_item[title]",
                  "value": "",
                  "description": "The name of the module item",
                  "disabled": true
                },
                {
                  "key": "module_item[position]",
                  "value": "",
                  "description": "The position of this item in the module (1-based)",
                  "disabled": true
                },
                {
                  "key": "module_item[indent]",
                  "value": "",
                  "description": "0-based indent level; module items may be indented to show a hierarchy",
                  "disabled": true
                },
                {
                  "key": "module_item[external_url]",
                  "value": "",
                  "description": "External url that the item points to. Only applies to ‘ExternalUrl’ type.",
                  "disabled": true
                },
                {
                  "key": "module_item[new_tab]",
                  "value": "",
                  "description": "Whether the external tool opens in a new tab. Only applies to ‘ExternalTool’ type.",
                  "disabled": true
                },
                {
                  "key": "module_item[completion_requirement][type]",
                  "value": "",
                  "description": "Completion requirement for this module item. “must_view”: Applies to all item types “must_contribute”: Only applies to “Assignment”, “Discussion”, and “Page” types “must_submit”, “min_score”: Only apply to “Assignment” and “Quiz” types “must_mark_done”: Only applies to “Assignment” and “Page” types Inapplicable types will be ignoredAllowed values: must_view, must_contribute, must_submit, must_mark_done",
                  "disabled": true
                },
                {
                  "key": "module_item[completion_requirement][min_score]",
                  "value": "",
                  "description": "Minimum score required to complete, Required for completion_requirement type ‘min_score’.",
                  "disabled": false
                },
                {
                  "key": "module_item[published]",
                  "value": "",
                  "description": "Whether the module item is published and visible to students.",
                  "disabled": true
                },
                {
                  "key": "module_item[module_id]",
                  "value": "",
                  "description": "Move this item to another module by specifying the target module id here. The target module must be in the same course.",
                  "disabled": true
                }
              ]
            },
            "description": "Update and return an existing module item\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/modules/:module_id/items/:id`"
          }
        },
        {
          "name": "Put Courses Done",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/modules/:module_id/items/:id/done",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "modules",
                ":module_id",
                "items",
                ":id",
                "done"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "module_id",
                  "value": "<module_id>",
                  "description": "The module_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Mark a module item as done/not done. Use HTTP method PUT to mark as done, and DELETE to mark as not done.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/modules/:module_id/items/:id/done`"
          }
        }
      ]
    },
    {
      "name": "Names and Role",
      "description": "API for IMS Names and Role Provisioning Service version 2 . Official specification: https://www.imsglobal.org/spec/lti-nrps/v2p0 Requires JWT OAuth2 Access Tokens with the `https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly` scope Response Content-Type is application/vnd.ims.lti-nrps.v2.membershipcontainer+json See [External Tools - LTI - Provisioning](../external-tools/lti/file.provisioning) for an overview of endpoints used for provisioning.",
      "item": [
        {
          "name": "Get Courses Names_And_Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/names_and_roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "names_and_roles"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "rlid",
                  "value": "",
                  "description": "If specified only NamesAndRoleMemberships with access to the LTI link references by this ‘rlidwill be included. Also causes the member array to be included for each returned NamesAndRoleMembership. If therole` parameter is also present, it will be ’and-ed’ together with this parameter",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "If specified only NamesAndRoleMemberships having this role in the given Course will be included. Value must be a fully-qualified LTI/LIS role URN. If the ‘rlid` parameter is also present, it will be ’and-ed’ together with this parameter",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.",
                  "disabled": true
                }
              ]
            },
            "description": "Return active NamesAndRoleMemberships in the given course.\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/names_and_roles`"
          }
        },
        {
          "name": "Get Groups Names_And_Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/groups/:group_id/names_and_roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "groups",
                ":group_id",
                "names_and_roles"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "rlid",
                  "value": "",
                  "description": "If specified only NamesAndRoleMemberships with access to the LTI link references by this ‘rlid` will be included. Also causes the member array to be included for each returned NamesAndRoleMembership. If the role parameter is also present, it will be ’and-ed’ together with this parameter",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "If specified only NamesAndRoleMemberships having this role in the given Group will be included. Value must be a fully-qualified LTI/LIS role URN. Further, only purl.imsglobal.org/vocab/lis/v2/membership#Member and purl.imsglobal.org/vocab/lis/v2/membership#Manager are supported. If the ‘rlid` parameter is also present, it will be ’and-ed’ together with this parameter",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.",
                  "disabled": true
                }
              ]
            },
            "description": "Return active NamesAndRoleMemberships in the given group.\n\n**OAuth Scope:** `url:GET|/api/lti/groups/:group_id/names_and_roles`"
          }
        }
      ]
    },
    {
      "name": "New Quiz Items",
      "description": "API for accessing and building items inside a New Quiz. To interact with the quiz itself, see the [New Quizzes API](new_quizzes). Glossary: Quiz Items can be among several types as described here. For now, all types can be retrieved (GET), but some types are restricted to only that functionality. QuestionItem: question items are the various question types allowed for Quizzes. These question types can be created, updated, retrieved, and deleted with the API. See the Appendix for more details. StimulusItem: stimulus items are quiz items that define a stimulus that can have associated questions attached to it. For now, stimulus items can only be retrieved with the API. They must be created and updated via the UI. BankItem: bank items are quiz questions or other items that are part of an item bank. For now, bank items can only be retrieved with the API. They must be created and updated via the UI. BankEntry: bank entry items allow for a random selection of items from an associated bank to be included in the quiz. For now, bank items can only be retrieved with the API. They must be created and updated via the UI.",
      "item": [
        {
          "name": "Delete V1 Items",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items",
                ":item_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "item_id",
                  "value": "<item_id>",
                  "description": "The item_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "disabled": true
                },
                {
                  "key": "item_id",
                  "value": "",
                  "description": "The id of the item associated with the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Delete a single quiz item in a new quiz.\n\n**OAuth Scope:** `url:DELETE|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id`"
          }
        },
        {
          "name": "Get V1 Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of items in a new quiz.\n\n**OAuth Scope:** `url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items`"
          }
        },
        {
          "name": "Get V1 Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items",
                ":item_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "item_id",
                  "value": "<item_id>",
                  "description": "The item_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "disabled": true
                },
                {
                  "key": "item_id",
                  "value": "",
                  "description": "The id of the item associated with the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Get details about a single item in a new quiz.\n\n**OAuth Scope:** `url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id`"
          }
        },
        {
          "name": "Get V1 Media_Upload_Url",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/media_upload_url",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items",
                "media_upload_url"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Get a url for uploading media for use in hot-spot question types. See the hot-spot question type in the [Appendix: Question Types](#Question+Types-appendix) for more details about using this endpoint.\n\n**OAuth Scope:** `url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/media_upload_url`"
          }
        },
        {
          "name": "Patch V1 Items",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items",
                ":item_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "item_id",
                  "value": "<item_id>",
                  "description": "The item_id identifier"
                }
              ],
              "query": [
                {
                  "key": "item[position]",
                  "value": "",
                  "description": "The position of the item within the quiz.",
                  "disabled": true
                },
                {
                  "key": "item[entry_type]",
                  "value": "",
                  "description": "The type of the item.Allowed values: Item",
                  "disabled": true
                },
                {
                  "key": "item[entry][title]",
                  "value": "",
                  "description": "The question title.",
                  "disabled": true
                },
                {
                  "key": "item[entry][item_body]",
                  "value": "",
                  "description": "The question stem (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][calculator_type]",
                  "value": "",
                  "description": "Type of calculator the user will have access to during the question.Allowed values: none, basic, scientific",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][neutral]",
                  "value": "",
                  "description": "General feedback to show regardless of answer (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][correct]",
                  "value": "",
                  "description": "Feedback to show if the question is answered correctly (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][incorrect]",
                  "value": "",
                  "description": "Feedback to show if the question is answered incorrectly (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][interaction_type_slug]",
                  "value": "",
                  "description": "The type of question. One of ‘multi-answer’, ‘matching’, ‘categorization’, ‘file-upload’, ‘formula’, ‘ordering’, ‘rich-fill-blank’, ‘hot-spot’, ‘choice’, ‘numeric’, ‘true-false’, or ‘essay’. See Appendix: Question Types for more info about each type.",
                  "disabled": true
                },
                {
                  "key": "item[entry][scoring_algorithm]",
                  "value": "",
                  "description": "The algorithm used to score the question. See Appendix: Question Types for more info about this field.",
                  "disabled": true
                }
              ]
            },
            "description": "Update a single quiz item in a new quiz. Only `QuestionItem` types can be updated.\n\n**OAuth Scope:** `url:PATCH|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item_id",
                  "value": "",
                  "description": "The id of the item associated with the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[points_possible]",
                  "value": "",
                  "description": "The number of points available to score on this item. Must be positive.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][interaction_data]",
                  "value": "",
                  "description": "An object that contains the question data. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][properties]",
                  "value": "",
                  "description": "An object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][scoring_data]",
                  "value": "",
                  "description": "An object that describes how to score the question. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][answer_feedback]",
                  "value": "",
                  "description": "Feedback provided for each answer (rich content, only available on ‘choice’ question types).",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post V1 Items",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "items"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "item[position]",
                  "value": "",
                  "description": "The position of the item within the quiz.",
                  "disabled": true
                },
                {
                  "key": "item[entry][title]",
                  "value": "",
                  "description": "The question title.",
                  "disabled": true
                },
                {
                  "key": "item[entry][calculator_type]",
                  "value": "",
                  "description": "Type of calculator the user will have access to during the question.Allowed values: none, basic, scientific",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][neutral]",
                  "value": "",
                  "description": "General feedback to show regardless of answer (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][correct]",
                  "value": "",
                  "description": "Feedback to show if the question is answered correctly (rich content).",
                  "disabled": true
                },
                {
                  "key": "item[entry][feedback][incorrect]",
                  "value": "",
                  "description": "Feedback to show if the question is answered incorrectly (rich content).",
                  "disabled": true
                }
              ]
            },
            "description": "Create a quiz item in a new quiz. Only `QuestionItem` types can be created.\n\n**OAuth Scope:** `url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[points_possible]",
                  "value": "",
                  "description": "The number of points available to score on this item. Must be positive.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry_type]",
                  "value": "",
                  "description": "The type of the item.Allowed values: Item",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][item_body]",
                  "value": "",
                  "description": "The question stem (rich content).",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][interaction_type_slug]",
                  "value": "",
                  "description": "The type of question. One of ‘multi-answer’, ‘matching’, ‘categorization’, ‘file-upload’, ‘formula’, ‘ordering’, ‘rich-fill-blank’, ‘hot-spot’, ‘choice’, ‘numeric’, ‘true-false’, or ‘essay’. See Appendix: Question Types for more info about each type.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][interaction_data]",
                  "value": "",
                  "description": "An object that contains the question data. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][properties]",
                  "value": "",
                  "description": "An object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][scoring_data]",
                  "value": "",
                  "description": "An object that describes how to score the question. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][answer_feedback]",
                  "value": "",
                  "description": "Feedback provided for each answer (rich content, only available on ‘choice’ question types).",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "item[entry][scoring_algorithm]",
                  "value": "",
                  "description": "The algorithm used to score the question. See Appendix: Question Types for more info about this field.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "New Quizzes",
      "description": "API for accessing and building New Quizzes. To interact with New Quiz _items_, see the [New Quiz Items API](new_quiz_items).",
      "item": [
        {
          "name": "Delete V1 Quizzes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Delete a single new quiz.\n\n**OAuth Scope:** `url:DELETE|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id`"
          }
        },
        {
          "name": "Get V1 Quizzes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of new quizzes.\n\n**OAuth Scope:** `url:GET|/api/quiz/v1/courses/:course_id/quizzes`"
          }
        },
        {
          "name": "Get V1 Quizzes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Get details about a single new quiz.\n\n**OAuth Scope:** `url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id`"
          }
        },
        {
          "name": "Patch V1 Quizzes",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz[title]",
                  "value": "",
                  "description": "The title of the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[assignment_group_id]",
                  "value": "",
                  "description": "The ID of the quiz’s assignment group.",
                  "disabled": true
                },
                {
                  "key": "quiz[grading_type]",
                  "value": "",
                  "description": "The type of grading the assignment receives.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points",
                  "disabled": true
                },
                {
                  "key": "quiz[instructions]",
                  "value": "",
                  "description": "Instructions for the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][calculator_type]",
                  "value": "",
                  "description": "Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.Allowed values: none, basic, scientific",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][filter_ip_address]",
                  "value": "",
                  "description": "Whether IP filtering is needed. Must be true for filters to take effect.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][filters][ips][]",
                  "value": "",
                  "description": "Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there’s no restriction. Specifies the range of IP addresses where the quiz can be taken from. Should be null if there’s no restriction.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]",
                  "value": "",
                  "description": "Whether multiple attempts for this quiz is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][attempt_limit]",
                  "value": "",
                  "description": "Whether there is an attempt limit. Only set if multiple_attempts_enabled is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][score_to_keep]",
                  "value": "",
                  "description": "Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.Allowed values: average, first, highest, latest",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][cooling_period]",
                  "value": "",
                  "description": "Whether there is a cooling period. Only used if multiple_attempts_enabled is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][one_at_a_time_type]",
                  "value": "",
                  "description": "Specifies the settings for questions to display when quiz taking.Allowed values: none, question",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][allow_backtracking]",
                  "value": "",
                  "description": "Whether to allow user to return to previous questions when ‘one_at_a_time_type’ is set to ‘question’.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][result_view_restricted]",
                  "value": "",
                  "description": "Whether the results view is restricted for students. Must be true for any student restrictions to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_points_awarded]",
                  "value": "",
                  "description": "Whether points are shown. Must set result_view_restricted to true to use this parameter.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_points_possible]",
                  "value": "",
                  "description": "Whether points possible is shown. Must set result_view_restricted to true to use this parameter.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_items]",
                  "value": "",
                  "description": "Whether to show items in the results view. Must be true for any items restrictions to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response]",
                  "value": "",
                  "description": "Whether item response is shown. Only set if display_items is true. Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_qualifier]",
                  "value": "",
                  "description": "Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.Allowed values: always, once_per_attempt, after_last_attempt, once_after_last_attempt",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_correctness]",
                  "value": "",
                  "description": "Whether item correctness is shown. Only set if display_item_response is true. Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]",
                  "value": "",
                  "description": "Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.Allowed values: always, after_last_attempt",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_correct_answer]",
                  "value": "",
                  "description": "Whether correct answer is shown. Only set if display_item_response_correctness is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_feedback]",
                  "value": "",
                  "description": "Whether Item feedback is shown. Only set if display_items is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][shuffle_answers]",
                  "value": "",
                  "description": "Whether answers should be shuffled for students.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][shuffle_questions]",
                  "value": "",
                  "description": "Whether questions should be shuffled for students.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][require_student_access_code]",
                  "value": "",
                  "description": "Whether an access code is needed to take the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][student_access_code]",
                  "value": "",
                  "description": "Access code to restrict quiz access. Should be null if no restriction.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][has_time_limit]",
                  "value": "",
                  "description": "Whether there is a time limit for the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Update a single quiz for the course.\n\n**OAuth Scope:** `url:PATCH|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The id of the assignment associated with the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[points_possible]",
                  "value": "",
                  "description": "The total point value given to the quiz. Must be positive.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[due_at]",
                  "value": "",
                  "description": "When the quiz is due.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[lock_at]",
                  "value": "",
                  "description": "When to lock the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[unlock_at]",
                  "value": "",
                  "description": "When to unlock the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][max_attempts]",
                  "value": "",
                  "description": "The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][cooling_period_seconds]",
                  "value": "",
                  "description": "Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true.",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][show_item_responses_at]",
                  "value": "",
                  "description": "When student responses should be shown to them. Only used if display_item_response is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][hide_item_responses_at]",
                  "value": "",
                  "description": "When student responses should be hidden from them. Only used if display_item_response is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]",
                  "value": "",
                  "description": "When student response correctness should be shown to them. Only used if display_item_response_correctness is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]",
                  "value": "",
                  "description": "When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][session_time_limit_in_seconds]",
                  "value": "",
                  "description": "Limit the time a student can work on the quiz. Should be null if no restriction.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post V1 Quizzes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz[title]",
                  "value": "",
                  "description": "The title of the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[assignment_group_id]",
                  "value": "",
                  "description": "The ID of the quiz’s assignment group.",
                  "disabled": true
                },
                {
                  "key": "quiz[grading_type]",
                  "value": "",
                  "description": "The type of grading the assignment receives.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points",
                  "disabled": true
                },
                {
                  "key": "quiz[instructions]",
                  "value": "",
                  "description": "Instructions for the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][calculator_type]",
                  "value": "",
                  "description": "Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.Allowed values: none, basic, scientific",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][filter_ip_address]",
                  "value": "",
                  "description": "Whether IP filtering is needed. Must be true for filters to take effect.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][filters][ips][]",
                  "value": "",
                  "description": "Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there’s no restriction.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]",
                  "value": "",
                  "description": "Whether multiple attempts for this quiz is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][attempt_limit]",
                  "value": "",
                  "description": "Whether there is an attempt limit. Only set if multiple_attempts_enabled is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][score_to_keep]",
                  "value": "",
                  "description": "Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.Allowed values: average, first, highest, latest",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][cooling_period]",
                  "value": "",
                  "description": "Whether there is a cooling (waiting) period. Only used if multiple_attempts_enabled is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][one_at_a_time_type]",
                  "value": "",
                  "description": "Specifies the settings for questions to display when quiz taking.Allowed values: none, question",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][allow_backtracking]",
                  "value": "",
                  "description": "Whether to allow user to return to previous questions when ‘one_at_a_time_type’ is set to ‘question’.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][result_view_restricted]",
                  "value": "",
                  "description": "Whether the results view is restricted for students. Must be true for any student restrictions to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_points_awarded]",
                  "value": "",
                  "description": "Whether points are shown. Must set result_view_restricted to true to use this parameter.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_points_possible]",
                  "value": "",
                  "description": "Whether points possible is shown. Must set result_view_restricted to true to use this parameter.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_items]",
                  "value": "",
                  "description": "Whether to show items in the results view. Must be true for any items restrictions to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response]",
                  "value": "",
                  "description": "Whether item response is shown. Only set if display_items is true. Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_qualifier]",
                  "value": "",
                  "description": "Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.Allowed values: always, once_per_attempt, after_last_attempt, once_after_last_attempt",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_correctness]",
                  "value": "",
                  "description": "Whether item correctness is shown. Only set if display_item_response is true. Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]",
                  "value": "",
                  "description": "Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.Allowed values: always, after_last_attempt",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_correct_answer]",
                  "value": "",
                  "description": "Whether correct answer is shown. Only set if display_item_response_correctness is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][display_item_feedback]",
                  "value": "",
                  "description": "Whether Item feedback is shown. Only set if display_items is true.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][shuffle_answers]",
                  "value": "",
                  "description": "Whether answers should be shuffled for students.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][shuffle_questions]",
                  "value": "",
                  "description": "Whether questions should be shuffled for students.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][require_student_access_code]",
                  "value": "",
                  "description": "Whether an access code is needed to take the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][student_access_code]",
                  "value": "",
                  "description": "Access code to restrict quiz access. Should be null if no restriction.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][has_time_limit]",
                  "value": "",
                  "description": "Whether there is a time limit for the quiz.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new quiz for the course.\n\n**OAuth Scope:** `url:POST|/api/quiz/v1/courses/:course_id/quizzes`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[points_possible]",
                  "value": "",
                  "description": "The total point value given to the quiz. Must be positive.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[due_at]",
                  "value": "",
                  "description": "When the quiz is due.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[lock_at]",
                  "value": "",
                  "description": "When to lock the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[unlock_at]",
                  "value": "",
                  "description": "When to unlock the quiz.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][max_attempts]",
                  "value": "",
                  "description": "The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][multiple_attempts][cooling_period_seconds]",
                  "value": "",
                  "description": "Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true",
                  "type": "text",
                  "disabled": false
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][show_item_responses_at]",
                  "value": "",
                  "description": "When student responses should be shown to them. Only used if display_item_response is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][hide_item_responses_at]",
                  "value": "",
                  "description": "When student responses should be hidden from them. Only used if display_item_response is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]",
                  "value": "",
                  "description": "When student response correctness should be shown to them. Only used if display_item_response_correctness is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]",
                  "value": "",
                  "description": "When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_settings][session_time_limit_in_seconds]",
                  "value": "",
                  "description": "Limit the time a student can work on the quiz. Should be null if no restriction.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "New Quizzes Accommodations",
      "description": "API for setting course-level and quiz-level accommodations for students. This API supports bulk operations to apply accommodations to multiple users at once.",
      "item": [
        {
          "name": "Post V1 Accommodations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/accommodations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "accommodations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "extra_time",
                  "value": "",
                  "description": "Amount of extra time in minutes granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).",
                  "disabled": true
                },
                {
                  "key": "apply_to_in_progress_quiz_sessions",
                  "value": "",
                  "description": "If ‘true’, applies the accommodation to currently in-progress quiz sessions.",
                  "disabled": true
                },
                {
                  "key": "reduce_choices_enabled",
                  "value": "",
                  "description": "If ‘true’, removes one incorrect answer from multiple-choice questions with 4 or more options.",
                  "disabled": true
                }
              ]
            },
            "description": "Apply accommodations at the **course level** for students enrolled in a given course.\n\n**OAuth Scope:** `url:POST|/api/quiz/v1/courses/:course_id/accommodations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course where accommodations should be applied.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The Canvas user ID of the student receiving accommodations.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post V1 Accommodations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/accommodations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "accommodations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "extra_time",
                  "value": "",
                  "description": "Amount of extra time in minutes granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).",
                  "disabled": true
                },
                {
                  "key": "extra_attempts",
                  "value": "",
                  "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.",
                  "disabled": true
                },
                {
                  "key": "reduce_choices_enabled",
                  "value": "",
                  "description": "If ‘true’, removes one incorrect answer from multiple-choice questions with 4 or more options.",
                  "disabled": true
                }
              ]
            },
            "description": "Apply accommodations at the **quiz level** for students in a specific assignment.\n\n**OAuth Scope:** `url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/accommodations`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course where the quiz is located.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "assignment_id",
                  "value": "",
                  "description": "The ID of the assignment/quiz that needs accommodations.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "The Canvas user ID of the student receiving accommodations.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "New Quizzes Reports",
      "description": "API for generating New Quizzes Reports.",
      "item": [
        {
          "name": "Post V1 Reports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "quiz",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":assignment_id",
                "reports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "Generate a new report for this quiz. Returns a progress object that can be used to track the progress of the report generation.\n\n**OAuth Scope:** `url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/reports`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_report[report_type]",
                  "value": "",
                  "description": "The type of report to be generated.Allowed values: student_analysis, item_analysis",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz_report[format]",
                  "value": "",
                  "description": "The format of report to be generated.Allowed values: csv, json",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Notice Handlers",
      "description": "API for the LTI Platform Notification Service. Requires LTI Advantage (JWT OAuth2) tokens with the `https://purl.imsglobal.org/spec/lti/scope/noticehandlers` scope. See the Canvas [Platform Notification Service](../external-tools/lti/file.pns) intro guide for an overview of these endpoints and information on specific notice types.",
      "item": [
        {
          "name": "List Notice-Handlers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/notice-handlers/:context_external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "notice-handlers",
                ":context_external_tool_id"
              ],
              "variable": [
                {
                  "key": "context_external_tool_id",
                  "value": "<context_external_tool_id>",
                  "description": "The context_external_tool_id identifier"
                }
              ]
            },
            "description": "List all notice handlers for the tool\n\n**OAuth Scope:** `url:GET|/api/lti/notice-handlers/:context_external_tool_id`"
          }
        },
        {
          "name": "Update Notice-Handlers",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/notice-handlers/:context_external_tool_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "notice-handlers",
                ":context_external_tool_id"
              ],
              "variable": [
                {
                  "key": "context_external_tool_id",
                  "value": "<context_external_tool_id>",
                  "description": "The context_external_tool_id identifier"
                }
              ],
              "query": [
                {
                  "key": "max_batch_size",
                  "value": "",
                  "description": "The maximum number of notices to include in a single batch",
                  "disabled": true
                }
              ]
            },
            "description": "Subscribe (set) or unsubscribe (remove) a notice handler for the tool\n\n**OAuth Scope:** `url:PUT|/api/lti/notice-handlers/:context_external_tool_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "notice_type",
                  "value": "",
                  "description": "The type of notice",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "handler",
                  "value": "",
                  "description": "URL to receive the notice, or an empty string to unsubscribe",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Notification Preferences",
      "description": "API for managing notification preferences",
      "item": [
        {
          "name": "Get Users Notification_Preference_Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preference_categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":communication_channel_id",
                "notification_preference_categories"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                }
              ]
            },
            "description": "Fetch all notification preference categories for the given communication channel ### [Get a preference](#method.notification_preferences.show) <a href=\"#method.notification_preferences.show\" id=\"method.notification_preferences.show\"></a> [NotificationPreferencesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preference_categories`"
          }
        },
        {
          "name": "Get Users Notification_Preferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":communication_channel_id",
                "notification_preferences"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences`"
          }
        },
        {
          "name": "Get Users Notification_Preferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences/:notification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":communication_channel_id",
                "notification_preferences",
                ":notification"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                },
                {
                  "key": "notification",
                  "value": "<notification>",
                  "description": "The notification identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences/:notification`"
          }
        },
        {
          "name": "Get Users Notification_Preferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":type",
                ":address",
                "notification_preferences"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "type",
                  "value": "<type>",
                  "description": "The type identifier"
                },
                {
                  "key": "address",
                  "value": "<address>",
                  "description": "The address identifier"
                }
              ]
            },
            "description": "Fetch all preferences for the given communication channel Returns a list of [NotificationPreference](#notificationpreference) objects. ### [List of preference categories](#method.notification_preferences.category_index) <a href=\"#method.notification_preferences.category_index\" id=\"method.notification_preferences.category_index\"></a> [NotificationPreferencesController#category\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences`"
          }
        },
        {
          "name": "Get Users Notification_Preferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences/:notification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "communication_channels",
                ":type",
                ":address",
                "notification_preferences",
                ":notification"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "type",
                  "value": "<type>",
                  "description": "The type identifier"
                },
                {
                  "key": "address",
                  "value": "<address>",
                  "description": "The address identifier"
                },
                {
                  "key": "notification",
                  "value": "<notification>",
                  "description": "The notification identifier"
                }
              ]
            },
            "description": "Fetch the preference for the given notification for the given communication channel Returns a [NotificationPreference](#notificationpreference) object. ### [Update a preference](#method.notification_preferences.update) <a href=\"#method.notification_preferences.update\" id=\"method.notification_preferences.update\"></a> [NotificationPreferencesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences/:notification`"
          }
        },
        {
          "name": "Put Users Notification_Preference_Categories",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/:communication_channel_id/notification_preference_categories/:category",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                ":communication_channel_id",
                "notification_preference_categories",
                ":category"
              ],
              "variable": [
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                },
                {
                  "key": "category",
                  "value": "<category>",
                  "description": "The category identifier"
                }
              ],
              "query": [
                {
                  "key": "category",
                  "value": "",
                  "description": "The name of the category. Must be parameterized (e.g. The category “Course Content” should be “course_content”)",
                  "disabled": true
                }
              ]
            },
            "description": "Change the preferences for multiple notifications based on the category for a single communication channel\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preference_categories/:category`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "notification_preferences[frequency]",
                  "value": "",
                  "description": "The desired frequency for each notification in the category",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Notification_Preferences",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                ":communication_channel_id",
                "notification_preferences"
              ],
              "variable": [
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences`"
          }
        },
        {
          "name": "Put Users Notification_Preferences",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences/:notification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                ":communication_channel_id",
                "notification_preferences",
                ":notification"
              ],
              "variable": [
                {
                  "key": "communication_channel_id",
                  "value": "<communication_channel_id>",
                  "description": "The communication_channel_id identifier"
                },
                {
                  "key": "notification",
                  "value": "<notification>",
                  "description": "The notification identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences/:notification`"
          }
        },
        {
          "name": "Put Users Notification_Preferences",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/:type/:address/notification_preferences",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                ":type",
                ":address",
                "notification_preferences"
              ],
              "variable": [
                {
                  "key": "type",
                  "value": "<type>",
                  "description": "The type identifier"
                },
                {
                  "key": "address",
                  "value": "<address>",
                  "description": "The address identifier"
                }
              ]
            },
            "description": "Change the preferences for multiple notifications for a single communication channel at once\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/communication_channels/:type/:address/notification_preferences`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "notification_preferences[<X>][frequency]",
                  "value": "",
                  "description": "The desired frequency for \\ notification",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Notification_Preferences",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/communication_channels/:type/:address/notification_preferences/:notification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "communication_channels",
                ":type",
                ":address",
                "notification_preferences",
                ":notification"
              ],
              "variable": [
                {
                  "key": "type",
                  "value": "<type>",
                  "description": "The type identifier"
                },
                {
                  "key": "address",
                  "value": "<address>",
                  "description": "The address identifier"
                },
                {
                  "key": "notification",
                  "value": "<notification>",
                  "description": "The notification identifier"
                }
              ]
            },
            "description": "Change the preference for a single notification for a single communication channel\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/communication_channels/:type/:address/notification_preferences/:notification`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "notification_preferences[frequency]",
                  "value": "",
                  "description": "The desired frequency for this notification",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Originality Reports",
      "description": "",
      "item": [
        {
          "name": "Get Assignments Originality_Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/assignments/:assignment_id/files/:file_id/originality_report",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "assignments",
                ":assignment_id",
                "files",
                ":file_id",
                "originality_report"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "file_id",
                  "value": "<file_id>",
                  "description": "The file_id identifier"
                }
              ]
            },
            "description": "Get a single originality report Returns an [OriginalityReport](#originalityreport) object. ### Appendixes #### Appendix: Originality Report UI Locations <a href=\"#originalityreportuilocations-appendix\" id=\"originalityreportuilocations-appendix\"></a>\n\n**OAuth Scope:** `url:GET|/api/lti/assignments/:assignment_id/files/:file_id/originality_report`"
          }
        },
        {
          "name": "Get Assignments Originality_Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "originality_report",
                ":id"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id`"
          }
        },
        {
          "name": "Post Assignments Originality_Report",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "originality_report"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ],
              "query": [
                {
                  "key": "originality_report[file_id]",
                  "value": "",
                  "description": "The id of the file being given an originality score. Required if creating a report associated with a file.",
                  "disabled": false
                },
                {
                  "key": "originality_report[originality_report_url]",
                  "value": "",
                  "description": "The URL where the originality report for the specified file may be found.",
                  "disabled": true
                },
                {
                  "key": "originality_report[originality_report_file_id]",
                  "value": "",
                  "description": "The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.",
                  "disabled": true
                },
                {
                  "key": "originality_report[tool_setting][resource_type_code]",
                  "value": "",
                  "description": "The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type ‘basic-lti-launch-request’ in the specified resource handler rather than using the originality_report_url.",
                  "disabled": true
                },
                {
                  "key": "originality_report[tool_setting][resource_url]",
                  "value": "",
                  "description": "The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler’s message “path” value (See ‘resource_type_code) unless it is specified. If this parameter is used a resource_type_code` must also be specified.",
                  "disabled": true
                },
                {
                  "key": "originality_report[workflow_state]",
                  "value": "",
                  "description": "May be set to “pending”, “error”, or “scored”. If an originality score is provided a workflow state of “scored” will be inferred.",
                  "disabled": true
                },
                {
                  "key": "originality_report[error_message]",
                  "value": "",
                  "description": "A message describing the error. If set, the “workflow_state” will be set to “error.”",
                  "disabled": true
                },
                {
                  "key": "originality_report[attempt]",
                  "value": "",
                  "description": "If no ‘file_idis given, and no file is required for the assignment (that is, the assignment allows an online text entry), this parameter may be given to clarify which attempt number the report is for (in the case of resubmissions). If this field is omitted and nofile_id` is given, the report will be created (or updated, if it exists) for the first submission attempt with no associated file.",
                  "disabled": false
                }
              ]
            },
            "description": "Create a new OriginalityReport for the specified file\n\n**OAuth Scope:** `url:POST|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "originality_report[originality_score]",
                  "value": "",
                  "description": "A number between 0 and 100 representing the measure of the specified file’s originality.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Assignments Originality_Report",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/assignments/:assignment_id/files/:file_id/originality_report",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "assignments",
                ":assignment_id",
                "files",
                ":file_id",
                "originality_report"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "file_id",
                  "value": "<file_id>",
                  "description": "The file_id identifier"
                }
              ],
              "query": [
                {
                  "key": "originality_report[originality_report_url]",
                  "value": "",
                  "description": "The URL where the originality report for the specified file may be found.",
                  "disabled": true
                },
                {
                  "key": "originality_report[originality_report_file_id]",
                  "value": "",
                  "description": "The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.",
                  "disabled": true
                },
                {
                  "key": "originality_report[tool_setting][resource_type_code]",
                  "value": "",
                  "description": "The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type ‘basic-lti-launch-request’ in the specified resource handler rather than using the originality_report_url.",
                  "disabled": true
                },
                {
                  "key": "originality_report[tool_setting][resource_url]",
                  "value": "",
                  "description": "The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler’s message “path” value (See ‘resource_type_code) unless it is specified. If this parameter is used a resource_type_code` must also be specified.",
                  "disabled": true
                },
                {
                  "key": "originality_report[workflow_state]",
                  "value": "",
                  "description": "May be set to “pending”, “error”, or “scored”. If an originality score is provided a workflow state of “scored” will be inferred.",
                  "disabled": true
                },
                {
                  "key": "originality_report[error_message]",
                  "value": "",
                  "description": "A message describing the error. If set, the “workflow_state” will be set to “error.”",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.\n\n**OAuth Scope:** `url:PUT|/api/lti/assignments/:assignment_id/files/:file_id/originality_report`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "originality_report[originality_score]",
                  "value": "",
                  "description": "A number between 0 and 100 representing the measure of the specified file’s originality.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Assignments Originality_Report",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "originality_report",
                ":id"
              ],
              "variable": [
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id`"
          }
        }
      ]
    },
    {
      "name": "Outcome Groups",
      "description": "API for accessing learning outcome group information. Learning outcome groups organize outcomes within a context (or in the global \"context\" for global outcomes). Every outcome is created in a particular context (that context then becomes its \"owning context\") but may be linked multiple times in one or more related contexts. This allows different accounts or courses to organize commonly defined outcomes in ways appropriate to their pedagogy, including having the same outcome discoverable at different locations in the organizational hierarchy. While an outcome can be linked into a context (such as a course) multiple times, it may only be linked into a particular group once.",
      "item": [
        {
          "name": "Delete Accounts Outcome_Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Delete Accounts Outcomes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id`"
          }
        },
        {
          "name": "Delete Courses Outcome_Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted. Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group’s descendants, the group deletion will fail.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Delete Courses Outcomes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ]
            },
            "description": "Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id`"
          }
        },
        {
          "name": "Delete Global Outcome_Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/global/outcome_groups/:id`"
          }
        },
        {
          "name": "Delete Global Outcomes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/global/outcome_groups/:id/outcomes/:outcome_id`"
          }
        },
        {
          "name": "Get Accounts Outcome_Group_Links",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_group_links",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_group_links"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_group_links`"
          }
        },
        {
          "name": "Get Accounts Outcome_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_groups`"
          }
        },
        {
          "name": "Get Accounts Outcome_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Get Accounts Outcomes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Get Accounts Subgroups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_groups/:id/subgroups`"
          }
        },
        {
          "name": "Get Accounts Root_Outcome_Group",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/root_outcome_group",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "root_outcome_group"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/root_outcome_group`"
          }
        },
        {
          "name": "Get Courses Outcome_Group_Links",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_group_links",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_group_links"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "outcome_style",
                  "value": "",
                  "description": "The detail level of the outcomes. Defaults to “abbrev”. Specify “full” for more information.",
                  "disabled": true
                },
                {
                  "key": "outcome_group_style",
                  "value": "",
                  "description": "The detail level of the outcome groups. Defaults to “abbrev”. Specify “full” for more information.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of all outcome links in the specified context.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_group_links`"
          }
        },
        {
          "name": "Get Courses Outcome_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns a list of all outcome groups in the specified context. Returns a list of [OutcomeGroup](#outcomegroup) objects. ### [Get all outcome links for context](#method.outcome_groups_api.link_index) <a href=\"#method.outcome_groups_api.link_index\" id=\"method.outcome_groups_api.link_index\"></a> [OutcomeGroupsApiController#link\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_groups`"
          }
        },
        {
          "name": "Get Courses Outcome_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns detailed information about a specific outcome group. Returns an [OutcomeGroup](#outcomegroup) object. ### [Update an outcome group](#method.outcome_groups_api.update) <a href=\"#method.outcome_groups_api.update\" id=\"method.outcome_groups_api.update\"></a> [OutcomeGroupsApiController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Get Courses Outcomes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "outcome_style",
                  "value": "",
                  "description": "The detail level of the outcomes. Defaults to “abbrev”. Specify “full” for more information.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the immediate OutcomeLink children of the outcome group.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Get Courses Subgroups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "A paginated list of the immediate OutcomeGroup children of the outcome group. Returns a list of [OutcomeGroup](#outcomegroup) objects. ### [Create a subgroup](#method.outcome_groups_api.create) <a href=\"#method.outcome_groups_api.create\" id=\"method.outcome_groups_api.create\"></a> [OutcomeGroupsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_groups/:id/subgroups`"
          }
        },
        {
          "name": "Get Courses Root_Outcome_Group",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/root_outcome_group",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "root_outcome_group"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group’s URL. ### [Get all outcome groups for context](#method.outcome_groups_api.index) <a href=\"#method.outcome_groups_api.index\" id=\"method.outcome_groups_api.index\"></a> [OutcomeGroupsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/root_outcome_group`"
          }
        },
        {
          "name": "Get Global Outcome_Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/global/outcome_groups/:id`"
          }
        },
        {
          "name": "Get Global Outcomes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/global/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Get Global Subgroups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/global/outcome_groups/:id/subgroups`"
          }
        },
        {
          "name": "Get Global Root_Outcome_Group",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/root_outcome_group",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "root_outcome_group"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/global/root_outcome_group`"
          }
        },
        {
          "name": "Post Accounts Import",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/import",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "import"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/import`"
          }
        },
        {
          "name": "Post Accounts Outcomes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Post Accounts Subgroups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/subgroups`"
          }
        },
        {
          "name": "Post Courses Import",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/import",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "import"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "async",
                  "value": "",
                  "description": "If true, perform action asynchronously. In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the progress endpoint to query the status of the operation. The imported outcome group id and url will be returned in the results of the Progress object as “outcome_group_id” and “outcome_group_url”",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup. Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links. The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/outcome_groups/:id/import`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "source_outcome_group_id",
                  "value": "",
                  "description": "The ID of the source outcome group.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Outcomes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Post Courses Subgroups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "description",
                  "value": "",
                  "description": "The description of the new outcome group.",
                  "disabled": true
                },
                {
                  "key": "vendor_guid",
                  "value": "",
                  "description": "A custom GUID for the learning standard",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new empty subgroup under the outcome group with the given title and description.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/outcome_groups/:id/subgroups`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title of the new outcome group.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Global Import",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/import",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "import"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/global/outcome_groups/:id/import`"
          }
        },
        {
          "name": "Post Global Outcomes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/outcomes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "outcomes"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/global/outcome_groups/:id/outcomes`"
          }
        },
        {
          "name": "Post Global Subgroups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/subgroups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "subgroups"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/global/outcome_groups/:id/subgroups`"
          }
        },
        {
          "name": "Put Accounts Outcome_Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Put Accounts Outcomes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id`"
          }
        },
        {
          "name": "Put Courses Outcome_Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The new outcome group title.",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "The new outcome group description.",
                  "disabled": true
                },
                {
                  "key": "vendor_guid",
                  "value": "",
                  "description": "A custom GUID for the learning standard.",
                  "disabled": true
                },
                {
                  "key": "parent_outcome_group_id",
                  "value": "",
                  "description": "The id of the new parent outcome group.",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored. When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/outcome_groups/:id`"
          }
        },
        {
          "name": "Put Courses Outcomes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ],
              "query": [
                {
                  "key": "outcome_id",
                  "value": "",
                  "description": "The ID of the existing outcome to link.",
                  "disabled": true
                },
                {
                  "key": "move_from",
                  "value": "",
                  "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                  "disabled": true
                },
                {
                  "key": "title",
                  "value": "",
                  "description": "The title of the new outcome. Required if outcome_id is absent.",
                  "disabled": false
                },
                {
                  "key": "display_name",
                  "value": "",
                  "description": "A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "The description of the new outcome.",
                  "disabled": true
                },
                {
                  "key": "vendor_guid",
                  "value": "",
                  "description": "A custom GUID for the learning standard.",
                  "disabled": true
                },
                {
                  "key": "mastery_points",
                  "value": "",
                  "description": "The mastery threshold for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "ratings[][description]",
                  "value": "",
                  "description": "The description of a rating level for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "ratings[][points]",
                  "value": "",
                  "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "calculation_method",
                  "value": "",
                  "description": "The new calculation method. Defaults to “decaying_average” if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to “weighted_average”Allowed values: weighted_average, decaying_average, n_mastery, latest, highest, average",
                  "disabled": true
                },
                {
                  "key": "calculation_int",
                  "value": "",
                  "description": "The new calculation int. Only applies if the calculation_method is “weighted_average”, “decaying_average” or “n_mastery”. Defaults to 65",
                  "disabled": true
                }
              ]
            },
            "description": "Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome\\_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery\\_points) in a POST to the collection. If linking an existing outcome, the outcome\\_id must identify an outcome available to this context; i.e. an outcome owned by this group’s context, an outcome owned by an associated account, or a global outcome. With outcome\\_id present, any other parameters (except move\\_from) are ignored. If defining a new outcome, the outcome is created in the outcome group’s context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group. If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion’s mastery\\_points default to the maximum points in the highest rating if not specified in the mastery\\_points parameter. Any ratings lacking a description are given a default of “No description”. Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery\\_points parameter is ignored.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id`"
          }
        },
        {
          "name": "Put Global Outcome_Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/global/outcome_groups/:id`"
          }
        },
        {
          "name": "Put Global Outcomes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/global/outcome_groups/:id/outcomes/:outcome_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "global",
                "outcome_groups",
                ":id",
                "outcomes",
                ":outcome_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "outcome_id",
                  "value": "<outcome_id>",
                  "description": "The outcome_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/global/outcome_groups/:id/outcomes/:outcome_id`"
          }
        }
      ]
    },
    {
      "name": "Outcome Imports",
      "description": "API for importing outcome data",
      "item": [
        {
          "name": "Get Accounts Outcome_Imports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_imports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_imports",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_imports/:id`"
          }
        },
        {
          "name": "Get Accounts Created_Group_Ids",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_imports/:id/created_group_ids",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_imports",
                ":id",
                "created_group_ids"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_imports/:id/created_group_ids`"
          }
        },
        {
          "name": "Get Courses Outcome_Imports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_imports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_imports",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get the status of an already created Outcome import. Pass ‘latest’ for the outcome import id for the latest import. ``` Examples: curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" ``` Returns an [OutcomeImport](#outcomeimport) object. ### [Get IDs of outcome groups created after successful import](#method.outcome_imports_api.created_group_ids) <a href=\"#method.outcome_imports_api.created_group_ids\" id=\"method.outcome_imports_api.created_group_ids\"></a> [OutcomeImportsApiController#created\\_group\\_ids](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_imports_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_imports/:id`"
          }
        },
        {
          "name": "Get Courses Created_Group_Ids",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_imports/:id/created_group_ids",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_imports",
                ":id",
                "created_group_ids"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get the IDs of the outcome groups created after a successful import. Pass ‘latest’ for the outcome import id for the latest import. ``` Examples: curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" ```\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_imports/:id/created_group_ids`"
          }
        },
        {
          "name": "Post Accounts Group",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_imports(/group/:learning_outcome_group_id)",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_imports(",
                "group",
                ":learning_outcome_group_id)"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "learning_outcome_group_id",
                  "value": "<learning_outcome_group_id>",
                  "description": "The learning_outcome_group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/outcome_imports(/group/:learning_outcome_group_id)`"
          }
        },
        {
          "name": "Post Courses Group",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_imports(/group/:learning_outcome_group_id)",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_imports(",
                "group",
                ":learning_outcome_group_id)"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "learning_outcome_group_id",
                  "value": "<learning_outcome_group_id>",
                  "description": "The learning_outcome_group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "import_type",
                  "value": "",
                  "description": "Choose the data format for reading outcome data. With a standard Canvas install, this option can only be ‘instructure_csv’, and if unprovided, will be assumed to be so. Can be part of the query string.",
                  "disabled": true
                },
                {
                  "key": "attachment",
                  "value": "",
                  "description": "There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\ncurl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'",
                  "disabled": false
                },
                {
                  "key": "extension",
                  "value": "",
                  "description": "Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.",
                  "disabled": true
                }
              ]
            },
            "description": "Import outcomes into Canvas. For more information on the format that’s expected here, please see the “Outcomes CSV” section in the API docs.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/outcome_imports(/group/:learning_outcome_group_id)`"
          }
        }
      ]
    },
    {
      "name": "Outcome Results",
      "description": "API for accessing learning outcome results",
      "item": [
        {
          "name": "Get Courses Outcome_Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_results",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_results"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_ids[]",
                  "value": "",
                  "description": "If specified, only the users whose ids are given will be included in the results. SIS ids can be used, prefixed by “sis_user_id:”. It is an error to specify an id for a user who is not a student in the context.",
                  "disabled": true
                },
                {
                  "key": "outcome_ids[]",
                  "value": "",
                  "description": "If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "String, “alignments”",
                  "disabled": true
                },
                {
                  "key": "include_hidden",
                  "value": "",
                  "description": "If true, results that are hidden from the learning mastery gradebook and student rollup scores will be included",
                  "disabled": true
                }
              ]
            },
            "description": "Gets the outcome results for users and outcomes in the specified context. used in sLMGB\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_results`"
          }
        },
        {
          "name": "Get Courses Outcome_Rollups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_rollups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_rollups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "aggregate",
                  "value": "",
                  "description": "If specified, instead of returning one rollup for each user, all the user rollups will be combined into one rollup for the course that will contain the average (or median, see below) rollup score for each outcome.Allowed values: course",
                  "disabled": true
                },
                {
                  "key": "aggregate_stat",
                  "value": "",
                  "description": "If aggregate rollups requested, then this value determines what statistic is used for the aggregate. Defaults to “mean” if this value is not specified.Allowed values: mean, median",
                  "disabled": true
                },
                {
                  "key": "user_ids[]",
                  "value": "",
                  "description": "If specified, only the users whose ids are given will be included in the results or used in an aggregate result. it is an error to specify an id for a user who is not a student in the context",
                  "disabled": true
                },
                {
                  "key": "outcome_ids[]",
                  "value": "",
                  "description": "If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "String, “courses”",
                  "disabled": true
                },
                {
                  "key": "exclude[]",
                  "value": "",
                  "description": "Specify additional values to exclude. “missing_user_rollups” excludes rollups for users without results.Allowed values: missing_user_rollups",
                  "disabled": true
                },
                {
                  "key": "sort_by",
                  "value": "",
                  "description": "If specified, sorts outcome result rollups. “student” sorting will sort by a user’s sortable name. “outcome” sorting will sort by the given outcome’s rollup score. The latter requires specifying the “sort_outcome_id” parameter. By default, the sort order is ascending.Allowed values: student, outcome",
                  "disabled": true
                },
                {
                  "key": "sort_outcome_id",
                  "value": "",
                  "description": "If outcome sorting requested, then this determines which outcome to use for rollup score sorting.",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "If sorting requested, then this allows changing the default sort order of ascending to descending.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "add_defaults",
                  "value": "",
                  "description": "If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the rollup. This will only take effect if the Account Level Mastery Scales FF is DISABLED",
                  "disabled": true
                },
                {
                  "key": "contributing_scores",
                  "value": "",
                  "description": "If contributing scores are requested, then each individual outcome score will also include all graded artifacts that contributed to the outcome score",
                  "disabled": true
                }
              ]
            },
            "description": "Gets the outcome rollups for the users and outcomes in the specified context.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_rollups`"
          }
        },
        {
          "name": "Post Courses Assign_Outcome_Order",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assign_outcome_order",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assign_outcome_order"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Saves the ordering of outcomes in LMGB for a user ### [Get outcome result rollups](#method.outcome_results.rollups) <a href=\"#method.outcome_results.rollups\" id=\"method.outcome_results.rollups\"></a> [OutcomeResultsController#rollups](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_results_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assign_outcome_order`"
          }
        }
      ]
    },
    {
      "name": "Outcomes",
      "description": "API for accessing learning outcome information.",
      "item": [
        {
          "name": "Get Courses Outcome_Alignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_alignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_alignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "disabled": true
                },
                {
                  "key": "student_id",
                  "value": "",
                  "description": "The id of the student",
                  "disabled": true
                }
              ]
            },
            "description": "Returns all assignments aligned to a specific outcome for a student in a course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_alignments`"
          }
        },
        {
          "name": "List Outcomes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/outcomes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "outcomes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "add_defaults",
                  "value": "",
                  "description": "If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the details of the outcome with the given id.\n\n**OAuth Scope:** `url:GET|/api/v1/outcomes/:id`"
          }
        },
        {
          "name": "Update Outcomes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/outcomes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "outcomes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The new outcome title.",
                  "disabled": true
                },
                {
                  "key": "display_name",
                  "value": "",
                  "description": "A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.",
                  "disabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "description": "The new outcome description.",
                  "disabled": true
                },
                {
                  "key": "vendor_guid",
                  "value": "",
                  "description": "A custom GUID for the learning standard.",
                  "disabled": true
                },
                {
                  "key": "mastery_points",
                  "value": "",
                  "description": "The new mastery threshold for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "ratings[][description]",
                  "value": "",
                  "description": "The description of a new rating level for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "ratings[][points]",
                  "value": "",
                  "description": "The points corresponding to a new rating level for the embedded rubric criterion.",
                  "disabled": true
                },
                {
                  "key": "calculation_method",
                  "value": "",
                  "description": "The new calculation method. If the Outcomes New Decaying Average Calculation Method FF is ENABLED then “weighted_average” can be used and it is same as previous “decaying_average” and new “decaying_average” will have improved version of calculation.Allowed values: weighted_average, decaying_average, n_mastery, latest, highest, average",
                  "disabled": true
                },
                {
                  "key": "calculation_int",
                  "value": "",
                  "description": "The new calculation int. Only applies if the calculation_method is “decaying_average” or “n_mastery”",
                  "disabled": true
                },
                {
                  "key": "add_defaults",
                  "value": "",
                  "description": "If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing outcome. Fields not provided are left as is; unrecognized fields are ignored. If any new ratings are provided, the combination of all new ratings provided completely replace any existing embedded rubric criterion; it is not possible to tweak the ratings of the embedded rubric criterion. A new embedded rubric criterion’s mastery\\_points default to the maximum points in the highest rating if not specified in the mastery\\_points parameter. Any new ratings lacking a description are given a default of “No description”. Any new ratings lacking a point value are given a default of 0.\n\n**OAuth Scope:** `url:PUT|/api/v1/outcomes/:id`"
          }
        }
      ]
    },
    {
      "name": "Pages",
      "description": "Pages are rich content associated with Courses and Groups in Canvas. The Pages API allows you to create, retrieve, update, and delete pages.",
      "item": [
        {
          "name": "Delete Courses Pages",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/pages/:url_or_id`"
          }
        },
        {
          "name": "Delete Groups Pages",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "Delete a wiki page\n\n**OAuth Scope:** `url:DELETE|/api/v1/groups/:group_id/pages/:url_or_id`"
          }
        },
        {
          "name": "Get Courses Front_Page",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/front_page",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "front_page"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/front_page`"
          }
        },
        {
          "name": "Get Courses Pages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages`"
          }
        },
        {
          "name": "Get Courses Pages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages/:url_or_id`"
          }
        },
        {
          "name": "Get Courses Revisions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/revisions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "revisions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions`"
          }
        },
        {
          "name": "Get Courses Revisions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "revisions",
                ":revision_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                },
                {
                  "key": "revision_id",
                  "value": "<revision_id>",
                  "description": "The revision_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id`"
          }
        },
        {
          "name": "Get Courses Latest",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/revisions/latest",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "revisions",
                "latest"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions/latest`"
          }
        },
        {
          "name": "Get Groups Front_Page",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/front_page",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "front_page"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "Retrieve the content of the front page\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/front_page`"
          }
        },
        {
          "name": "Get Groups Pages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "",
                  "description": "Sort results by this field.Allowed values: title, created_at, updated_at",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The sorting order. Defaults to ‘asc’.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial title of the pages to match and return.",
                  "disabled": true
                },
                {
                  "key": "published",
                  "value": "",
                  "description": "If true, include only published paqes. If false, exclude published pages. If not present, do not filter on published status.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“enrollments”: Optionally include the page body with each Page.If this is a block_editor page, returns the block_editor_attributes.Allowed values: body",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the wiki pages associated with a course or group\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/pages`"
          }
        },
        {
          "name": "Get Groups Pages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "Retrieve the content of a wiki page\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/pages/:url_or_id`"
          }
        },
        {
          "name": "Get Groups Revisions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id/revisions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id",
                "revisions"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions`"
          }
        },
        {
          "name": "Get Groups Revisions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id",
                "revisions",
                ":revision_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                },
                {
                  "key": "revision_id",
                  "value": "<revision_id>",
                  "description": "The revision_id identifier"
                }
              ],
              "query": [
                {
                  "key": "summary",
                  "value": "",
                  "description": "If set, exclude page content from results",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id`"
          }
        },
        {
          "name": "Get Groups Latest",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id/revisions/latest",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id",
                "revisions",
                "latest"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions/latest`"
          }
        },
        {
          "name": "Post Courses Pages",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/pages`"
          }
        },
        {
          "name": "Post Courses Duplicate",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/duplicate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "duplicate"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "Duplicate a wiki page\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/pages/:url_or_id/duplicate`"
          }
        },
        {
          "name": "Post Courses Revisions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id",
                "revisions",
                ":revision_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                },
                {
                  "key": "revision_id",
                  "value": "<revision_id>",
                  "description": "The revision_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id`"
          }
        },
        {
          "name": "Post Groups Pages",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "wiki_page[body]",
                  "value": "",
                  "description": "The content for the new page.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[editing_roles]",
                  "value": "",
                  "description": "Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public",
                  "disabled": true
                },
                {
                  "key": "wiki_page[notify_of_update]",
                  "value": "",
                  "description": "Whether participants should be notified when this page changes.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[published]",
                  "value": "",
                  "description": "Whether the page is published (true) or draft state (false).",
                  "disabled": true
                },
                {
                  "key": "wiki_page[front_page]",
                  "value": "",
                  "description": "Set an unhidden page as the front page (if true)",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new wiki page\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/pages`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "wiki_page[title]",
                  "value": "",
                  "description": "The title for the new page.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "wiki_page[publish_at]",
                  "value": "",
                  "description": "Schedule a future date/time to publish the page. This will have no effect unless the “Scheduled Page Publication” feature is enabled in the account. If a future date is supplied, the page will be unpublished and wiki_page[published] will be ignored.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Groups Revisions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id",
                "revisions",
                ":revision_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                },
                {
                  "key": "revision_id",
                  "value": "<revision_id>",
                  "description": "The revision_id identifier"
                }
              ]
            },
            "description": "Revert a page to a prior revision.\n\n**OAuth Scope:** `url:POST|/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "revision_id",
                  "value": "",
                  "description": "The revision to revert to (use the List Revisions API to see available revisions)",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Front_Page",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/front_page",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "front_page"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/front_page`"
          }
        },
        {
          "name": "Put Courses Pages",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/pages/:url_or_id`"
          }
        },
        {
          "name": "Put Groups Front_Page",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/front_page",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "front_page"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ],
              "query": [
                {
                  "key": "wiki_page[title]",
                  "value": "",
                  "description": "The title for the new page. NOTE: changing a page’s title will change its url. The updated url will be returned in the result.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[body]",
                  "value": "",
                  "description": "The content for the new page.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[editing_roles]",
                  "value": "",
                  "description": "Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public",
                  "disabled": true
                },
                {
                  "key": "wiki_page[notify_of_update]",
                  "value": "",
                  "description": "Whether participants should be notified when this page changes.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[published]",
                  "value": "",
                  "description": "Whether the page is published (true) or draft state (false).",
                  "disabled": true
                }
              ]
            },
            "description": "Update the title or contents of the front page\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/front_page`"
          }
        },
        {
          "name": "Put Groups Pages",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/pages/:url_or_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "pages",
                ":url_or_id"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                },
                {
                  "key": "url_or_id",
                  "value": "<url_or_id>",
                  "description": "The url_or_id identifier"
                }
              ],
              "query": [
                {
                  "key": "wiki_page[title]",
                  "value": "",
                  "description": "The title for the new page. NOTE: changing a page’s title will change its url. The updated url will be returned in the result.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[body]",
                  "value": "",
                  "description": "The content for the new page.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[editing_roles]",
                  "value": "",
                  "description": "Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public",
                  "disabled": true
                },
                {
                  "key": "wiki_page[notify_of_update]",
                  "value": "",
                  "description": "Whether participants should be notified when this page changes.",
                  "disabled": true
                },
                {
                  "key": "wiki_page[published]",
                  "value": "",
                  "description": "Whether the page is published (true) or draft state (false).",
                  "disabled": true
                },
                {
                  "key": "wiki_page[front_page]",
                  "value": "",
                  "description": "Set an unhidden page as the front page (if true)",
                  "disabled": true
                }
              ]
            },
            "description": "Update the title or contents of a wiki page NOTE: You cannot specify the ID when creating a page. If you pass a numeric value as the page identifier and that does not represent a page ID that already exists, it will be interpreted as a URL.\n\n**OAuth Scope:** `url:PUT|/api/v1/groups/:group_id/pages/:url_or_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "wiki_page[publish_at]",
                  "value": "",
                  "description": "Schedule a future date/time to publish the page. This will have no effect unless the “Scheduled Page Publication” feature is enabled in the account. If a future date is set and the page is already published, it will be unpublished.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Peer Reviews",
      "description": "",
      "item": [
        {
          "name": "Delete Courses Peer_Reviews",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`"
          }
        },
        {
          "name": "Delete Sections Peer_Reviews",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "user_id to delete as reviewer on this assignment",
                  "disabled": true
                }
              ]
            },
            "description": "Delete a peer review for the assignment\n\n**OAuth Scope:** `url:DELETE|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`"
          }
        },
        {
          "name": "Get Courses Peer_Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/peer_reviews`"
          }
        },
        {
          "name": "Get Courses Peer_Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`"
          }
        },
        {
          "name": "Get Sections Peer_Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/peer_reviews`"
          }
        },
        {
          "name": "Get Sections Peer_Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the peer review.Allowed values: submission_comments, user",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all Peer Reviews for this assignment\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`"
          }
        },
        {
          "name": "Post Courses Peer_Reviews",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`"
          }
        },
        {
          "name": "Post Sections Peer_Reviews",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":submission_id",
                "peer_reviews"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "submission_id",
                  "value": "<submission_id>",
                  "description": "The submission_id identifier"
                }
              ]
            },
            "description": "Create a peer review for the assignment\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "user_id to assign as reviewer on this assignment",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Planner",
      "description": "API for listing learning objects to display on the student planner and calendar API for creating, accessing and updating Planner Notes. PlannerNote are used to set reminders and notes to self about courses or general events. API for creating, accessing and updating planner override. PlannerOverrides are used to control the visibility of objects displayed on the Planner.",
      "item": [
        {
          "name": "Delete Planner Overrides",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a planner override for the current user Returns a [PlannerOverride](#planneroverride) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/planner/overrides/:id`"
          }
        },
        {
          "name": "Delete Planner_Notes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner_notes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner_notes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a planner note for the current user Returns a [PlannerNote](#plannernote) object. ### [List planner overrides](#method.planner_overrides.index) <a href=\"#method.planner_overrides.index\" id=\"method.planner_overrides.index\"></a> [PlannerOverridesController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/planner_notes/:id`"
          }
        },
        {
          "name": "Get Planner Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "items"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/planner/items`"
          }
        },
        {
          "name": "Get Planner Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "overrides"
              ]
            },
            "description": "Retrieve a planner override for the current user Returns a list of [PlannerOverride](#planneroverride) objects. ### [Show a planner override](#method.planner_overrides.show) <a href=\"#method.planner_overrides.show\" id=\"method.planner_overrides.show\"></a> [PlannerOverridesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/planner/overrides`"
          }
        },
        {
          "name": "Get Planner Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Retrieve a planner override for the current user Returns a [PlannerOverride](#planneroverride) object. ### [Update a planner override](#method.planner_overrides.update) <a href=\"#method.planner_overrides.update\" id=\"method.planner_overrides.update\"></a> [PlannerOverridesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/planner/overrides/:id`"
          }
        },
        {
          "name": "List Planner_Notes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner_notes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner_notes"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Only return notes with todo dates since the start_date (inclusive). No default. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Only return notes with todo dates before the end_date (inclusive). No default. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date and start_date are both specified and equivalent, then only notes with todo dates on that day are returned.",
                  "disabled": true
                },
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context codes of courses whose notes you want to see. If not specified, defaults to all contexts that the user belongs to. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42 Including a code matching the user’s own context code (e.g. user_1) will include notes that are not associated with any particular course.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of planner notes Retrieve planner note for a user\n\n**OAuth Scope:** `url:GET|/api/v1/planner_notes`"
          }
        },
        {
          "name": "List Planner_Notes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner_notes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner_notes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Retrieve a planner note for the current user Returns a [PlannerNote](#plannernote) object. ### [Update a planner note](#method.planner_notes.update) <a href=\"#method.planner_notes.update\" id=\"method.planner_notes.update\"></a> [PlannerNotesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/planner_notes/:id`"
          }
        },
        {
          "name": "Get Users Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/planner/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "planner",
                "items"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Only return items starting from the given date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Only return items up to the given date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "context_codes[]",
                  "value": "",
                  "description": "List of context codes of courses and/or groups whose items you want to see. If not specified, defaults to all contexts associated to the current user. Note that concluded courses will be ignored unless specified in the includes[] parameter. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42, group_123",
                  "disabled": true
                },
                {
                  "key": "observed_user_id",
                  "value": "",
                  "description": "Return planner items for the given observed user. Must be accompanied by context_codes[]. The user making the request must be observing the observed user in all the courses specified by context_codes[].",
                  "disabled": true
                },
                {
                  "key": "filter",
                  "value": "",
                  "description": "Only return items that have new or unread activityAllowed values: new_activity",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the paginated list of objects to be shown on the planner for the current user with the associated planner override to override an item’s visibility if set. Planner items for a student may also be retrieved by a linked observer. Use the path that accepts a user\\_id and supply the student’s id.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/planner/items`"
          }
        },
        {
          "name": "Post Planner Overrides",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "overrides"
              ],
              "query": [
                {
                  "key": "marked_complete",
                  "value": "",
                  "description": "If this is true, the item will show in the planner as completed",
                  "disabled": true
                },
                {
                  "key": "dismissed",
                  "value": "",
                  "description": "If this is true, the item will not show in the opportunities list",
                  "disabled": true
                }
              ]
            },
            "description": "Create a planner override for the current user\n\n**OAuth Scope:** `url:POST|/api/v1/planner/overrides`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "plannable_type",
                  "value": "",
                  "description": "Type of the item that you are overriding in the plannerAllowed values: announcement, assignment, discussion_topic, quiz, wiki_page, planner_note, calendar_event, assessment_request, sub_assignment",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "plannable_id",
                  "value": "",
                  "description": "ID of the item that you are overriding in the planner",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Create Planner_Notes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner_notes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner_notes"
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title of the planner note.",
                  "disabled": true
                },
                {
                  "key": "details",
                  "value": "",
                  "description": "Text of the planner note.",
                  "disabled": true
                },
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to associate it with a planner note.",
                  "disabled": true
                },
                {
                  "key": "linked_object_type",
                  "value": "",
                  "description": "The type of a learning object to link to this planner note. Must be used in conjunction wtih linked_object_id and course_id. Valid linked_object_type values are: ‘announcement’, ‘assignment’, ‘discussion_topic’, ‘wiki_page’, ‘quiz’",
                  "disabled": true
                },
                {
                  "key": "linked_object_id",
                  "value": "",
                  "description": "The id of a learning object to link to this planner note. Must be used in conjunction with linked_object_type and course_id. The object must be in the same course as specified by course_id. If the title argument is not provided, the planner note will use the learning object’s title as its title. Only one planner note may be linked to a specific learning object.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a planner note for the current user\n\n**OAuth Scope:** `url:POST|/api/v1/planner_notes`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "todo_date",
                  "value": "",
                  "description": "The date where this planner note should appear in the planner. The value should be formatted as: yyyy-mm-dd.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Planner Overrides",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner/overrides/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner",
                "overrides",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "marked_complete",
                  "value": "",
                  "description": "determines whether the planner item is marked as completed",
                  "disabled": true
                },
                {
                  "key": "dismissed",
                  "value": "",
                  "description": "determines whether the planner item shows in the opportunities list",
                  "disabled": true
                }
              ]
            },
            "description": "Update a planner override’s visibilty for the current user\n\n**OAuth Scope:** `url:PUT|/api/v1/planner/overrides/:id`"
          }
        },
        {
          "name": "Update Planner_Notes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/planner_notes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "planner_notes",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "title",
                  "value": "",
                  "description": "The title of the planner note.",
                  "disabled": true
                },
                {
                  "key": "details",
                  "value": "",
                  "description": "Text of the planner note.",
                  "disabled": true
                },
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to associate it with a planner note. Use a null or empty value to remove a planner note from a course. Note that if the planner note is linked to a learning object, its course_id cannot be changed.",
                  "disabled": true
                }
              ]
            },
            "description": "Update a planner note for the current user\n\n**OAuth Scope:** `url:PUT|/api/v1/planner_notes/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "todo_date",
                  "value": "",
                  "description": "The date where this planner note should appear in the planner. The value should be formatted as: yyyy-mm-dd.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Poll Sessions",
      "description": "Manage poll sessions",
      "item": [
        {
          "name": "Delete Polls Poll_Sessions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/polls/:poll_id/poll_sessions/:id`"
          }
        },
        {
          "name": "Get Poll_Sessions Closed",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/poll_sessions/closed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "poll_sessions",
                "closed"
              ]
            },
            "description": "A paginated list of all closed poll sessions available to the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/poll_sessions/closed`"
          }
        },
        {
          "name": "Get Poll_Sessions Opened",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/poll_sessions/opened",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "poll_sessions",
                "opened"
              ]
            },
            "description": "A paginated list of all opened poll sessions available to the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/poll_sessions/opened`"
          }
        },
        {
          "name": "Get Polls Poll_Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of PollSessions in this poll.\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_sessions`"
          }
        },
        {
          "name": "Get Polls Poll_Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the poll session with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_sessions/:id`"
          }
        },
        {
          "name": "Get Polls Close",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:id/close",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":id",
                "close"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "### [List opened poll sessions](#method.polling/poll_sessions.opened) <a href=\"#method.polling-poll_sessions.opened\" id=\"method.polling-poll_sessions.opened\"></a> [Polling::PollSessionsController#opened](https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_sessions/:id/close`"
          }
        },
        {
          "name": "Get Polls Open",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:id/open",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":id",
                "open"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "### [Close an opened poll session](#method.polling/poll_sessions.close) <a href=\"#method.polling-poll_sessions.close\" id=\"method.polling-poll_sessions.close\"></a> [Polling::PollSessionsController#close](https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_sessions/:id/open`"
          }
        },
        {
          "name": "Post Polls Poll_Sessions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                }
              ],
              "query": [
                {
                  "key": "poll_sessions[][course_section_id]",
                  "value": "",
                  "description": "The id of the course section this session is associated with.",
                  "disabled": true
                },
                {
                  "key": "poll_sessions[][has_public_results]",
                  "value": "",
                  "description": "Whether or not results are viewable by students.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new poll session for this poll\n\n**OAuth Scope:** `url:POST|/api/v1/polls/:poll_id/poll_sessions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "poll_sessions[][course_id]",
                  "value": "",
                  "description": "The id of the course this session is associated with.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Polls Poll_Sessions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "poll_sessions[][course_id]",
                  "value": "",
                  "description": "The id of the course this session is associated with.",
                  "disabled": true
                },
                {
                  "key": "poll_sessions[][course_section_id]",
                  "value": "",
                  "description": "The id of the course section this session is associated with.",
                  "disabled": true
                },
                {
                  "key": "poll_sessions[][has_public_results]",
                  "value": "",
                  "description": "Whether or not results are viewable by students.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing poll session for this poll\n\n**OAuth Scope:** `url:PUT|/api/v1/polls/:poll_id/poll_sessions/:id`"
          }
        }
      ]
    },
    {
      "name": "PollChoices",
      "description": "Manage choices for polls",
      "item": [
        {
          "name": "Delete Polls Poll_Choices",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_choices/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_choices",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/polls/:poll_id/poll_choices/:id`"
          }
        },
        {
          "name": "Get Polls Poll_Choices",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_choices",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_choices"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of PollChoices in this poll.\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_choices`"
          }
        },
        {
          "name": "Get Polls Poll_Choices",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_choices/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_choices",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the poll choice with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_choices/:id`"
          }
        },
        {
          "name": "Post Polls Poll_Choices",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_choices",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_choices"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                }
              ],
              "query": [
                {
                  "key": "poll_choices[][is_correct]",
                  "value": "",
                  "description": "Whether this poll choice is considered correct or not. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "poll_choices[][position]",
                  "value": "",
                  "description": "The order this poll choice should be returned in the context it’s sibling poll choices.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new poll choice for this poll\n\n**OAuth Scope:** `url:POST|/api/v1/polls/:poll_id/poll_choices`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "poll_choices[][text]",
                  "value": "",
                  "description": "The descriptive text of the poll choice.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Polls Poll_Choices",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_choices/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_choices",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "poll_choices[][is_correct]",
                  "value": "",
                  "description": "Whether this poll choice is considered correct or not. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "poll_choices[][position]",
                  "value": "",
                  "description": "The order this poll choice should be returned in the context it’s sibling poll choices.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing poll choice for this poll\n\n**OAuth Scope:** `url:PUT|/api/v1/polls/:poll_id/poll_choices/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "poll_choices[][text]",
                  "value": "",
                  "description": "The descriptive text of the poll choice.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "PollSubmissions",
      "description": "Manage submissions for polls",
      "item": [
        {
          "name": "Get Polls Poll_Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":poll_session_id",
                "poll_submissions",
                ":id"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "poll_session_id",
                  "value": "<poll_session_id>",
                  "description": "The poll_session_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the poll submission with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions/:id`"
          }
        },
        {
          "name": "Post Polls Poll_Submissions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":poll_id",
                "poll_sessions",
                ":poll_session_id",
                "poll_submissions"
              ],
              "variable": [
                {
                  "key": "poll_id",
                  "value": "<poll_id>",
                  "description": "The poll_id identifier"
                },
                {
                  "key": "poll_session_id",
                  "value": "<poll_session_id>",
                  "description": "The poll_session_id identifier"
                }
              ]
            },
            "description": "Create a new poll submission for this poll session\n\n**OAuth Scope:** `url:POST|/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "poll_submissions[][poll_choice_id]",
                  "value": "",
                  "description": "The chosen poll choice for this submission.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Polls",
      "description": "Manage polls",
      "item": [
        {
          "name": "Delete Polls",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/polls/:id`"
          }
        },
        {
          "name": "List Polls",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls"
              ]
            },
            "description": "Returns the paginated list of polls for the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/polls`"
          }
        },
        {
          "name": "List Polls",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the poll with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/polls/:id`"
          }
        },
        {
          "name": "Create Polls",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls"
              ],
              "query": [
                {
                  "key": "polls[][description]",
                  "value": "",
                  "description": "A brief description or instructions for the poll.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new poll for the current user\n\n**OAuth Scope:** `url:POST|/api/v1/polls`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "polls[][question]",
                  "value": "",
                  "description": "The title of the poll.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Update Polls",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/polls/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "polls",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "polls[][description]",
                  "value": "",
                  "description": "A brief description or instructions for the poll.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing poll belonging to the current user\n\n**OAuth Scope:** `url:PUT|/api/v1/polls/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "polls[][question]",
                  "value": "",
                  "description": "The title of the poll.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Proficiency Ratings",
      "description": "API for customizing proficiency ratings",
      "item": [
        {
          "name": "Get Accounts Outcome_Proficiency",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_proficiency",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_proficiency"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/outcome_proficiency`"
          }
        },
        {
          "name": "Get Courses Outcome_Proficiency",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_proficiency",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_proficiency"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found. ``` Examples: curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\ -H 'Authorization: Bearer <token>' ``` Returns a [Proficiency](#proficiency) object.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/outcome_proficiency`"
          }
        },
        {
          "name": "Post Accounts Outcome_Proficiency",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/outcome_proficiency",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "outcome_proficiency"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/outcome_proficiency`"
          }
        },
        {
          "name": "Post Courses Outcome_Proficiency",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/outcome_proficiency",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "outcome_proficiency"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "ratings[][description]",
                  "value": "",
                  "description": "The description of the rating level.",
                  "disabled": true
                },
                {
                  "key": "ratings[][points]",
                  "value": "",
                  "description": "The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.",
                  "disabled": true
                },
                {
                  "key": "ratings[][mastery]",
                  "value": "",
                  "description": "Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.",
                  "disabled": true
                },
                {
                  "key": "ratings[][color]",
                  "value": "",
                  "description": "The color associated with the rating level. Should be a hex color code like ‘00FFFF’.",
                  "disabled": true
                }
              ]
            },
            "description": "Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/outcome_proficiency`"
          }
        }
      ]
    },
    {
      "name": "Progress",
      "description": "API for querying the progress of asynchronous API operations. API for querying the progress of asynchronous API operations.",
      "item": [
        {
          "name": "Get Courses Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/progress/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "progress",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Return completion and status information about an asynchronous job Returns a [Progress](#progress) object.\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/progress/:id`"
          }
        },
        {
          "name": "List Progress",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/progress/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "progress",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Return completion and status information about an asynchronous job Returns a [Progress](#progress) object. ### [Cancel progress](#method.progress.cancel) <a href=\"#method.progress.cancel\" id=\"method.progress.cancel\"></a> [ProgressController#cancel](https://github.com/instructure/canvas-lms/blob/master/app/controllers/progress_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/progress/:id`"
          }
        },
        {
          "name": "Post Progress Cancel",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/progress/:id/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "progress",
                ":id",
                "cancel"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Cancel an asynchronous job associated with a Progress object If you include “message” in the POSTed data, it will be set on the Progress and returned. This is handy to distinguish between cancel and fail for a workflow\\_state of “failed”. Returns a [Progress](#progress) object. ### [Query progress](#method.lti/ims/progress.show) <a href=\"#method.lti-ims-progress.show\" id=\"method.lti-ims-progress.show\"></a> [Lti::Ims::ProgressController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/progress_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/progress/:id/cancel`"
          }
        }
      ]
    },
    {
      "name": "Public JWK",
      "description": "",
      "item": [
        {
          "name": "Put Developer_Key Update_Public_Jwk",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/developer_key/update_public_jwk",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "developer_key",
                "update_public_jwk"
              ]
            },
            "description": "Rotate the public key in jwk format when using lti services\n\n**OAuth Scope:** `url:PUT|/api/lti/developer_key/update_public_jwk`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "public_jwk",
                  "value": "",
                  "description": "The new public jwk that will be set to the tools current public jwk.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Assignment Overrides",
      "description": "",
      "item": [
        {
          "name": "Get Courses Assignment_Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/new_quizzes/assignment_overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "new_quizzes",
                "assignment_overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_assignment_overrides[][quiz_ids][]",
                  "value": "",
                  "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to the operating user will be returned.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/new_quizzes/assignment_overrides`"
          }
        },
        {
          "name": "Get Courses Assignment_Overrides",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/assignment_overrides",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                "assignment_overrides"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_assignment_overrides[][quiz_ids][]",
                  "value": "",
                  "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to the operating user will be returned.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/assignment_overrides`"
          }
        }
      ]
    },
    {
      "name": "Quiz Extensions",
      "description": "API for setting extensions on student quiz submissions",
      "item": [
        {
          "name": "Post Courses Extensions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/extensions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "extensions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_extensions[][extra_attempts]",
                  "value": "",
                  "description": "Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.",
                  "disabled": true
                },
                {
                  "key": "quiz_extensions[][extra_time]",
                  "value": "",
                  "description": "The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)",
                  "disabled": true
                },
                {
                  "key": "quiz_extensions[][manually_unlocked]",
                  "value": "",
                  "description": "Allow the student to take the quiz even if it’s locked for everyone else.",
                  "disabled": true
                },
                {
                  "key": "quiz_extensions[][extend_from_now]",
                  "value": "",
                  "description": "The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)",
                  "disabled": true
                },
                {
                  "key": "quiz_extensions[][extend_from_end_at]",
                  "value": "",
                  "description": "The number of minutes to extend the quiz beyond the quiz’s current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)",
                  "disabled": true
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/extensions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_extensions[][user_id]",
                  "value": "",
                  "description": "The ID of the user we want to add quiz extensions for.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz IP Filters",
      "description": "API for accessing quiz IP filters",
      "item": [
        {
          "name": "Get Courses Ip_Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/ip_filters",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "ip_filters"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ]
            },
            "description": "Get a list of available IP filters for this Quiz.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/ip_filters`"
          }
        }
      ]
    },
    {
      "name": "Quiz Question Groups",
      "description": "API for accessing information on quiz question groups",
      "item": [
        {
          "name": "Delete Courses Groups",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a question group \\<b>204 No Content\\<b> response code is returned if the deletion was successful. ### [Reorder question groups](#method.quizzes/quiz_groups.reorder) <a href=\"#method.quizzes-quiz_groups.reorder\" id=\"method.quizzes-quiz_groups.reorder\"></a> [Quizzes::QuizGroupsController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id`"
          }
        },
        {
          "name": "Get Courses Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns details of the quiz group with the given id. Returns a [QuizGroup](#quizgroup) object. ### [Create a question group](#method.quizzes/quiz_groups.create) <a href=\"#method.quizzes-quiz_groups.create\" id=\"method.quizzes-quiz_groups.create\"></a> [Quizzes::QuizGroupsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id`"
          }
        },
        {
          "name": "Post Courses Groups",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/groups",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "groups"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_groups[][name]",
                  "value": "",
                  "description": "The name of the question group.",
                  "disabled": true
                },
                {
                  "key": "quiz_groups[][pick_count]",
                  "value": "",
                  "description": "The number of questions to randomly select for this group.",
                  "disabled": true
                },
                {
                  "key": "quiz_groups[][question_points]",
                  "value": "",
                  "description": "The number of points to assign to each question in the group.",
                  "disabled": true
                },
                {
                  "key": "quiz_groups[][assessment_question_bank_id]",
                  "value": "",
                  "description": "The id of the assessment question bank to pull questions from.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new question group for this quiz\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/groups`"
          }
        },
        {
          "name": "Post Courses Reorder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id/reorder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "groups",
                ":id",
                "reorder"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "order[][type]",
                  "value": "",
                  "description": "The type of item is always ‘question’ for a groupAllowed values: question",
                  "disabled": true
                }
              ]
            },
            "description": "Change the order of the quiz questions within the group \\<b>204 No Content\\<b> response code is returned if the reorder was successful.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id/reorder`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "order[][id]",
                  "value": "",
                  "description": "The associated item’s unique identifier",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Groups",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "groups",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_groups[][name]",
                  "value": "",
                  "description": "The name of the question group.",
                  "disabled": true
                },
                {
                  "key": "quiz_groups[][pick_count]",
                  "value": "",
                  "description": "The number of questions to randomly select for this group.",
                  "disabled": true
                },
                {
                  "key": "quiz_groups[][question_points]",
                  "value": "",
                  "description": "The number of points to assign to each question in the group.",
                  "disabled": true
                }
              ]
            },
            "description": "Update a question group\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id`"
          }
        }
      ]
    },
    {
      "name": "Quiz Questions",
      "description": "",
      "item": [
        {
          "name": "Delete Courses Questions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "questions",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_id",
                  "value": "",
                  "description": "The associated quiz’s unique identifier",
                  "disabled": true
                },
                {
                  "key": "id",
                  "value": "",
                  "description": "The quiz question’s unique identifier",
                  "disabled": true
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id`"
          }
        },
        {
          "name": "Get Courses Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "questions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_submission_id",
                  "value": "",
                  "description": "If specified, the endpoint will return the questions that were presented for that submission. This is useful if the quiz has been modified after the submission was created and the latest quiz version’s set of questions does not match the submission’s. NOTE: you must specify quiz_submission_attempt as well if you specify this parameter.",
                  "disabled": true
                },
                {
                  "key": "quiz_submission_attempt",
                  "value": "",
                  "description": "The attempt of the submission you want the questions for.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of QuizQuestions in this quiz.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/questions`"
          }
        },
        {
          "name": "Get Courses Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "questions",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The quiz question unique identifier.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the quiz question with the given id\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id`"
          }
        },
        {
          "name": "Post Courses Questions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "questions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "question[question_name]",
                  "value": "",
                  "description": "The name of the question.",
                  "disabled": true
                },
                {
                  "key": "question[question_text]",
                  "value": "",
                  "description": "The text of the question.",
                  "disabled": true
                },
                {
                  "key": "question[quiz_group_id]",
                  "value": "",
                  "description": "The id of the quiz group to assign the question to.",
                  "disabled": true
                },
                {
                  "key": "question[question_type]",
                  "value": "",
                  "description": "The type of question. Multiple optional fields depend upon the type of question to be used.Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question",
                  "disabled": true
                },
                {
                  "key": "question[position]",
                  "value": "",
                  "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                  "disabled": true
                },
                {
                  "key": "question[points_possible]",
                  "value": "",
                  "description": "The maximum amount of points received for answering this question correctly.",
                  "disabled": true
                },
                {
                  "key": "question[correct_comments]",
                  "value": "",
                  "description": "The comment to display if the student answers the question correctly.",
                  "disabled": true
                },
                {
                  "key": "question[incorrect_comments]",
                  "value": "",
                  "description": "The comment to display if the student answers incorrectly.",
                  "disabled": true
                },
                {
                  "key": "question[neutral_comments]",
                  "value": "",
                  "description": "The comment to display regardless of how the student answered.",
                  "disabled": true
                },
                {
                  "key": "question[text_after_answers]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new quiz question for this quiz\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/questions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "question[answers]",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Questions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "questions",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "question[question_name]",
                  "value": "",
                  "description": "The name of the question.",
                  "disabled": true
                },
                {
                  "key": "question[question_text]",
                  "value": "",
                  "description": "The text of the question.",
                  "disabled": true
                },
                {
                  "key": "question[quiz_group_id]",
                  "value": "",
                  "description": "The id of the quiz group to assign the question to.",
                  "disabled": true
                },
                {
                  "key": "question[question_type]",
                  "value": "",
                  "description": "The type of question. Multiple optional fields depend upon the type of question to be used.Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question",
                  "disabled": true
                },
                {
                  "key": "question[position]",
                  "value": "",
                  "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                  "disabled": true
                },
                {
                  "key": "question[points_possible]",
                  "value": "",
                  "description": "The maximum amount of points received for answering this question correctly.",
                  "disabled": true
                },
                {
                  "key": "question[correct_comments]",
                  "value": "",
                  "description": "The comment to display if the student answers the question correctly.",
                  "disabled": true
                },
                {
                  "key": "question[incorrect_comments]",
                  "value": "",
                  "description": "The comment to display if the student answers incorrectly.",
                  "disabled": true
                },
                {
                  "key": "question[neutral_comments]",
                  "value": "",
                  "description": "The comment to display regardless of how the student answered.",
                  "disabled": true
                },
                {
                  "key": "question[text_after_answers]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Updates an existing quiz question for this quiz\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_id",
                  "value": "",
                  "description": "The associated quiz’s unique identifier.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "id",
                  "value": "",
                  "description": "The quiz question’s unique identifier.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "question[answers]",
                  "value": "",
                  "description": "no description",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Reports",
      "description": "API for accessing and generating statistical reports for a quiz",
      "item": [
        {
          "name": "Delete Courses Reports",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "reports",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "This API allows you to cancel a previous request you issued for a report to be generated. Or in the case of an already generated report, you’d like to remove it, perhaps to generate it another time with an updated version that provides new features. You must check the report’s generation status before attempting to use this interface. See the “workflow\\_state” property of the QuizReport’s Progress object for more information. Only when the progress reports itself in a “queued” state can the generation be aborted.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id`"
          }
        },
        {
          "name": "Get Courses Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "reports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "includes_all_versions",
                  "value": "",
                  "description": "Whether to retrieve reports that consider all the submissions or only the most recent. Defaults to false, ignored for item_analysis reports.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of all available reports.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/reports`"
          }
        },
        {
          "name": "Get Courses Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "reports",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include",
                  "value": "",
                  "description": "Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)Allowed values: file, progress",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the data for a single quiz report.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id`"
          }
        },
        {
          "name": "Post Courses Reports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "reports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz_report[includes_all_versions]",
                  "value": "",
                  "description": "Whether the report should consider all submissions or only the most recent. Defaults to false, ignored for item_analysis.",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new report for this quiz. If a previously generated report matches the arguments and is still current (i.e. there have been no new submissions), it will be returned.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/reports`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_report[report_type]",
                  "value": "",
                  "description": "The type of report to be generated.Allowed values: student_analysis, item_analysis",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "include",
                  "value": "",
                  "description": "Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)Allowed values: file, progress",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Statistics",
      "description": "API for accessing quiz submission statistics. The statistics provided by this interface are an aggregate of what is known as Student and Item Analysis for a quiz. These statistics are extracted (and composed) from _graded_ (manually or, when viable, automatically) submissions for a quiz and provide an insight into how the participant students had responded to each question, as well as insights into the reception of each question answer individually. Some of these statistics are exclusive to Multiple Choice and True/False types of questions, others to other question types. See {Appendix: Question Specific Statistics} for a reference of these statistics.",
      "item": [
        {
          "name": "Get Courses Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "statistics"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "all_versions",
                  "value": "",
                  "description": "Whether the statistics report should include all submissions attempts.",
                  "disabled": true
                }
              ]
            },
            "description": "This endpoint provides statistics for all quiz versions, or for a specific quiz version, in which case the output is guaranteed to represent the _latest_ and most current version of the quiz.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/statistics`"
          }
        }
      ]
    },
    {
      "name": "Quiz Submission Events",
      "description": "",
      "item": [
        {
          "name": "Get Courses Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id",
                "events"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "attempt",
                  "value": "",
                  "description": "The specific submission attempt to look up the events for. If unspecified, the latest attempt will be used.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve the set of events captured during a specific submission attempt.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events`"
          }
        },
        {
          "name": "Post Courses Events",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id",
                "events"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Store a set of events which were captured during a quiz taking session. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_submission_events[]",
                  "value": "",
                  "description": "The submission events to be recorded",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Submission Files",
      "description": "",
      "item": [
        {
          "name": "Post Courses Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/self/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                "self",
                "files"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "name",
                  "value": "",
                  "description": "The name of the quiz submission file",
                  "disabled": true
                },
                {
                  "key": "on_duplicate",
                  "value": "",
                  "description": "How to handle duplicate names",
                  "disabled": true
                }
              ]
            },
            "description": "Associate a new quiz submission file This API endpoint is the first step in uploading a quiz submission file. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow as these parameters are interpreted as per the documentation there.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/self/files`"
          }
        }
      ]
    },
    {
      "name": "Quiz Submission Questions",
      "description": "API for answering and flagging questions in a quiz-taking session.",
      "item": [
        {
          "name": "Get Quiz_Submissions Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/quiz_submissions/:quiz_submission_id/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "quiz_submissions",
                ":quiz_submission_id",
                "questions"
              ],
              "variable": [
                {
                  "key": "quiz_submission_id",
                  "value": "<quiz_submission_id>",
                  "description": "The quiz_submission_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the quiz submission question.Allowed values: quiz_question",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all the question records for this quiz submission.\n\n**OAuth Scope:** `url:GET|/api/v1/quiz_submissions/:quiz_submission_id/questions`"
          }
        },
        {
          "name": "Get Quiz_Submissions Formatted_Answer",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/formatted_answer",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "quiz_submissions",
                ":quiz_submission_id",
                "questions",
                ":id",
                "formatted_answer"
              ],
              "variable": [
                {
                  "key": "quiz_submission_id",
                  "value": "<quiz_submission_id>",
                  "description": "The quiz_submission_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "answer",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number\n\n**OAuth Scope:** `url:GET|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/formatted_answer`"
          }
        },
        {
          "name": "Post Quiz_Submissions Questions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/quiz_submissions/:quiz_submission_id/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "quiz_submissions",
                ":quiz_submission_id",
                "questions"
              ],
              "variable": [
                {
                  "key": "quiz_submission_id",
                  "value": "<quiz_submission_id>",
                  "description": "The quiz_submission_id identifier"
                }
              ],
              "query": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "Access code for the Quiz, if any.",
                  "disabled": true
                }
              ]
            },
            "description": "Provide or update an answer to one or more QuizQuestions.\n\n**OAuth Scope:** `url:POST|/api/v1/quiz_submissions/:quiz_submission_id/questions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attempt",
                  "value": "",
                  "description": "The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "validation_token",
                  "value": "",
                  "description": "The unique validation token you received when the Quiz Submission was created.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz_questions[]",
                  "value": "",
                  "description": "Set of question IDs and the answer value.See Appendix: Question Answer Formats for the accepted answer formats for each question type.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Quiz_Submissions Flag",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/flag",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "quiz_submissions",
                ":quiz_submission_id",
                "questions",
                ":id",
                "flag"
              ],
              "variable": [
                {
                  "key": "quiz_submission_id",
                  "value": "<quiz_submission_id>",
                  "description": "The quiz_submission_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "Access code for the Quiz, if any.",
                  "disabled": true
                }
              ]
            },
            "description": "Set a flag on a quiz question to indicate that you want to return to it later.\n\n**OAuth Scope:** `url:PUT|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/flag`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attempt",
                  "value": "",
                  "description": "The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "validation_token",
                  "value": "",
                  "description": "The unique validation token you received when the Quiz Submission was created.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Quiz_Submissions Unflag",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/unflag",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "quiz_submissions",
                ":quiz_submission_id",
                "questions",
                ":id",
                "unflag"
              ],
              "variable": [
                {
                  "key": "quiz_submission_id",
                  "value": "<quiz_submission_id>",
                  "description": "The quiz_submission_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "Access code for the Quiz, if any.",
                  "disabled": true
                }
              ]
            },
            "description": "Remove the flag that you previously set on a quiz question after you’ve returned to it.\n\n**OAuth Scope:** `url:PUT|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/unflag`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attempt",
                  "value": "",
                  "description": "The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "validation_token",
                  "value": "",
                  "description": "The unique validation token you received when the Quiz Submission was created.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Submission User List",
      "description": "List of users who have or haven't submitted for a quiz.",
      "item": [
        {
          "name": "Post Courses Message",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id/submission_users/message",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id",
                "submission_users",
                "message"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "{ ``` \"body\": { \"type\": \"string\", \"description\": \"message body of the conversation to be created\", \"example\": \"Please take the quiz.\" }, \"recipients\": { \"type\": \"string\", \"description\": \"Who to send the message to. May be either 'submitted' or 'unsubmitted'\", \"example\": \"submitted\" }, \"subject\": { \"type\": \"string\", \"description\": \"Subject of the new Conversation created\", \"example\": \"ATTN: Quiz 101 Students\" } ``` }\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:id/submission_users/message`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "conversations",
                  "value": "",
                  "description": "Body and recipients to send the message to.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quiz Submissions",
      "description": "API for accessing quiz submissions",
      "item": [
        {
          "name": "Get Courses Submission",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submission",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submission"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the quiz submission.Allowed values: submission, quiz, user",
                  "disabled": true
                }
              ]
            },
            "description": "Get the submission for this quiz for the current user.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submission`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the quiz submission.Allowed values: submission, quiz, user",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all submissions for this quiz. Users who can view or manage grades for a course will have submissions from multiple users returned. A user who can only submit will have only their own submissions returned. When a user has an in-progress submission, only that submission is returned. When there isn’t an in-progress quiz\\_submission, all completed submissions, including previous attempts, are returned.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the quiz submission.Allowed values: submission, quiz, user",
                  "disabled": true
                }
              ]
            },
            "description": "Get a single quiz submission.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id`"
          }
        },
        {
          "name": "Get Courses Time",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/time",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id",
                "time"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get the current timing data for the quiz attempt, both the end\\_at timestamp and the time\\_left parameter.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/time`"
          }
        },
        {
          "name": "Post Courses Submissions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                }
              ],
              "query": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "Access code for the Quiz, if any.",
                  "disabled": true
                },
                {
                  "key": "preview",
                  "value": "",
                  "description": "Whether this should be a preview QuizSubmission and not count towards the user’s course record. Teachers only.",
                  "disabled": true
                }
              ]
            },
            "description": "Start taking a Quiz by creating a QuizSubmission which you can use to answer questions and submit your answers.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions`"
          }
        },
        {
          "name": "Post Courses Complete",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/complete",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id",
                "complete"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "Access code for the Quiz, if any.",
                  "disabled": true
                }
              ]
            },
            "description": "Complete the quiz submission by marking it as complete and grading it. When the quiz submission has been marked as complete, no further modifications will be allowed.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/complete`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attempt",
                  "value": "",
                  "description": "The attempt number of the quiz submission that should be completed. Note that this must be the latest attempt index, as earlier attempts can not be modified.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "validation_token",
                  "value": "",
                  "description": "The unique validation token you received when this Quiz Submission was created.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Submissions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":quiz_id",
                "submissions",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "quiz_id",
                  "value": "<quiz_id>",
                  "description": "The quiz_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update the amount of points a student has scored for questions they’ve answered, provide comments for the student about their answer(s), or simply fudge the total score by a specific amount of points.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz_submissions[][attempt]",
                  "value": "",
                  "description": "The attempt number of the quiz submission that should be updated. This attempt MUST be already completed.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz_submissions[][fudge_points]",
                  "value": "",
                  "description": "Amount of positive or negative points to fudge the total score by.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz_submissions[][questions]",
                  "value": "",
                  "description": "A set of scores and comments for each question answered by the student. The keys are the question IDs, and the values are hashes of ‘scoreandcomment` entries. See Appendix: Manual Scoring for more on this parameter.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Quizzes",
      "description": "",
      "item": [
        {
          "name": "Delete Courses Quizzes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes a quiz and returns the deleted quiz object. Returns a [Quiz](#quiz) object. ### [Reorder quiz items](#method.quizzes/quizzes_api.reorder) <a href=\"#method.quizzes-quizzes_api.reorder\" id=\"method.quizzes-quizzes_api.reorder\"></a> [Quizzes::QuizzesApiController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/quizzes/:id`"
          }
        },
        {
          "name": "Get Courses Quizzes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial title of the quizzes to match and return.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the paginated list of Quizzes in this course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes`"
          }
        },
        {
          "name": "Get Courses Quizzes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the quiz with the given id. Returns a [Quiz](#quiz) object. ### [Create a quiz](#method.quizzes/quizzes_api.create) <a href=\"#method.quizzes-quizzes_api.create\" id=\"method.quizzes-quizzes_api.create\"></a> [Quizzes::QuizzesApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/quizzes/:id`"
          }
        },
        {
          "name": "Post Courses Quizzes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz[description]",
                  "value": "",
                  "description": "A description of the quiz.",
                  "disabled": true
                },
                {
                  "key": "quiz[quiz_type]",
                  "value": "",
                  "description": "The type of quiz.Allowed values: practice_quiz, assignment, graded_survey, survey",
                  "disabled": true
                },
                {
                  "key": "quiz[assignment_group_id]",
                  "value": "",
                  "description": "The assignment group id to put the assignment in. Defaults to the top assignment group in the course. Only valid if the quiz is graded, i.e. if quiz_type is “assignment” or “graded_survey”.",
                  "disabled": true
                },
                {
                  "key": "quiz[time_limit]",
                  "value": "",
                  "description": "Time limit to take this quiz, in minutes. Set to null for no time limit. Defaults to null.",
                  "disabled": true
                },
                {
                  "key": "quiz[shuffle_answers]",
                  "value": "",
                  "description": "If true, quiz answers for multiple choice questions will be randomized for each student. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "quiz[hide_results]",
                  "value": "",
                  "description": "Dictates whether or not quiz results are hidden from students. If null, students can see their results after any attempt. If “always”, students can never see their results. If “until_after_last_attempt”, students can only see results after their last attempt. (Only valid if allowed_attempts > 1). Defaults to null.Allowed values: always, until_after_last_attempt",
                  "disabled": true
                },
                {
                  "key": "quiz[show_correct_answers]",
                  "value": "",
                  "description": "Only valid if hide_results=null If false, hides correct answers from students when quiz results are viewed. Defaults to true.",
                  "disabled": true
                },
                {
                  "key": "quiz[show_correct_answers_last_attempt]",
                  "value": "",
                  "description": "Only valid if show_correct_answers=true and allowed_attempts > 1 If true, hides correct answers from students when quiz results are viewed until they submit the last attempt for the quiz. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "quiz[allowed_attempts]",
                  "value": "",
                  "description": "Number of times a student is allowed to take a quiz. Set to -1 for unlimited attempts. Defaults to 1.",
                  "disabled": true
                },
                {
                  "key": "quiz[scoring_policy]",
                  "value": "",
                  "description": "Required and only valid if allowed_attempts > 1. Scoring policy for a quiz that students can take multiple times. Defaults to “keep_highest”.Allowed values: keep_highest, keep_latest",
                  "disabled": false
                },
                {
                  "key": "quiz[one_question_at_a_time]",
                  "value": "",
                  "description": "If true, shows quiz to student one question at a time. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "quiz[cant_go_back]",
                  "value": "",
                  "description": "Only valid if one_question_at_a_time=true If true, questions are locked after answering. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "quiz[access_code]",
                  "value": "",
                  "description": "Restricts access to the quiz with a password. For no access code restriction, set to null. Defaults to null.",
                  "disabled": true
                },
                {
                  "key": "quiz[ip_filter]",
                  "value": "",
                  "description": "Restricts access to the quiz to computers in a specified IP range. Filters can be a comma-separated list of addresses, or an address followed by a maskExamples:\"192.168.217.1\"\n\"192.168.217.1/24\"\n\"192.168.217.1/255.255.255.0\"\nFor no IP filter restriction, set to null. Defaults to null.",
                  "disabled": true
                },
                {
                  "key": "quiz[published]",
                  "value": "",
                  "description": "Whether the quiz should have a draft state of published or unpublished. NOTE: If students have started taking the quiz, or there are any submissions for the quiz, you may not unpublish a quiz and will recieve an error.",
                  "disabled": true
                },
                {
                  "key": "quiz[one_time_results]",
                  "value": "",
                  "description": "Whether students should be prevented from viewing their quiz results past the first time (right after they turn the quiz in.) Only valid if “hide_results” is not set to “always”. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "quiz[only_visible_to_overrides]",
                  "value": "",
                  "description": "Whether this quiz is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on) Defaults to false.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new quiz for this course.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "quiz[title]",
                  "value": "",
                  "description": "The quiz title.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[show_correct_answers_at]",
                  "value": "",
                  "description": "Only valid if show_correct_answers=true If set, the correct answers will be visible by students only after this date, otherwise the correct answers are visible once the student hands in their quiz submission.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[hide_correct_answers_at]",
                  "value": "",
                  "description": "Only valid if show_correct_answers=true If set, the correct answers will stop being visible once this date has passed. Otherwise, the correct answers will be visible indefinitely.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[due_at]",
                  "value": "",
                  "description": "The day/time the quiz is due. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[lock_at]",
                  "value": "",
                  "description": "The day/time the quiz is locked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "quiz[unlock_at]",
                  "value": "",
                  "description": "The day/time the quiz is unlocked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Reorder",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id/reorder",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id",
                "reorder"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "order[][type]",
                  "value": "",
                  "description": "The type of item is either ‘question’ or ‘group’Allowed values: question, group",
                  "disabled": true
                }
              ]
            },
            "description": "Change order of the quiz questions or groups within the quiz\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:id/reorder`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "order[][id]",
                  "value": "",
                  "description": "The associated item’s unique identifier",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Validate_Access_Code",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id/validate_access_code",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id",
                "validate_access_code"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Accepts an access code and returns a boolean indicating whether that access code is correct\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/quizzes/:id/validate_access_code`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "access_code",
                  "value": "",
                  "description": "The access code being validated",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Quizzes",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/quizzes/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "quizzes",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "quiz[notify_of_update]",
                  "value": "",
                  "description": "If true, notifies users that the quiz has changed. Defaults to true",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing quiz. See the documentation for quiz creation. Additional arguments:\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/quizzes/:id`"
          }
        }
      ]
    },
    {
      "name": "Result",
      "description": "Result API for 1EdTech (IMS) [Assignment and Grade Services](https://github.com/instructure/api-docu-portal/blob/prod/doc/api/file.assignment_tools.md).",
      "item": [
        {
          "name": "Get Courses Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:line_item_id/results",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":line_item_id",
                "results"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "line_item_id",
                  "value": "<line_item_id>",
                  "description": "The line_item_id identifier"
                }
              ]
            },
            "description": "Show existing Results of a line item. Can be used to retrieve a specific student’s result by adding the user\\_id (defined as the lti\\_user\\_id or the Canvas user\\_id) as a query parameter (i.e. user\\_id=1000). If user\\_id is included, it will return only one Result in the collection if the result exists, otherwise it will be empty. May also limit number of results by adding the limit query param (i.e. limit=100) Returns a [Result](#result) object. ### [Show a Result](#method.lti/ims/results.show) <a href=\"#method.lti-ims-results.show\" id=\"method.lti-ims-results.show\"></a> [Lti::Ims::ResultsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/results_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/line_items/:line_item_id/results`"
          }
        },
        {
          "name": "Get Courses Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:line_item_id/results/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":line_item_id",
                "results",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "line_item_id",
                  "value": "<line_item_id>",
                  "description": "The line_item_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Show existing Result of a line item. Returns a [Result](#result) object.\n\n**OAuth Scope:** `url:GET|/api/lti/courses/:course_id/line_items/:line_item_id/results/:id`"
          }
        }
      ]
    },
    {
      "name": "Roles",
      "description": "API for managing account- and course-level roles, and their associated permissions.",
      "item": [
        {
          "name": "Delete Accounts Roles",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "role_id",
                  "value": "",
                  "description": "The unique identifier for the role",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "The name for the role",
                  "disabled": true
                }
              ]
            },
            "description": "Deactivates a custom role. This hides it in the user interface and prevents it from being assigned to new users. Existing users assigned to the role will continue to function with the same permissions they had previously. Built-in roles cannot be deactivated.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/roles/:id`"
          }
        },
        {
          "name": "Get Accounts Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "",
                  "description": "The id of the account to retrieve roles for.",
                  "disabled": true
                },
                {
                  "key": "state[]",
                  "value": "",
                  "description": "Filter by role state. If this argument is omitted, only ‘active’ roles are returned.Allowed values: active, inactive",
                  "disabled": true
                },
                {
                  "key": "show_inherited",
                  "value": "",
                  "description": "If this argument is true, all roles inherited from parent accounts will be included.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the roles available to an account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/roles`"
          }
        },
        {
          "name": "Get Accounts Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "",
                  "description": "The id of the account containing the role",
                  "disabled": true
                },
                {
                  "key": "role_id",
                  "value": "",
                  "description": "The unique identifier for the role",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "The name for the role",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve information about a single role\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/roles/:id`"
          }
        },
        {
          "name": "Get Accounts Permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles/permissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles",
                "permissions"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "If provided, return only permissions whose key, label, group, or group_label match the search string.",
                  "disabled": true
                }
              ]
            },
            "description": "List all permissions that can be granted to roles in the given account. This returns largely the same information documented on the [Permissions list page](../basics/file.permissions), with a few caveats: * Permission labels and group labels returned by this API are localized (the same text visible in the web UI). * This API includes permissions added by plugins. * This API excludes permissions that are disabled in or otherwise do not apply to the given account.\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/roles/permissions`"
          }
        },
        {
          "name": "Post Accounts Roles",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "role",
                  "value": "",
                  "description": "Deprecated alias for label.",
                  "disabled": true
                },
                {
                  "key": "base_role_type",
                  "value": "",
                  "description": "Specifies the role type that will be used as a base for the permissions granted to this role.Defaults to ‘AccountMembership’ if absentAllowed values: AccountMembership, StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][explicit]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][enabled]",
                  "value": "",
                  "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly granted to this role. If explicit is 1 and enabled has any other value (typically 0), permission <X> will be explicitly denied to this role. If explicit is any other value (typically 0) or absent, or if enabled is absent, the value for permission <X> will be inherited from upstream. Ignored if permission <X> is locked upstream (in an ancestor account).May occur multiple times with unique values for <X>. Recognized permission names for <X> can be found on the Permissions list page.Some of these permissions are applicable only for roles on the site admin account, on a root account, or for course-level roles with a particular base role type; if a specified permission is inapplicable, it will be ignored.Additional permissions may exist based on installed plugins.A comprehensive list of all permissions are available:Course Permissions PDF: bit.ly/cnvs-course-permissionsAccount Permissions PDF: bit.ly/cnvs-acct-permissions",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][locked]",
                  "value": "",
                  "description": "If the value is 1, permission \\ will be locked downstream (new roles in subaccounts cannot override the setting). For any other value, permission \\ is left unlocked. Ignored if permission \\ is already locked upstream. May occur multiple times with unique values for \\.",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][applies_to_self]",
                  "value": "",
                  "description": "If the value is 1, permission \\ applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][applies_to_descendants]",
                  "value": "",
                  "description": "If the value is 1, permission \\ cascades down to sub accounts of the account this role is in. The default value is 1. Must be true if applies_to_self is false.This value is only returned if enabled is true.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new course-level or account-level role.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/roles`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "label",
                  "value": "",
                  "description": "Label for the role.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Accounts Activate",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles/:id/activate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles",
                ":id",
                "activate"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Re-activates an inactive role (allowing it to be assigned to new users)\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/roles/:id/activate`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "role_id",
                  "value": "",
                  "description": "The unique identifier for the role",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "The name for the role",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Roles",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/roles/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "roles",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "label",
                  "value": "",
                  "description": "The label for the role. Can only change the label of a custom role that belongs directly to the account.",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][explicit]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][enabled]",
                  "value": "",
                  "description": "These arguments are described in the documentation for the add_role method. The list of available permissions can be found on the Permissions list page.",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][applies_to_self]",
                  "value": "",
                  "description": "If the value is 1, permission \\ applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.",
                  "disabled": true
                },
                {
                  "key": "permissions[<X>][applies_to_descendants]",
                  "value": "",
                  "description": "If the value is 1, permission \\ cascades down to sub accounts of the account this role is in. The default value is 1. Must be true if applies_to_self is false.This value is only returned if enabled is true.",
                  "disabled": true
                }
              ]
            },
            "description": "Update permissions for an existing role. Recognized roles are: * TeacherEnrollment * StudentEnrollment * TaEnrollment * ObserverEnrollment * DesignerEnrollment * AccountAdmin * Any previously created custom role\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/roles/:id`"
          }
        }
      ]
    },
    {
      "name": "Rubrics",
      "description": "API for accessing rubric information.",
      "item": [
        {
          "name": "Delete Courses Rubric_Associations",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the RubricAssociation with the given ID Returns a [RubricAssociation](#rubricassociation) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/rubric_associations/:id`"
          }
        },
        {
          "name": "Delete Courses Rubric_Assessments",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations",
                ":rubric_association_id",
                "rubric_assessments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "rubric_association_id",
                  "value": "<rubric_association_id>",
                  "description": "The rubric_association_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes a rubric assessment Returns a [RubricAssessment](#rubricassessment) object. ### [Create a RubricAssociation](#method.rubric_associations.create) <a href=\"#method.rubric_associations.create\" id=\"method.rubric_associations.create\"></a> [RubricAssociationsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_associations_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id`"
          }
        },
        {
          "name": "Delete Courses Rubrics",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Deletes a Rubric and removes all RubricAssociations. Returns a [Rubric](#rubric) object. ### [List rubrics](#method.rubrics_api.index) <a href=\"#method.rubrics_api.index\" id=\"method.rubrics_api.index\"></a> [RubricsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/rubrics/:id`"
          }
        },
        {
          "name": "Get Accounts Rubrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/rubrics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "rubrics"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/rubrics`"
          }
        },
        {
          "name": "Get Accounts Rubrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/rubrics/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "rubrics",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/rubrics/:id`"
          }
        },
        {
          "name": "Get Accounts Used_Locations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/rubrics/:id/used_locations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "rubrics",
                ":id",
                "used_locations"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the courses and assignments where a rubric is being used ### [Creates a rubric using a CSV file](#method.rubrics_api.upload) <a href=\"#method.rubrics_api.upload\" id=\"method.rubrics_api.upload\"></a> [RubricsApiController#upload](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/rubrics/:id/used_locations`"
          }
        },
        {
          "name": "Get Accounts Upload",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/rubrics/upload/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "rubrics",
                "upload",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Can return the latest rubric import for an account or course, or a specific import by id ### [Create a single rubric assessment](#method.rubric_assessments.create) <a href=\"#method.rubric_assessments.create\" id=\"method.rubric_assessments.create\"></a> [RubricAssessmentsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_assessments_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/rubrics/upload/:id`"
          }
        },
        {
          "name": "Get Courses Rubrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the paginated list of active rubrics for the current context. ### [Get a single rubric](#method.rubrics_api.show) <a href=\"#method.rubrics_api.show\" id=\"method.rubrics_api.show\"></a> [RubricsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/rubrics`"
          }
        },
        {
          "name": "Get Courses Rubrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Related records to include in the response.Allowed values: assessments, graded_assessments, peer_assessments, associations, assignment_associations, course_associations, account_associations",
                  "disabled": true
                },
                {
                  "key": "style",
                  "value": "",
                  "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.Allowed values: full, comments_only",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric with the given id.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/rubrics/:id`"
          }
        },
        {
          "name": "Get Courses Used_Locations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/:id/used_locations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                ":id",
                "used_locations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/rubrics/:id/used_locations`"
          }
        },
        {
          "name": "Get Courses Upload",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/upload/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                "upload",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/rubrics/upload/:id`"
          }
        },
        {
          "name": "Get Rubrics Upload_Template",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/rubrics/upload_template",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "rubrics",
                "upload_template"
              ]
            },
            "description": "Returns a CSV template file that can be used to import rubrics into Canvas. ### [Get the status of a rubric import](#method.rubrics_api.upload_status) <a href=\"#method.rubrics_api.upload_status\" id=\"method.rubrics_api.upload_status\"></a> [RubricsApiController#upload\\_status](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/rubrics/upload_template`"
          }
        },
        {
          "name": "Post Accounts Upload",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/rubrics/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "rubrics",
                "upload"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the rubric import object that was created ### [Templated file for importing a rubric](#method.rubrics_api.upload_template) <a href=\"#method.rubrics_api.upload_template\" id=\"method.rubrics_api.upload_template\"></a> [RubricsApiController#upload\\_template](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/rubrics/upload`"
          }
        },
        {
          "name": "Post Courses Rubric_Associations",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "rubric_association[rubric_id]",
                  "value": "",
                  "description": "The id of the Rubric",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_id]",
                  "value": "",
                  "description": "The id of the object with which this rubric is associated",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_type]",
                  "value": "",
                  "description": "The type of object this rubric is associated withAllowed values: Assignment, Course, Account",
                  "disabled": true
                },
                {
                  "key": "rubric_association[title]",
                  "value": "",
                  "description": "The name of the object this rubric is associated with",
                  "disabled": true
                },
                {
                  "key": "rubric_association[use_for_grading]",
                  "value": "",
                  "description": "Whether or not the associated rubric is used for grade calculation",
                  "disabled": true
                },
                {
                  "key": "rubric_association[hide_score_total]",
                  "value": "",
                  "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                  "disabled": true
                },
                {
                  "key": "rubric_association[purpose]",
                  "value": "",
                  "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark",
                  "disabled": true
                },
                {
                  "key": "rubric_association[bookmarked]",
                  "value": "",
                  "description": "Whether or not the associated rubric appears in its context",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric with the given id.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/rubric_associations`"
          }
        },
        {
          "name": "Post Courses Rubric_Assessments",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations",
                ":rubric_association_id",
                "rubric_assessments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "rubric_association_id",
                  "value": "<rubric_association_id>",
                  "description": "The rubric_association_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "disabled": true
                },
                {
                  "key": "rubric_association_id",
                  "value": "",
                  "description": "The id of the object with which this rubric assessment is associated",
                  "disabled": true
                },
                {
                  "key": "provisional",
                  "value": "",
                  "description": "(optional) Indicates whether this assessment is provisional, defaults to false.",
                  "disabled": true
                },
                {
                  "key": "final",
                  "value": "",
                  "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "graded_anonymously",
                  "value": "",
                  "description": "(optional) Defaults to false",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric assessment with the given id. The returned object also provides the information of ``` :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact ```\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric_assessment",
                  "value": "",
                  "description": "A Hash of data to complement the rubric assessment: The user id that refers to the person being assessedrubric_assessment[user_id]\nAssessment type. There are only three valid types: ‘grading’, ‘peer_review’, or ‘provisional_grade’rubric_assessment[assessment_type]\nThe points awarded for this row.rubric_assessment[criterion_id][points]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Rubrics",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The id of the rubric",
                  "disabled": true
                },
                {
                  "key": "rubric_association_id",
                  "value": "",
                  "description": "The id of the rubric association object (not the course/assignment itself, but the join table record id). It can be used in place of rubric_association[association_id] and rubric_association[association_type] if desired.",
                  "disabled": true
                },
                {
                  "key": "rubric[title]",
                  "value": "",
                  "description": "The title of the rubric",
                  "disabled": true
                },
                {
                  "key": "rubric[free_form_criterion_comments]",
                  "value": "",
                  "description": "Whether or not you can write custom comments in the ratings field for a rubric",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_id]",
                  "value": "",
                  "description": "The id of the object with which this rubric is associated",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_type]",
                  "value": "",
                  "description": "The type of object this rubric is associated withAllowed values: Assignment, Course, Account",
                  "disabled": true
                },
                {
                  "key": "rubric_association[use_for_grading]",
                  "value": "",
                  "description": "Whether or not the associated rubric is used for grade calculation",
                  "disabled": true
                },
                {
                  "key": "rubric_association[hide_score_total]",
                  "value": "",
                  "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                  "disabled": true
                },
                {
                  "key": "rubric_association[purpose]",
                  "value": "",
                  "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its context",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric with the given id. Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like ``` { 'rubric': Rubric, 'rubric_association': RubricAssociation } ``` This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/rubrics`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric[criteria]",
                  "value": "",
                  "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Courses Upload",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                "upload"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/rubrics/upload`"
          }
        },
        {
          "name": "Put Courses Rubric_Associations",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The id of the RubricAssociation to update",
                  "disabled": true
                },
                {
                  "key": "rubric_association[rubric_id]",
                  "value": "",
                  "description": "The id of the Rubric",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_id]",
                  "value": "",
                  "description": "The id of the object with which this rubric is associated",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_type]",
                  "value": "",
                  "description": "The type of object this rubric is associated withAllowed values: Assignment, Course, Account",
                  "disabled": true
                },
                {
                  "key": "rubric_association[title]",
                  "value": "",
                  "description": "The name of the object this rubric is associated with",
                  "disabled": true
                },
                {
                  "key": "rubric_association[use_for_grading]",
                  "value": "",
                  "description": "Whether or not the associated rubric is used for grade calculation",
                  "disabled": true
                },
                {
                  "key": "rubric_association[hide_score_total]",
                  "value": "",
                  "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                  "disabled": true
                },
                {
                  "key": "rubric_association[purpose]",
                  "value": "",
                  "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark",
                  "disabled": true
                },
                {
                  "key": "rubric_association[bookmarked]",
                  "value": "",
                  "description": "Whether or not the associated rubric appears in its context",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric with the given id.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/rubric_associations/:id`"
          }
        },
        {
          "name": "Put Courses Rubric_Assessments",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubric_associations",
                ":rubric_association_id",
                "rubric_assessments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "rubric_association_id",
                  "value": "<rubric_association_id>",
                  "description": "The rubric_association_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The id of the rubric assessment",
                  "disabled": true
                },
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The id of the course",
                  "disabled": true
                },
                {
                  "key": "rubric_association_id",
                  "value": "",
                  "description": "The id of the object with which this rubric assessment is associated",
                  "disabled": true
                },
                {
                  "key": "provisional",
                  "value": "",
                  "description": "(optional) Indicates whether this assessment is provisional, defaults to false.",
                  "disabled": true
                },
                {
                  "key": "final",
                  "value": "",
                  "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "graded_anonymously",
                  "value": "",
                  "description": "(optional) Defaults to false",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric assessment with the given id. The returned object also provides the information of ``` :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact ```\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric_assessment",
                  "value": "",
                  "description": "A Hash of data to complement the rubric assessment: The user id that refers to the person being assessedrubric_assessment[user_id]\nAssessment type. There are only three valid types: ‘grading’, ‘peer_review’, or ‘provisional_grade’rubric_assessment[assessment_type]\nThe points awarded for this row.rubric_assessment[criterion_id][points]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Courses Rubrics",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/rubrics/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "rubrics",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "id",
                  "value": "",
                  "description": "The id of the rubric",
                  "disabled": true
                },
                {
                  "key": "rubric_association_id",
                  "value": "",
                  "description": "The id of the rubric association object (not the course/assignment itself, but the join table record id). It can be used in place of rubric_association[association_id] and rubric_association[association_type] if desired.",
                  "disabled": true
                },
                {
                  "key": "rubric[title]",
                  "value": "",
                  "description": "The title of the rubric",
                  "disabled": true
                },
                {
                  "key": "rubric[free_form_criterion_comments]",
                  "value": "",
                  "description": "Whether or not you can write custom comments in the ratings field for a rubric",
                  "disabled": true
                },
                {
                  "key": "rubric[skip_updating_points_possible]",
                  "value": "",
                  "description": "Whether or not to update the points possible",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_id]",
                  "value": "",
                  "description": "The id of the object with which this rubric is associated",
                  "disabled": true
                },
                {
                  "key": "rubric_association[association_type]",
                  "value": "",
                  "description": "The type of object this rubric is associated withAllowed values: Assignment, Course, Account",
                  "disabled": true
                },
                {
                  "key": "rubric_association[use_for_grading]",
                  "value": "",
                  "description": "Whether or not the associated rubric is used for grade calculation",
                  "disabled": true
                },
                {
                  "key": "rubric_association[hide_score_total]",
                  "value": "",
                  "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.",
                  "disabled": true
                },
                {
                  "key": "rubric_association[purpose]",
                  "value": "",
                  "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the rubric with the given id. Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like ``` { 'rubric': Rubric, 'rubric_association': RubricAssociation } ``` This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/rubrics/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric[criteria]",
                  "value": "",
                  "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "SIS Import Errors",
      "description": "",
      "item": [
        {
          "name": "Get Accounts Sis_Import_Errors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_import_errors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_import_errors"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "failure",
                  "value": "",
                  "description": "If set, only shows errors on a sis import that would cause a failure.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days. Example: ``` curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\ -H \"Authorization: Bearer <token>\" ``` Example: ``` curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\ -H \"Authorization: Bearer <token>\" ```\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sis_import_errors`"
          }
        },
        {
          "name": "Get Accounts Errors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/:id/errors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                ":id",
                "errors"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sis_imports/:id/errors`"
          }
        }
      ]
    },
    {
      "name": "SIS Imports",
      "description": "API for importing data from Student Information Systems",
      "item": [
        {
          "name": "Get Accounts Sis_Imports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "created_since",
                  "value": "",
                  "description": "If set, only shows imports created after the specified date (use ISO8601 format)",
                  "disabled": true
                },
                {
                  "key": "created_before",
                  "value": "",
                  "description": "If set, only shows imports created before the specified date (use ISO8601 format)",
                  "disabled": true
                },
                {
                  "key": "workflow_state[]",
                  "value": "",
                  "description": "If set, only returns imports that are in the given state.Allowed values: initializing, created, importing, cleanup_batch, imported, imported_with_messages, aborted, failed, failed_with_messages, restoring, partially_restored, restored",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the list of SIS imports for an account Example: ``` curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\ -H 'Authorization: Bearer <token>' ```\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sis_imports`"
          }
        },
        {
          "name": "Get Accounts Sis_Imports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get the status of an already created SIS import. ``` Examples: curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\ -H 'Authorization: Bearer <token>' ``` Returns a [SisImport](#sisimport) object. ### [Restore workflow\\_states of SIS imported items](#method.sis_imports_api.restore_states) <a href=\"#method.sis_imports_api.restore_states\" id=\"method.sis_imports_api.restore_states\"></a> [SisImportsApiController#restore\\_states](https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sis_imports/:id`"
          }
        },
        {
          "name": "Get Accounts Importing",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/importing",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                "importing"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the SIS imports that are currently processing for an account. If no imports are running, will return an empty array. Example: ``` curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/importing \\ -H 'Authorization: Bearer <token>' ``` Returns a [SisImport](#sisimport) object. ### [Import SIS data](#method.sis_imports_api.create) <a href=\"#method.sis_imports_api.create\" id=\"method.sis_imports_api.create\"></a> [SisImportsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/sis_imports/importing`"
          }
        },
        {
          "name": "Post Accounts Sis_Imports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "import_type",
                  "value": "",
                  "description": "Choose the data format for reading SIS data. With a standard Canvas install, this option can only be ‘instructure_csv’, and if unprovided, will be assumed to be so. Can be part of the query string.",
                  "disabled": true
                },
                {
                  "key": "attachment",
                  "value": "",
                  "description": "There are two ways to post SIS import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be SIS data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: application/octet-stream' --data-binary @<filename>.zip <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&extension=zip\ncurl -H 'Content-Type: application/zip' --data-binary @<filename>.zip <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&batch_mode=1&batch_mode_term_id=15\nIf the attachment is a zip file, the uncompressed file(s) cannot be 100x larger than the zip, or the import will fail. For example, if the zip file is 1KB but the total size of the uncompressed file(s) is 100KB or greater the import will fail. There is a hard cap of 50 GB.",
                  "disabled": false
                },
                {
                  "key": "extension",
                  "value": "",
                  "description": "Recommended for raw post request style imports. This field will be used to distinguish between zip, xml, csv, and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to zip-file format if all else fails.",
                  "disabled": true
                },
                {
                  "key": "batch_mode",
                  "value": "",
                  "description": "If set, this SIS import will be run in batch mode, deleting any data previously imported via SIS that is not present in this latest import. See the SIS CSV Format page for details. Batch mode cannot be used with diffing.",
                  "disabled": true
                },
                {
                  "key": "batch_mode_term_id",
                  "value": "",
                  "description": "Limit deletions to only this term. Required if batch mode is enabled.",
                  "disabled": false
                },
                {
                  "key": "multi_term_batch_mode",
                  "value": "",
                  "description": "Runs batch mode against all terms in terms file. Requires change_threshold.",
                  "disabled": true
                },
                {
                  "key": "skip_deletes",
                  "value": "",
                  "description": "When set the import will skip any deletes. This does not account for objects that are deleted during the batch mode cleanup process.",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is false. If true, any fields containing “sticky” or UI changes will be overridden. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                },
                {
                  "key": "add_sis_stickiness",
                  "value": "",
                  "description": "This option, if present, will process all changes as if they were UI changes. This means that “stickiness” will be added to changed fields. This option is only processed if ‘override_sis_stickiness’ is also provided.",
                  "disabled": true
                },
                {
                  "key": "clear_sis_stickiness",
                  "value": "",
                  "description": "This option, if present, will clear “stickiness” from all fields processed by this import. Requires that ‘override_sis_stickiness’ is also provided. If ‘add_sis_stickiness’ is also provided, ‘clear_sis_stickiness’ will overrule the behavior of ‘add_sis_stickiness’",
                  "disabled": true
                },
                {
                  "key": "update_sis_id_if_login_claimed",
                  "value": "",
                  "description": "This option, if present, will override the old (or non-existent) non-matching SIS ID with the new SIS ID in the upload, if a pseudonym is found from the login field and the SIS ID doesn’t match.",
                  "disabled": true
                },
                {
                  "key": "diffing_data_set_identifier",
                  "value": "",
                  "description": "If set on a CSV import, Canvas will attempt to optimize the SIS import by comparing this set of CSVs to the previous set that has the same data set identifier, and only applying the difference between the two. See the SIS CSV Format documentation for more details. Diffing cannot be used with batch_mode",
                  "disabled": true
                },
                {
                  "key": "diffing_remaster_data_set",
                  "value": "",
                  "description": "If true, and diffing_data_set_identifier is sent, this SIS import will be part of the data set, but diffing will not be performed. See the SIS CSV Format documentation for details.",
                  "disabled": true
                },
                {
                  "key": "diffing_drop_status",
                  "value": "",
                  "description": "If diffing_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. Defaults to ‘deleted’Allowed values: deleted, completed, inactive",
                  "disabled": true
                },
                {
                  "key": "diffing_user_remove_status",
                  "value": "",
                  "description": "For users removed from one batch to the next one using the same diffing_data_set_identifier, set their status to the value of this argument. Defaults to ‘deleted’.Allowed values: deleted, suspended",
                  "disabled": true
                },
                {
                  "key": "batch_mode_enrollment_drop_status",
                  "value": "",
                  "description": "If batch_mode_enrollment_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. This will have an effect if multi_term_batch_mode is set. Defaults to ‘deleted’ This will still mark courses and sections that are not included in the sis_batch as deleted, and subsequently enrollments in the deleted courses and sections as deleted.Allowed values: deleted, completed, inactive",
                  "disabled": true
                },
                {
                  "key": "change_threshold",
                  "value": "",
                  "description": "If set with batch_mode, the batch cleanup process will not run if the number of items deleted is higher than the percentage set. If set to 10 and a term has 200 enrollments, and batch would delete more than 20 of the enrollments the batch will abort before the enrollments are deleted. The change_threshold will be evaluated for course, sections, and enrollments independently. If set with diffing, diffing will not be performed if the files are greater than the threshold as a percent. If set to 5 and the file is more than 5% smaller or more than 5% larger than the file that is being compared to, diffing will not be performed. If the files are less than 5%, diffing will be performed. The way the percent is calculated is by taking the size of the current import and dividing it by the size of the previous import. The formula used is:",
                  "disabled": true
                },
                {
                  "key": "diff_row_count_threshold",
                  "value": "",
                  "description": "If set with diffing, diffing will not be performed if the number of rows to be run in the fully calculated diff import exceeds the threshold.",
                  "disabled": true
                }
              ]
            },
            "description": "Import SIS data into Canvas. Must be on a root account with SIS imports enabled. For more information on the format that’s expected here, please see the “SIS CSV” section in the API docs.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/sis_imports`"
          }
        },
        {
          "name": "Put Accounts Abort",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/:id/abort",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                ":id",
                "abort"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Abort a SIS import that has not completed. Aborting a sis batch that is running can take some time for every process to see the abort event. Subsequent sis batches begin to process 10 minutes after the abort to allow each process to clean up properly.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/sis_imports/:id/abort`"
          }
        },
        {
          "name": "Put Accounts Restore_States",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/:id/restore_states",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                ":id",
                "restore_states"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "batch_mode",
                  "value": "",
                  "description": "If set, will only restore items that were deleted from batch_mode.",
                  "disabled": true
                },
                {
                  "key": "undelete_only",
                  "value": "",
                  "description": "If set, will only restore items that were deleted. This will ignore any items that were created or modified.",
                  "disabled": true
                },
                {
                  "key": "unconclude_only",
                  "value": "",
                  "description": "If set, will only restore enrollments that were concluded. This will ignore any items that were created or deleted.",
                  "disabled": true
                }
              ]
            },
            "description": "This will restore the the workflow\\_state for all the items that changed their workflow\\_state during the import being restored. This will restore states for items imported with the following importers: accounts.csv terms.csv courses.csv sections.csv group\\_categories.csv groups.csv users.csv admins.csv This also restores states for other items that changed during the import. An example would be if an enrollment was deleted from a sis import and the group\\_membership was also deleted as a result of the enrollment deletion, both items would be restored when the sis batch is restored. Restore data is retained for 30 days post-import. This endpoint is unavailable after that time.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/sis_imports/:id/restore_states`"
          }
        },
        {
          "name": "Put Accounts Abort_All_Pending",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/sis_imports/abort_all_pending",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "sis_imports",
                "abort_all_pending"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Abort already created but not processed or processing SIS imports.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/sis_imports/abort_all_pending`"
          }
        }
      ]
    },
    {
      "name": "SIS Integration",
      "description": "Includes helpers for integration with SIS systems.",
      "item": [
        {
          "name": "Get Accounts Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sis/accounts/:account_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "sis",
                "accounts",
                ":account_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/sis/accounts/:account_id/assignments`"
          }
        },
        {
          "name": "Get Courses Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sis/courses/:course_id/assignments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "sis",
                "courses",
                ":course_id",
                "assignments"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "",
                  "description": "The ID of the account to query.",
                  "disabled": true
                },
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course to query.",
                  "disabled": true
                },
                {
                  "key": "starts_before",
                  "value": "",
                  "description": "When searching on an account,",
                  "disabled": true
                },
                {
                  "key": "ends_after",
                  "value": "",
                  "description": "When searching on an account,",
                  "disabled": true
                },
                {
                  "key": "include",
                  "value": "",
                  "description": "Array of additionalAllowed values: student_overrides",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a list of published assignments flagged as “post\\_to\\_sis”. See the Assignments API for more details on assignments. Assignment group and section information are included for convenience. Each section includes course information for the origin course and the cross-listed course, if applicable. The ‘origin\\_course\\` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the \\`origin\\_course\\` should be preferred when performing integration work. The \\`xlist\\_course\\` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details. The ‘override\\` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object’s keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides. restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include. ``` \"student_overrides\":: returns individual student override information ```\n\n**OAuth Scope:** `url:GET|/api/sis/courses/:course_id/assignments`"
          }
        },
        {
          "name": "Put Courses Disable_Post_To_Sis",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sis/courses/:course_id/disable_post_to_sis",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "sis",
                "courses",
                ":course_id",
                "disable_post_to_sis"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_id",
                  "value": "",
                  "description": "The ID of the course.",
                  "disabled": true
                },
                {
                  "key": "grading_period_id",
                  "value": "",
                  "description": "The ID of the grading period.",
                  "disabled": true
                }
              ]
            },
            "description": "Disable all assignments flagged as “post\\_to\\_sis”, with the option of making it specific to a grading period, in a course. On success, the response will be 204 No Content with an empty body. On failure, the response will be 400 Bad Request with a body of a specific message. For disabling assignments in a specific grading period\n\n**OAuth Scope:** `url:PUT|/api/sis/courses/:course_id/disable_post_to_sis`"
          }
        }
      ]
    },
    {
      "name": "Sandboxes",
      "description": "",
      "item": [
        {
          "name": "List Uuid_Map",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/uuid_map",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "uuid_map"
              ]
            },
            "description": "This endpoint returns a CSV file with the UUID mapping for the sandbox. The CSV has three columns: ``` * `type` - The object type * `original_uuid` - The UUID of an object from the template * `new_uuid` - The UUID of the corresponding object in the sandbox ```\n\n**OAuth Scope:** `url:GET|/api/lti/uuid_map`"
          }
        }
      ]
    },
    {
      "name": "Score",
      "description": "Score API for 1EdTech (IMS) [Assignment and Grade Services](https://github.com/instructure/api-docu-portal/blob/prod/doc/api/file.assignment_tools.md).",
      "item": [
        {
          "name": "Post Courses Scores",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/lti/courses/:course_id/line_items/:line_item_id/scores",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "lti",
                "courses",
                ":course_id",
                "line_items",
                ":line_item_id",
                "scores"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "line_item_id",
                  "value": "<line_item_id>",
                  "description": "The line_item_id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment",
                  "value": "",
                  "description": "Comment visible to the student about this score.",
                  "disabled": true
                },
                {
                  "key": "submission[submittedAt]",
                  "value": "",
                  "description": "Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[new_submission]",
                  "value": "",
                  "description": "(EXTENSION field) flag to indicate that this is a new submission. Defaults to true unless submission_type is none.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[preserve_score]",
                  "value": "",
                  "description": "(EXTENSION field) flag to prevent a request from clearing an existing grade for a submission. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[prioritize_non_tool_grade]",
                  "value": "",
                  "description": "(EXTENSION field) flag to prevent a request from overwriting an existing grade for a submission. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[submission_type]",
                  "value": "",
                  "description": "(EXTENSION field) permissible values are: none, basic_lti_launch, online_text_entry, external_tool, online_upload, or online_url. Defaults to external_tool. Ignored if content_items are provided.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[submission_data]",
                  "value": "",
                  "description": "(EXTENSION field) submission data (URL or body text). Only used for submission_types basic_lti_launch, online_text_entry, online_url. Ignored if content_items are provided.",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[submitted_at]",
                  "value": "",
                  "description": "(EXTENSION field) Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision. This should match the date and time that the original submission happened in Canvas. Use of submission.submittedAt is preferred.",
                  "disabled": true
                }
              ]
            },
            "description": "Create a new Result from the score params. If this is for the first created line\\_item for a resourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission record will be created for the associated assignment when gradingProgress is set to FullyGraded or PendingManual. The submission score will also be updated when a score object is sent with either of those two values for gradingProgress. If a score object is sent with either of FullyGraded or PendingManual as the value for gradingProgress and scoreGiven is missing, the assignment will not be graded. This also supposes the line\\_item meets the condition to create a submission. A submission comment with an unknown author will be created when the comment value is included. This also supposes the line\\_item meets the condition to create a submission. It is also possible to submit a file along with this score, which will attach the file to the submission that is created. Files should be formatted as Content Items, with the correct syntax below. Returns a url pointing to the Result. If any files were submitted, also returns the Content Items which were sent in the request, each with a url pointing to the Progress of the file upload.\n\n**OAuth Scope:** `url:POST|/api/lti/courses/:course_id/line_items/:line_item_id/scores`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "userId",
                  "value": "",
                  "description": "The lti_user_id or the Canvas user_id. Returns a 422 if user not found in Canvas or is not a student.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "activityProgress",
                  "value": "",
                  "description": "Indicate to Canvas the status of the user towards the activity’s completion. Must be one of Initialized, Started, InProgress, Submitted, Completed.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "gradingProgress",
                  "value": "",
                  "description": "Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "timestamp",
                  "value": "",
                  "description": "Date and time when the score was modified in the tool. Should use ISO8601-formatted date with subsecond precision. Returns a 400 if the timestamp is earlier than the updated_at time of the Result.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "scoreGiven",
                  "value": "",
                  "description": "The Current score received in the tool for this line item and user, scaled to the scoreMaximum",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "scoreMaximum",
                  "value": "",
                  "description": "Maximum possible score for this result; it must be present if scoreGiven is present. Returns 422 if not present when scoreGiven is present.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "submission",
                  "value": "",
                  "description": "Contains metadata about the submission attempt. Supported fields listed below.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission",
                  "value": "",
                  "description": "(EXTENSION) Optional submission type and data. Fields listed below.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "https://canvas.instructure.com/lti/submission[content_items]",
                  "value": "",
                  "description": "(EXTENSION field) Files that should be included with the submission. Each item should contain ‘type: file`, and a url pointing to the file. It can also contain a title, and an explicit MIME type if needed (otherwise, MIME type will be inferred from the title or url). If any items are present, submission_type will be online_upload.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Search",
      "description": "",
      "item": [
        {
          "name": "Get Conversations Find_Recipients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/find_recipients",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "conversations",
                "find_recipients"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/conversations/find_recipients`"
          }
        },
        {
          "name": "Get Search All_Courses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/search/all_courses",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                "all_courses"
              ],
              "query": [
                {
                  "key": "search",
                  "value": "",
                  "description": "Search terms used for matching users/courses/groups (e.g. “bob smith”). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.",
                  "disabled": true
                },
                {
                  "key": "public_only",
                  "value": "",
                  "description": "Only return courses with public content. Defaults to false.",
                  "disabled": true
                },
                {
                  "key": "open_enrollment_only",
                  "value": "",
                  "description": "Only return courses that allow self enrollment. Defaults to false.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of all courses visible in the public index\n\n**OAuth Scope:** `url:GET|/api/v1/search/all_courses`"
          }
        },
        {
          "name": "Get Search Recipients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/search/recipients",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                "recipients"
              ],
              "query": [
                {
                  "key": "search",
                  "value": "",
                  "description": "Search terms used for matching users/courses/groups (e.g. “bob smith”). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.",
                  "disabled": true
                },
                {
                  "key": "context",
                  "value": "",
                  "description": "Limit the search to a particular course/group (e.g. “course_3” or “group_4”).",
                  "disabled": true
                },
                {
                  "key": "exclude[]",
                  "value": "",
                  "description": "Array of ids to exclude from the search. These may be user ids or course/group ids prefixed with “course_” or “group_” respectively, e.g. exclude[]=1\\&exclude=2\\&exclude[]=course_3",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "",
                  "description": "Limit the search just to users or contexts (groups/courses).Allowed values: user, context",
                  "disabled": true
                },
                {
                  "key": "user_id",
                  "value": "",
                  "description": "Search for a specific user id. This ignores the other above parameters, and will never return more than one result.",
                  "disabled": true
                },
                {
                  "key": "from_conversation_id",
                  "value": "",
                  "description": "When searching by user_id, only users that could be normally messaged by this user will be returned. This parameter allows you to specify a conversation that will be referenced for a shared context – if both the current user and the searched user are in the conversation, the user will be returned. This is used to start new side conversations.",
                  "disabled": true
                },
                {
                  "key": "permissions[]",
                  "value": "",
                  "description": "Array of permission strings to be checked for each matched context (e.g. “send_messages”). This argument determines which permissions may be returned in the response; it won’t prevent contexts from being returned if they don’t grant the permission(s).",
                  "disabled": true
                }
              ]
            },
            "description": "Find valid recipients (users, courses and groups) that the current user can send messages to. The /api/v1/search/recipients path is the preferred endpoint, /api/v1/conversations/find\\_recipients is deprecated. Pagination is supported.\n\n**OAuth Scope:** `url:GET|/api/v1/search/recipients`"
          }
        }
      ]
    },
    {
      "name": "Sections",
      "description": "API for accessing section information.",
      "item": [
        {
          "name": "Delete Sections",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete an existing section. Returns the former Section. Returns a [Section](#section) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/sections/:id`"
          }
        },
        {
          "name": "Delete Sections Crosslist",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:id/crosslist",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":id",
                "crosslist"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Undo cross-listing of a Section, returning it to its original course.\n\n**OAuth Scope:** `url:DELETE|/api/v1/sections/:id/crosslist`"
          }
        },
        {
          "name": "Get Courses Sections",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/sections",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "sections"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“students”: Associations to include with the group. Note: this is only available if you have permission to view users or grades in the course“avatar_url”: Include the avatar URLs for students returned.“enrollments”: If ‘students’ is also included, return the section enrollment for each student“total_students”: Returns the total amount of active and invited students for the course section“passback_status”: Include the grade passback status.“permissions”: Include whether section grants :manage_calendar permission to the callerAllowed values: students, avatar_url, enrollments, total_students, passback_status, permissions",
                  "disabled": true
                },
                {
                  "key": "search_term",
                  "value": "",
                  "description": "When included, searches course sections for the term. Returns only matching results. Term must be at least 2 characters.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the list of sections for this course.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/sections`"
          }
        },
        {
          "name": "Get Courses Sections",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/sections/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "sections",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/sections/:id`"
          }
        },
        {
          "name": "List Sections",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“students”: Associations to include with the group. Note: this is only available if you have permission to view users or grades in the course“avatar_url”: Include the avatar URLs for students returned.“enrollments”: If ‘students’ is also included, return the section enrollment for each student“total_students”: Returns the total amount of active and invited students for the course section“passback_status”: Include the grade passback status.“permissions”: Include whether section grants :manage_calendar permission to the callerAllowed values: students, avatar_url, enrollments, total_students, passback_status, permissions",
                  "disabled": true
                }
              ]
            },
            "description": "Gets details about a specific section\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:id`"
          }
        },
        {
          "name": "Post Courses Sections",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/sections",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "sections"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_section[name]",
                  "value": "",
                  "description": "The name of the section",
                  "disabled": true
                },
                {
                  "key": "course_section[sis_section_id]",
                  "value": "",
                  "description": "The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                  "disabled": true
                },
                {
                  "key": "course_section[integration_id]",
                  "value": "",
                  "description": "The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                  "disabled": true
                },
                {
                  "key": "course_section[restrict_enrollments_to_section_dates]",
                  "value": "",
                  "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                  "disabled": true
                },
                {
                  "key": "enable_sis_reactivation",
                  "value": "",
                  "description": "When true, will first try to re-activate a deleted section with matching sis_section_id if possible.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new section for this course.\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/sections`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_section[start_at]",
                  "value": "",
                  "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course_section[end_at]",
                  "value": "",
                  "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Sections Crosslist",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:id/crosslist/:new_course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":id",
                "crosslist",
                ":new_course_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "new_course_id",
                  "value": "<new_course_id>",
                  "description": "The new_course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Move the Section to another course. The new course may be in a different account (department), but must belong to the same root account (institution).\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:id/crosslist/:new_course_id`"
          }
        },
        {
          "name": "Update Sections",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "course_section[name]",
                  "value": "",
                  "description": "The name of the section",
                  "disabled": true
                },
                {
                  "key": "course_section[sis_section_id]",
                  "value": "",
                  "description": "The sis ID of the section. Must have manage_sis permission to set.",
                  "disabled": true
                },
                {
                  "key": "course_section[integration_id]",
                  "value": "",
                  "description": "The integration_id of the section. Must have manage_sis permission to set.",
                  "disabled": true
                },
                {
                  "key": "course_section[restrict_enrollments_to_section_dates]",
                  "value": "",
                  "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing section.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "course_section[start_at]",
                  "value": "",
                  "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "course_section[end_at]",
                  "value": "",
                  "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Services",
      "description": "",
      "item": [
        {
          "name": "Get Services Kaltura",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/services/kaltura",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "services",
                "kaltura"
              ]
            },
            "description": "Return the config information for the Kaltura plugin in json format.\n\n**OAuth Scope:** `url:GET|/api/v1/services/kaltura`"
          }
        },
        {
          "name": "Post Services Kaltura_Session",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/services/kaltura_session",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "services",
                "kaltura_session"
              ]
            },
            "description": "Start a new Kaltura session, so that new media can be recorded and uploaded to this Canvas instance’s Kaltura instance.\n\n**OAuth Scope:** `url:POST|/api/v1/services/kaltura_session`"
          }
        }
      ]
    },
    {
      "name": "Shared Brand Configs",
      "description": "This is how you can share Themes with other people in your account or so you can come back to them later without having to apply them to your account",
      "item": [
        {
          "name": "Delete Shared_Brand_Configs",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/shared_brand_configs/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "shared_brand_configs",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in your account will see it as an option to pick from.\n\n**OAuth Scope:** `url:DELETE|/api/v1/shared_brand_configs/:id`"
          }
        },
        {
          "name": "Post Accounts Shared_Brand_Configs",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/shared_brand_configs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "shared_brand_configs"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Create a SharedBrandConfig, which will give the given brand\\_config a name and make it available to other users of this account.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/shared_brand_configs`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "shared_brand_config[name]",
                  "value": "",
                  "description": "Name to share this BrandConfig (theme) as.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "shared_brand_config[brand_config_md5]",
                  "value": "",
                  "description": "MD5 of brand_config to share",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Accounts Shared_Brand_Configs",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/shared_brand_configs/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "shared_brand_configs",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Update the specified shared\\_brand\\_config with a new name or to point to a new brand\\_config. Uses same parameters as create.\n\n**OAuth Scope:** `url:PUT|/api/v1/accounts/:account_id/shared_brand_configs/:id`"
          }
        }
      ]
    },
    {
      "name": "Smart Search",
      "description": "{% hint style=\"warning\" %} BETA: This API resource is not finalized, and there could be breaking changes before its final release. {% endhint %} API for AI-powered course content search. NOTE: This feature has limited availability at present.",
      "item": [
        {
          "name": "Get Courses Smartsearch",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/smartsearch",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "smartsearch"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "q",
                  "value": "",
                  "description": "The search query",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "Types of objects to search. By default, all supported types are searched. Supported types include pages, assignments, announcements, and discussion_topics.",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Optional information to include with each search result:modulesAn array of module objects that the search result belongs to.statusThe published status for all results and the due_date for all assignments.Allowed values: status, modules",
                  "disabled": true
                }
              ]
            },
            "description": "Find course content using a meaning-based search\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/smartsearch`"
          }
        }
      ]
    },
    {
      "name": "Submission Comments",
      "description": "This API can be used to edit and delete submission comments.",
      "item": [
        {
          "name": "Delete Courses Comments",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "comments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete the given submission comment.\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id`"
          }
        },
        {
          "name": "Post Courses Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "comments",
                "files"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Upload a file to attach to a submission comment See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then PUT the file\\_id to the submission API to attach it to a comment\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/files`"
          }
        },
        {
          "name": "Put Courses Comments",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "comments",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment",
                  "value": "",
                  "description": "If this argument is present, edit the text of a comment.",
                  "disabled": true
                }
              ]
            },
            "description": "Edit the given submission comment.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id`"
          }
        }
      ]
    },
    {
      "name": "Submissions",
      "description": "API for accessing and updating submissions for an assignment. The submission id in these URLs is the id of the student in the course, there is no separate submission id exposed in these APIs. All submission actions can be performed with either the course id, or the course section id. SIS ids can be used, prefixed by \"sis\\_course\\_id:\" or \"sis\\_section\\_id:\" as described in the API documentation on SIS IDs.",
      "item": [
        {
          "name": "Delete Courses Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read`"
          }
        },
        {
          "name": "Delete Sections Read",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:DELETE|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read`"
          }
        },
        {
          "name": "Get Courses Anonymous_Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "anonymous_submissions",
                ":anonymous_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "anonymous_id",
                  "value": "<anonymous_id>",
                  "description": "The anonymous_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id`"
          }
        },
        {
          "name": "Get Courses Gradeable_Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/gradeable_students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "gradeable_students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "",
                  "description": "Sort results by this field.Allowed values: name",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The sorting order. Defaults to ‘asc’.Allowed values: asc, desc",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of gradeable students for the assignment. The caller must have permission to view grades. If anonymous grading is enabled for the current assignment and the allow\\_new\\_anonymous\\_id parameter is passed, the returned data will not include any values identifying the student, but will instead include an assignment-specific anonymous ID for each student. Section-limited instructors will only see students in their own sections.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/gradeable_students`"
          }
        },
        {
          "name": "Get Courses Submission_Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submission_summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submission_summary"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submission_summary`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id`"
          }
        },
        {
          "name": "Get Courses Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "document_annotations",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read`"
          }
        },
        {
          "name": "Get Courses Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_assessments",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read`"
          }
        },
        {
          "name": "Get Courses Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_comments",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read`"
          }
        },
        {
          "name": "Get Courses Gradeable_Students",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/gradeable_students",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                "gradeable_students"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ],
              "query": [
                {
                  "key": "assignment_ids[]",
                  "value": "",
                  "description": "Assignments being requested",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of students eligible to submit a list of assignments. The caller must have permission to view grades for the requested course. Section-limited instructors will only see students in their own sections.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/assignments/gradeable_students`"
          }
        },
        {
          "name": "Get Courses Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/students/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "students",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/students/submissions`"
          }
        },
        {
          "name": "Get Sections Anonymous_Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "anonymous_submissions",
                ":anonymous_id"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "anonymous_id",
                  "value": "<anonymous_id>",
                  "description": "The anonymous_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group.Allowed values: submission_history, submission_comments, rubric_assessment, full_rubric_assessment, visibility, course, user, read_status",
                  "disabled": true
                }
              ]
            },
            "description": "Get a single submission, based on the submission’s anonymous id.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id`"
          }
        },
        {
          "name": "Get Sections Submission_Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submission_summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submission_summary"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "grouped",
                  "value": "",
                  "description": "If this argument is true, the response will take into account student groups.",
                  "disabled": true
                },
                {
                  "key": "include_deactivated",
                  "value": "",
                  "description": "If this argument is true, the response will include deactivated students in the summary (defaults to false).",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submission_summary`"
          }
        },
        {
          "name": "Get Sections Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group. “group” will add group_id and group_name.Allowed values: submission_history, submission_comments, submission_html_comments, rubric_assessment, assignment, visibility, course, user, group, read_status, student_entered_score",
                  "disabled": true
                },
                {
                  "key": "grouped",
                  "value": "",
                  "description": "If this argument is true, the response will be grouped by student groups.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of all existing submissions for an assignment.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions`"
          }
        },
        {
          "name": "Get Sections Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group.Allowed values: submission_history, submission_comments, submission_html_comments, rubric_assessment, full_rubric_assessment, visibility, course, user, read_status, student_entered_score",
                  "disabled": true
                }
              ]
            },
            "description": "Get a single submission, based on user id.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id`"
          }
        },
        {
          "name": "Get Sections Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "document_annotations",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return whether annotations made on a submitted document have been read by the student\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read`"
          }
        },
        {
          "name": "Get Sections Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_assessments",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read`"
          }
        },
        {
          "name": "Get Sections Read",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_comments",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read`"
          }
        },
        {
          "name": "Get Sections Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/students/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "students",
                "submissions"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                }
              ],
              "query": [
                {
                  "key": "student_ids[]",
                  "value": "",
                  "description": "List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id “all” will return submissions for all students in the course/section as appropriate.",
                  "disabled": true
                },
                {
                  "key": "assignment_ids[]",
                  "value": "",
                  "description": "List of assignments to return submissions for. If none are given, submissions for all assignments are returned.",
                  "disabled": true
                },
                {
                  "key": "grouped",
                  "value": "",
                  "description": "If this argument is present, the response will be grouped by student, rather than a flat array of submissions.",
                  "disabled": true
                },
                {
                  "key": "post_to_sis",
                  "value": "",
                  "description": "If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.",
                  "disabled": true
                },
                {
                  "key": "submitted_since",
                  "value": "",
                  "description": "If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "graded_since",
                  "value": "",
                  "description": "If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                  "disabled": true
                },
                {
                  "key": "grading_period_id",
                  "value": "",
                  "description": "The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)",
                  "disabled": true
                },
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The current status of the submissionAllowed values: submitted, unsubmitted, graded, pending_review",
                  "disabled": true
                },
                {
                  "key": "enrollment_state",
                  "value": "",
                  "description": "The current state of the enrollments. If omitted will include all enrollments that are not deleted.Allowed values: active, concluded",
                  "disabled": true
                },
                {
                  "key": "state_based_on_date",
                  "value": "",
                  "description": "If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The order submissions will be returned in. Defaults to “id”. Doesn’t affect results for “grouped” mode.Allowed values: id, graded_at",
                  "disabled": true
                },
                {
                  "key": "order_direction",
                  "value": "",
                  "description": "Determines whether ordered results are returned in ascending or descending order. Defaults to “ascending”. Doesn’t affect results for “grouped” mode.Allowed values: ascending, descending",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the group. ‘total_scoresrequires thegroupedargument.</p> Allowed values:submission_history, submission_comments, submission_html_comments, rubric_assessment, assignment, total_scores, visibility, course, user, sub_assignment_submissions, student_entered_score`",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of all existing submissions for a given set of students and assignments.\n\n**OAuth Scope:** `url:GET|/api/v1/sections/:section_id/students/submissions`"
          }
        },
        {
          "name": "Post Courses Submissions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions`"
          }
        },
        {
          "name": "Post Courses Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "files"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/files`"
          }
        },
        {
          "name": "Post Courses Update_Grades",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/update_grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                "update_grades"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/update_grades`"
          }
        },
        {
          "name": "Post Courses Update_Grades",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/submissions/update_grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "submissions",
                "update_grades"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/submissions/update_grades`"
          }
        },
        {
          "name": "Post Sections Submissions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment[text_comment]",
                  "value": "",
                  "description": "Include a textual comment with the submission.",
                  "disabled": true
                },
                {
                  "key": "submission[group_comment]",
                  "value": "",
                  "description": "Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.",
                  "disabled": true
                },
                {
                  "key": "submission[body]",
                  "value": "",
                  "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of “online_text_entry”.",
                  "disabled": true
                },
                {
                  "key": "submission[url]",
                  "value": "",
                  "description": "Submit the assignment as a URL. The URL scheme must be “http” or “https”, no “ftp” or other URL schemes are allowed. If no scheme is given (e.g. “www.example.com”) then “http” will be assumed. Requires a submission_type of “online_url” or “basic_lti_launch”.",
                  "disabled": true
                },
                {
                  "key": "submission[file_ids][]",
                  "value": "",
                  "description": "Submit the assignment as a set of one or more previously uploaded files residing in the submitting user’s files section (or the group’s files section, for group assignments).To upload a new file to submit, see the submissions Upload a file API.Requires a submission_type of “online_upload”.",
                  "disabled": true
                },
                {
                  "key": "submission[media_comment_id]",
                  "value": "",
                  "description": "The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.Requires a submission_type of “media_recording”.",
                  "disabled": true
                },
                {
                  "key": "submission[media_comment_type]",
                  "value": "",
                  "description": "The type of media comment being submitted.Allowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "submission[user_id]",
                  "value": "",
                  "description": "Submit on behalf of the given user. Requires grading permission.",
                  "disabled": true
                },
                {
                  "key": "submission[annotatable_attachment_id]",
                  "value": "",
                  "description": "The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.Requires a submission_type of “student_annotation”.",
                  "disabled": true
                }
              ]
            },
            "description": "Make a submission for an assignment. You must be actively enrolled as a student in the course/section to do this. Concluded and pending enrollments are not permitted. All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported: * Files can be submitted based on a file ID of a user or group file or through the [file upload API](#method.submissions_api.create_file). However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "submission[submission_type]",
                  "value": "",
                  "description": "The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission[submission_type] must be set to “online_url”, otherwise the submission[url] parameter will be ignored.“basic_lti_launch” requires the assignment submission_type “online” or “external_tool”Allowed values: online_text_entry, online_url, online_upload, media_recording, basic_lti_launch, student_annotation",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "submission[submitted_at]",
                  "value": "",
                  "description": "Choose the time the submission is listed as submitted at. Requires grading permission.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Sections Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "files"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Upload a file to a submission. This API endpoint is the first step in uploading a file to a submission as a student. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the `online_upload` assignment with these file ids. ### [Grade or comment on a submission](#method.submissions_api.update) <a href=\"#method.submissions_api.update\" id=\"method.submissions_api.update\"></a> [SubmissionsApiController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/files`"
          }
        },
        {
          "name": "Post Sections Update_Grades",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/update_grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                "update_grades"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                }
              ],
              "query": [
                {
                  "key": "grade_data[<student_id>][posted_grade]",
                  "value": "",
                  "description": "See documentation for the posted_grade argument in the Submissions Update documentation",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][excuse]",
                  "value": "",
                  "description": "See documentation for the excuse argument in the Submissions Update documentation",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][text_comment]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][group_comment]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][media_comment_id]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][media_comment_type]",
                  "value": "",
                  "description": "no descriptionAllowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "grade_data[<student_id>][file_ids][]",
                  "value": "",
                  "description": "See documentation for the comment[] arguments in the Submissions Update documentation",
                  "disabled": true
                },
                {
                  "key": "grade_data[<assignment_id>][<student_id>]",
                  "value": "",
                  "description": "Specifies which assignment to grade. This argument is not necessary when using the assignment-specific endpoints.",
                  "disabled": true
                }
              ]
            },
            "description": "Update the grading and comments on multiple student’s assignment submissions in an asynchronous job. The user must have permission to manage grades in the appropriate context (course or section).\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/update_grades`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "grade_data[<student_id>][rubric_assessment]",
                  "value": "",
                  "description": "See documentation for the rubric_assessment argument in the Submissions Update documentation",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Sections Update_Grades",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/submissions/update_grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "submissions",
                "update_grades"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:POST|/api/v1/sections/:section_id/submissions/update_grades`"
          }
        },
        {
          "name": "Put Courses Anonymous_Submissions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "anonymous_submissions",
                ":anonymous_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "anonymous_id",
                  "value": "<anonymous_id>",
                  "description": "The anonymous_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id`"
          }
        },
        {
          "name": "Put Courses Submissions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "document_annotations",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read/:item",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read",
                ":item"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "item",
                  "value": "<item>",
                  "description": "The item identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read/:item`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_assessments",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read`"
          }
        },
        {
          "name": "Put Courses Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_comments",
                "read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read`"
          }
        },
        {
          "name": "Put Courses Clear_Unread",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/submissions/:user_id/clear_unread",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "submissions",
                ":user_id",
                "clear_unread"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/submissions/:user_id/clear_unread`"
          }
        },
        {
          "name": "Put Courses Bulk_Mark_Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/submissions/bulk_mark_read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "submissions",
                "bulk_mark_read"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/submissions/bulk_mark_read`"
          }
        },
        {
          "name": "Put Sections Anonymous_Submissions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "anonymous_submissions",
                ":anonymous_id"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "anonymous_id",
                  "value": "<anonymous_id>",
                  "description": "The anonymous_id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment[text_comment]",
                  "value": "",
                  "description": "Add a textual comment to the submission.",
                  "disabled": true
                },
                {
                  "key": "comment[group_comment]",
                  "value": "",
                  "description": "Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.",
                  "disabled": true
                },
                {
                  "key": "comment[media_comment_id]",
                  "value": "",
                  "description": "Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.",
                  "disabled": true
                },
                {
                  "key": "comment[media_comment_type]",
                  "value": "",
                  "description": "The type of media comment being added.Allowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "comment[file_ids][]",
                  "value": "",
                  "description": "Attach files to this comment that were previously uploaded using the Submission Comment API’s files action",
                  "disabled": true
                },
                {
                  "key": "include[visibility]",
                  "value": "",
                  "description": "Whether this assignment is visible to the owner of the submission",
                  "disabled": true
                },
                {
                  "key": "submission[posted_grade]",
                  "value": "",
                  "description": "Assign a score to the submission, updating both the “score” and “grade” fields on the submission record. This parameter can be passed in a few different formats:pointsA floating point or integral value, such as “13.5”. The gradewill be interpreted directly as the score of the assignment.\nValues above assignment.points_possible are allowed, for awarding\nextra credit.\npercentageA floating point value appended with a percent sign, such as\"40%\". The grade will be interpreted as a percentage score on the\nassignment, where 100% == assignment.points_possible. Values above 100%\nare allowed, for awarding extra credit.\nletter gradeA letter grade, following the assignment’s defined lettergrading scheme. For example, \"A-\". The resulting score will be the high\nend of the defined range for the letter grade. For instance, if \"B\" is\ndefined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\nletter grade will be rejected if the assignment does not have a defined\nletter grading scheme. For more fine-grained control of scores, pass in\npoints or percentage rather than the letter grade.\n“pass/complete/fail/incomplete”A string value of “pass” or “complete”will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n0.\nNote that assignments with grading_type of “pass_fail” can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the “points” or “percentage” format is sent, the grade will only be accepted if the grade equals one of those two values.",
                  "disabled": true
                },
                {
                  "key": "submission[excuse]",
                  "value": "",
                  "description": "Sets the “excused” status of an assignment.",
                  "disabled": true
                },
                {
                  "key": "submission[late_policy_status]",
                  "value": "",
                  "description": "Sets the late policy status to either “late”, “missing”, “extended”, “none”, or null.NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                  "disabled": true
                },
                {
                  "key": "submission[seconds_late_override]",
                  "value": "",
                  "description": "Sets the seconds late if late policy status is “late”",
                  "disabled": true
                }
              ]
            },
            "description": "Comment on and/or update the grading for a student’s assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric\\_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric_assessment",
                  "value": "",
                  "description": "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:The points awarded for this row.rubric_assessment[criterion_id][points]\nThe rating id for the row.rubric_assessment[criterion_id][rating_id]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor example, if the assignment rubric is (in JSON format):[\n  {\n    'id': 'crit1',\n    'points': 10,\n    'description': 'Criterion 1',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n      { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n    ]\n  },\n  {\n    'id': 'crit2',\n    'points': 5,\n    'description': 'Criterion 2',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n      { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n      { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n    ]\n  }\n]\nThen a possible set of values for rubric_assessment would be:rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Sections Submissions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "comment[text_comment]",
                  "value": "",
                  "description": "Add a textual comment to the submission.",
                  "disabled": true
                },
                {
                  "key": "comment[attempt]",
                  "value": "",
                  "description": "The attempt number (starts at 1) to associate the comment with.",
                  "disabled": true
                },
                {
                  "key": "comment[group_comment]",
                  "value": "",
                  "description": "Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.",
                  "disabled": true
                },
                {
                  "key": "comment[media_comment_id]",
                  "value": "",
                  "description": "Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.",
                  "disabled": true
                },
                {
                  "key": "comment[media_comment_type]",
                  "value": "",
                  "description": "The type of media comment being added.Allowed values: audio, video",
                  "disabled": true
                },
                {
                  "key": "comment[file_ids][]",
                  "value": "",
                  "description": "Attach files to this comment that were previously uploaded using the Submission Comment API’s files action",
                  "disabled": true
                },
                {
                  "key": "include[visibility]",
                  "value": "",
                  "description": "Whether this assignment is visible to the owner of the submission",
                  "disabled": true
                },
                {
                  "key": "prefer_points_over_scheme",
                  "value": "",
                  "description": "Treat posted_grade as points if the value matches a grading scheme value",
                  "disabled": true
                },
                {
                  "key": "submission[posted_grade]",
                  "value": "",
                  "description": "Assign a score to the submission, updating both the “score” and “grade” fields on the submission record. This parameter can be passed in a few different formats:pointsA floating point or integral value, such as “13.5”. The gradewill be interpreted directly as the score of the assignment.\nValues above assignment.points_possible are allowed, for awarding\nextra credit.\npercentageA floating point value appended with a percent sign, such as\"40%\". The grade will be interpreted as a percentage score on the\nassignment, where 100% == assignment.points_possible. Values above 100%\nare allowed, for awarding extra credit.\nletter gradeA letter grade, following the assignment’s defined lettergrading scheme. For example, \"A-\". The resulting score will be the high\nend of the defined range for the letter grade. For instance, if \"B\" is\ndefined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\nletter grade will be rejected if the assignment does not have a defined\nletter grading scheme. For more fine-grained control of scores, pass in\npoints or percentage rather than the letter grade.\n“pass/complete/fail/incomplete”A string value of “pass” or “complete”will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n0.\nNote that assignments with grading_type of “pass_fail” can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the “points” or “percentage” format is sent, the grade will only be accepted if the grade equals one of those two values.",
                  "disabled": true
                },
                {
                  "key": "submission[excuse]",
                  "value": "",
                  "description": "Sets the “excused” status of an assignment.",
                  "disabled": true
                },
                {
                  "key": "submission[late_policy_status]",
                  "value": "",
                  "description": "Sets the late policy status to either “late”, “missing”, “extended”, “none”, or null.NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on",
                  "disabled": true
                },
                {
                  "key": "submission[sticker]",
                  "value": "",
                  "description": "Sets the sticker for the submission.Allowed values: apple, basketball, bell, book, bookbag, briefcase, bus, calendar, chem, design, pencil, beaker, paintbrush, computer, column, pen, tablet, telescope, calculator, paperclip, composite_notebook, scissors, ruler, clock, globe, grad, gym, mail, microscope, mouse, music, notebook, page, panda1, panda2, panda3, panda4, panda5, panda6, panda7, panda8, panda9, presentation, science, science2, star, tag, tape, target, trophy",
                  "disabled": true
                },
                {
                  "key": "submission[seconds_late_override]",
                  "value": "",
                  "description": "Sets the seconds late if late policy status is “late”",
                  "disabled": true
                }
              ]
            },
            "description": "Comment on and/or update the grading for a student’s assignment submission. If any submission or rubric\\_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "rubric_assessment",
                  "value": "",
                  "description": "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:The points awarded for this row.rubric_assessment[criterion_id][points]\nThe rating id for the row.rubric_assessment[criterion_id][rating_id]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor example, if the assignment rubric is (in JSON format):[\n  {\n    'id': 'crit1',\n    'points': 10,\n    'description': 'Criterion 1',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n      { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n    ]\n  },\n  {\n    'id': 'crit2',\n    'points': 5,\n    'description': 'Criterion 2',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n      { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n      { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n    ]\n  }\n]\nThen a possible set of values for rubric_assessment would be:rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Sections Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "document_annotations",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint. NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read`"
          }
        },
        {
          "name": "Put Sections Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read`"
          }
        },
        {
          "name": "Put Sections Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read/:item",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "read",
                ":item"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "item",
                  "value": "<item>",
                  "description": "The item identifier"
                }
              ]
            },
            "description": "No request fields are necessary. A submission item can be “grade”, “comment” or “rubric” On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read/:item`"
          }
        },
        {
          "name": "Put Sections Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_assessments",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint. NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read`"
          }
        },
        {
          "name": "Put Sections Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "assignments",
                ":assignment_id",
                "submissions",
                ":user_id",
                "rubric_comments",
                "read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "assignment_id",
                  "value": "<assignment_id>",
                  "description": "The assignment_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read`"
          }
        },
        {
          "name": "Put Sections Clear_Unread",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/submissions/:user_id/clear_unread",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "submissions",
                ":user_id",
                "clear_unread"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                },
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Site-admin-only endpoint. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/submissions/:user_id/clear_unread`"
          }
        },
        {
          "name": "Put Sections Bulk_Mark_Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/sections/:section_id/submissions/bulk_mark_read",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "sections",
                ":section_id",
                "submissions",
                "bulk_mark_read"
              ],
              "variable": [
                {
                  "key": "section_id",
                  "value": "<section_id>",
                  "description": "The section_id identifier"
                }
              ],
              "query": [
                {
                  "key": "submissionIds[]",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Accepts a string array of submission ids. Loops through and marks each submission as read On success, the response will be 204 No Content with an empty body.\n\n**OAuth Scope:** `url:PUT|/api/v1/sections/:section_id/submissions/bulk_mark_read`"
          }
        }
      ]
    },
    {
      "name": "Tabs",
      "description": "",
      "item": [
        {
          "name": "Get Accounts Tabs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/tabs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "tabs"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/tabs`"
          }
        },
        {
          "name": "Get Courses Tabs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/tabs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "tabs"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/tabs`"
          }
        },
        {
          "name": "Get Groups Tabs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/groups/:group_id/tabs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "groups",
                ":group_id",
                "tabs"
              ],
              "variable": [
                {
                  "key": "group_id",
                  "value": "<group_id>",
                  "description": "The group_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/groups/:group_id/tabs`"
          }
        },
        {
          "name": "Get Users Tabs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/tabs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "tabs"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“course_subject_tabs”: Optional flag to return the tabs associated with a canvas_for_elementary subject course’s home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context in a canvas_for_elementary-enabled account or sub-account.Allowed values: course_subject_tabs",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of navigation tabs available in the current context.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/tabs`"
          }
        },
        {
          "name": "Put Courses Tabs",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/tabs/:tab_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "tabs",
                ":tab_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "tab_id",
                  "value": "<tab_id>",
                  "description": "The tab_id identifier"
                }
              ],
              "query": [
                {
                  "key": "position",
                  "value": "",
                  "description": "The new position of the tab, 1-based",
                  "disabled": true
                },
                {
                  "key": "hidden",
                  "value": "",
                  "description": "no description",
                  "disabled": true
                }
              ]
            },
            "description": "Home and Settings tabs are not manageable, and can’t be hidden or moved Returns a tab object\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/tabs/:tab_id`"
          }
        }
      ]
    },
    {
      "name": "Temporary Enrollment Pairings",
      "description": "",
      "item": [
        {
          "name": "Delete Accounts Temporary_Enrollment_Pairings",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "temporary_enrollment_pairings",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Delete a temporary enrollment pairing Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object.\n\n**OAuth Scope:** `url:DELETE|/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id`"
          }
        },
        {
          "name": "Get Accounts Temporary_Enrollment_Pairings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/temporary_enrollment_pairings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "temporary_enrollment_pairings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Returns the list of temporary enrollment pairings for a root account. Returns a list of [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) objects. ### [Get a single temporary enrollment pairing](#method.temporary_enrollment_pairings_api.show) <a href=\"#method.temporary_enrollment_pairings_api.show\" id=\"method.temporary_enrollment_pairings_api.show\"></a> [TemporaryEnrollmentPairingsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings`"
          }
        },
        {
          "name": "Get Accounts Temporary_Enrollment_Pairings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "temporary_enrollment_pairings",
                ":id"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns the temporary enrollment pairing with the given id. Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object. ### [New TemporaryEnrollmentPairing](#method.temporary_enrollment_pairings_api.new) <a href=\"#method.temporary_enrollment_pairings_api.new\" id=\"method.temporary_enrollment_pairings_api.new\"></a> [TemporaryEnrollmentPairingsApiController#new](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id`"
          }
        },
        {
          "name": "Get Accounts New",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/temporary_enrollment_pairings/new",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "temporary_enrollment_pairings",
                "new"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ]
            },
            "description": "Initialize an unsaved Temporary Enrollment Pairing. Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object. ### [Create Temporary Enrollment Pairing](#method.temporary_enrollment_pairings_api.create) <a href=\"#method.temporary_enrollment_pairings_api.create\" id=\"method.temporary_enrollment_pairings_api.create\"></a> [TemporaryEnrollmentPairingsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings/new`"
          }
        },
        {
          "name": "Post Accounts Temporary_Enrollment_Pairings",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/temporary_enrollment_pairings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "temporary_enrollment_pairings"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "workflow_state",
                  "value": "",
                  "description": "The workflow state of the temporary enrollment pairing.",
                  "disabled": true
                },
                {
                  "key": "ending_enrollment_state",
                  "value": "",
                  "description": "The ending enrollment state to be given to each associated enrollment when the enrollment period has been reached. Defaults to “deleted” if no value is given. Accepted values are “deleted”, “completed”, and “inactive”.Allowed values: deleted, completed, inactive",
                  "disabled": true
                }
              ]
            },
            "description": "Create a Temporary Enrollment Pairing.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/temporary_enrollment_pairings`"
          }
        }
      ]
    },
    {
      "name": "User Observees",
      "description": "API for managing linked observers and observees",
      "item": [
        {
          "name": "Delete Users Observees",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observees/:observee_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observees",
                ":observee_id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "observee_id",
                  "value": "<observee_id>",
                  "description": "The observee_id identifier"
                }
              ],
              "query": [
                {
                  "key": "root_account_id",
                  "value": "",
                  "description": "If specified, only removes the link for the given root account",
                  "disabled": true
                }
              ]
            },
            "description": "Unregisters a user as being observed by the given user.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/observees/:observee_id`"
          }
        },
        {
          "name": "Get Users Observees",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observees",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observees"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“avatar_url”: Optionally include avatar_url.Allowed values: avatar_url",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of users that the given user is observing. This endpoint returns users linked to the observer at the account level (such that the observer is automatically enrolled in observees’ courses); it doesn’t return one-off observer enrollments from individual courses.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/observees`"
          }
        },
        {
          "name": "Get Users Observees",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observees/:observee_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observees",
                ":observee_id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "observee_id",
                  "value": "<observee_id>",
                  "description": "The observee_id identifier"
                }
              ]
            },
            "description": "Gets information about an observed user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/observees/:observee_id`"
          }
        },
        {
          "name": "Get Users Observers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observers"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“avatar_url”: Optionally include avatar_url.Allowed values: avatar_url",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of observers linked to a given user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/observers`"
          }
        },
        {
          "name": "Get Users Observers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observers/:observer_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observers",
                ":observer_id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "observer_id",
                  "value": "<observer_id>",
                  "description": "The observer_id identifier"
                }
              ]
            },
            "description": "Gets information about an observer.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/observers/:observer_id`"
          }
        },
        {
          "name": "Post Users Observees",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observees",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observees"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "observee[unique_id]",
                  "value": "",
                  "description": "The login id for the user to observe. Required if access_token is omitted.",
                  "disabled": false
                },
                {
                  "key": "observee[password]",
                  "value": "",
                  "description": "The password for the user to observe. Required if access_token is omitted.",
                  "disabled": false
                },
                {
                  "key": "access_token",
                  "value": "",
                  "description": "The access token for the user to observe. Required if observee[unique_id] or observee[password] are omitted.",
                  "disabled": false
                },
                {
                  "key": "pairing_code",
                  "value": "",
                  "description": "A generated pairing code for the user to observe. Required if the Observer pairing code feature flag is enabled",
                  "disabled": false
                },
                {
                  "key": "root_account_id",
                  "value": "",
                  "description": "The ID for the root account to associate with the observation link. Defaults to the current domain account. If ‘all’ is specified, a link will be created for each root account associated to both the observer and observee.",
                  "disabled": true
                }
              ]
            },
            "description": "Register the given user to observe another user, given the observee’s credentials.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/observees`"
          }
        },
        {
          "name": "Post Users Observer_Pairing_Codes",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observer_pairing_codes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observer_pairing_codes"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "If the user is a student, will generate a code to be used with self registration or observees APIs to link another user to this student. Returns a [PairingCode](#pairingcode) object.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/observer_pairing_codes`"
          }
        },
        {
          "name": "Put Users Observees",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/observees/:observee_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "observees",
                ":observee_id"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                },
                {
                  "key": "observee_id",
                  "value": "<observee_id>",
                  "description": "The observee_id identifier"
                }
              ],
              "query": [
                {
                  "key": "root_account_id",
                  "value": "",
                  "description": "The ID for the root account to associate with the observation link. If not specified, a link will be created for each root account associated to both the observer and observee.",
                  "disabled": true
                }
              ]
            },
            "description": "Registers a user as being observed by the given user.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/observees/:observee_id`"
          }
        }
      ]
    },
    {
      "name": "Users",
      "description": "API for accessing information on the current and other users. Throughout this API, the `:user_id` parameter can be replaced with `self` as a shortcut for the id of the user accessing the API. For instance, `users/:user_id/page_views` can be accessed as `users/self/page_views` to access the current user's page views. API for manipulating course nicknames Course nicknames are alternate names for courses that are unique to each user. They are useful when the course's name is too long or less meaningful. If a user defines a nickname for a course, that name will be returned by the API in place of the course's actual name.",
      "item": [
        {
          "name": "Delete Users Mobile_Sessions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/mobile_sessions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "mobile_sessions"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Permanently expires any active mobile sessions, forcing them to re-authorize. The route that takes a user id will expire mobile sessions for that user. The route that doesn’t take a user id will expire mobile sessions for **all** users in the institution. ### [Merge user into another user](#method.users.merge_into) <a href=\"#method.users.merge_into\" id=\"method.users.merge_into\"></a> [UsersController#merge\\_into](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:id/mobile_sessions`"
          }
        },
        {
          "name": "Delete Users Sessions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/sessions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "sessions"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Terminates all sessions for a user. This includes all browser-based sessions and all access tokens, including manually generated ones. The user can immediately re-authenticate to access Canvas again if they have the current credentials. All integrations will need to be re-authorized. ### [Log users out of all mobile apps](#method.users.expire_mobile_sessions) <a href=\"#method.users.expire_mobile_sessions\" id=\"method.users.expire_mobile_sessions\"></a> [UsersController#expire\\_mobile\\_sessions](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:id/sessions`"
          }
        },
        {
          "name": "Delete Users *Scope)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/custom_data(/*scope)",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "custom_data(",
                "*scope)"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "ns",
                  "value": "",
                  "description": "The namespace from which to delete the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.",
                  "disabled": true
                }
              ]
            },
            "description": "Delete custom user data. Arbitrary JSON data can be stored for a User. This API call deletes that data for a given scope. Without a scope, all custom\\_data is deleted. See [Store Custom Data](#method.users.set_custom_data) for details and examples of storage and retrieval. As an example, we’ll store some data, then delete a subset of it. Example [PUT](#method.users.set_custom_data) with valid JSON data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data[fruit][apple]=so tasty' \\ -F 'data[fruit][kiwi]=a bit sour' \\ -F 'data[veggies][root][onion]=tear-jerking' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\", \"kiwi\": \"a bit sour\" }, \"veggies\": { \"root\": { \"onion\": \"tear-jerking\" } } } } ``` Example DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \\ -X DELETE \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"a bit sour\" } ``` Example [GET](#method.users.get_custom_data) following the above DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\" }, \"veggies\": { \"root\": { \"onion\": \"tear-jerking\" } } } } ``` Note that hashes left empty after a DELETE will get removed from the custom\\_data store. For example, following the previous commands, if we delete /custom\\_data/veggies/root/onion, then the entire /custom\\_data/veggies scope will be removed. Example DELETE that empties a parent scope: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \\ -X DELETE \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"tear-jerking\" } ``` Example [GET](#method.users.get_custom_data) following the above DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\" } } } ``` On success, this endpoint returns an object containing the data that was deleted. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the specified scope does not contain any data.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/:user_id/custom_data(/*scope)`"
          }
        },
        {
          "name": "Delete Users Mobile_Sessions",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/mobile_sessions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "mobile_sessions"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/mobile_sessions`"
          }
        },
        {
          "name": "Delete Users Activity_Stream",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/activity_stream",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "activity_stream"
              ]
            },
            "description": "Hide all stream items for the user\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/activity_stream`"
          }
        },
        {
          "name": "Delete Users Activity_Stream",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/activity_stream/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "activity_stream",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Hide the given stream item.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/activity_stream/:id`"
          }
        },
        {
          "name": "Delete Users Course_Nicknames",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/course_nicknames",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "course_nicknames"
              ]
            },
            "description": "Remove all stored course nicknames.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/course_nicknames`"
          }
        },
        {
          "name": "Delete Users Course_Nicknames",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/course_nicknames/:course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "course_nicknames",
                ":course_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Remove the nickname for the given course. Subsequent course API calls will return the actual name for the course.\n\n**OAuth Scope:** `url:DELETE|/api/v1/users/self/course_nicknames/:course_id`"
          }
        },
        {
          "name": "Get Accounts Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "search_term",
                  "value": "",
                  "description": "The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.Note that the API will prefer matching on canonical user ID if the ID has a numeric form. It will only search against other fields if non-numeric in form, or if the numeric value doesn’t yield any matches. Queries by administrative users will search on SIS ID, Integration ID, login ID, name, or email address",
                  "disabled": true
                },
                {
                  "key": "enrollment_type",
                  "value": "",
                  "description": "When set, only return users enrolled with the specified course-level base role. This can be a base role type of ‘student’, ‘teacher’, ‘ta’, ‘observer’, or ‘designer’.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "",
                  "description": "The column to sort results by. For efficiency, use id if you intend to retrieve many pages of results. In the future, other sort options may be rate-limited after 50 pages.Allowed values: username, email, sis_id, integration_id, last_login, id",
                  "disabled": true
                },
                {
                  "key": "order",
                  "value": "",
                  "description": "The order to sort the given column by.Allowed values: asc, desc",
                  "disabled": true
                },
                {
                  "key": "include_deleted_users",
                  "value": "",
                  "description": "When set to true and used with an account context, returns users who have deleted pseudonyms for the context",
                  "disabled": true
                },
                {
                  "key": "uuids",
                  "value": "",
                  "description": "When set, only return users with the specified UUIDs. UUIDs after the first 100 are ignored.",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of users associated with this account. ``` @example_request curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \\ -X GET \\ -H 'Authorization: Bearer <token>' ```\n\n**OAuth Scope:** `url:GET|/api/v1/accounts/:account_id/users`"
          }
        },
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Array of additional information to include on the user record. “locale”, “avatar_url”, “permissions”, “email”, and “effective_locale” will always be returnedAllowed values: uuid, last_login",
                  "disabled": true
                }
              ]
            },
            "description": "Shows details for user. Also includes an attribute “permissions”, a non-comprehensive list of permissions for the user. Example: ``` \"permissions\": { \"can_update_name\": true, // Whether the user can update their name. \"can_update_avatar\": false, // Whether the user can update their avatar. \"limit_parent_app_web_access\": false // Whether the user can interact with Canvas web from the Canvas Parent app. } ```\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id`"
          }
        },
        {
          "name": "Get Users Colors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/colors",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "colors"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns all custom colors that have been saved for a user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id/colors`"
          }
        },
        {
          "name": "Get Users Colors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/colors/:asset_string",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "colors",
                ":asset_string"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "asset_string",
                  "value": "<asset_string>",
                  "description": "The asset_string identifier"
                }
              ]
            },
            "description": "Returns the custom colors that have been saved for a user for a given context. The asset\\_string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id/colors/:asset_string`"
          }
        },
        {
          "name": "Get Users Dashboard_Positions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/dashboard_positions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "dashboard_positions"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Returns all dashboard positions that have been saved for a user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id/dashboard_positions`"
          }
        },
        {
          "name": "Get Users Graded_Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/graded_submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "graded_submissions"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "Associations to include with the groupAllowed values: assignment",
                  "disabled": true
                },
                {
                  "key": "only_current_enrollments",
                  "value": "",
                  "description": "Returns submissions for only currently active enrollments",
                  "disabled": true
                },
                {
                  "key": "only_published_assignments",
                  "value": "",
                  "description": "Returns submissions for only published assignments",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of the user’s most recently graded submissions.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id/graded_submissions`"
          }
        },
        {
          "name": "Get Users Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "settings"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/:id/settings`"
          }
        },
        {
          "name": "Get Users Avatars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/avatars",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "avatars"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the ‘type’ field is ‘attachment’, the record will include all the normal attachment json fields; otherwise it will include only the ‘url’ and ‘display\\_name’ fields. Additionally, all records will include a ‘type’ field and a ‘token’ field. The following explains each field in more detail *   type “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. *   “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. *   “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. url The url of the avatar token A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client. display\\_name A textual description of the avatar record id *   ‘attachment’ type only the internal id of the attachment content-type *   ‘attachment’ type only the content-type of the attachment filename *   ‘attachment’ type only the filename of the attachment size *   ‘attachment’ type only the size of the attachment\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/avatars`"
          }
        },
        {
          "name": "Get Users *Scope)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/custom_data(/*scope)",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "custom_data(",
                "*scope)"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "ns",
                  "value": "",
                  "description": "The namespace from which to retrieve the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.",
                  "disabled": true
                }
              ]
            },
            "description": "Load custom user data. Arbitrary JSON data can be stored for a User. This API call retrieves that data for a (optional) given scope. See [Store Custom Data](#method.users.set_custom_data) for details and examples. On success, this endpoint returns an object containing the data that was requested. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the specified scope does not contain any data.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/custom_data(/*scope)`"
          }
        },
        {
          "name": "Get Users Missing_Submissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/missing_submissions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "missing_submissions"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "",
                  "description": "the student’s ID",
                  "disabled": true
                },
                {
                  "key": "observed_user_id",
                  "value": "",
                  "description": "Return missing submissions for the given observed user. Must be accompanied by course_ids[]. The user making the request must be observing the observed user in all the courses specified by course_ids[].",
                  "disabled": true
                },
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“planner_overrides”Optionally include the assignment’s associated planner override, if it exists, for the current user. These will be returned under a planner_override key“course”Optionally include the assignments’ coursesAllowed values: planner_overrides, course",
                  "disabled": true
                },
                {
                  "key": "filter[]",
                  "value": "",
                  "description": "“submittable”Only return assignments that the current user can submit (i.e. filter out locked assignments)“current_grading_period”Only return missing assignments that are in the current grading periodAllowed values: submittable, current_grading_period",
                  "disabled": true
                },
                {
                  "key": "course_ids[]",
                  "value": "",
                  "description": "Optionally restricts the list of past-due assignments to only those associated with the specified course IDs. Required if observed_user_id is passed.",
                  "disabled": false
                }
              ]
            },
            "description": "A paginated list of past-due assignments for which the student does not have a submission. The user sending the request must either be the student, an admin or a parent observer using the parent app\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/missing_submissions`"
          }
        },
        {
          "name": "Get Users Page_Views",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/page_views",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "page_views"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "",
                  "description": "The beginning of the time range from which you want page views.",
                  "disabled": true
                },
                {
                  "key": "end_time",
                  "value": "",
                  "description": "The end of the time range from which you want page views.",
                  "disabled": true
                }
              ]
            },
            "description": "Return a paginated list of the user’s page view history in json format, similar to the available CSV download. Page views are returned in descending order, newest to oldest.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/page_views`"
          }
        },
        {
          "name": "Get Users Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/profile",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "profile"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Returns user profile data, including user id, name, and profile pic. When requesting the profile for the user accessing the API, the user’s calendar feed URL and LTI user id will be returned as well. Returns a [Profile](#profile) object. ### [List avatar options](#method.profile.profile_pics) <a href=\"#method.profile.profile_pics\" id=\"method.profile.profile_pics\"></a> [ProfileController#profile\\_pics](https://github.com/instructure/canvas-lms/blob/master/app/controllers/profile_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/profile`"
          }
        },
        {
          "name": "Get Users Activity_Stream",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/activity_stream",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "activity_stream"
              ],
              "query": [
                {
                  "key": "only_active_courses",
                  "value": "",
                  "description": "If true, will only return objects for courses the user is actively participating in",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the current user’s global activity stream, paginated. There are many types of objects that can be returned in the activity stream. All object types have the same basic set of shared attributes: ``` { 'created_at': '2011-07-13T09:12:00Z', 'updated_at': '2011-07-25T08:52:41Z', 'id': 1234, 'title': 'Stream Item Subject', 'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.', 'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...', 'read_state': false, 'context_type': 'course', // course|group 'course_id': 1, 'group_id': null, 'html_url': \"http://...\" // URL to the Canvas web UI for this stream item } ``` In addition, each item type has its own set of attributes available. DiscussionTopic: ``` { 'type': 'DiscussionTopic', 'discussion_topic_id': 1234, 'total_root_discussion_entries': 5, 'require_initial_post': true, 'user_has_posted': true, 'root_discussion_entries': { ... } } ``` For DiscussionTopic, the message is truncated at 4kb. Announcement: ``` { 'type': 'Announcement', 'announcement_id': 1234, 'total_root_discussion_entries': 5, 'require_initial_post': true, 'user_has_posted': null, 'root_discussion_entries': { ... } } ``` For Announcement, the message is truncated at 4kb. Conversation: ``` { 'type': 'Conversation', 'conversation_id': 1234, 'private': false, 'participant_count': 3, } ``` Message: ``` { 'type': 'Message', 'message_id': 1234, 'notification_category': 'Assignment Graded' } ``` Submission: Returns an [Submission](../submissions#Submission) with its Course and Assignment data. Conference: ``` { 'type': 'Conference', 'web_conference_id': 1234 } ``` Collaboration: ``` { 'type': 'Collaboration', 'collaboration_id': 1234 } ``` AssessmentRequest: ``` { 'type': 'AssessmentRequest', 'assessment_request_id': 1234 } ```\n\n**OAuth Scope:** `url:GET|/api/v1/users/activity_stream`"
          }
        },
        {
          "name": "Get Users Activity_Stream",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/activity_stream",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "activity_stream"
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/activity_stream`"
          }
        },
        {
          "name": "Get Users Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/activity_stream/summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "activity_stream",
                "summary"
              ],
              "query": [
                {
                  "key": "only_active_courses",
                  "value": "",
                  "description": "If true, will only return objects for courses the user is actively participating in",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a summary of the current user’s global activity stream.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/activity_stream/summary`"
          }
        },
        {
          "name": "Get Users Course_Nicknames",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/course_nicknames",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "course_nicknames"
              ]
            },
            "description": "Returns all course nicknames you have set.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/course_nicknames`"
          }
        },
        {
          "name": "Get Users Course_Nicknames",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/course_nicknames/:course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "course_nicknames",
                ":course_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Returns the nickname for a specific course.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/course_nicknames/:course_id`"
          }
        },
        {
          "name": "Get Users Todo",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/todo",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "todo"
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“ungraded_quizzes”Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list. These will be returned under a quiz key instead of an assignment key in response elements.Allowed values: ungraded_quizzes",
                  "disabled": true
                }
              ]
            },
            "description": "A paginated list of the current user’s list of todo items. There is a limit to the number of items returned. The ‘ignore\\` and \\`ignore\\_permanently\\` URLs can be used to update the user’s preferences on what items will be displayed. Performing a DELETE request against the ‘ignore\\` URL will hide that item from future todo item requests, until the item changes. Performing a DELETE request against the \\`ignore\\_permanently\\` URL will hide that item forever.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/todo`"
          }
        },
        {
          "name": "Get Users Todo_Item_Count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/todo_item_count",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "todo_item_count"
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "“ungraded_quizzes”Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list. These will be returned under a quiz key instead of an assignment key in response elements.Allowed values: ungraded_quizzes",
                  "disabled": true
                }
              ]
            },
            "description": "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting. There is a limit to the number of todo items this endpoint will count. It will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable. The largest reliable number for both counts is 100.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/todo_item_count`"
          }
        },
        {
          "name": "Get Users Upcoming_Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/upcoming_events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "upcoming_events"
              ]
            },
            "description": "A paginated list of the current user’s upcoming events.\n\n**OAuth Scope:** `url:GET|/api/v1/users/self/upcoming_events`"
          }
        },
        {
          "name": "Post Accounts Self_Registration",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/self_registration",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "self_registration"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user[short_name]",
                  "value": "",
                  "description": "User’s name as it will be displayed in discussions, messages, and comments.",
                  "disabled": true
                },
                {
                  "key": "user[sortable_name]",
                  "value": "",
                  "description": "User’s name as used to sort alphabetically in lists.",
                  "disabled": true
                },
                {
                  "key": "user[time_zone]",
                  "value": "",
                  "description": "The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "user[locale]",
                  "value": "",
                  "description": "The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.",
                  "disabled": true
                },
                {
                  "key": "communication_channel[type]",
                  "value": "",
                  "description": "The communication channel type, e.g. ‘email’ or ‘sms’.",
                  "disabled": true
                },
                {
                  "key": "communication_channel[address]",
                  "value": "",
                  "description": "The communication channel address, e.g. the user’s email address.",
                  "disabled": true
                }
              ]
            },
            "description": "Self register and return a new user and pseudonym for an account. If self-registration is enabled on the account, you can use this endpoint to self register new users.\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/self_registration`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user[name]",
                  "value": "",
                  "description": "The full name of the user. This name will be used by teacher for grading.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "user[terms_of_use]",
                  "value": "",
                  "description": "Whether the user accepts the terms of use.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "pseudonym[unique_id]",
                  "value": "",
                  "description": "User’s login ID. Must be a valid email address.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Accounts Users",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/accounts/:account_id/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "accounts",
                ":account_id",
                "users"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "<account_id>",
                  "description": "The account_id identifier"
                }
              ],
              "query": [
                {
                  "key": "user[name]",
                  "value": "",
                  "description": "The full name of the user. This name will be used by teacher for grading. Required if this is a self-registration.",
                  "disabled": false
                },
                {
                  "key": "user[short_name]",
                  "value": "",
                  "description": "User’s name as it will be displayed in discussions, messages, and comments.",
                  "disabled": true
                },
                {
                  "key": "user[sortable_name]",
                  "value": "",
                  "description": "User’s name as used to sort alphabetically in lists.",
                  "disabled": true
                },
                {
                  "key": "user[time_zone]",
                  "value": "",
                  "description": "The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "user[locale]",
                  "value": "",
                  "description": "The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.",
                  "disabled": true
                },
                {
                  "key": "user[terms_of_use]",
                  "value": "",
                  "description": "Whether the user accepts the terms of use. Required if this is a self-registration and this canvas instance requires users to accept the terms (on by default).If this is true, it will mark the user as having accepted the terms of use.",
                  "disabled": false
                },
                {
                  "key": "user[skip_registration]",
                  "value": "",
                  "description": "Automatically mark the user as registered.If this is true, it is recommended to set \"pseudonym[send_confirmation]\" to true as well. Otherwise, the user will not receive any messages about their account creation.The users communication channel confirmation can be skipped by setting \"communication_channel[skip_confirmation]\" to true as well.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[password]",
                  "value": "",
                  "description": "User’s password. Cannot be set during self-registration.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[sis_user_id]",
                  "value": "",
                  "description": "SIS ID for the user’s account. To set this parameter, the caller must be able to manage SIS permissions.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[integration_id]",
                  "value": "",
                  "description": "Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions. The Integration ID is a secondary identifier useful for more complex SIS integrations.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[send_confirmation]",
                  "value": "",
                  "description": "Send user notification of account creation if true. Automatically set to true during self-registration.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[force_self_registration]",
                  "value": "",
                  "description": "Send user a self-registration style email if true. Setting it means the users will get a notification asking them to “complete the registration process” by clicking it, setting a password, and letting them in. Will only be executed on if the user does not need admin approval. Defaults to false unless explicitly provided.",
                  "disabled": true
                },
                {
                  "key": "pseudonym[authentication_provider_id]",
                  "value": "",
                  "description": "The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider).",
                  "disabled": true
                },
                {
                  "key": "communication_channel[type]",
                  "value": "",
                  "description": "The communication channel type, e.g. ‘email’ or ‘sms’.",
                  "disabled": true
                },
                {
                  "key": "communication_channel[address]",
                  "value": "",
                  "description": "The communication channel address, e.g. the user’s email address.",
                  "disabled": true
                },
                {
                  "key": "communication_channel[confirmation_url]",
                  "value": "",
                  "description": "Only valid for account admins. If true, returns the new user account confirmation URL in the response.",
                  "disabled": true
                },
                {
                  "key": "communication_channel[skip_confirmation]",
                  "value": "",
                  "description": "Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.If this is true, it is recommended to set \"pseudonym[send_confirmation]\" to true as well. Otherwise, the user will not receive any messages about their account creation.",
                  "disabled": true
                },
                {
                  "key": "force_validations",
                  "value": "",
                  "description": "If true, validations are performed on the newly created user (and their associated pseudonym) even if the request is made by a privileged user like an admin. When set to false, or not included in the request parameters, any newly created users are subject to validations unless the request is made by a user with a ‘manage_user_logins’ right. In which case, certain validations such as ‘require_acceptance_of_terms’ and ‘require_presence_of_name’ are not enforced. Use this parameter to return helpful json errors while building users with an admin request.",
                  "disabled": true
                },
                {
                  "key": "enable_sis_reactivation",
                  "value": "",
                  "description": "When true, will first try to re-activate a deleted user with matching sis_user_id if possible. This is commonly done with user[skip_registration] and communication_channel[skip_confirmation] so that the default communication_channel is also restored.",
                  "disabled": true
                },
                {
                  "key": "initial_enrollment_type",
                  "value": "",
                  "description": "‘observer` if doing a self-registration with a pairing code. This allows setting the password during user creation.",
                  "disabled": true
                },
                {
                  "key": "pairing_code[code]",
                  "value": "",
                  "description": "If provided and valid, will link the new user as an observer to the student’s whose pairing code is given.",
                  "disabled": true
                }
              ]
            },
            "description": "Create and return a new user and pseudonym for an account. *   DEPRECATED (for self-registration only) If you don’t have the “Modify login details for users“ permission, but self-registration is enabled on the account, you can still use this endpoint to register new users. Certain fields will be required, and others will be ignored (see below).\n\n**OAuth Scope:** `url:POST|/api/v1/accounts/:account_id/users`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "pseudonym[unique_id]",
                  "value": "",
                  "description": "User’s login ID. If this is a self-registration, it must be a valid email address.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "destination",
                  "value": "",
                  "description": "If you’re setting the password for the newly created user, you can provide this param with a valid URL pointing into this Canvas installation, and the response will include a destination field that’s a URL that you can redirect a browser to and have the newly created user automatically logged in. The URL is only valid for a short time, and must match the domain this request is directed to, and be for a well-formed path that Canvas can recognize.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Post Users Split",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/split",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "split"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Merged users cannot be fully restored to their previous state, but this will attempt to split as much as possible to the previous state. To split a merged user, the caller must have permissions to manage all of the users logins. If there are multiple users that have been merged into one user it will split each merge into a separate user. A split can only happen within 180 days of a user merge. A user merge deletes the previous user and may be permanently deleted. In this scenario we create a new user object and proceed to move as much as possible to the new user. The user object will not have preserved the name or settings from the previous user. Some items may have been deleted during a user\\_merge that cannot be restored, and/or the data has become stale because of other changes to the objects since the time of the user\\_merge. Split users details and caveats: The from\\_user is the user that was deleted in the user\\_merge process. The destination\\_user is the user that remains, that is being split. Avatars: When both users had avatars, both will be remain. When from\\_user had an avatar and destination\\_user did not have an avatar, the destination\\_user’s avatar will be deleted if it still matches what was there are the time of the merge. If the destination\\_user’s avatar was changed at anytime after the merge, it will remain on the destination user. If the from\\_user had an avatar it will be there after split. Terms of Use: If from\\_user had not accepted terms of use, they will be prompted again to accept terms of use after the split. If the destination\\_user had not accepted terms of use, hey will be prompted again to accept terms of use after the split. If neither user had accepted the terms of use, but since the time of the merge had accepted, both will be prompted to accept terms of use. If both had accepted terms of use, this will remain. Communication Channels: All communication channels are restored to what they were prior to the merge. If a communication channel was added after the merge, it will remain on the destination\\_user. Notification preferences remain with the communication channels. Enrollments: All enrollments from the time of the merge will be moved back to where they were. Enrollments created since the time of the merge that were created by sis\\_import will go to the user that owns that sis\\_id used for the import. Other new enrollments will remain on the destination\\_user. Everything that is tied to the destination\\_user at the course level relating to an enrollment is moved to the from\\_user. When both users are in the same course prior to merge this can cause some unexpected items to move. Submissions: Unlike other items tied to a course, submissions are explicitly recorded to avoid problems with grades. All submissions were moved are restored to the spot prior to merge. All submission that were created in a course that was moved in enrollments are moved over to the from\\_user. Other notes: Access Tokens are moved back on split. Conversations are moved back on split. Favorites that existing at the time of merge are moved back on split. LTI ids are restored to how they were prior to merge.\n\n**OAuth Scope:** `url:POST|/api/v1/users/:id/split`"
          }
        },
        {
          "name": "Post Users Files",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "files"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Upload a file to the user’s personal files section. This API endpoint is the first step in uploading a file to a user’s files. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Note that typically users will only be able to upload files to their own files section. Passing a user\\_id of `self` is an easy shortcut to specify the current user. ### [Show user details](#method.users.api_show) <a href=\"#method.users.api_show\" id=\"method.users.api_show\"></a> [UsersController#api\\_show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/users/:user_id/files`"
          }
        },
        {
          "name": "Post Users Pandata_Events_Token",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/pandata_events_token",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "pandata_events_token"
              ],
              "query": [
                {
                  "key": "app_key",
                  "value": "",
                  "description": "The pandata events appKey for this mobile app",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a jwt auth and props token that can be used to send events to Pandata. NOTE: This is currently only available to the mobile developer keys.\n\n**OAuth Scope:** `url:POST|/api/v1/users/self/pandata_events_token`"
          }
        },
        {
          "name": "Update Users",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "user[name]",
                  "value": "",
                  "description": "The full name of the user. This name will be used by teacher for grading.",
                  "disabled": true
                },
                {
                  "key": "user[short_name]",
                  "value": "",
                  "description": "User’s name as it will be displayed in discussions, messages, and comments.",
                  "disabled": true
                },
                {
                  "key": "user[sortable_name]",
                  "value": "",
                  "description": "User’s name as used to sort alphabetically in lists.",
                  "disabled": true
                },
                {
                  "key": "user[time_zone]",
                  "value": "",
                  "description": "The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.",
                  "disabled": true
                },
                {
                  "key": "user[email]",
                  "value": "",
                  "description": "The default email address of the user.",
                  "disabled": true
                },
                {
                  "key": "user[locale]",
                  "value": "",
                  "description": "The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.",
                  "disabled": true
                },
                {
                  "key": "user[avatar][token]",
                  "value": "",
                  "description": "A unique representation of the avatar record to assign as the user’s current avatar. This token can be obtained from the user avatars endpoint. This supersedes the user[avatar][url] argument, and if both are included the url will be ignored. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.",
                  "disabled": true
                },
                {
                  "key": "user[avatar][url]",
                  "value": "",
                  "description": "To set the user’s avatar to point to an external url, do not include a token and instead pass the url here. Warning: For maximum compatibility, please use 128 px square images.",
                  "disabled": true
                },
                {
                  "key": "user[avatar][state]",
                  "value": "",
                  "description": "To set the state of user’s avatar. Only valid for account administrator.Allowed values: none, submitted, approved, locked, reported, re_reported",
                  "disabled": true
                },
                {
                  "key": "user[title]",
                  "value": "",
                  "description": "Sets a title on the user profile. (See Get user profile.) Profiles must be enabled on the root account.",
                  "disabled": true
                },
                {
                  "key": "user[bio]",
                  "value": "",
                  "description": "Sets a bio on the user profile. (See Get user profile.) Profiles must be enabled on the root account.",
                  "disabled": true
                },
                {
                  "key": "user[pronunciation]",
                  "value": "",
                  "description": "Sets name pronunciation on the user profile. (See Get user profile.) Profiles and name pronunciation must be enabled on the root account.",
                  "disabled": true
                },
                {
                  "key": "user[pronouns]",
                  "value": "",
                  "description": "Sets pronouns on the user profile. Passing an empty string will empty the user’s pronouns Only Available Pronouns set on the root account are allowed Adding and changing pronouns must be enabled on the root account.",
                  "disabled": true
                },
                {
                  "key": "user[event]",
                  "value": "",
                  "description": "Suspends or unsuspends all logins for this user that the calling user has permission toAllowed values: suspend, unsuspend",
                  "disabled": true
                },
                {
                  "key": "override_sis_stickiness",
                  "value": "",
                  "description": "Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness",
                  "disabled": true
                }
              ]
            },
            "description": "Modify an existing user. To modify a user’s login, see the documentation for logins.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id`"
          }
        },
        {
          "name": "Put Users Colors",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/colors/:asset_string",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "colors",
                ":asset_string"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "asset_string",
                  "value": "<asset_string>",
                  "description": "The asset_string identifier"
                }
              ],
              "query": [
                {
                  "key": "hexcode",
                  "value": "",
                  "description": "The hexcode of the color to set for the context, if you choose to pass the hexcode as a query parameter rather than in the request body you should NOT include the ‘#’ unless you escape it first.",
                  "disabled": true
                }
              ]
            },
            "description": "Updates a custom color for a user for a given context. This allows colors for the calendar and elsewhere to be customized on a user basis. The asset string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/colors/:asset_string`"
          }
        },
        {
          "name": "Put Users Dashboard_Positions",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/dashboard_positions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "dashboard_positions"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Updates the dashboard positions for a user for a given context. This allows positions for the dashboard cards and elsewhere to be customized on a per user basis. The asset string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/dashboard_positions`"
          }
        },
        {
          "name": "Put Users Files_Ui_Version_Preference",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/files_ui_version_preference",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "files_ui_version_preference"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "files_ui_version",
                  "value": "",
                  "description": "The identifier for the files UI version.Allowed values: v1, v2",
                  "disabled": true
                }
              ]
            },
            "description": "Updates a user’s default choice for files UI version. This allows the files UI to preload the user’s preference.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/files_ui_version_preference`"
          }
        },
        {
          "name": "Put Users Merge_Into",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/merge_into/:destination_user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "merge_into",
                ":destination_user_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "destination_user_id",
                  "value": "<destination_user_id>",
                  "description": "The destination_user_id identifier"
                }
              ]
            },
            "description": "\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/merge_into/:destination_user_id`"
          }
        },
        {
          "name": "Put Users Users",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/merge_into/accounts/:destination_account_id/users/:destination_user_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "merge_into",
                "accounts",
                ":destination_account_id",
                "users",
                ":destination_user_id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                },
                {
                  "key": "destination_account_id",
                  "value": "<destination_account_id>",
                  "description": "The destination_account_id identifier"
                },
                {
                  "key": "destination_user_id",
                  "value": "<destination_user_id>",
                  "description": "The destination_user_id identifier"
                }
              ]
            },
            "description": "Merge a user into another user. To merge users, the caller must have permissions to manage both users. This should be considered irreversible. This will delete the user and move all the data into the destination user. User merge details and caveats: The from\\_user is the user that was deleted in the user\\_merge process. The destination\\_user is the user that remains, that is being split. Avatars: When both users have avatars, only the destination\\_users avatar will remain. When one user has an avatar, it will end up on the destination\\_user. Terms of Use: If either user has accepted terms of use, it will be be left as accepted. Communication Channels: All unique communication channels moved to the destination\\_user. All notification preferences are moved to the destination\\_user. Enrollments: All unique enrollments are moved to the destination\\_user. When there is an enrollment that would end up making it so that a user would be observing themselves, the enrollment is not moved over. Everything that is tied to the from\\_user at the course level relating to the enrollment is also moved to the destination\\_user. Submissions: All submissions are moved to the destination\\_user. If there are enrollments for both users in the same course, we prefer submissions that have grades then submissions that have work in them, and if there are no grades or no work, they are not moved. Other notes: Access Tokens are moved on merge. Conversations are moved on merge. Favorites are moved on merge. Courses will commonly use LTI tools. LTI tools reference the user with IDs that are stored on a user object. Merging users deletes one user and moves all records from the deleted user to the destination\\_user. These IDs are kept for all enrollments, group\\_membership, and account\\_users for the from\\_user at the time of the merge. When the destination\\_user launches an LTI tool from a course that used to be the from\\_user’s, it doesn’t appear as a new user to the tool provider. Instead it will send the stored ids. The destination\\_user’s LTI IDs remain as they were for the courses that they originally had. Future enrollments for the destination\\_user will use the IDs that are on the destination\\_user object. LTI IDs that are kept and tracked per context include lti\\_context\\_id, lti\\_id and uuid. APIs that return the LTI ids will return the one for the context that it is called for, except for the user uuid. The user UUID will display the destination\\_users uuid, and when getting the uuid from an api that is in a context that was recorded from a merge event, an additional attribute is added as past\\_uuid. When finding users by SIS ids in different accounts the destination\\_account\\_id is required. The account can also be identified by passing the domain in destination\\_account\\_id.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/merge_into/accounts/:destination_account_id/users/:destination_user_id`"
          }
        },
        {
          "name": "Put Users Settings",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "settings"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "manual_mark_as_read",
                  "value": "",
                  "description": "If true, require user to manually mark discussion posts as read (don’t auto-mark as read).",
                  "disabled": true
                },
                {
                  "key": "release_notes_badge_disabled",
                  "value": "",
                  "description": "If true, hide the badge for new release notes.",
                  "disabled": true
                },
                {
                  "key": "collapse_global_nav",
                  "value": "",
                  "description": "If true, the user’s page loads with the global navigation collapsed",
                  "disabled": true
                },
                {
                  "key": "collapse_course_nav",
                  "value": "",
                  "description": "If true, the user’s course pages will load with the course navigation collapsed.",
                  "disabled": true
                },
                {
                  "key": "hide_dashcard_color_overlays",
                  "value": "",
                  "description": "If true, images on course cards will be presented without being tinted to match the course color.",
                  "disabled": true
                },
                {
                  "key": "comment_library_suggestions_enabled",
                  "value": "",
                  "description": "If true, suggestions within the comment library will be shown.",
                  "disabled": true
                },
                {
                  "key": "elementary_dashboard_disabled",
                  "value": "",
                  "description": "If true, will display the user’s preferred class Canvas dashboard view instead of the canvas for elementary view.",
                  "disabled": true
                }
              ]
            },
            "description": "Update an existing user’s settings.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/settings`"
          }
        },
        {
          "name": "Put Users Text_Editor_Preference",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:id/text_editor_preference",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":id",
                "text_editor_preference"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ],
              "query": [
                {
                  "key": "text_editor_preference",
                  "value": "",
                  "description": "The identifier for the editor.Allowed values: block_editor, rce, ``",
                  "disabled": true
                }
              ]
            },
            "description": "Updates a user’s default choice for text editor. This allows the Choose an Editor propmts to preload the user’s preference.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:id/text_editor_preference`"
          }
        },
        {
          "name": "Put Users *Scope)",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/custom_data(/*scope)",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "custom_data(",
                "*scope)"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ]
            },
            "description": "Store arbitrary user data as JSON. Arbitrary JSON data can be stored for a User. A typical scenario would be an external site/service that registers users in Canvas and wants to capture additional info about them. The part of the URL that follows `/custom_data/` defines the scope of the request, and it reflects the structure of the JSON data to be stored or retrieved. The value `self` may be used for `user_id` to store data associated with the calling user. In order to access another user’s custom data, you must be an account administrator with permission to manage users. A namespace parameter, `ns`, is used to prevent custom\\_data collisions between different apps. This parameter is required for all custom\\_data requests. A request with Content-Type multipart/form-data or Content-Type application/x-www-form-urlencoded can only be used to store strings. Example PUT with multipart/form-data data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data=555-1234' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"555-1234\" } ``` Subscopes (or, generated scopes) can also be specified by passing values to `data`\\[`subscope`]. Example PUT specifying subscopes: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data[waist]=32in' \\ -F 'data[inseam]=34in' \\ -F 'data[chest]=40in' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"chest\": \"40in\", \"waist\": \"32in\", \"inseam\": \"34in\" } } ``` Following such a request, subsets of the stored data to be retrieved directly from a subscope. Example [GET](#method.users.get_custom_data) from a generated scope ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"40in\" } ``` If you want to store more than just strings (i.e. numbers, arrays, hashes, true, false, and/or null), you must make a request with Content-Type application/json as in the following example. Example PUT with JSON data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -H 'Content-Type: application/json' \\ -X PUT \\ -d '{ \"ns\": \"com.my-organization.canvas-app\", \"data\": { \"a-number\": 6.02e23, \"a-bool\": true, \"a-string\": \"true\", \"a-hash\": {\"a\": {\"b\": \"ohai\"}}, \"an-array\": [1, \"two\", null, false] } }' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"a-number\": 6.02e+23, \"a-bool\": true, \"a-string\": \"true\", \"a-hash\": { \"a\": { \"b\": \"ohai\" } }, \"an-array\": [1, \"two\", null, false] } } ``` If the data is an Object (as it is in the above example), then subsets of the data can be accessed by including the object’s (possibly nested) keys in the scope of a GET request. Example [GET](#method.users.get_custom_data) with a generated scope: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"ohai\" } ``` On success, this endpoint returns an object containing the data that was stored. Responds with status code 200 if the scope already contained data, and it was overwritten by the data specified in the request. Responds with status code 201 if the scope was previously empty, and the data specified in the request was successfully stored there. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the `data` parameter is missing. Responds with status code 409 if the requested scope caused a conflict and data was not stored. This happens when storing data at the requested scope would cause data at an outer scope to be lost. e.g., if `/custom_data` was {“fashion\\_app”: {“hair”: “blonde”\\}}, but you tried to ‘PUT /custom\\_data/fashion\\_app/hair/style -F data=buzz\\`, then for the request to succeed,the value of `/custom_data/fashion_app/hair` would have to become a hash, and its old string value would be lost. In this situation, an error object is returned with the following format: ``` { \"message\": \"write conflict for custom_data hash\", \"conflict_scope\": \"fashion_app/hair\", \"type_at_conflict\": \"String\", \"value_at_conflict\": \"blonde\" } ```\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/custom_data(/*scope)`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "ns",
                  "value": "",
                  "description": "The namespace under which to store the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "data",
                  "value": "",
                  "description": "The data you want to store for the user, at the specified scope. If the data is composed of (possibly nested) JSON objects, scopes will be generated for the (nested) keys (see examples).",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Put Users Course_Nicknames",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/self/course_nicknames/:course_id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "self",
                "course_nicknames",
                ":course_id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Set a nickname for the given course. This will replace the course’s name in output of API calls you make subsequently, as well as in selected places in the Canvas web user interface.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/self/course_nicknames/:course_id`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "nickname",
                  "value": "",
                  "description": "The nickname to set. It must be non-empty and shorter than 60 characters.",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "What If Grades",
      "description": "",
      "item": [
        {
          "name": "Put Courses Reset",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/what_if_grades/reset",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "what_if_grades",
                "reset"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Resets all what-if scores for a student in a course and recalculates grades. Returns a list of [Grades](#grades) objects.\n\n**OAuth Scope:** `url:PUT|/api/v1/courses/:course_id/what_if_grades/reset`"
          }
        },
        {
          "name": "Put Submissions What_If_Grades",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/submissions/:id/what_if_grades",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "submissions",
                ":id",
                "what_if_grades"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Enter a what if score for a submission and receive the calculated grades Grade calculation is a costly operation, so this API should be used sparingly\n\n**OAuth Scope:** `url:PUT|/api/v1/submissions/:id/what_if_grades`",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "student_entered_score",
                  "value": "",
                  "description": "The score the student wants to test",
                  "type": "text",
                  "disabled": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "ePortfolios",
      "description": "",
      "item": [
        {
          "name": "Delete Eportfolios",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/eportfolios/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "eportfolios",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Mark an ePortfolio as deleted. Returns an [ePortfolio](#eportfolio) object. ### [Get ePortfolio Pages](#method.eportfolios_api.pages) <a href=\"#method.eportfolios_api.pages\" id=\"method.eportfolios_api.pages\"></a> [EportfoliosApiController#pages](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\n**OAuth Scope:** `url:DELETE|/api/v1/eportfolios/:id`"
          }
        },
        {
          "name": "Get Eportfolios Pages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/eportfolios/:eportfolio_id/pages",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "eportfolios",
                ":eportfolio_id",
                "pages"
              ],
              "variable": [
                {
                  "key": "eportfolio_id",
                  "value": "<eportfolio_id>",
                  "description": "The eportfolio_id identifier"
                }
              ]
            },
            "description": "Get details for the pages of an ePortfolio Returns a list of [ePortfolioPage](#eportfoliopage) objects. ### [Moderate an ePortfolio](#method.eportfolios_api.moderate) <a href=\"#method.eportfolios_api.moderate\" id=\"method.eportfolios_api.moderate\"></a> [EportfoliosApiController#moderate](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/eportfolios/:eportfolio_id/pages`"
          }
        },
        {
          "name": "List Eportfolios",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/eportfolios/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "eportfolios",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get details for a single ePortfolio. Returns an [ePortfolio](#eportfolio) object. ### [Delete an ePortfolio](#method.eportfolios_api.delete) <a href=\"#method.eportfolios_api.delete\" id=\"method.eportfolios_api.delete\"></a> [EportfoliosApiController#delete](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/eportfolios/:id`"
          }
        },
        {
          "name": "Get Users Eportfolios",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/eportfolios",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "eportfolios"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "include[]",
                  "value": "",
                  "description": "deletedInclude deleted ePortfolios. Only available to admins who canmoderate_user_content.Allowed values: deleted",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all ePortfolios for the specified user.\n\n**OAuth Scope:** `url:GET|/api/v1/users/:user_id/eportfolios`"
          }
        },
        {
          "name": "Put Eportfolios Moderate",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/eportfolios/:eportfolio_id/moderate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "eportfolios",
                ":eportfolio_id",
                "moderate"
              ],
              "variable": [
                {
                  "key": "eportfolio_id",
                  "value": "<eportfolio_id>",
                  "description": "The eportfolio_id identifier"
                }
              ],
              "query": [
                {
                  "key": "spam_status",
                  "value": "",
                  "description": "The spam status for the ePortfolioAllowed values: marked_as_spam, marked_as_safe",
                  "disabled": true
                }
              ]
            },
            "description": "Update the spam\\_status of an eportfolio. Only available to admins who can moderate\\_user\\_content.\n\n**OAuth Scope:** `url:PUT|/api/v1/eportfolios/:eportfolio_id/moderate`"
          }
        },
        {
          "name": "Put Eportfolios Restore",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/eportfolios/:eportfolio_id/restore",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "eportfolios",
                ":eportfolio_id",
                "restore"
              ],
              "variable": [
                {
                  "key": "eportfolio_id",
                  "value": "<eportfolio_id>",
                  "description": "The eportfolio_id identifier"
                }
              ]
            },
            "description": "Restore an ePortfolio back to active that was previously deleted. Only available to admins who can moderate\\_user\\_content. Returns an [ePortfolio](#eportfolio) object.\n\n**OAuth Scope:** `url:PUT|/api/v1/eportfolios/:eportfolio_id/restore`"
          }
        },
        {
          "name": "Put Users Eportfolios",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/:user_id/eportfolios",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                ":user_id",
                "eportfolios"
              ],
              "variable": [
                {
                  "key": "user_id",
                  "value": "<user_id>",
                  "description": "The user_id identifier"
                }
              ],
              "query": [
                {
                  "key": "spam_status",
                  "value": "",
                  "description": "The spam status for all the ePortfoliosAllowed values: marked_as_spam, marked_as_safe",
                  "disabled": true
                }
              ]
            },
            "description": "Update the spam\\_status for all active eportfolios of a user. Only available to admins who can moderate\\_user\\_content.\n\n**OAuth Scope:** `url:PUT|/api/v1/users/:user_id/eportfolios`"
          }
        }
      ]
    },
    {
      "name": "ePub Exports",
      "description": "API for exporting courses as an ePub",
      "item": [
        {
          "name": "Get Courses Epub_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/epub_exports/:id",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "epub_exports",
                ":id"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                },
                {
                  "key": "id",
                  "value": "<id>",
                  "description": "The id identifier"
                }
              ]
            },
            "description": "Get information about a single ePub export. Returns an [EpubExport](#epubexport) object.\n\n**OAuth Scope:** `url:GET|/api/v1/courses/:course_id/epub_exports/:id`"
          }
        },
        {
          "name": "List Epub_Exports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/epub_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "epub_exports"
              ]
            },
            "description": "A paginated list of all courses a user is actively participating in, and the latest ePub export associated with the user & course. Returns a list of [CourseEpubExport](#courseepubexport) objects. ### [Create ePub Export](#method.epub_exports.create) <a href=\"#method.epub_exports.create\" id=\"method.epub_exports.create\"></a> [EpubExportsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb)\n\n**OAuth Scope:** `url:GET|/api/v1/epub_exports`"
          }
        },
        {
          "name": "Post Courses Epub_Exports",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/courses/:course_id/epub_exports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "courses",
                ":course_id",
                "epub_exports"
              ],
              "variable": [
                {
                  "key": "course_id",
                  "value": "<course_id>",
                  "description": "The course_id identifier"
                }
              ]
            },
            "description": "Begin an ePub export for a course. You can use the [Progress API](../progress#method.progress.show) to track the progress of the export. The export’s progress is linked to with the _progress\\_url_ value. When the export completes, use the [Show content export](#method.epub_exports.show) endpoint to retrieve a download URL for the exported content. Returns an [EpubExport](#epubexport) object. ### [Show ePub export](#method.epub_exports.show) <a href=\"#method.epub_exports.show\" id=\"method.epub_exports.show\"></a> [EpubExportsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb)\n\n**OAuth Scope:** `url:POST|/api/v1/courses/:course_id/epub_exports`"
          }
        }
      ]
    }
  ]
}