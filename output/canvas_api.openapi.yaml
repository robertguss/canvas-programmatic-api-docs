openapi: 3.1.0
info:
  title: Canvas LMS API
  description: The Canvas LMS REST API provides a way to access and modify data externally from the main application, in JSON format.
  version: 1.0.0
  contact:
    name: Canvas LMS API Documentation
    url: https://canvas.instructure.com/doc/api/
servers:
- url: https://{canvas_domain}/api/v1
  description: Canvas LMS API Server
  variables:
    canvas_domain:
      default: canvas.instructure.com
      description: Your Canvas domain (e.g., myschool.instructure.com)
security:
- bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Canvas API access token
  schemas:
    QuizSubmissionUserList:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        meta:
          type: object
          properties:
            $ref:
              type: string
            description:
              type: string
          required:
          - $ref
          - description
        users:
          type: object
          properties:
            $ref:
              type: string
            description:
              type: string
          required:
          - $ref
          - description
      required:
      - meta
      - users
    QuizSubmissionUserListMeta:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        pagination:
          type: object
          properties:
            $ref:
              type: string
            description:
              type: string
          required:
          - $ref
          - description
      required:
      - pagination
    JSONAPIPagination:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        per_page:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
            example:
              type: integer
          required:
          - description
          - example
          - type
        page:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
            example:
              type: integer
          required:
          - description
          - example
          - type
        template:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
            example:
              type: string
          required:
          - description
          - example
          - type
        page_count:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
            example:
              type: integer
          required:
          - description
          - example
          - type
        count:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
            example:
              type: integer
          required:
          - description
          - example
          - type
      required:
      - count
      - page
      - page_count
      - per_page
      - template
    LatePolicy:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        course_id:
          type: integer
        missing_submission_deduction_enabled:
          type: boolean
        missing_submission_deduction:
          type: number
        late_submission_deduction_enabled:
          type: boolean
        late_submission_deduction:
          type: number
        late_submission_interval:
          type: string
        late_submission_minimum_percent_enabled:
          type: boolean
        late_submission_minimum_percent:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
      - course_id
      - created_at
      - id
      - late_submission_deduction
      - late_submission_deduction_enabled
      - late_submission_interval
      - late_submission_minimum_percent
      - late_submission_minimum_percent_enabled
      - missing_submission_deduction
      - missing_submission_deduction_enabled
      - updated_at
    Favorite:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id005
        context_id:
          type: integer
        context_type:
          type: string
      required: &id006
      - context_id
      - context_type
    AccountNotification:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id008
        subject:
          type: string
        message:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        icon:
          type: string
        roles:
          type: array
          items:
            type: string
        role_ids:
          type: array
          items:
            type: integer
        author:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
          required:
          - id
          - name
      required: &id009
      - author
      - end_at
      - icon
      - message
      - role_ids
      - roles
      - start_at
      - subject
    QuizQuestion:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id012
        id:
          type: integer
        quiz_id:
          type: integer
        position:
          type: integer
        question_name:
          type: string
        question_type:
          type: string
        question_text:
          type: string
        points_possible:
          type: integer
        correct_comments:
          type: string
        incorrect_comments:
          type: string
        neutral_comments:
          type: string
        answers:
          type: 'null'
      required: &id013
      - answers
      - correct_comments
      - id
      - incorrect_comments
      - neutral_comments
      - points_possible
      - position
      - question_name
      - question_text
      - question_type
      - quiz_id
    PollSubmission:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        poll_choice_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
      required:
      - created_at
      - id
      - poll_choice_id
      - user_id
    PairingCode:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id017
        user_id:
          type: integer
        code:
          type: string
        expires_at:
          type: string
        workflow_state:
          type: string
      required: &id018
      - code
      - expires_at
      - user_id
      - workflow_state
    CourseQuizExtension:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user_id:
          type: integer
        extra_attempts:
          type: integer
        extra_time:
          type: integer
        manually_unlocked:
          type: boolean
        end_at:
          type: string
      required:
      - end_at
      - extra_attempts
      - extra_time
      - manually_unlocked
      - user_id
    AuthenticationProvider:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id020
        identifier_format:
          type: string
        auth_type:
          type: string
        id:
          type: integer
        log_out_url:
          type: string
        log_in_url:
          type: string
        certificate_fingerprint:
          type: string
        requested_authn_context:
          type: 'null'
        auth_host:
          type: string
        auth_filter:
          type: string
        auth_over_tls:
          type: 'null'
        auth_base:
          type: 'null'
        auth_username:
          type: string
        auth_port:
          type: 'null'
        position:
          type: integer
        idp_entity_id:
          type: string
        login_attribute:
          type: string
        sig_alg:
          type: string
        jit_provisioning:
          type: 'null'
        federated_attributes:
          type: 'null'
        mfa_required:
          type: 'null'
      required: &id021
      - auth_base
      - auth_filter
      - auth_host
      - auth_over_tls
      - auth_port
      - auth_type
      - auth_username
      - certificate_fingerprint
      - federated_attributes
      - id
      - identifier_format
      - idp_entity_id
      - jit_provisioning
      - log_in_url
      - log_out_url
      - login_attribute
      - mfa_required
      - position
      - requested_authn_context
      - sig_alg
    SSOSettings:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id022
        login_handle_name:
          type: string
        change_password_url:
          type: string
        auth_discovery_url:
          type: string
        unknown_user_url:
          type: string
      required: &id023
      - auth_discovery_url
      - change_password_url
      - login_handle_name
      - unknown_user_url
    FederatedAttributesConfig:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        admin_roles:
          type: 'null'
        display_name:
          type: 'null'
        email:
          type: 'null'
        given_name:
          type: 'null'
        integration_id:
          type: 'null'
        locale:
          type: 'null'
        name:
          type: 'null'
        sis_user_id:
          type: 'null'
        sortable_name:
          type: 'null'
        surname:
          type: 'null'
        timezone:
          type: 'null'
      required:
      - admin_roles
      - display_name
      - email
      - given_name
      - integration_id
      - locale
      - name
      - sis_user_id
      - sortable_name
      - surname
      - timezone
    FederatedAttributeConfig:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        attribute:
          type: string
        provisioning_only:
          type: boolean
        autoconfirm:
          type: boolean
      required:
      - attribute
      - autoconfirm
      - provisioning_only
    Result:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        passed:
          type: boolean
        assessed_at:
          type: string
        links:
          type: object
          properties:
            user:
              type: string
            assessor:
              type: string
            assessment:
              type: string
          required:
          - assessment
          - assessor
          - user
      required:
      - assessed_at
      - id
      - links
      - passed
    AssignmentExtension:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        assignment_id:
          type: integer
        user_id:
          type: integer
        extra_attempts:
          type: integer
      required:
      - assignment_id
      - extra_attempts
      - user_id
    QuizSubmission:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        quiz_id:
          type: integer
        user_id:
          type: integer
        submission_id:
          type: integer
        started_at:
          type: string
        finished_at:
          type: string
        end_at:
          type: string
        attempt:
          type: integer
        extra_attempts:
          type: integer
        extra_time:
          type: integer
        manually_unlocked:
          type: boolean
        time_spent:
          type: integer
        score:
          type: integer
        score_before_regrade:
          type: integer
        kept_score:
          type: integer
        fudge_points:
          type: integer
        has_seen_results:
          type: boolean
        workflow_state:
          type: string
        overdue_and_needs_submission:
          type: boolean
      required:
      - attempt
      - end_at
      - extra_attempts
      - extra_time
      - finished_at
      - fudge_points
      - has_seen_results
      - id
      - kept_score
      - manually_unlocked
      - overdue_and_needs_submission
      - quiz_id
      - score
      - score_before_regrade
      - started_at
      - submission_id
      - time_spent
      - user_id
      - workflow_state
    Admin:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id029
        id:
          type: integer
        role:
          type: string
        user:
          type: 'null'
        workflow_state:
          type: string
      required: &id030
      - id
      - role
      - user
      - workflow_state
    QuizAssignmentOverrideSet:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        quiz_id:
          type: string
        due_dates:
          type: 'null'
        all_dates:
          type: 'null'
      required:
      - all_dates
      - due_dates
      - quiz_id
    QuizAssignmentOverrideSetContainer:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id032
        quiz_assignment_overrides:
          type: 'null'
      required: &id033
      - quiz_assignment_overrides
    QuizAssignmentOverride:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        due_at:
          type: string
        unlock_at:
          type: 'null'
        lock_at:
          type: string
        title:
          type: string
        base:
          type: boolean
      required:
      - base
      - due_at
      - id
      - lock_at
      - title
      - unlock_at
    Collaboration:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id034
        id:
          type: integer
        collaboration_type:
          type: string
        document_id:
          type: string
        user_id:
          type: integer
        context_id:
          type: integer
        context_type:
          type: string
        url:
          type: 'null'
        created_at:
          type: string
        updated_at:
          type: string
        description:
          type: 'null'
        title:
          type: 'null'
        type:
          type: string
        update_url:
          type: 'null'
        user_name:
          type: string
      required: &id035
      - collaboration_type
      - context_id
      - context_type
      - created_at
      - description
      - document_id
      - id
      - title
      - type
      - update_url
      - updated_at
      - url
      - user_id
      - user_name
    Collaborator:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id036
        id:
          type: integer
        type:
          type: string
        name:
          type: string
      required: &id037
      - id
      - name
      - type
    ExternalToolTagAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        url:
          type: string
        new_tab:
          type: boolean
        resource_link_id:
          type: string
      required:
      - new_tab
      - resource_link_id
      - url
    LockInfo:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        asset_string:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
        context_module:
          type: string
        manually_locked:
          type: boolean
      required:
      - asset_string
      - context_module
      - lock_at
      - manually_locked
      - unlock_at
    RubricRating:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        criterion_id:
          type: string
        description:
          type: 'null'
        long_description:
          type: 'null'
        points:
          type: integer
      required:
      - criterion_id
      - description
      - id
      - long_description
      - points
    RubricCriteria:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        points:
          type: integer
        id:
          type: string
        learning_outcome_id:
          type: string
        vendor_guid:
          type: string
        description:
          type: string
        long_description:
          type: string
        criterion_use_range:
          type: boolean
        ratings:
          type: 'null'
        ignore_for_scoring:
          type: boolean
      required:
      - criterion_use_range
      - description
      - id
      - ignore_for_scoring
      - learning_outcome_id
      - long_description
      - points
      - ratings
      - vendor_guid
    AssignmentDate:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        base:
          type: boolean
        title:
          type: string
        due_at:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
      required:
      - base
      - due_at
      - id
      - lock_at
      - title
      - unlock_at
    TurnitinSettings:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        originality_report_visibility:
          type: string
        s_paper_check:
          type: boolean
        internet_check:
          type: boolean
        journal_check:
          type: boolean
        exclude_biblio:
          type: boolean
        exclude_quoted:
          type: boolean
        exclude_small_matches_type:
          type: string
        exclude_small_matches_value:
          type: integer
      required:
      - exclude_biblio
      - exclude_quoted
      - exclude_small_matches_type
      - exclude_small_matches_value
      - internet_check
      - journal_check
      - originality_report_visibility
      - s_paper_check
    NeedsGradingCount:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        section_id:
          type: string
        needs_grading_count:
          type: integer
      required:
      - needs_grading_count
      - section_id
    ScoreStatistic:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        min:
          type: integer
        max:
          type: integer
        mean:
          type: integer
        upper_q:
          type: integer
        median:
          type: integer
        lower_q:
          type: integer
      required:
      - lower_q
      - max
      - mean
      - median
      - min
      - upper_q
    Assignment:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id038
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        due_at:
          type: string
        lock_at:
          type: string
        unlock_at:
          type: string
        has_overrides:
          type: boolean
        all_dates:
          type: 'null'
        course_id:
          type: integer
        html_url:
          type: string
        submissions_download_url:
          type: string
        assignment_group_id:
          type: integer
        due_date_required:
          type: boolean
        allowed_extensions:
          type: array
          items:
            type: string
        max_name_length:
          type: integer
        turnitin_enabled:
          type: boolean
        vericite_enabled:
          type: boolean
        turnitin_settings:
          type: 'null'
        grade_group_students_individually:
          type: boolean
        external_tool_tag_attributes:
          type: 'null'
        peer_reviews:
          type: boolean
        automatic_peer_reviews:
          type: boolean
        peer_review_count:
          type: integer
        peer_reviews_assign_at:
          type: string
        intra_group_peer_reviews:
          type: boolean
        group_category_id:
          type: integer
        needs_grading_count:
          type: integer
        needs_grading_count_by_section:
          type: array
          items:
            type: object
            properties:
              section_id:
                type: string
              needs_grading_count:
                type: integer
            required:
            - needs_grading_count
            - section_id
        position:
          type: integer
        post_to_sis:
          type: boolean
        integration_id:
          type: string
        integration_data:
          type: object
          properties:
            '5678':
              type: string
          required:
          - '5678'
        points_possible:
          type: number
        submission_types:
          type: array
          items:
            type: string
        has_submitted_submissions:
          type: boolean
        grading_type:
          type: string
        grading_standard_id:
          type: 'null'
        published:
          type: boolean
        unpublishable:
          type: boolean
        only_visible_to_overrides:
          type: boolean
        locked_for_user:
          type: boolean
        lock_info:
          type: 'null'
        lock_explanation:
          type: string
        quiz_id:
          type: integer
        anonymous_submissions:
          type: boolean
        discussion_topic:
          type: 'null'
        freeze_on_copy:
          type: boolean
        frozen:
          type: boolean
        frozen_attributes:
          type: array
          items:
            type: string
        submission:
          type: 'null'
        use_rubric_for_grading:
          type: boolean
        rubric_settings:
          type: object
          properties:
            points_possible:
              type: string
          required:
          - points_possible
        rubric:
          type: 'null'
        assignment_visibility:
          type: array
          items:
            type: integer
        overrides:
          type: 'null'
        omit_from_final_grade:
          type: boolean
        hide_in_gradebook:
          type: boolean
        moderated_grading:
          type: boolean
        grader_count:
          type: integer
        final_grader_id:
          type: integer
        grader_comments_visible_to_graders:
          type: boolean
        graders_anonymous_to_graders:
          type: boolean
        grader_names_visible_to_final_grader:
          type: boolean
        anonymous_grading:
          type: boolean
        allowed_attempts:
          type: integer
        post_manually:
          type: boolean
        score_statistics:
          type: 'null'
        can_submit:
          type: boolean
        ab_guid:
          type: array
          items:
            type: string
        annotatable_attachment_id:
          type: 'null'
        anonymize_students:
          type: boolean
        require_lockdown_browser:
          type: boolean
        important_dates:
          type: boolean
        muted:
          type: boolean
        anonymous_peer_reviews:
          type: boolean
        anonymous_instructor_annotations:
          type: boolean
        graded_submissions_exist:
          type: boolean
        is_quiz_assignment:
          type: boolean
        in_closed_grading_period:
          type: boolean
        can_duplicate:
          type: boolean
        original_course_id:
          type: integer
        original_assignment_id:
          type: integer
        original_lti_resource_link_id:
          type: integer
        original_assignment_name:
          type: string
        original_quiz_id:
          type: integer
        workflow_state:
          type: string
      required: &id039
      - ab_guid
      - all_dates
      - allowed_attempts
      - allowed_extensions
      - annotatable_attachment_id
      - anonymize_students
      - anonymous_grading
      - anonymous_instructor_annotations
      - anonymous_peer_reviews
      - anonymous_submissions
      - assignment_group_id
      - assignment_visibility
      - automatic_peer_reviews
      - can_duplicate
      - can_submit
      - course_id
      - created_at
      - description
      - discussion_topic
      - due_at
      - due_date_required
      - external_tool_tag_attributes
      - final_grader_id
      - freeze_on_copy
      - frozen
      - frozen_attributes
      - grade_group_students_individually
      - graded_submissions_exist
      - grader_comments_visible_to_graders
      - grader_count
      - grader_names_visible_to_final_grader
      - graders_anonymous_to_graders
      - grading_standard_id
      - grading_type
      - group_category_id
      - has_overrides
      - has_submitted_submissions
      - hide_in_gradebook
      - html_url
      - id
      - important_dates
      - in_closed_grading_period
      - integration_data
      - integration_id
      - intra_group_peer_reviews
      - is_quiz_assignment
      - lock_at
      - lock_explanation
      - lock_info
      - locked_for_user
      - max_name_length
      - moderated_grading
      - muted
      - name
      - needs_grading_count
      - needs_grading_count_by_section
      - omit_from_final_grade
      - only_visible_to_overrides
      - original_assignment_id
      - original_assignment_name
      - original_course_id
      - original_lti_resource_link_id
      - original_quiz_id
      - overrides
      - peer_review_count
      - peer_reviews
      - peer_reviews_assign_at
      - points_possible
      - position
      - post_manually
      - post_to_sis
      - published
      - quiz_id
      - require_lockdown_browser
      - rubric
      - rubric_settings
      - score_statistics
      - submission
      - submission_types
      - submissions_download_url
      - turnitin_enabled
      - turnitin_settings
      - unlock_at
      - unpublishable
      - updated_at
      - use_rubric_for_grading
      - vericite_enabled
      - workflow_state
    BasicUser:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id042
        id:
          type: string
        name:
          type: string
      required: &id043
      - id
      - name
    AssignmentOverride:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id044
        id:
          type: integer
        assignment_id:
          type: integer
        quiz_id:
          type: integer
        context_module_id:
          type: integer
        discussion_topic_id:
          type: integer
        wiki_page_id:
          type: integer
        attachment_id:
          type: integer
        student_ids:
          type: array
          items:
            type: integer
        group_id:
          type: integer
        course_section_id:
          type: integer
        title:
          type: string
        due_at:
          type: string
        all_day:
          type: boolean
        all_day_date:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
      required: &id045
      - all_day
      - all_day_date
      - assignment_id
      - attachment_id
      - context_module_id
      - course_section_id
      - discussion_topic_id
      - due_at
      - group_id
      - id
      - lock_at
      - quiz_id
      - student_ids
      - title
      - unlock_at
      - wiki_page_id
    QuizSubmissionQuestion:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id051
        id:
          type: integer
        flagged:
          type: boolean
        answer:
          type: 'null'
        answers:
          type: 'null'
      required: &id052
      - answer
      - answers
      - flagged
      - id
    Outcome:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id055
        id:
          type: integer
        url:
          type: string
        context_id:
          type: integer
        context_type:
          type: string
        title:
          type: string
        display_name:
          type: string
        description:
          type: string
        vendor_guid:
          type: string
        points_possible:
          type: integer
        mastery_points:
          type: integer
        calculation_method:
          type: string
        calculation_int:
          type: integer
        ratings:
          type: 'null'
        can_edit:
          type: boolean
        can_unlink:
          type: boolean
        assessed:
          type: boolean
        has_updateable_rubrics:
          type: boolean
      required: &id056
      - assessed
      - calculation_int
      - calculation_method
      - can_edit
      - can_unlink
      - context_id
      - context_type
      - description
      - display_name
      - has_updateable_rubrics
      - id
      - mastery_points
      - points_possible
      - ratings
      - title
      - url
      - vendor_guid
    OutcomeAlignment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        html_url:
          type: 'null'
      required:
      - html_url
      - id
      - name
    CommunicationChannel:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id060
        id:
          type: integer
        address:
          type: string
        type:
          type: string
        position:
          type: integer
        user_id:
          type: integer
        bounce_count:
          type: integer
        last_bounce_at:
          type: string
        workflow_state:
          type: string
      required: &id061
      - address
      - bounce_count
      - id
      - last_bounce_at
      - position
      - type
      - user_id
      - workflow_state
    Page:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id063
        page_id:
          type: integer
        url:
          type: string
        title:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        hide_from_students:
          type: boolean
        editing_roles:
          type: string
        last_edited_by:
          type: 'null'
        body:
          type: string
        published:
          type: boolean
        publish_at:
          type: string
        front_page:
          type: boolean
        locked_for_user:
          type: boolean
        lock_info:
          type: 'null'
        lock_explanation:
          type: string
        editor:
          type: string
        block_editor_attributes:
          type: object
          properties:
            id:
              type: integer
            version:
              type: string
            blocks:
              type: string
          required:
          - blocks
          - id
          - version
      required: &id064
      - block_editor_attributes
      - body
      - created_at
      - editing_roles
      - editor
      - front_page
      - hide_from_students
      - last_edited_by
      - lock_explanation
      - lock_info
      - locked_for_user
      - page_id
      - publish_at
      - published
      - title
      - updated_at
      - url
    PageRevision:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id067
        revision_id:
          type: integer
        updated_at:
          type: string
        latest:
          type: boolean
        edited_by:
          type: 'null'
        url:
          type: string
        title:
          type: string
        body:
          type: string
      required: &id068
      - body
      - edited_by
      - latest
      - revision_id
      - title
      - updated_at
      - url
    PollSession:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        poll_id:
          type: integer
        course_id:
          type: integer
        course_section_id:
          type: integer
        is_published:
          type: boolean
        has_public_results:
          type: boolean
        created_at:
          type: string
        results:
          type: object
          properties:
            '144':
              type: integer
            '145':
              type: integer
            '146':
              type: integer
            '147':
              type: integer
          required:
          - '144'
          - '145'
          - '146'
          - '147'
        poll_submissions:
          type: 'null'
      required:
      - course_id
      - course_section_id
      - created_at
      - has_public_results
      - id
      - is_published
      - poll_id
      - poll_submissions
      - results
    JWT:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id072
        token:
          type: string
      required: &id073
      - token
    FileAttachment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        content-type:
          type: string
        url:
          type: string
        filename:
          type: string
        display_name:
          type: string
      required:
      - content-type
      - display_name
      - filename
      - url
    DiscussionTopic:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id075
        id:
          type: integer
        title:
          type: string
        message:
          type: string
        html_url:
          type: string
        posted_at:
          type: string
        last_reply_at:
          type: string
        require_initial_post:
          type: boolean
        user_can_see_posts:
          type: boolean
        discussion_subentry_count:
          type: integer
        read_state:
          type: string
        unread_count:
          type: integer
        subscribed:
          type: boolean
        subscription_hold:
          type: string
        assignment_id:
          type: 'null'
        delayed_post_at:
          type: 'null'
        published:
          type: boolean
        lock_at:
          type: 'null'
        locked:
          type: boolean
        pinned:
          type: boolean
        locked_for_user:
          type: boolean
        lock_info:
          type: 'null'
        lock_explanation:
          type: string
        user_name:
          type: string
        topic_children:
          type: array
          items:
            type: integer
        group_topic_children:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              group_id:
                type: integer
            required:
            - group_id
            - id
        root_topic_id:
          type: 'null'
        podcast_url:
          type: string
        discussion_type:
          type: string
        group_category_id:
          type: 'null'
        attachments:
          type: 'null'
        permissions:
          type: object
          properties:
            attach:
              type: boolean
          required:
          - attach
        allow_rating:
          type: boolean
        only_graders_can_rate:
          type: boolean
        sort_by_rating:
          type: boolean
        sort_order:
          type: string
        sort_order_locked:
          type: boolean
        expand:
          type: boolean
        expand_locked:
          type: boolean
      required: &id076
      - allow_rating
      - assignment_id
      - attachments
      - delayed_post_at
      - discussion_subentry_count
      - discussion_type
      - expand
      - expand_locked
      - group_category_id
      - group_topic_children
      - html_url
      - id
      - last_reply_at
      - lock_at
      - lock_explanation
      - lock_info
      - locked
      - locked_for_user
      - message
      - only_graders_can_rate
      - permissions
      - pinned
      - podcast_url
      - posted_at
      - published
      - read_state
      - require_initial_post
      - root_topic_id
      - sort_by_rating
      - sort_order
      - sort_order_locked
      - subscribed
      - subscription_hold
      - title
      - topic_children
      - unread_count
      - user_can_see_posts
      - user_name
    QuizSubmissionEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        created_at:
          type: string
        event_type:
          type: string
        event_data:
          type: object
          properties:
            answer:
              type: string
          required:
          - answer
      required:
      - created_at
      - event_data
      - event_type
    Conversation:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id081
        id:
          type: integer
        subject:
          type: string
        workflow_state:
          type: string
        last_message:
          type: string
        start_at:
          type: string
        message_count:
          type: integer
        subscribed:
          type: boolean
        private:
          type: boolean
        starred:
          type: boolean
        properties:
          type: 'null'
        audience:
          type: 'null'
        audience_contexts:
          type: 'null'
        avatar_url:
          type: string
        participants:
          type: 'null'
        visible:
          type: boolean
        context_name:
          type: string
      required: &id082
      - audience
      - audience_contexts
      - avatar_url
      - context_name
      - id
      - last_message
      - message_count
      - participants
      - private
      - properties
      - starred
      - start_at
      - subject
      - subscribed
      - visible
      - workflow_state
    ConversationParticipant:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        full_name:
          type: string
        avatar_url:
          type: string
        uuid:
          type: string
      required:
      - avatar_url
      - full_name
      - id
      - name
      - uuid
    Rubric:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id090
        id:
          type: integer
        title:
          type: string
        context_id:
          type: integer
        context_type:
          type: string
        points_possible:
          type: number
        reusable:
          type: boolean
        read_only:
          type: boolean
        free_form_criterion_comments:
          type: boolean
        hide_score_total:
          type: boolean
        data:
          type: 'null'
        assessments:
          type: 'null'
        associations:
          type: 'null'
      required: &id091
      - assessments
      - associations
      - context_id
      - context_type
      - data
      - free_form_criterion_comments
      - hide_score_total
      - id
      - points_possible
      - read_only
      - reusable
      - title
    RubricCriterion:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        description:
          type: 'null'
        long_description:
          type: 'null'
        points:
          type: integer
        criterion_use_range:
          type: boolean
        ratings:
          type: 'null'
      required:
      - criterion_use_range
      - description
      - id
      - long_description
      - points
      - ratings
    RubricAssessment:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id094
        id:
          type: integer
        rubric_id:
          type: integer
        rubric_association_id:
          type: integer
        score:
          type: number
        artifact_type:
          type: string
        artifact_id:
          type: integer
        artifact_attempt:
          type: integer
        assessment_type:
          type: string
        assessor_id:
          type: integer
        data:
          type: 'null'
        comments:
          type: 'null'
      required: &id095
      - artifact_attempt
      - artifact_id
      - artifact_type
      - assessment_type
      - assessor_id
      - comments
      - data
      - id
      - rubric_association_id
      - rubric_id
      - score
    RubricAssociation:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id096
        id:
          type: integer
        rubric_id:
          type: integer
        association_id:
          type: integer
        association_type:
          type: string
        use_for_grading:
          type: boolean
        summary_data:
          type: string
        purpose:
          type: string
        hide_score_total:
          type: boolean
        hide_points:
          type: boolean
        hide_outcome_results:
          type: boolean
      required: &id097
      - association_id
      - association_type
      - hide_outcome_results
      - hide_points
      - hide_score_total
      - id
      - purpose
      - rubric_id
      - summary_data
      - use_for_grading
    QuizGroup:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id098
        id:
          type: integer
        quiz_id:
          type: integer
        name:
          type: string
        pick_count:
          type: integer
        question_points:
          type: integer
        assessment_question_bank_id:
          type: integer
        position:
          type: integer
      required: &id099
      - assessment_question_bank_id
      - id
      - name
      - pick_count
      - position
      - question_points
      - quiz_id
    HistoryEntry:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id101
        asset_code:
          type: string
        asset_name:
          type: string
        asset_icon:
          type: string
        asset_readable_category:
          type: string
        context_type:
          type: string
        context_id:
          type: integer
        context_name:
          type: string
        visited_url:
          type: string
        visited_at:
          type: string
        interaction_seconds:
          type: integer
      required: &id102
      - asset_code
      - asset_icon
      - asset_name
      - asset_readable_category
      - context_id
      - context_name
      - context_type
      - interaction_seconds
      - visited_at
      - visited_url
    ContentShare:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id104
        id:
          type: integer
        name:
          type: string
        content_type:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        user_id:
          type: integer
        sender:
          type: object
          properties:
            id:
              type: integer
            display_name:
              type: string
            avatar_image_url:
              type: string
            html_url:
              type: string
          required:
          - avatar_image_url
          - display_name
          - html_url
          - id
        receivers:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              display_name:
                type: string
              avatar_image_url:
                type: string
              html_url:
                type: string
            required:
            - avatar_image_url
            - display_name
            - html_url
            - id
        source_course:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
          required:
          - id
          - name
        read_state:
          type: string
        content_export:
          type: object
          properties:
            id:
              type: integer
          required:
          - id
      required: &id105
      - content_export
      - content_type
      - created_at
      - id
      - name
      - read_state
      - receivers
      - sender
      - source_course
      - updated_at
      - user_id
    QuizItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id107
        id:
          type: string
        position:
          type: integer
        points_possible:
          type: number
        entry_type:
          type: string
        entry_editable:
          type: boolean
        stimulus_quiz_entry_id:
          type: string
        status:
          type: string
        properties:
          type: 'null'
        entry:
          type: 'null'
      required: &id108
      - entry
      - entry_editable
      - entry_type
      - id
      - points_possible
      - position
      - properties
      - status
      - stimulus_quiz_entry_id
    QuestionItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        title:
          type: string
        item_body:
          type: string
        calculator_type:
          type: string
        feedback:
          type: 'null'
        interaction_type_slug:
          type: string
        interaction_data:
          type: 'null'
        properties:
          type: 'null'
        scoring_data:
          type: 'null'
        answer_feedback:
          type: object
          properties:
            5595b4c2-7dd6-447f-b8f1-9b6d0e0c287a:
              type: string
          required:
          - 5595b4c2-7dd6-447f-b8f1-9b6d0e0c287a
        scoring_algorithm:
          type: string
      required:
      - answer_feedback
      - calculator_type
      - feedback
      - interaction_data
      - interaction_type_slug
      - item_body
      - properties
      - scoring_algorithm
      - scoring_data
      - title
    StimulusItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        instructions:
          type: string
        source_url:
          type: string
        orientation:
          type: string
        passage:
          type: boolean
      required:
      - body
      - instructions
      - orientation
      - passage
      - source_url
      - title
    BankEntryItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        entry_type:
          type: string
        archived:
          type: boolean
        entry:
          type: 'null'
      required:
      - archived
      - entry
      - entry_type
    BankItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        title:
          type: string
        archived:
          type: boolean
        entry_count:
          type: integer
        item_entry_count:
          type: integer
      required:
      - archived
      - entry_count
      - item_entry_count
      - title
    ItemProperties:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        sample_num:
          type: integer
      required:
      - sample_num
    QuestionFeedback:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        neutral:
          type: string
        correct:
          type: string
        incorrect:
          type: string
      required:
      - correct
      - incorrect
      - neutral
    InstAccessToken:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id111
        token:
          type: string
      required: &id112
      - token
    PeerReview:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id113
        assessor_id:
          type: integer
        asset_id:
          type: integer
        asset_type:
          type: string
        id:
          type: integer
        user_id:
          type: integer
        workflow_state:
          type: string
        user:
          type: string
        assessor:
          type: string
        submission_comments:
          type: string
      required: &id114
      - assessor
      - assessor_id
      - asset_id
      - asset_type
      - id
      - submission_comments
      - user
      - user_id
      - workflow_state
    Score:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        userId:
          type: string
        scoreGiven:
          type: integer
        scoreMaximum:
          type: integer
        comment:
          type: 'null'
        timestamp:
          type: string
        activityProgress:
          type: string
        gradingProgress:
          type: string
        submission:
          type: object
          properties:
            submittedAt:
              type: string
          required:
          - submittedAt
      required:
      - activityProgress
      - comment
      - gradingProgress
      - scoreGiven
      - scoreMaximum
      - submission
      - timestamp
      - userId
    ExperienceSummary:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id117
        current_app:
          type: string
        available_apps:
          type: array
          items:
            type: string
      required: &id118
      - available_apps
      - current_app
    Progress:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id351
        id:
          type: integer
        context_id:
          type: integer
        context_type:
          type: string
        user_id:
          type: integer
        completion:
          type: integer
        workflow_state:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        results:
          type: object
          properties:
            url:
              type: string
          required:
          - url
        url:
          type: string
      required: &id352
      - completion
      - context_id
      - context_type
      - created_at
      - id
      - results
      - updated_at
      - url
      - user_id
      - workflow_state
    CustomColumn:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id123
        id:
          type: integer
        teacher_notes:
          type: boolean
        title:
          type: string
        position:
          type: integer
        hidden:
          type: boolean
        read_only:
          type: boolean
      required: &id124
      - hidden
      - id
      - position
      - read_only
      - teacher_notes
      - title
    ColumnDatum:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id127
        content:
          type: string
        user_id:
          type: integer
      required: &id128
      - content
      - user_id
    TemporaryEnrollmentPairing:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id131
        id:
          type: integer
        workflow_state:
          type: string
      required: &id132
      - id
      - workflow_state
    ePortfolio:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id133
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        public:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        workflow_state:
          type: string
        deleted_at:
          type: string
        spam_status:
          type: 'null'
      required: &id134
      - created_at
      - deleted_at
      - id
      - name
      - public
      - spam_status
      - updated_at
      - user_id
      - workflow_state
    ePortfolioPage:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id135
        id:
          type: integer
        eportfolio_id:
          type: integer
        position:
          type: integer
        name:
          type: string
        content:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required: &id136
      - content
      - created_at
      - eportfolio_id
      - id
      - name
      - position
      - updated_at
    NotificationPreference:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id137
        href:
          type: string
        notification:
          type: string
        category:
          type: string
        frequency:
          type: string
      required: &id138
      - category
      - frequency
      - href
      - notification
    Poll:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        description:
          type: string
        created_at:
          type: string
        user_id:
          type: integer
        total_results:
          type: object
          properties:
            '543':
              type: integer
            '544':
              type: integer
            '545':
              type: integer
          required:
          - '543'
          - '544'
          - '545'
      required:
      - created_at
      - description
      - id
      - question
      - total_results
      - user_id
    QuizIPFilter:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        name:
          type: string
        account:
          type: string
        filter:
          type: string
      required:
      - account
      - filter
      - name
    SisImportData:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        import_type:
          type: string
        supplied_batches:
          type: array
          items:
            type: string
        counts:
          type: 'null'
      required:
      - counts
      - import_type
      - supplied_batches
    SisImportStatistic:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        created:
          type: integer
        concluded:
          type: integer
        deactivated:
          type: integer
        restored:
          type: integer
        deleted:
          type: integer
      required:
      - concluded
      - created
      - deactivated
      - deleted
      - restored
    SisImportStatistics:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        total_state_changes:
          type: integer
        Account:
          type: 'null'
        EnrollmentTerm:
          type: 'null'
        CommunicationChannel:
          type: 'null'
        AbstractCourse:
          type: 'null'
        Course:
          type: 'null'
        CourseSection:
          type: 'null'
        Enrollment:
          type: 'null'
        GroupCategory:
          type: 'null'
        Group:
          type: 'null'
        GroupMembership:
          type: 'null'
        Pseudonym:
          type: 'null'
        UserObserver:
          type: 'null'
        AccountUser:
          type: 'null'
      required:
      - AbstractCourse
      - Account
      - AccountUser
      - CommunicationChannel
      - Course
      - CourseSection
      - Enrollment
      - EnrollmentTerm
      - Group
      - GroupCategory
      - GroupMembership
      - Pseudonym
      - UserObserver
      - total_state_changes
    SisImportCounts:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        accounts:
          type: integer
        terms:
          type: integer
        abstract_courses:
          type: integer
        courses:
          type: integer
        sections:
          type: integer
        xlists:
          type: integer
        users:
          type: integer
        enrollments:
          type: integer
        groups:
          type: integer
        group_memberships:
          type: integer
        grade_publishing_results:
          type: integer
        batch_courses_deleted:
          type: integer
        batch_sections_deleted:
          type: integer
        batch_enrollments_deleted:
          type: integer
        error_count:
          type: integer
        warning_count:
          type: integer
      required:
      - abstract_courses
      - accounts
      - batch_courses_deleted
      - batch_enrollments_deleted
      - batch_sections_deleted
      - courses
      - enrollments
      - error_count
      - grade_publishing_results
      - group_memberships
      - groups
      - sections
      - terms
      - users
      - warning_count
      - xlists
    SisImport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id146
        id:
          type: integer
        created_at:
          type: string
        ended_at:
          type: string
        updated_at:
          type: string
        workflow_state:
          type: string
        data:
          type: 'null'
        statistics:
          type: 'null'
        progress:
          type: string
        errors_attachment:
          type: 'null'
        user:
          type: 'null'
        processing_warnings:
          type: array
          items:
            type: array
            items:
              type: string
        processing_errors:
          type: array
          items:
            type: array
            items:
              type: string
        batch_mode:
          type: boolean
        batch_mode_term_id:
          type: string
        multi_term_batch_mode:
          type: boolean
        skip_deletes:
          type: boolean
        override_sis_stickiness:
          type: boolean
        add_sis_stickiness:
          type: boolean
        clear_sis_stickiness:
          type: boolean
        diffing_threshold_exceeded:
          type: boolean
        diffing_data_set_identifier:
          type: string
        diffing_remaster:
          type: boolean
        diffed_against_import_id:
          type: integer
        csv_attachments:
          type: array
      required: &id147
      - add_sis_stickiness
      - batch_mode
      - batch_mode_term_id
      - clear_sis_stickiness
      - created_at
      - csv_attachments
      - data
      - diffed_against_import_id
      - diffing_data_set_identifier
      - diffing_remaster
      - diffing_threshold_exceeded
      - ended_at
      - errors_attachment
      - id
      - multi_term_batch_mode
      - override_sis_stickiness
      - processing_errors
      - processing_warnings
      - progress
      - skip_deletes
      - statistics
      - updated_at
      - user
      - workflow_state
    Module:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: integer
        items:
          type: 'null'
        context_id:
          type: integer
        context_type:
          type: string
      required:
      - context_id
      - context_type
      - id
      - items
      - name
      - position
    CompletionRequirement:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        type:
          type: string
        min_score:
          type: integer
        min_percentage:
          type: integer
        completed:
          type: boolean
      required:
      - completed
      - min_percentage
      - min_score
      - type
    ContentDetails:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        points_possible:
          type: integer
        due_at:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
        locked_for_user:
          type: boolean
        lock_explanation:
          type: string
        lock_info:
          type: object
          properties:
            asset_string:
              type: string
            unlock_at:
              type: string
            lock_at:
              type: string
            context_module:
              type: object
          required:
          - asset_string
          - context_module
          - lock_at
          - unlock_at
      required:
      - due_at
      - lock_at
      - lock_explanation
      - lock_info
      - locked_for_user
      - points_possible
      - unlock_at
    ModuleItem:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        duration:
          type: integer
        course_pace_id:
          type: integer
        root_account_id:
          type: integer
        module_item_id:
          type: integer
        assignment_title:
          type: string
        points_possible:
          type: number
        assignment_link:
          type: string
        position:
          type: integer
        module_item_type:
          type: string
        published:
          type: boolean
      required:
      - assignment_link
      - assignment_title
      - course_pace_id
      - duration
      - id
      - module_item_id
      - module_item_type
      - points_possible
      - position
      - published
      - root_account_id
    ModuleItemSequenceNode:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        prev:
          type: 'null'
        current:
          type: object
          properties:
            id:
              type: integer
            module_id:
              type: integer
            title:
              type: string
            type:
              type: string
          required:
          - id
          - module_id
          - title
          - type
        next:
          type: object
          properties:
            id:
              type: integer
            module_id:
              type: integer
            title:
              type: string
            type:
              type: string
          required:
          - id
          - module_id
          - title
          - type
        mastery_path:
          type: object
          properties:
            locked:
              type: boolean
            assignment_sets:
              type: array
            selected_set_id:
              type: 'null'
            awaiting_choice:
              type: boolean
            still_processing:
              type: boolean
            modules_url:
              type: string
            choose_url:
              type: string
            modules_tab_disabled:
              type: boolean
          required:
          - assignment_sets
          - awaiting_choice
          - choose_url
          - locked
          - modules_tab_disabled
          - modules_url
          - selected_set_id
          - still_processing
      required:
      - current
      - mastery_path
      - next
      - prev
    ModuleItemSequence:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id155
        items:
          type: array
          items:
            type: object
            properties:
              prev:
                type: 'null'
              current:
                type: object
                properties:
                  id:
                    type: integer
                  module_id:
                    type: integer
                  title:
                    type: string
                  type:
                    type: string
                required:
                - id
                - module_id
                - title
                - type
              next:
                type: object
                properties:
                  id:
                    type: integer
                  module_id:
                    type: integer
                  title:
                    type: string
                  type:
                    type: string
                required:
                - id
                - module_id
                - title
                - type
              mastery_path:
                type: object
                properties:
                  locked:
                    type: boolean
                  assignment_sets:
                    type: array
                  selected_set_id:
                    type: 'null'
                  awaiting_choice:
                    type: boolean
                  still_processing:
                    type: boolean
                  modules_url:
                    type: string
                  choose_url:
                    type: string
                  modules_tab_disabled:
                    type: boolean
                required:
                - assignment_sets
                - awaiting_choice
                - choose_url
                - locked
                - modules_tab_disabled
                - modules_url
                - selected_set_id
                - still_processing
            required:
            - current
            - mastery_path
            - next
            - prev
        modules:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
            required:
            - id
            - name
      required: &id156
      - items
      - modules
    ModuleAssignmentOverride:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id157
        id:
          type: integer
        context_module_id:
          type: integer
        title:
          type: string
        students:
          type: 'null'
        course_section:
          type: 'null'
      required: &id158
      - context_module_id
      - course_section
      - id
      - students
      - title
    OverrideTarget:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    Report:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id207
        id:
          type: integer
        file_url:
          type: string
        attachment:
          type: 'null'
        status:
          type: string
        created_at:
          type: string
        started_at:
          type: string
        ended_at:
          type: string
        parameters:
          type: object
          properties:
            course_id:
              type: integer
            start_at:
              type: string
            end_at:
              type: string
          required:
          - course_id
          - end_at
          - start_at
        progress:
          type: integer
      required: &id208
      - attachment
      - created_at
      - ended_at
      - file_url
      - id
      - parameters
      - progress
      - started_at
      - status
    ReportParameters:
      $schema: http://json-schema.org/schema#
      type: object
    Bookmark:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id163
        id:
          type: integer
        name:
          type: string
        url:
          type: string
        position:
          type: integer
        data:
          type: object
          properties:
            active_tab:
              type: integer
          required:
          - active_tab
      required: &id164
      - data
      - id
      - name
      - position
      - url
    Term:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        start_at:
          type: string
        end_at:
          type: 'null'
      required:
      - end_at
      - id
      - name
      - start_at
    CourseProgress:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id167
        requirement_count:
          type: integer
        requirement_completed_count:
          type: integer
        next_requirement_url:
          type: string
        completed_at:
          type: string
      required: &id168
      - completed_at
      - next_requirement_url
      - requirement_completed_count
      - requirement_count
    Course:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id165
        id:
          type: integer
        sis_course_id:
          type: 'null'
        uuid:
          type: string
        integration_id:
          type: 'null'
        sis_import_id:
          type: integer
        name:
          type: string
        course_code:
          type: string
        original_name:
          type: string
        workflow_state:
          type: string
        account_id:
          type: integer
        root_account_id:
          type: integer
        enrollment_term_id:
          type: integer
        grading_periods:
          type: 'null'
        grading_standard_id:
          type: integer
        grade_passback_setting:
          type: string
        created_at:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        locale:
          type: string
        enrollments:
          type: 'null'
        total_students:
          type: integer
        calendar:
          type: 'null'
        default_view:
          type: string
        syllabus_body:
          type: string
        needs_grading_count:
          type: integer
        term:
          type: 'null'
        course_progress:
          type: 'null'
        apply_assignment_group_weights:
          type: boolean
        permissions:
          type: object
          properties:
            create_discussion_topic:
              type: boolean
            create_announcement:
              type: boolean
          required:
          - create_announcement
          - create_discussion_topic
        is_public:
          type: boolean
        is_public_to_auth_users:
          type: boolean
        public_syllabus:
          type: boolean
        public_syllabus_to_auth:
          type: boolean
        public_description:
          type: string
        storage_quota_mb:
          type: integer
        storage_quota_used_mb:
          type: integer
        hide_final_grades:
          type: boolean
        license:
          type: string
        allow_student_assignment_edits:
          type: boolean
        allow_wiki_comments:
          type: boolean
        allow_student_forum_attachments:
          type: boolean
        open_enrollment:
          type: boolean
        self_enrollment:
          type: boolean
        restrict_enrollments_to_course_dates:
          type: boolean
        course_format:
          type: string
        access_restricted_by_date:
          type: boolean
        time_zone:
          type: string
        blueprint:
          type: boolean
        blueprint_restrictions:
          type: object
          properties:
            content:
              type: boolean
            points:
              type: boolean
            due_dates:
              type: boolean
            availability_dates:
              type: boolean
          required:
          - availability_dates
          - content
          - due_dates
          - points
        blueprint_restrictions_by_object_type:
          type: object
          properties:
            assignment:
              type: object
              properties:
                content:
                  type: boolean
                points:
                  type: boolean
              required:
              - content
              - points
            wiki_page:
              type: object
              properties:
                content:
                  type: boolean
              required:
              - content
          required:
          - assignment
          - wiki_page
        template:
          type: boolean
      required: &id166
      - access_restricted_by_date
      - account_id
      - allow_student_assignment_edits
      - allow_student_forum_attachments
      - allow_wiki_comments
      - apply_assignment_group_weights
      - blueprint
      - blueprint_restrictions
      - blueprint_restrictions_by_object_type
      - calendar
      - course_code
      - course_format
      - course_progress
      - created_at
      - default_view
      - end_at
      - enrollment_term_id
      - enrollments
      - grade_passback_setting
      - grading_periods
      - grading_standard_id
      - hide_final_grades
      - id
      - integration_id
      - is_public
      - is_public_to_auth_users
      - license
      - locale
      - name
      - needs_grading_count
      - open_enrollment
      - original_name
      - permissions
      - public_description
      - public_syllabus
      - public_syllabus_to_auth
      - restrict_enrollments_to_course_dates
      - root_account_id
      - self_enrollment
      - sis_course_id
      - sis_import_id
      - start_at
      - storage_quota_mb
      - storage_quota_used_mb
      - syllabus_body
      - template
      - term
      - time_zone
      - total_students
      - uuid
      - workflow_state
    CalendarLink:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        ics:
          type: string
      required:
      - ics
    ContentExport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id172
        id:
          type: integer
        created_at:
          type: string
        export_type:
          type: string
        attachment:
          type: object
          properties:
            url:
              type: string
          required:
          - url
        progress_url:
          type: string
        user_id:
          type: integer
        workflow_state:
          type: string
      required: &id173
      - attachment
      - created_at
      - export_type
      - id
      - progress_url
      - user_id
      - workflow_state
    MediaComment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        content-type:
          type: string
        display_name:
          type: string
        media_id:
          type: string
        media_type:
          type: string
        url:
          type: string
      required:
      - content-type
      - display_name
      - media_id
      - media_type
      - url
    SubmissionComment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        author_id:
          type: integer
        author_name:
          type: string
        author:
          type: string
        comment:
          type: string
        created_at:
          type: string
        edited_at:
          type: string
        media_comment:
          type: 'null'
      required:
      - author
      - author_id
      - author_name
      - comment
      - created_at
      - edited_at
      - id
      - media_comment
    Submission:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        student_entered_score:
          type: string
      required:
      - id
      - student_entered_score
    DeveloperKey:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id179
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        workflow_state:
          type: string
        is_lti_key:
          type: boolean
        email:
          type: string
        icon_url:
          type: string
        notes:
          type: string
        vendor_code:
          type: string
        account_name:
          type: string
        visible:
          type: boolean
        scopes:
          type: array
          items:
            type: string
        redirect_uri:
          type: string
        redirect_uris:
          type: array
          items:
            type: string
        access_token_count:
          type: integer
        last_used_at:
          type: string
        test_cluster_only:
          type: boolean
        allow_includes:
          type: boolean
        require_scopes:
          type: boolean
        client_credentials_audience:
          type: string
        api_key:
          type: string
        tool_configuration:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        public_jwk:
          type: object
          properties:
            e:
              type: string
            etc:
              type: string
          required:
          - e
          - etc
        public_jwk_url:
          type: string
        lti_registration:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        is_lti_registration:
          type: boolean
        user_name:
          type: string
        user_id:
          type: string
      required: &id180
      - access_token_count
      - account_name
      - allow_includes
      - api_key
      - client_credentials_audience
      - created_at
      - email
      - icon_url
      - id
      - is_lti_key
      - is_lti_registration
      - last_used_at
      - lti_registration
      - name
      - notes
      - public_jwk
      - public_jwk_url
      - redirect_uri
      - redirect_uris
      - require_scopes
      - scopes
      - test_cluster_only
      - tool_configuration
      - updated_at
      - user_id
      - user_name
      - vendor_code
      - visible
      - workflow_state
    AccountCalendar:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id183
        id:
          type: integer
        name:
          type: string
        parent_account_id:
          type: integer
        root_account_id:
          type: integer
        visible:
          type: boolean
        auto_subscribe:
          type: boolean
        sub_account_count:
          type: integer
        asset_string:
          type: string
        type:
          type: string
        calendar_event_url:
          type: string
        can_create_calendar_events:
          type: boolean
        create_calendar_event_url:
          type: string
        new_calendar_event_url:
          type: string
      required: &id184
      - asset_string
      - auto_subscribe
      - calendar_event_url
      - can_create_calendar_events
      - create_calendar_event_url
      - id
      - name
      - new_calendar_event_url
      - parent_account_id
      - root_account_id
      - sub_account_count
      - type
      - visible
    NewQuiz:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id185
        id:
          type: string
        title:
          type: string
        instructions:
          type: string
        assignment_group_id:
          type: string
        points_possible:
          type: integer
        due_at:
          type: string
        lock_at:
          type: 'null'
        unlock_at:
          type: string
        published:
          type: boolean
        grading_type:
          type: string
        quiz_settings:
          type: 'null'
      required: &id186
      - assignment_group_id
      - due_at
      - grading_type
      - id
      - instructions
      - lock_at
      - points_possible
      - published
      - quiz_settings
      - title
      - unlock_at
    QuizSettings:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        calculator_type:
          type: string
        filter_ip_address:
          type: boolean
        filters:
          type: object
          properties:
            ips:
              type: array
              items:
                type: array
                items:
                  type: string
          required:
          - ips
        one_at_a_time_type:
          type: string
        allow_backtracking:
          type: boolean
        shuffle_answers:
          type: boolean
        shuffle_questions:
          type: boolean
        require_student_access_code:
          type: boolean
        student_access_code:
          type: string
        has_time_limit:
          type: boolean
        session_time_limit_in_seconds:
          type: integer
        multiple_attempts:
          type: 'null'
        result_view_settings:
          type: 'null'
      required:
      - allow_backtracking
      - calculator_type
      - filter_ip_address
      - filters
      - has_time_limit
      - multiple_attempts
      - one_at_a_time_type
      - require_student_access_code
      - result_view_settings
      - session_time_limit_in_seconds
      - shuffle_answers
      - shuffle_questions
      - student_access_code
    MultipleAttemptsSettings:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        multiple_attempts_enabled:
          type: boolean
        attempt_limit:
          type: boolean
        max_attempts:
          type: integer
        score_to_keep:
          type: string
        cooling_period:
          type: boolean
        cooling_period_seconds:
          type: integer
      required:
      - attempt_limit
      - cooling_period
      - cooling_period_seconds
      - max_attempts
      - multiple_attempts_enabled
      - score_to_keep
    ResultViewSettings:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        result_view_restricted:
          type: boolean
        display_points_awarded:
          type: boolean
        display_points_possible:
          type: boolean
        display_items:
          type: boolean
        display_item_response:
          type: boolean
        display_item_response_qualifier:
          type: string
        show_item_responses_at:
          type: string
        hide_item_responses_at:
          type: string
        display_item_response_correctness:
          type: boolean
        display_item_response_correctness_qualifier:
          type: string
        show_item_response_correctness_at:
          type: string
        hide_item_response_correctness_at:
          type: string
        display_item_correct_answer:
          type: boolean
        display_item_feedback:
          type: boolean
      required:
      - display_item_correct_answer
      - display_item_feedback
      - display_item_response
      - display_item_response_correctness
      - display_item_response_correctness_qualifier
      - display_item_response_qualifier
      - display_items
      - display_points_awarded
      - display_points_possible
      - hide_item_response_correctness_at
      - hide_item_responses_at
      - result_view_restricted
      - show_item_response_correctness_at
      - show_item_responses_at
    BlackoutDate:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id189
        id:
          type: integer
        context_id:
          type: integer
        context_type:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        event_title:
          type: string
      required: &id190
      - context_id
      - context_type
      - end_date
      - event_title
      - id
      - start_date
    GradingPeriod:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        close_date:
          type: string
        weight:
          type: number
        is_closed:
          type: boolean
      required:
      - close_date
      - end_date
      - id
      - is_closed
      - start_date
      - title
      - weight
    EnrollmentTerm:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id196
        id:
          type: integer
        sis_term_id:
          type: string
        sis_import_id:
          type: integer
        name:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        workflow_state:
          type: string
        overrides:
          type: object
          properties:
            StudentEnrollment:
              type: object
              properties:
                start_at:
                  type: string
                end_at:
                  type: string
              required:
              - end_at
              - start_at
          required:
          - StudentEnrollment
        course_count:
          type: integer
      required: &id197
      - course_count
      - end_at
      - id
      - name
      - overrides
      - sis_import_id
      - sis_term_id
      - start_at
      - workflow_state
    EnrollmentTermsList:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id198
        enrollment_terms:
          type: array
      required: &id199
      - enrollment_terms
    Scope:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id201
        resource:
          type: string
        resource_name:
          type: string
        controller:
          type: string
        action:
          type: string
        verb:
          type: string
        scope:
          type: string
      required: &id202
      - action
      - controller
      - resource
      - resource_name
      - scope
      - verb
    GradingRules:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        drop_lowest:
          type: integer
        drop_highest:
          type: integer
        never_drop:
          type: array
          items:
            type: integer
      required:
      - drop_highest
      - drop_lowest
      - never_drop
    AssignmentGroup:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id203
        id:
          type: integer
        name:
          type: string
        position:
          type: integer
        group_weight:
          type: integer
        sis_source_id:
          type: string
        integration_data:
          type: object
          properties:
            '5678':
              type: string
          required:
          - '5678'
        assignments:
          type: array
        rules:
          type: 'null'
      required: &id204
      - assignments
      - group_weight
      - id
      - integration_data
      - name
      - position
      - rules
      - sis_source_id
    Account:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id240
        id:
          type: integer
        name:
          type: string
        uuid:
          type: string
        parent_account_id:
          type: integer
        root_account_id:
          type: integer
        default_storage_quota_mb:
          type: integer
        default_user_storage_quota_mb:
          type: integer
        default_group_storage_quota_mb:
          type: integer
        default_time_zone:
          type: string
        sis_account_id:
          type: string
        integration_id:
          type: string
        sis_import_id:
          type: integer
        course_count:
          type: integer
        sub_account_count:
          type: integer
        lti_guid:
          type: string
        workflow_state:
          type: string
      required: &id241
      - course_count
      - default_group_storage_quota_mb
      - default_storage_quota_mb
      - default_time_zone
      - default_user_storage_quota_mb
      - id
      - integration_id
      - lti_guid
      - name
      - parent_account_id
      - root_account_id
      - sis_account_id
      - sis_import_id
      - sub_account_count
      - uuid
      - workflow_state
    Section:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id210
        id:
          type: integer
        name:
          type: string
        sis_section_id:
          type: string
        integration_id:
          type: string
        sis_import_id:
          type: integer
        course_id:
          type: integer
        sis_course_id:
          type: string
        start_at:
          type: string
        end_at:
          type: 'null'
        restrict_enrollments_to_section_dates:
          type: 'null'
        nonxlist_course_id:
          type: 'null'
        total_students:
          type: integer
      required: &id211
      - course_id
      - end_at
      - id
      - integration_id
      - name
      - nonxlist_course_id
      - restrict_enrollments_to_section_dates
      - sis_course_id
      - sis_import_id
      - sis_section_id
      - start_at
      - total_students
    ConferenceRecording:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        duration_minutes:
          type: integer
        title:
          type: string
        updated_at:
          type: string
        created_at:
          type: string
        playback_url:
          type: string
      required:
      - created_at
      - duration_minutes
      - playback_url
      - title
      - updated_at
    Conference:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id214
        id:
          type: integer
        conference_type:
          type: string
        conference_key:
          type: string
        description:
          type: string
        duration:
          type: integer
        ended_at:
          type: string
        started_at:
          type: string
        title:
          type: string
        users:
          type: array
          items:
            type: integer
        invitees:
          type: array
          items:
            type: integer
        attendees:
          type: array
          items:
            type: integer
        has_advanced_settings:
          type: boolean
        long_running:
          type: boolean
        user_settings:
          type: object
          properties:
            record:
              type: boolean
          required:
          - record
        recordings:
          type: 'null'
        url:
          type: 'null'
        join_url:
          type: 'null'
        context_type:
          type: 'null'
        context_id:
          type: 'null'
      required: &id215
      - attendees
      - conference_key
      - conference_type
      - context_id
      - context_type
      - description
      - duration
      - ended_at
      - has_advanced_settings
      - id
      - invitees
      - join_url
      - long_running
      - recordings
      - started_at
      - title
      - url
      - user_settings
      - users
    Quiz:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id216
        id:
          type: integer
        title:
          type: string
        html_url:
          type: string
        mobile_url:
          type: string
        preview_url:
          type: string
        description:
          type: string
        quiz_type:
          type: string
        assignment_group_id:
          type: integer
        time_limit:
          type: integer
        shuffle_answers:
          type: boolean
        hide_results:
          type: string
        show_correct_answers:
          type: boolean
        show_correct_answers_last_attempt:
          type: boolean
        show_correct_answers_at:
          type: string
        hide_correct_answers_at:
          type: string
        one_time_results:
          type: boolean
        scoring_policy:
          type: string
        allowed_attempts:
          type: integer
        one_question_at_a_time:
          type: boolean
        question_count:
          type: integer
        points_possible:
          type: integer
        cant_go_back:
          type: boolean
        access_code:
          type: string
        ip_filter:
          type: string
        due_at:
          type: string
        lock_at:
          type: 'null'
        unlock_at:
          type: string
        published:
          type: boolean
        unpublishable:
          type: boolean
        locked_for_user:
          type: boolean
        lock_info:
          type: 'null'
        lock_explanation:
          type: string
        speedgrader_url:
          type: string
        quiz_extensions_url:
          type: string
        permissions:
          type: 'null'
        all_dates:
          type: 'null'
        version_number:
          type: integer
        question_types:
          type: array
          items:
            type: string
        anonymous_submissions:
          type: boolean
      required: &id217
      - access_code
      - all_dates
      - allowed_attempts
      - anonymous_submissions
      - assignment_group_id
      - cant_go_back
      - description
      - due_at
      - hide_correct_answers_at
      - hide_results
      - html_url
      - id
      - ip_filter
      - lock_at
      - lock_explanation
      - lock_info
      - locked_for_user
      - mobile_url
      - one_question_at_a_time
      - one_time_results
      - permissions
      - points_possible
      - preview_url
      - published
      - question_count
      - question_types
      - quiz_extensions_url
      - quiz_type
      - scoring_policy
      - show_correct_answers
      - show_correct_answers_at
      - show_correct_answers_last_attempt
      - shuffle_answers
      - speedgrader_url
      - time_limit
      - title
      - unlock_at
      - unpublishable
      - version_number
    QuizPermissions:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        read:
          type: boolean
        submit:
          type: boolean
        create:
          type: boolean
        manage:
          type: boolean
        read_statistics:
          type: boolean
        review_grades:
          type: boolean
        update:
          type: boolean
      required:
      - create
      - manage
      - read
      - read_statistics
      - review_grades
      - submit
      - update
    ListLtiRegistrationsResponse:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id221
        total:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
            required:
            - $ref
      required: &id222
      - data
      - total
    ContextSearchResponse:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id224
        accounts:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
            required:
            - $ref
        courses:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
            required:
            - $ref
      required: &id225
      - accounts
      - courses
    SearchableAccount:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sis_id:
          type: string
        display_path:
          type: array
          items:
            type: string
      required:
      - display_path
      - id
      - name
      - sis_id
    SearchableCourse:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sis_id:
          type: string
        display_path:
          type: array
          items:
            type: string
        course_code:
          type: string
      required:
      - course_code
      - display_path
      - id
      - name
      - sis_id
    OutcomeGroup:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id226
        id:
          type: integer
        url:
          type: string
        parent_outcome_group:
          type: 'null'
        context_id:
          type: integer
        context_type:
          type: string
        title:
          type: string
        description:
          type: string
        vendor_guid:
          type: string
        subgroups_url:
          type: string
        outcomes_url:
          type: string
        import_url:
          type: string
        can_edit:
          type: boolean
      required: &id227
      - can_edit
      - context_id
      - context_type
      - description
      - id
      - import_url
      - outcomes_url
      - parent_outcome_group
      - subgroups_url
      - title
      - url
      - vendor_guid
    OutcomeLink:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id228
        url:
          type: string
        context_id:
          type: integer
        context_type:
          type: string
        outcome_group:
          type: 'null'
        outcome:
          type: 'null'
        assessed:
          type: boolean
        can_unlink:
          type: 'null'
      required: &id229
      - assessed
      - can_unlink
      - context_id
      - context_type
      - outcome
      - outcome_group
      - url
    AuthenticationEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        created_at:
          type: string
        event_type:
          type: string
        pseudonym_id:
          type: integer
        account_id:
          type: integer
        user_id:
          type: integer
      required:
      - account_id
      - created_at
      - event_type
      - pseudonym_id
      - user_id
    RolePermissions:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        enabled:
          type: boolean
        locked:
          type: boolean
        applies_to_self:
          type: boolean
        applies_to_descendants:
          type: boolean
        readonly:
          type: boolean
        explicit:
          type: boolean
        prior_default:
          type: boolean
      required:
      - applies_to_descendants
      - applies_to_self
      - enabled
      - explicit
      - locked
      - prior_default
      - readonly
    Role:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id234
        id:
          type: integer
        label:
          type: string
        role:
          type: string
        base_role_type:
          type: string
        is_account_role:
          type: boolean
        account:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            parent_account_id:
              type: integer
            root_account_id:
              type: integer
            sis_account_id:
              type: string
          required:
          - id
          - name
          - parent_account_id
          - root_account_id
          - sis_account_id
        workflow_state:
          type: string
        created_at:
          type: string
        last_updated_at:
          type: string
        permissions:
          type: object
          properties:
            read_course_content:
              type: object
              properties:
                enabled:
                  type: boolean
                locked:
                  type: boolean
                readonly:
                  type: boolean
                explicit:
                  type: boolean
                prior_default:
                  type: boolean
              required:
              - enabled
              - explicit
              - locked
              - prior_default
              - readonly
            read_course_list:
              type: object
              properties:
                enabled:
                  type: boolean
                locked:
                  type: boolean
                readonly:
                  type: boolean
                explicit:
                  type: boolean
              required:
              - enabled
              - explicit
              - locked
              - readonly
            read_question_banks:
              type: object
              properties:
                enabled:
                  type: boolean
                locked:
                  type: boolean
                readonly:
                  type: boolean
                explicit:
                  type: boolean
                prior_default:
                  type: boolean
              required:
              - enabled
              - explicit
              - locked
              - prior_default
              - readonly
            read_reports:
              type: object
              properties:
                enabled:
                  type: boolean
                locked:
                  type: boolean
                readonly:
                  type: boolean
                explicit:
                  type: boolean
              required:
              - enabled
              - explicit
              - locked
              - readonly
          required:
          - read_course_content
          - read_course_list
          - read_question_banks
          - read_reports
      required: &id235
      - account
      - base_role_type
      - created_at
      - id
      - is_account_role
      - label
      - last_updated_at
      - permissions
      - role
      - workflow_state
    Permission:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id238
        key:
          type: string
        label:
          type: string
        group:
          type: string
        group_label:
          type: string
        available_to:
          type: array
          items:
            type: string
        true_for:
          type: array
          items:
            type: string
      required: &id239
      - available_to
      - group
      - group_label
      - key
      - label
      - true_for
    HelpLink:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        subtext:
          type: string
        url:
          type: string
        type:
          type: string
        available_to:
          type: array
          items:
            type: string
      required:
      - available_to
      - id
      - subtext
      - text
      - type
      - url
    HelpLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id244
        help_link_name:
          type: string
        help_link_icon:
          type: string
        custom_help_links:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              text:
                type: string
              subtext:
                type: string
              url:
                type: string
              type:
                type: string
              available_to:
                type: array
                items:
                  type: string
              is_featured:
                type: boolean
              is_new:
                type: boolean
              feature_headline:
                type: string
            required:
            - available_to
            - feature_headline
            - id
            - is_featured
            - is_new
            - subtext
            - text
            - type
            - url
        default_help_links:
          type: array
          items:
            type: object
            properties:
              available_to:
                type: array
                items:
                  type: string
              text:
                type: string
              subtext:
                type: string
              url:
                type: string
              type:
                type: string
              id:
                type: string
              is_featured:
                type: boolean
              is_new:
                type: boolean
              feature_headline:
                type: string
            required:
            - available_to
            - feature_headline
            - id
            - is_featured
            - is_new
            - subtext
            - text
            - type
            - url
      required: &id245
      - custom_help_links
      - default_help_links
      - help_link_icon
      - help_link_name
    UserDisplay:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        short_name:
          type: string
        avatar_image_url:
          type: string
        html_url:
          type: string
      required:
      - avatar_image_url
      - html_url
      - id
      - short_name
    AnonymousUserDisplay:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        anonymous_id:
          type: string
        avatar_image_url:
          type: string
        display_name:
          type: string
      required:
      - anonymous_id
      - avatar_image_url
      - display_name
    User:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id246
        id:
          type: integer
        name:
          type: string
        sortable_name:
          type: string
        last_name:
          type: string
        first_name:
          type: string
        short_name:
          type: string
        sis_user_id:
          type: string
        sis_import_id:
          type: integer
        integration_id:
          type: string
        login_id:
          type: string
        avatar_url:
          type: string
        avatar_state:
          type: string
        enrollments:
          type: 'null'
        email:
          type: string
        locale:
          type: string
        last_login:
          type: string
        time_zone:
          type: string
        bio:
          type: string
        pronouns:
          type: string
      required: &id247
      - avatar_state
      - avatar_url
      - bio
      - email
      - enrollments
      - first_name
      - id
      - integration_id
      - last_login
      - last_name
      - locale
      - login_id
      - name
      - pronouns
      - short_name
      - sis_import_id
      - sis_user_id
      - sortable_name
      - time_zone
    Profile:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id251
        id:
          type: integer
        name:
          type: string
        short_name:
          type: string
        sortable_name:
          type: string
        title:
          type: 'null'
        bio:
          type: 'null'
        pronunciation:
          type: string
        primary_email:
          type: string
        login_id:
          type: string
        sis_user_id:
          type: string
        lti_user_id:
          type: 'null'
        avatar_url:
          type: string
        calendar:
          type: 'null'
        time_zone:
          type: string
        locale:
          type: 'null'
        k5_user:
          type: boolean
        use_classic_font_in_k5:
          type: boolean
      required: &id252
      - avatar_url
      - bio
      - calendar
      - id
      - k5_user
      - locale
      - login_id
      - lti_user_id
      - name
      - primary_email
      - pronunciation
      - short_name
      - sis_user_id
      - sortable_name
      - time_zone
      - title
      - use_classic_font_in_k5
    Avatar:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id253
        type:
          type: string
        url:
          type: string
        token:
          type: string
        display_name:
          type: string
        id:
          type: integer
        content-type:
          type: string
        filename:
          type: string
        size:
          type: integer
      required: &id254
      - content-type
      - display_name
      - filename
      - id
      - size
      - token
      - type
      - url
    PageView:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id255
        id:
          type: string
        app_name:
          type: string
        url:
          type: string
        context_type:
          type: string
        asset_type:
          type: string
        controller:
          type: string
        action:
          type: string
        contributed:
          type: boolean
        interaction_seconds:
          type: number
        created_at:
          type: string
        user_request:
          type: boolean
        render_time:
          type: number
        user_agent:
          type: string
        participated:
          type: boolean
        http_method:
          type: string
        remote_ip:
          type: string
        links:
          type: object
          properties:
            user:
              type: integer
            account:
              type: integer
          required:
          - account
          - user
      required: &id256
      - action
      - app_name
      - asset_type
      - context_type
      - contributed
      - controller
      - created_at
      - http_method
      - id
      - interaction_seconds
      - links
      - participated
      - remote_ip
      - render_time
      - url
      - user_agent
      - user_request
    PageViewLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user:
          type: integer
        context:
          type: integer
        asset:
          type: integer
        real_user:
          type: integer
        account:
          type: integer
      required:
      - account
      - asset
      - context
      - real_user
      - user
    CourseNickname:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id258
        course_id:
          type: integer
        name:
          type: string
        nickname:
          type: string
      required: &id259
      - course_id
      - name
      - nickname
    QuizReport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id261
        id:
          type: integer
        quiz_id:
          type: integer
        report_type:
          type: string
        readable_type:
          type: string
        includes_all_versions:
          type: boolean
        anonymous:
          type: boolean
        generatable:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        url:
          type: string
        file:
          type: 'null'
        progress_url:
          type: 'null'
        progress:
          type: 'null'
      required: &id262
      - anonymous
      - created_at
      - file
      - generatable
      - id
      - includes_all_versions
      - progress
      - progress_url
      - quiz_id
      - readable_type
      - report_type
      - updated_at
      - url
    SisImportError:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id264
        sis_import_id:
          type: integer
        file:
          type: string
        message:
          type: string
        row_info:
          type: string
        row:
          type: integer
      required: &id265
      - file
      - message
      - row
      - row_info
      - sis_import_id
    Tab:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id266
        html_url:
          type: string
        id:
          type: string
        label:
          type: string
        type:
          type: string
        hidden:
          type: boolean
        visibility:
          type: string
        position:
          type: integer
      required: &id267
      - hidden
      - html_url
      - id
      - label
      - position
      - type
      - visibility
    QuizStatistics:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        quiz_id:
          type: integer
        multiple_attempts_exist:
          type: boolean
        includes_all_versions:
          type: boolean
        generated_at:
          type: string
        url:
          type: string
        html_url:
          type: string
        question_statistics:
          type: 'null'
        submission_statistics:
          type: 'null'
        links:
          type: 'null'
      required:
      - generated_at
      - html_url
      - id
      - includes_all_versions
      - links
      - multiple_attempts_exist
      - question_statistics
      - quiz_id
      - submission_statistics
      - url
    QuizStatisticsLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        quiz:
          type: string
      required:
      - quiz
    QuizStatisticsQuestionStatistics:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        responses:
          type: integer
        answers:
          type: 'null'
      required:
      - answers
      - responses
    QuizStatisticsAnswerStatistics:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        weight:
          type: integer
        responses:
          type: integer
      required:
      - id
      - responses
      - text
      - weight
    QuizStatisticsAnswerPointBiserial:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        answer_id:
          type: integer
        point_biserial:
          type: number
        correct:
          type: boolean
        distractor:
          type: boolean
      required:
      - answer_id
      - correct
      - distractor
      - point_biserial
    QuizStatisticsSubmissionStatistics:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        unique_count:
          type: integer
        score_average:
          type: number
        score_high:
          type: integer
        score_low:
          type: integer
        score_stdev:
          type: number
        scores:
          type: object
          properties:
            '50':
              type: integer
            '34':
              type: integer
            '100':
              type: integer
          required:
          - '100'
          - '34'
          - '50'
        correct_count_average:
          type: number
        incorrect_count_average:
          type: integer
        duration_average:
          type: number
      required:
      - correct_count_average
      - duration_average
      - incorrect_count_average
      - score_average
      - score_high
      - score_low
      - score_stdev
      - scores
      - unique_count
    AccommodationResponse:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id271
        message:
          type: string
        successful:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
            required:
            - user_id
        failed:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
              error:
                type: string
            required:
            - error
            - user_id
      required: &id272
      - failed
      - message
      - successful
    CourseAccommodationRequest:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user_id:
          type: integer
        extra_time:
          type: integer
        apply_to_in_progress_quiz_sessions:
          type: boolean
        reduce_choices_enabled:
          type: boolean
      required:
      - apply_to_in_progress_quiz_sessions
      - extra_time
      - reduce_choices_enabled
      - user_id
    QuizAccommodationRequest:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user_id:
          type: integer
        extra_time:
          type: integer
        extra_attempts:
          type: integer
        reduce_choices_enabled:
          type: boolean
      required:
      - extra_attempts
      - extra_time
      - reduce_choices_enabled
      - user_id
    SisAssignment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        course_id:
          type: integer
        name:
          type: string
        created_at:
          type: string
        due_at:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
        points_possible:
          type: integer
        submission_types:
          type: array
          items:
            type: string
        integration_id:
          type: string
        integration_data:
          type: string
        include_in_final_grade:
          type: boolean
        assignment_group:
          type: 'null'
        sections:
          type: 'null'
        user_overrides:
          type: 'null'
      required:
      - assignment_group
      - course_id
      - created_at
      - due_at
      - id
      - include_in_final_grade
      - integration_data
      - integration_id
      - lock_at
      - name
      - points_possible
      - sections
      - submission_types
      - unlock_at
      - user_overrides
    AssignmentGroupAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        group_weight:
          type: integer
        sis_source_id:
          type: string
        integration_data:
          type: object
          properties:
            '5678':
              type: string
          required:
          - '5678'
      required:
      - group_weight
      - id
      - integration_data
      - name
      - sis_source_id
    SectionAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sis_id:
          type: string
        integration_id:
          type: string
        origin_course:
          type: 'null'
        xlist_course:
          type: 'null'
        override:
          type: 'null'
      required:
      - id
      - integration_id
      - name
      - origin_course
      - override
      - sis_id
      - xlist_course
    CourseAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sis_id:
          type: string
        integration_id:
          type: string
      required:
      - id
      - integration_id
      - name
      - sis_id
    SectionAssignmentOverrideAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        override_title:
          type: string
        due_at:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
      required:
      - due_at
      - lock_at
      - override_title
      - unlock_at
    UserAssignmentOverrideAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        due_at:
          type: string
        unlock_at:
          type: string
        lock_at:
          type: string
        students:
          type: 'null'
      required:
      - due_at
      - id
      - lock_at
      - students
      - title
      - unlock_at
    StudentAttributes:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user_id:
          type: integer
        sis_user_id:
          type: string
      required:
      - sis_user_id
      - user_id
    MediaTrack:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id274
        id:
          type: integer
        user_id:
          type: integer
        media_object_id:
          type: integer
        kind:
          type: string
        locale:
          type: string
        content:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        webvtt_content:
          type: string
      required: &id275
      - content
      - created_at
      - id
      - kind
      - locale
      - media_object_id
      - updated_at
      - user_id
      - webvtt_content
    MediaObject:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id276
        can_add_captions:
          type: boolean
        user_entered_title:
          type: string
        title:
          type: string
        media_id:
          type: string
        media_type:
          type: string
        media_tracks:
          type: array
          items:
            type: object
            properties:
              kind:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
              url:
                type: string
              id:
                type: integer
              locale:
                type: string
            required:
            - created_at
            - id
            - kind
            - locale
            - updated_at
            - url
        media_sources:
          type: array
          items:
            type: object
            properties:
              height:
                type: string
              width:
                type: string
              content_type:
                type: string
              containerFormat:
                type: string
              url:
                type: string
              bitrate:
                type: string
              size:
                type: string
              isOriginal:
                type: string
              fileExt:
                type: string
            required:
            - bitrate
            - containerFormat
            - content_type
            - fileExt
            - height
            - isOriginal
            - size
            - url
            - width
      required: &id277
      - can_add_captions
      - media_id
      - media_sources
      - media_tracks
      - media_type
      - title
      - user_entered_title
    Grader:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id280
        id:
          type: integer
        name:
          type: string
        assignments:
          type: array
          items:
            type: integer
      required: &id281
      - assignments
      - id
      - name
    Day:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id278
        date:
          type: string
        graders:
          type: array
      required: &id279
      - date
      - graders
    SubmissionVersion:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id284
        assignment_id:
          type: integer
        assignment_name:
          type: string
        body:
          type: string
        current_grade:
          type: string
        current_graded_at:
          type: string
        current_grader:
          type: string
        grade_matches_current_submission:
          type: boolean
        graded_at:
          type: string
        grader:
          type: string
        grader_id:
          type: integer
        id:
          type: integer
        new_grade:
          type: string
        new_graded_at:
          type: string
        new_grader:
          type: string
        previous_grade:
          type: string
        previous_graded_at:
          type: string
        previous_grader:
          type: string
        score:
          type: integer
        user_name:
          type: string
        submission_type:
          type: string
        url:
          type: 'null'
        user_id:
          type: integer
        workflow_state:
          type: string
      required: &id285
      - assignment_id
      - assignment_name
      - body
      - current_grade
      - current_graded_at
      - current_grader
      - grade_matches_current_submission
      - graded_at
      - grader
      - grader_id
      - id
      - new_grade
      - new_graded_at
      - new_grader
      - previous_grade
      - previous_graded_at
      - previous_grader
      - score
      - submission_type
      - url
      - user_id
      - user_name
      - workflow_state
    SubmissionHistory:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id282
        submission_id:
          type: integer
        versions:
          type: 'null'
      required: &id283
      - submission_id
      - versions
    OutcomeImportData:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        import_type:
          type: string
      required:
      - import_type
    OutcomeImport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id286
        id:
          type: integer
        learning_outcome_group_id:
          type: integer
        created_at:
          type: string
        ended_at:
          type: string
        updated_at:
          type: string
        workflow_state:
          type: string
        data:
          type: 'null'
        progress:
          type: string
        user:
          type: 'null'
        processing_errors:
          type: array
          items:
            type: array
            items:
              type:
              - integer
              - string
      required: &id287
      - created_at
      - data
      - ended_at
      - id
      - learning_outcome_group_id
      - processing_errors
      - progress
      - updated_at
      - user
      - workflow_state
    GradingPeriodSets:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        title:
          type: string
        weighted:
          type: boolean
        display_totals_for_all_grading_periods:
          type: boolean
      required:
      - display_totals_for_all_grading_periods
      - title
      - weighted
    GradeChangeEventLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        assignment:
          type: integer
        course:
          type: integer
        student:
          type: integer
        grader:
          type: integer
        page_view:
          type: string
      required:
      - assignment
      - course
      - grader
      - page_view
      - student
    GradeChangeEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id290
        id:
          type: string
        created_at:
          type: string
        event_type:
          type: string
        excused_after:
          type: boolean
        excused_before:
          type: boolean
        grade_after:
          type: string
        grade_before:
          type: string
        graded_anonymously:
          type: boolean
        version_number:
          type: string
        request_id:
          type: string
        links:
          type: 'null'
      required: &id291
      - created_at
      - event_type
      - excused_after
      - excused_before
      - grade_after
      - grade_before
      - graded_anonymously
      - id
      - links
      - request_id
      - version_number
    File:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id292
        id:
          type: integer
        uuid:
          type: string
        folder_id:
          type: integer
        display_name:
          type: string
        filename:
          type: string
        content-type:
          type: string
        url:
          type: string
        size:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        unlock_at:
          type: string
        locked:
          type: boolean
        hidden:
          type: boolean
        lock_at:
          type: string
        hidden_for_user:
          type: boolean
        visibility_level:
          type: string
        thumbnail_url:
          type: 'null'
        modified_at:
          type: string
        mime_class:
          type: string
        media_entry_id:
          type: string
        locked_for_user:
          type: boolean
        lock_info:
          type: 'null'
        lock_explanation:
          type: string
        preview_url:
          type: 'null'
      required: &id293
      - content-type
      - created_at
      - display_name
      - filename
      - folder_id
      - hidden
      - hidden_for_user
      - id
      - lock_at
      - lock_explanation
      - lock_info
      - locked
      - locked_for_user
      - media_entry_id
      - mime_class
      - modified_at
      - preview_url
      - size
      - thumbnail_url
      - unlock_at
      - updated_at
      - url
      - uuid
      - visibility_level
    Folder:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id295
        context_type:
          type: string
        context_id:
          type: integer
        files_count:
          type: integer
        position:
          type: integer
        updated_at:
          type: string
        folders_url:
          type: string
        files_url:
          type: string
        full_name:
          type: string
        lock_at:
          type: string
        id:
          type: integer
        folders_count:
          type: integer
        name:
          type: string
        parent_folder_id:
          type: integer
        created_at:
          type: string
        unlock_at:
          type: 'null'
        hidden:
          type: boolean
        hidden_for_user:
          type: boolean
        locked:
          type: boolean
        locked_for_user:
          type: boolean
        for_submissions:
          type: boolean
      required: &id296
      - context_id
      - context_type
      - created_at
      - files_count
      - files_url
      - folders_count
      - folders_url
      - for_submissions
      - full_name
      - hidden
      - hidden_for_user
      - id
      - lock_at
      - locked
      - locked_for_user
      - name
      - parent_folder_id
      - position
      - unlock_at
      - updated_at
    UsageRights:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id302
        legal_copyright:
          type: string
        use_justification:
          type: string
        license:
          type: string
        license_name:
          type: string
        message:
          type: string
        file_ids:
          type: array
          items:
            type: integer
      required: &id303
      - file_ids
      - legal_copyright
      - license
      - license_name
      - message
      - use_justification
    License:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id304
        id:
          type: string
        name:
          type: string
        url:
          type: string
      required: &id305
      - id
      - name
      - url
    PlannerNote:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id306
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        user_id:
          type: integer
        workflow_state:
          type: string
        course_id:
          type: integer
        todo_date:
          type: string
        linked_object_type:
          type: string
        linked_object_id:
          type: integer
        linked_object_html_url:
          type: string
        linked_object_url:
          type: string
      required: &id307
      - course_id
      - description
      - id
      - linked_object_html_url
      - linked_object_id
      - linked_object_type
      - linked_object_url
      - title
      - todo_date
      - user_id
      - workflow_state
    PlannerOverride:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id310
        id:
          type: integer
        plannable_type:
          type: string
        plannable_id:
          type: integer
        user_id:
          type: integer
        assignment_id:
          type: integer
        workflow_state:
          type: string
        marked_complete:
          type: boolean
        dismissed:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
      required: &id311
      - assignment_id
      - created_at
      - deleted_at
      - dismissed
      - id
      - marked_complete
      - plannable_id
      - plannable_type
      - updated_at
      - user_id
      - workflow_state
    BlueprintTemplate:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id313
        id:
          type: integer
        course_id:
          type: integer
        last_export_completed_at:
          type: string
        associated_course_count:
          type: integer
        latest_migration:
          type: 'null'
      required: &id314
      - associated_course_count
      - course_id
      - id
      - last_export_completed_at
      - latest_migration
    BlueprintMigration:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id316
        id:
          type: integer
        template_id:
          type: integer
        subscription_id:
          type: integer
        user_id:
          type: integer
        workflow_state:
          type: string
        created_at:
          type: string
        exports_started_at:
          type: string
        imports_queued_at:
          type: string
        imports_completed_at:
          type: string
        comment:
          type: string
      required: &id317
      - comment
      - created_at
      - exports_started_at
      - id
      - imports_completed_at
      - imports_queued_at
      - subscription_id
      - template_id
      - user_id
      - workflow_state
    BlueprintRestriction:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        content:
          type: boolean
        points:
          type: boolean
        due_dates:
          type: boolean
        availability_dates:
          type: boolean
      required:
      - availability_dates
      - content
      - due_dates
      - points
    ChangeRecord:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id319
        asset_id:
          type: integer
        asset_type:
          type: string
        asset_name:
          type: string
        change_type:
          type: string
        html_url:
          type: string
        locked:
          type: boolean
        exceptions:
          type: array
          items:
            type: object
            properties:
              course_id:
                type: integer
              conflicting_changes:
                type: array
                items:
                  type: string
            required:
            - conflicting_changes
            - course_id
      required: &id320
      - asset_id
      - asset_name
      - asset_type
      - change_type
      - exceptions
      - html_url
      - locked
    ExceptionRecord:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        course_id:
          type: integer
        conflicting_changes:
          type: array
          items:
            type: string
      required:
      - conflicting_changes
      - course_id
    BlueprintSubscription:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id321
        id:
          type: integer
        template_id:
          type: integer
        blueprint_course:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            course_code:
              type: string
            term_name:
              type: string
          required:
          - course_code
          - id
          - name
          - term_name
      required: &id322
      - blueprint_course
      - id
      - template_id
    NoticeCatalog:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id323
        client_id:
          type: string
        deployment_id:
          type: string
        notice_handlers:
          type: array
          items:
            type: object
            properties:
              handler:
                type: string
              notice_type:
                type: string
            required:
            - handler
            - notice_type
      required: &id324
      - client_id
      - deployment_id
      - notice_handlers
    NoticeHandler:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id326
        handler:
          type: string
        notice_type:
          type: string
        max_batch_size:
          type: integer
      required: &id327
      - handler
      - max_batch_size
      - notice_type
    GradingSchemeEntry:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        name:
          type: string
        value:
          type: number
        calculated_value:
          type: integer
      required:
      - calculated_value
      - name
      - value
    GradingStandard:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id328
        title:
          type: string
        id:
          type: integer
        context_type:
          type: string
        context_id:
          type: integer
        points_based:
          type: boolean
        scaling_factor:
          type: number
        grading_scheme:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: number
            required:
            - name
            - value
      required: &id329
      - context_id
      - context_type
      - grading_scheme
      - id
      - points_based
      - scaling_factor
      - title
    SearchResult:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id332
        content_id:
          type: integer
        content_type:
          type: string
        title:
          type: string
        body:
          type: string
        html_url:
          type: string
        distance:
          type: number
      required: &id333
      - body
      - content_id
      - content_type
      - distance
      - html_url
      - title
    Feature:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id334
        feature:
          type: string
        display_name:
          type: string
        applies_to:
          type: string
        feature_flag:
          type: object
          properties:
            feature:
              type: string
            state:
              type: string
          required:
          - feature
          - state
        root_opt_in:
          type: boolean
        beta:
          type: boolean
        autoexpand:
          type: boolean
        release_notes_url:
          type: string
      required: &id335
      - applies_to
      - autoexpand
      - beta
      - display_name
      - feature
      - feature_flag
      - release_notes_url
      - root_opt_in
    FeatureFlag:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id336
        context_type:
          type: string
        context_id:
          type: integer
        feature:
          type: string
        state:
          type: string
        locked:
          type: boolean
      required: &id337
      - context_id
      - context_type
      - feature
      - locked
      - state
    Grade:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        html_url:
          type: string
        current_grade:
          type: string
        final_grade:
          type: string
        current_score:
          type: string
        final_score:
          type: string
        current_points:
          type: integer
        unposted_current_grade:
          type: string
        unposted_final_grade:
          type: string
        unposted_current_score:
          type: string
        unposted_final_score:
          type: string
        unposted_current_points:
          type: integer
      required:
      - current_grade
      - current_points
      - current_score
      - final_grade
      - final_score
      - html_url
      - unposted_current_grade
      - unposted_current_points
      - unposted_current_score
      - unposted_final_grade
      - unposted_final_score
    AssignmentGroupGrade:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        global_id:
          type: integer
        score:
          type: number
        possible:
          type: number
        weight:
          type: number
        grade:
          type: number
        dropped:
          type: array
      required:
      - dropped
      - global_id
      - grade
      - id
      - possible
      - score
      - weight
    GradeGroup:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        submission_id:
          type: 'null'
      required:
      - submission_id
    Grades:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id339
        current:
          type: 'null'
        current_groups:
          type: 'null'
        final:
          type: 'null'
        final_groups:
          type: 'null'
      required: &id340
      - current
      - current_groups
      - final
      - final_groups
    LearningObjectDates:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id341
        id:
          type: integer
        due_at:
          type: string
        lock_at:
          type: string
        reply_to_topic_due_at:
          type: string
        required_replies_due_at:
          type: string
        unlock_at:
          type: string
        only_visible_to_overrides:
          type: boolean
        graded:
          type: boolean
        blueprint_date_locks:
          type: array
          items:
            type: string
        visible_to_everyone:
          type: boolean
        overrides:
          type: 'null'
        checkpoints:
          type: 'null'
        tag:
          type: string
      required: &id342
      - blueprint_date_locks
      - checkpoints
      - due_at
      - graded
      - id
      - lock_at
      - only_visible_to_overrides
      - overrides
      - reply_to_topic_due_at
      - required_replies_due_at
      - tag
      - unlock_at
      - visible_to_everyone
    GroupCategory:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id344
        id:
          type: integer
        name:
          type: string
        role:
          type: string
        self_signup:
          type: 'null'
        auto_leader:
          type: 'null'
        context_type:
          type: string
        account_id:
          type: integer
        group_limit:
          type: 'null'
        sis_group_category_id:
          type: 'null'
        sis_import_id:
          type: 'null'
        progress:
          type: 'null'
        non_collaborative:
          type: 'null'
      required: &id345
      - account_id
      - auto_leader
      - context_type
      - group_limit
      - id
      - name
      - non_collaborative
      - progress
      - role
      - self_signup
      - sis_group_category_id
      - sis_import_id
    QuizExtension:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        quiz_id:
          type: integer
        user_id:
          type: integer
        extra_attempts:
          type: integer
        extra_time:
          type: integer
        manually_unlocked:
          type: boolean
        end_at:
          type: string
      required:
      - end_at
      - extra_attempts
      - extra_time
      - manually_unlocked
      - quiz_id
      - user_id
    Enrollment:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id355
        id:
          type: integer
        course_id:
          type: integer
        sis_course_id:
          type: string
        course_integration_id:
          type: string
        course_section_id:
          type: integer
        section_integration_id:
          type: string
        sis_account_id:
          type: string
        sis_section_id:
          type: string
        sis_user_id:
          type: string
        enrollment_state:
          type: string
        limit_privileges_to_course_section:
          type: boolean
        sis_import_id:
          type: integer
        root_account_id:
          type: integer
        type:
          type: string
        user_id:
          type: integer
        associated_user_id:
          type: 'null'
        role:
          type: string
        role_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        last_activity_at:
          type: string
        last_attended_at:
          type: string
        total_activity_time:
          type: integer
        html_url:
          type: string
        grades:
          type: object
          properties:
            html_url:
              type: string
            current_score:
              type: integer
            current_grade:
              type: 'null'
            final_score:
              type: number
            final_grade:
              type: 'null'
          required:
          - current_grade
          - current_score
          - final_grade
          - final_score
          - html_url
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            sortable_name:
              type: string
            short_name:
              type: string
          required:
          - id
          - name
          - short_name
          - sortable_name
        override_grade:
          type: string
        override_score:
          type: number
        unposted_current_grade:
          type: string
        unposted_final_grade:
          type: string
        unposted_current_score:
          type: string
        unposted_final_score:
          type: string
        has_grading_periods:
          type: boolean
        totals_for_all_grading_periods_option:
          type: boolean
        current_grading_period_title:
          type: string
        current_grading_period_id:
          type: integer
        current_period_override_grade:
          type: string
        current_period_override_score:
          type: number
        current_period_unposted_current_score:
          type: number
        current_period_unposted_final_score:
          type: number
        current_period_unposted_current_grade:
          type: string
        current_period_unposted_final_grade:
          type: string
      required: &id356
      - associated_user_id
      - course_id
      - course_integration_id
      - course_section_id
      - created_at
      - current_grading_period_id
      - current_grading_period_title
      - current_period_override_grade
      - current_period_override_score
      - current_period_unposted_current_grade
      - current_period_unposted_current_score
      - current_period_unposted_final_grade
      - current_period_unposted_final_score
      - end_at
      - enrollment_state
      - grades
      - has_grading_periods
      - html_url
      - id
      - last_activity_at
      - last_attended_at
      - limit_privileges_to_course_section
      - override_grade
      - override_score
      - role
      - role_id
      - root_account_id
      - section_integration_id
      - sis_account_id
      - sis_course_id
      - sis_import_id
      - sis_section_id
      - sis_user_id
      - start_at
      - total_activity_time
      - totals_for_all_grading_periods_option
      - type
      - unposted_current_grade
      - unposted_current_score
      - unposted_final_grade
      - unposted_final_score
      - updated_at
      - user
      - user_id
    ResultLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        user:
          type: string
        assessor:
          type: string
        assessment:
          type: string
      required:
      - assessment
      - assessor
      - user
    Assessment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        title:
          type: string
      required:
      - id
      - key
      - title
    Group:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id348
        id:
          type: integer
        name:
          type: string
        description:
          type: 'null'
        is_public:
          type: boolean
        followed_by_user:
          type: boolean
        join_level:
          type: string
        members_count:
          type: integer
        avatar_url:
          type: string
        context_type:
          type: string
        context_name:
          type: string
        course_id:
          type: integer
        role:
          type: 'null'
        group_category_id:
          type: integer
        sis_group_id:
          type: string
        sis_import_id:
          type: integer
        storage_quota_mb:
          type: integer
        permissions:
          type: object
          properties:
            create_discussion_topic:
              type: boolean
            create_announcement:
              type: boolean
          required:
          - create_announcement
          - create_discussion_topic
        users:
          type: 'null'
        non_collaborative:
          type: 'null'
      required: &id349
      - avatar_url
      - context_name
      - context_type
      - course_id
      - description
      - followed_by_user
      - group_category_id
      - id
      - is_public
      - join_level
      - members_count
      - name
      - non_collaborative
      - permissions
      - role
      - sis_group_id
      - sis_import_id
      - storage_quota_mb
      - users
    GroupMembership:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id360
        id:
          type: integer
        group_id:
          type: integer
        user_id:
          type: integer
        workflow_state:
          type: string
        moderator:
          type: boolean
        just_created:
          type: boolean
        sis_import_id:
          type: integer
      required: &id361
      - group_id
      - id
      - just_created
      - moderator
      - sis_import_id
      - user_id
      - workflow_state
    MigrationIssue:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id362
        id:
          type: integer
        content_migration_url:
          type: string
        description:
          type: string
        workflow_state:
          type: string
        fix_issue_html_url:
          type: string
        issue_type:
          type: string
        error_report_html_url:
          type: string
        error_message:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required: &id363
      - content_migration_url
      - created_at
      - description
      - error_message
      - error_report_html_url
      - fix_issue_html_url
      - id
      - issue_type
      - updated_at
      - workflow_state
    Migrator:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id366
        type:
          type: string
        requires_file_upload:
          type: boolean
        name:
          type: string
        required_settings:
          type: array
          items:
            type: string
      required: &id367
      - name
      - required_settings
      - requires_file_upload
      - type
    BlockEditorTemplate:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id368
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        node_tree:
          type: 'null'
        editor_version:
          type: string
        template_type:
          type: string
        workflow_state:
          type: string
      required: &id369
      - created_at
      - description
      - editor_version
      - id
      - name
      - node_tree
      - template_type
      - updated_at
      - workflow_state
    CourseEpubExport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id370
        id:
          type: integer
        name:
          type: string
        epub_export:
          type: 'null'
      required: &id371
      - epub_export
      - id
      - name
    EpubExport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id372
        id:
          type: integer
        created_at:
          type: string
        attachment:
          type: object
          properties:
            url:
              type: string
          required:
          - url
        progress_url:
          type: string
        user_id:
          type: integer
        workflow_state:
          type: string
      required: &id373
      - attachment
      - created_at
      - id
      - progress_url
      - user_id
      - workflow_state
    CalendarEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id374
        id:
          type: integer
        title:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        description:
          type: string
        location_name:
          type: string
        location_address:
          type: string
        context_code:
          type: string
        effective_context_code:
          type: 'null'
        context_name:
          type: string
        all_context_codes:
          type: string
        workflow_state:
          type: string
        hidden:
          type: boolean
        parent_event_id:
          type: 'null'
        child_events_count:
          type: integer
        child_events:
          type: 'null'
        url:
          type: string
        html_url:
          type: string
        all_day_date:
          type: string
        all_day:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        appointment_group_id:
          type: 'null'
        appointment_group_url:
          type: 'null'
        own_reservation:
          type: boolean
        reserve_url:
          type: 'null'
        reserved:
          type: boolean
        participant_type:
          type: string
        participants_per_appointment:
          type: 'null'
        available_slots:
          type: 'null'
        user:
          type: 'null'
        group:
          type: 'null'
        important_dates:
          type: boolean
        series_uuid:
          type: 'null'
        rrule:
          type: 'null'
        series_head:
          type: 'null'
        series_natural_language:
          type: string
        blackout_date:
          type: boolean
      required: &id375
      - all_context_codes
      - all_day
      - all_day_date
      - appointment_group_id
      - appointment_group_url
      - available_slots
      - blackout_date
      - child_events
      - child_events_count
      - context_code
      - context_name
      - created_at
      - description
      - effective_context_code
      - end_at
      - group
      - hidden
      - html_url
      - id
      - important_dates
      - location_address
      - location_name
      - own_reservation
      - parent_event_id
      - participant_type
      - participants_per_appointment
      - reserve_url
      - reserved
      - rrule
      - series_head
      - series_natural_language
      - series_uuid
      - start_at
      - title
      - updated_at
      - url
      - user
      - workflow_state
    AssignmentEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        start_at:
          type: string
        end_at:
          type: string
        description:
          type: string
        context_code:
          type: string
        workflow_state:
          type: string
        url:
          type: string
        html_url:
          type: string
        all_day_date:
          type: string
        all_day:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        assignment:
          type: 'null'
        assignment_overrides:
          type: 'null'
        important_dates:
          type: boolean
        rrule:
          type: string
        series_head:
          type: 'null'
        series_natural_language:
          type: string
      required:
      - all_day
      - all_day_date
      - assignment
      - assignment_overrides
      - context_code
      - created_at
      - description
      - end_at
      - html_url
      - id
      - important_dates
      - rrule
      - series_head
      - series_natural_language
      - start_at
      - title
      - updated_at
      - url
      - workflow_state
    CourseEventLink:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        course:
          type: integer
        user:
          type: integer
        page_view:
          type: string
        copied_from:
          type: integer
        copied_to:
          type: integer
        sis_batch:
          type: integer
      required:
      - copied_from
      - copied_to
      - course
      - page_view
      - sis_batch
      - user
    CourseEvent:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id381
        id:
          type: string
        created_at:
          type: string
        event_type:
          type: string
        event_data:
          type: string
        event_source:
          type: string
        links:
          type: object
          properties:
            course:
              type: string
            user:
              type: string
            page_view:
              type: string
          required:
          - course
          - page_view
          - user
      required: &id382
      - created_at
      - event_data
      - event_source
      - event_type
      - id
      - links
    CreatedEventData:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        name:
          type: array
          items:
            type:
            - 'null'
            - string
        start_at:
          type: array
          items:
            type:
            - 'null'
            - string
        conclude_at:
          type: array
          items:
            type:
            - 'null'
            - string
        is_public:
          type: array
          items:
            type:
            - boolean
            - 'null'
        created_source:
          type: string
      required:
      - conclude_at
      - created_source
      - is_public
      - name
      - start_at
    UpdatedEventData:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        name:
          type: array
          items:
            type: string
        start_at:
          type: array
          items:
            type: string
        conclude_at:
          type: array
          items:
            type: string
        is_public:
          type: array
          items:
            type: boolean
      required:
      - conclude_at
      - is_public
      - name
      - start_at
    ToolSetting:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        resource_type_code:
          type: string
        resource_url:
          type: string
      required:
      - resource_type_code
      - resource_url
    OriginalityReport:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id384
        id:
          type: integer
        file_id:
          type: integer
        originality_score:
          type: number
        originality_report_file_id:
          type: integer
        originality_report_url:
          type: string
        tool_setting:
          type: 'null'
        error_report:
          type: 'null'
        submission_time:
          type: 'null'
        root_account_id:
          type: integer
      required: &id385
      - error_report
      - file_id
      - id
      - originality_report_file_id
      - originality_report_url
      - originality_score
      - root_account_id
      - submission_time
      - tool_setting
    CommMessage:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id391
        id:
          type: integer
        created_at:
          type: string
        sent_at:
          type: string
        workflow_state:
          type: string
        from:
          type: string
        from_name:
          type: string
        to:
          type: string
        reply_to:
          type: string
        subject:
          type: string
        body:
          type: string
        html_body:
          type: string
      required: &id392
      - body
      - created_at
      - from
      - from_name
      - html_body
      - id
      - reply_to
      - sent_at
      - subject
      - to
      - workflow_state
    OutcomeResult:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        score:
          type: integer
        submitted_or_assessed_at:
          type: string
        links:
          type: object
          properties:
            user:
              type: string
            learning_outcome:
              type: string
            alignment:
              type: string
          required:
          - alignment
          - learning_outcome
          - user
        percent:
          type: number
      required:
      - id
      - links
      - percent
      - score
      - submitted_or_assessed_at
    OutcomeRollupScoreLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        outcome:
          type: integer
      required:
      - outcome
    OutcomeRollupScore:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        score:
          type: integer
        count:
          type: integer
        links:
          type: object
          properties:
            outcome:
              type: string
          required:
          - outcome
      required:
      - count
      - links
      - score
    OutcomeRollupLinks:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        course:
          type: integer
        user:
          type: integer
        section:
          type: integer
      required:
      - course
      - section
      - user
    OutcomeRollup:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        scores:
          type: 'null'
        name:
          type: string
        links:
          type: object
          properties:
            course:
              type: integer
            user:
              type: integer
            section:
              type: integer
          required:
          - course
          - section
          - user
      required:
      - links
      - name
      - scores
    OutcomePath:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        parts:
          type: 'null'
      required:
      - id
      - parts
    OutcomePathPart:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        name:
          type: string
      required:
      - name
    Appointment:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        start_at:
          type: string
        end_at:
          type: string
      required:
      - end_at
      - id
      - start_at
    PollChoice:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        poll_id:
          type: integer
        is_correct:
          type: boolean
        text:
          type: string
        position:
          type: integer
      required:
      - id
      - is_correct
      - poll_id
      - position
      - text
    ProficiencyRating:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        description:
          type: string
        points:
          type: integer
        mastery:
          type: boolean
        color:
          type: string
      required:
      - color
      - description
      - mastery
      - points
    Proficiency:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id398
        ratings:
          type: array
      required: &id399
      - ratings
    ContextExternalTool:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id401
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        url:
          type: string
        domain:
          type: string
        consumer_key:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        privacy_level:
          type: string
        custom_fields:
          type: object
          properties:
            key:
              type: string
          required:
          - key
        workflow_state:
          type: string
        is_rce_favorite:
          type: boolean
        is_top_nav_favorite:
          type: boolean
        selection_width:
          type: integer
        selection_height:
          type: integer
        icon_url:
          type: string
        not_selectable:
          type: boolean
        version:
          type: string
        unified_tool_id:
          type: 'null'
        developer_key_id:
          type: integer
        lti_registration_id:
          type: integer
        deployment_id:
          type: string
        allow_membership_service_access:
          type: boolean
        prefer_sis_email:
          type: boolean
        estimated_duration:
          type: 'null'
        account_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        analytics_hub:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_edit:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_group_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        assignment_view:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        collaboration:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        conference_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        course_assignments_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        course_home_sub_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        course_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        course_settings_sub_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        discussion_topic_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        discussion_topic_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        editor_button:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        file_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        file_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        global_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        homework_submission:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        link_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        migration_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        module_group_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        module_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        module_index_menu_modal:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        module_menu_modal:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        module_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        page_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        page_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        post_grades:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        quiz_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        quiz_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        resource_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        similarity_detection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        student_context_card:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        submission_type_selection:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        tool_configuration:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        top_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        user_navigation:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        wiki_index_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        wiki_page_menu:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        ActivityAssetProcessor:
          type: object
          properties:
            type:
              type: string
          required:
          - type
        ActivityAssetProcessorContribution:
          type: object
          properties:
            type:
              type: string
          required:
          - type
      required: &id402
      - ActivityAssetProcessor
      - ActivityAssetProcessorContribution
      - account_navigation
      - allow_membership_service_access
      - analytics_hub
      - assignment_edit
      - assignment_group_menu
      - assignment_index_menu
      - assignment_menu
      - assignment_selection
      - assignment_view
      - collaboration
      - conference_selection
      - consumer_key
      - course_assignments_menu
      - course_home_sub_navigation
      - course_navigation
      - course_settings_sub_navigation
      - created_at
      - custom_fields
      - deployment_id
      - description
      - developer_key_id
      - discussion_topic_index_menu
      - discussion_topic_menu
      - domain
      - editor_button
      - estimated_duration
      - file_index_menu
      - file_menu
      - global_navigation
      - homework_submission
      - icon_url
      - id
      - is_rce_favorite
      - is_top_nav_favorite
      - link_selection
      - lti_registration_id
      - migration_selection
      - module_group_menu
      - module_index_menu
      - module_index_menu_modal
      - module_menu
      - module_menu_modal
      - name
      - not_selectable
      - page_index_menu
      - page_menu
      - post_grades
      - prefer_sis_email
      - privacy_level
      - quiz_index_menu
      - quiz_menu
      - resource_selection
      - selection_height
      - selection_width
      - similarity_detection
      - student_context_card
      - submission_type_selection
      - tool_configuration
      - top_navigation
      - unified_tool_id
      - updated_at
      - url
      - user_navigation
      - version
      - wiki_index_menu
      - wiki_page_menu
      - workflow_state
    ContextExternalToolPlacement:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        enabled:
          type: boolean
        url:
          type: string
        target_link_uri:
          type: string
        text:
          type: string
        label:
          type: string
        labels:
          type: object
          properties:
            en:
              type: string
            es:
              type: string
          required:
          - en
          - es
        message_type:
          type: string
        selection_width:
          type: integer
        selection_height:
          type: integer
        launch_width:
          type: integer
        launch_height:
          type: integer
        icon_url:
          type: string
        canvas_icon_class:
          type: string
        allow_fullscreen:
          type: boolean
        custom_fields:
          type: object
          properties:
            placement_id:
              type: string
            special_param:
              type: string
          required:
          - placement_id
          - special_param
        visibility:
          type: string
        required_permissions:
          type: string
        default:
          type: string
        display_type:
          type: string
        windowTarget:
          type: string
        accept_media_types:
          type: string
        use_tray:
          type: boolean
        icon_svg_path_64:
          type: string
        root_account_only:
          type: boolean
        description:
          type: string
        require_resource_selection:
          type: boolean
        prefer_sis_email:
          type: boolean
        oauth_compliant:
          type: boolean
        eula:
          type: object
          properties:
            enabled:
              type: boolean
            target_link_uri:
              type: string
            custom_fields:
              type: object
              properties:
                agreement_version:
                  type: string
              required:
              - agreement_version
          required:
          - custom_fields
          - enabled
          - target_link_uri
      required:
      - accept_media_types
      - allow_fullscreen
      - canvas_icon_class
      - custom_fields
      - default
      - description
      - display_type
      - enabled
      - eula
      - icon_svg_path_64
      - icon_url
      - label
      - labels
      - launch_height
      - launch_width
      - message_type
      - oauth_compliant
      - prefer_sis_email
      - require_resource_selection
      - required_permissions
      - root_account_only
      - selection_height
      - selection_width
      - target_link_uri
      - text
      - url
      - use_tray
      - visibility
      - windowTarget
    EstimatedDuration:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: integer
        duration:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
      - created_at
      - duration
      - id
      - updated_at
    ExternalFeed:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id403
        id:
          type: integer
        display_name:
          type: string
        url:
          type: string
        header_match:
          type: string
        created_at:
          type: string
        verbosity:
          type: string
      required: &id404
      - created_at
      - display_name
      - header_match
      - id
      - url
      - verbosity
    SharedBrandConfig:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id407
        id:
          type: integer
        account_id:
          type: string
        brand_config_md5:
          type: string
        name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required: &id408
      - account_id
      - brand_config_md5
      - created_at
      - id
      - name
      - updated_at
    ErrorReport:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        subject:
          type: string
        comments:
          type: string
        user_perceived_severity:
          type: string
        email:
          type: string
        url:
          type: string
        context_asset_string:
          type: string
        user_roles:
          type: string
      required:
      - comments
      - context_asset_string
      - email
      - subject
      - url
      - user_perceived_severity
      - user_roles
    NamesAndRoleContext:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        title:
          type: string
      required:
      - id
      - label
      - title
    NamesAndRoleMessage:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        https://purl.imsglobal.org/spec/lti/claim/message_type:
          type: string
        locale:
          type: string
        https://www.instructure.com/canvas_user_id:
          type: integer
        https://www.instructure.com/canvas_user_login_id:
          type: string
        https://purl.imsglobal.org/spec/lti/claim/custom:
          type: object
          properties:
            message_locale:
              type: string
            person_address_timezone:
              type: string
          required:
          - message_locale
          - person_address_timezone
      required:
      - https://purl.imsglobal.org/spec/lti/claim/custom
      - https://purl.imsglobal.org/spec/lti/claim/message_type
      - https://www.instructure.com/canvas_user_id
      - https://www.instructure.com/canvas_user_login_id
      - locale
    NamesAndRoleMembership:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        status:
          type: string
        name:
          type: string
        picture:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        email:
          type: string
        lis_person_sourcedid:
          type: string
        user_id:
          type: string
        roles:
          type: array
          items:
            type: string
        message:
          type: array
          items:
            type: object
            properties:
              https://purl.imsglobal.org/spec/lti/claim/message_type:
                type: string
              locale:
                type: string
              https://www.instructure.com/canvas_user_id:
                type: integer
              https://www.instructure.com/canvas_user_login_id:
                type: string
              https://purl.imsglobal.org/spec/lti/claim/custom:
                type: object
                properties:
                  message_locale:
                    type: string
                  person_address_timezone:
                    type: string
                required:
                - message_locale
                - person_address_timezone
            required:
            - https://purl.imsglobal.org/spec/lti/claim/custom
            - https://purl.imsglobal.org/spec/lti/claim/message_type
            - https://www.instructure.com/canvas_user_id
            - https://www.instructure.com/canvas_user_login_id
            - locale
      required:
      - email
      - family_name
      - given_name
      - lis_person_sourcedid
      - message
      - name
      - picture
      - roles
      - status
      - user_id
    NamesAndRoleMemberships:
      $schema: http://json-schema.org/schema#
      type: object
      properties: &id410
        id:
          type: string
        context:
          type: object
          properties:
            id:
              type: string
            label:
              type: string
            title:
              type: string
          required:
          - id
          - label
          - title
        members:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
              name:
                type: string
              picture:
                type: string
              given_name:
                type: string
              family_name:
                type: string
              email:
                type: string
              lis_person_sourcedid:
                type: string
              user_id:
                type: string
              roles:
                type: array
                items:
                  type: string
              message:
                type: array
                items:
                  type: object
                  properties:
                    https://purl.imsglobal.org/spec/lti/claim/message_type:
                      type: string
                    locale:
                      type: string
                    https://www.instructure.com/canvas_user_id:
                      type: integer
                    https://www.instructure.com/canvas_user_login_id:
                      type: string
                    https://purl.imsglobal.org/spec/lti/claim/custom:
                      type: object
                      properties:
                        message_locale:
                          type: string
                        person_address_timezone:
                          type: string
                      required:
                      - message_locale
                      - person_address_timezone
                  required:
                  - https://purl.imsglobal.org/spec/lti/claim/custom
                  - https://purl.imsglobal.org/spec/lti/claim/message_type
                  - https://www.instructure.com/canvas_user_id
                  - https://www.instructure.com/canvas_user_login_id
                  - locale
            required:
            - email
            - family_name
            - given_name
            - lis_person_sourcedid
            - message
            - name
            - picture
            - roles
            - status
            - user_id
      required: &id411
      - context
      - id
      - members
    ProvisionalGrade:
      $schema: http://json-schema.org/schema#
      type: object
      properties:
        provisional_grade_id:
          type: integer
        score:
          type: integer
        grade:
          type: string
        grade_matches_current_submission:
          type: boolean
        graded_at:
          type: string
        final:
          type: boolean
        speedgrader_url:
          type: string
      required:
      - final
      - grade
      - grade_matches_current_submission
      - graded_at
      - provisional_grade_id
      - score
      - speedgrader_url
paths:
  /api/v1/courses/{course_id}/quizzes/{id}/submission_users/message:
    post:
      summary: Post Courses Message
      description: "{ ``` \"body\": { \"type\": \"string\", \"description\": \"message body of the conversation to be created\", \"example\": \"Please take the quiz.\" }, \"recipients\": { \"type\": \"string\", \"description\": \"Who to send the message to. May be either 'submitted' or 'unsubmitted'\", \"example\": \"submitted\" }, \"subject\": { \"type\": \"string\", \"description\": \"Subject of the new Conversation created\", \"example\": \"ATTN: Quiz 101 Students\" } ``` }\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:id/submission_users/message"
      operationId: create_message
      tags:
      - Quiz Submission User List
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id001
              type: object
              properties:
                conversations:
                  type: string
                  description: Body and recipients to send the message to.
          application/x-www-form-urlencoded:
            schema: *id001
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{id}/late_policy:
    get:
      summary: Get Courses Late_Policy
      description: "Returns the late policy for a course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:id/late_policy"
      operationId: get_late_policy
      tags:
      - Late Policy
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Late_Policy
      description: "Create a late policy. If the course already has a late policy, a bad\\_request is returned since there can only be one late policy per course.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:id/late_policy"
      operationId: create_late_policy
      tags:
      - Late Policy
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: late_policy[missing_submission_deduction_enabled]
        in: query
        required: false
        description: Whether to enable the missing submission deduction late policy.
        schema:
          type: boolean
      - name: late_policy[late_submission_deduction_enabled]
        in: query
        required: false
        description: Whether to enable the late submission deduction late policy.
        schema:
          type: boolean
      - name: late_policy[late_submission_interval]
        in: query
        required: false
        description: The interval for late policies.
        schema:
          type: string
      - name: late_policy[late_submission_minimum_percent_enabled]
        in: query
        required: false
        description: Whether to enable the late submission minimum percent for a late policy.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id002
              type: object
              properties:
                late_policy[missing_submission_deduction]:
                  type: string
                  description: How many percentage points to deduct from a missing submission.
                late_policy[late_submission_deduction]:
                  type: string
                  description: How many percentage points to deduct per the late submission interval.
                late_policy[late_submission_minimum_percent]:
                  type: string
                  description: The minimum grade a submissions can have in percentage points.
          application/x-www-form-urlencoded:
            schema: *id002
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Patch Courses Late_Policy
      description: "Patch a late policy. No body is returned upon success.\n\nRequired OAuth scope: url:PATCH|/api/v1/courses/:id/late_policy"
      operationId: update_late_policy
      tags:
      - Late Policy
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: late_policy[missing_submission_deduction_enabled]
        in: query
        required: false
        description: Whether to enable the missing submission deduction late policy.
        schema:
          type: boolean
      - name: late_policy[late_submission_deduction_enabled]
        in: query
        required: false
        description: Whether to enable the late submission deduction late policy.
        schema:
          type: boolean
      - name: late_policy[late_submission_interval]
        in: query
        required: false
        description: The interval for late policies.
        schema:
          type: string
      - name: late_policy[late_submission_minimum_percent_enabled]
        in: query
        required: false
        description: Whether to enable the late submission minimum percent for a late policy.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id003
              type: object
              properties:
                late_policy[missing_submission_deduction]:
                  type: string
                  description: How many percentage points to deduct from a missing submission.
                late_policy[late_submission_deduction]:
                  type: string
                  description: How many percentage points to deduct per the late submission interval.
                late_policy[late_submission_minimum_percent]:
                  type: string
                  description: The minimum grade a submissions can have in percentage points.
          application/x-www-form-urlencoded:
            schema: *id003
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/favorites/courses:
    get:
      summary: Get Users Courses
      description: "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen any favorites, then a selection of currently enrolled courses will be returned. See the [List courses API](../courses#method.courses.index) for details on accepted include\\[] parameters.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/favorites/courses"
      operationId: list_courses
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: exclude_blueprint_courses
        in: query
        required: false
        description: When set, only return courses that are not configured as blueprint courses.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Courses
      description: "Reset the current user’s course favorites to the default automatically generated list of enrolled courses\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/favorites/courses"
      operationId: delete_courses
      tags:
      - Favorites
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/favorites/groups:
    get:
      summary: Get Users Groups
      description: "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen any favorites, then a selection of groups that the user is a member of will be returned.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/favorites/groups"
      operationId: list_groups
      tags:
      - Favorites
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Groups
      description: "Reset the current user’s group favorites to the default automatically generated list of enrolled group\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/favorites/groups"
      operationId: delete_groups
      tags:
      - Favorites
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/favorites/courses/{id}:
    post:
      summary: Post Users Courses
      description: "Add a course to the current user’s favorites. If the course is already in the user’s favorites, nothing happens. Canvas for Elementary subject and homeroom courses can be added to favorites, but this has no effect in the UI.\n\nRequired OAuth scope: url:POST|/api/v1/users/self/favorites/courses/:id"
      operationId: create_courses
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id004
              type: object
              properties:
                id:
                  type: string
                  description: The ID or SIS ID of the course to add. The current user must be registered in the course.
          application/x-www-form-urlencoded:
            schema: *id004
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id005
                required: *id006
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Courses
      description: "Remove a course from the current user’s favorites.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/favorites/courses/:id"
      operationId: delete_courses
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: the ID or SIS ID of the course to remove
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id005
                required: *id006
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/favorites/groups/{id}:
    post:
      summary: Post Users Groups
      description: "Add a group to the current user’s favorites. If the group is already in the user’s favorites, nothing happens.\n\nRequired OAuth scope: url:POST|/api/v1/users/self/favorites/groups/:id"
      operationId: create_groups
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id007
              type: object
              properties:
                id:
                  type: string
                  description: The ID or SIS ID of the group to add. The current user must be a member of the group.
          application/x-www-form-urlencoded:
            schema: *id007
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id005
                required: *id006
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Groups
      description: "Remove a group from the current user’s favorites.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/favorites/groups/:id"
      operationId: delete_groups
      tags:
      - Favorites
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: the ID or SIS ID of the group to remove
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id005
                required: *id006
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/account_notifications:
    get:
      summary: Get Accounts Account_Notifications
      description: "Returns a list of all global notifications in the account for the current user Any notifications that have been closed by the user will not be returned, unless a include\\_past parameter is passed in as true. Admins can request all global notifications for the account by passing in an include\\_all parameter.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/account_notifications"
      operationId: get_account_notifications
      tags:
      - Account Notifications
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: include_past
        in: query
        required: false
        description: Include past and dismissed global announcements.
        schema:
          type: boolean
      - name: include_all
        in: query
        required: false
        description: Include all global announcements, regardless of user’s role or availability date. Only available to account admins.
        schema:
          type: boolean
      - name: show_is_closed
        in: query
        required: false
        description: Include a flag for each notification indicating whether it has been read by the user.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id008
                  required: *id009
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Account_Notifications
      description: "Create and return a new global notification for an account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/account_notifications"
      operationId: create_account_notifications
      tags:
      - Account Notifications
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: account_notification[icon]
        in: query
        required: false
        description: 'The icon to display with the notification. Note: Defaults to warning.Allowed values: warning, information, question, error, calendar'
        schema:
          type: string
      - name: account_notification_roles[]
        in: query
        required: false
        description: 'The role(s) to send global notification to. Note: ommitting this field will send to everyone Example:account_notification_roles: ["StudentEnrollment", "TeacherEnrollment"]'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id010
              type: object
              properties:
                account_notification[subject]:
                  type: string
                  description: The subject of the notification.
                account_notification[message]:
                  type: string
                  description: The message body of the notification.
                account_notification[start_at]:
                  type: string
                  description: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
                account_notification[end_at]:
                  type: string
                  description: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
          application/x-www-form-urlencoded:
            schema: *id010
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/account_notifications/{id}:
    get:
      summary: Get Accounts Account_Notifications
      description: "Returns a global notification for the current user A notification that has been closed by the user will not be returned\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/account_notifications/:id"
      operationId: get_account_notifications
      tags:
      - Account Notifications
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id008
                required: *id009
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Account_Notifications
      description: "Update global notification for an account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/account_notifications/:id"
      operationId: update_account_notifications
      tags:
      - Account Notifications
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: account_notification[subject]
        in: query
        required: false
        description: The subject of the notification.
        schema:
          type: string
      - name: account_notification[message]
        in: query
        required: false
        description: The message body of the notification.
        schema:
          type: string
      - name: account_notification[icon]
        in: query
        required: false
        description: 'The icon to display with the notification.Allowed values: warning, information, question, error, calendar'
        schema:
          type: string
      - name: account_notification_roles[]
        in: query
        required: false
        description: 'The role(s) to send global notification to. Note: ommitting this field will send to everyone Example:account_notification_roles: ["StudentEnrollment", "TeacherEnrollment"]'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id011
              type: object
              properties:
                account_notification[start_at]:
                  type: string
                  description: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
                account_notification[end_at]:
                  type: string
                  description: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
          application/x-www-form-urlencoded:
            schema: *id011
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Account_Notifications
      description: "If the current user no longer wants to see this account notification, it can be closed with this call. This affects the current user only. If the current user is an admin and they pass a remove parameter with a value of “true”, the account notification will be destroyed. This affects all users.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/account_notifications/:id"
      operationId: delete_account_notifications
      tags:
      - Account Notifications
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: remove
        in: query
        required: false
        description: Destroy the account notification.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id008
                required: *id009
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/find_recipients:
    get:
      summary: Get Conversations Find_Recipients
      description: "Deprecated, see the [Find recipients endpoint](../search#method.search.recipients) in the Search API ### [Unread count](#method.conversations.unread_count) <a href=\"#method.conversations.unread_count\" id=\"method.conversations.unread_count\"></a> [ConversationsController#unread\\_count](https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/conversations/find_recipients"
      operationId: list_find_recipients
      tags:
      - Conversations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/search/recipients:
    get:
      summary: Get Search Recipients
      description: "Find valid recipients (users, courses and groups) that the current user can send messages to. The /api/v1/search/recipients path is the preferred endpoint, /api/v1/conversations/find\\_recipients is deprecated. Pagination is supported.\n\nRequired OAuth scope: url:GET|/api/v1/search/recipients"
      operationId: list_recipients
      tags:
      - Search
      security:
      - bearerAuth: []
      parameters:
      - name: search
        in: query
        required: false
        description: Search terms used for matching users/courses/groups (e.g. “bob smith”). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.
        schema:
          type: string
      - name: context
        in: query
        required: false
        description: Limit the search to a particular course/group (e.g. “course_3” or “group_4”).
        schema:
          type: string
      - name: exclude[]
        in: query
        required: false
        description: Array of ids to exclude from the search. These may be user ids or course/group ids prefixed with “course_” or “group_” respectively, e.g. exclude[]=1\&exclude=2\&exclude[]=course_3
        schema:
          type: string
      - name: type
        in: query
        required: false
        description: 'Limit the search just to users or contexts (groups/courses).Allowed values: user, context'
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: Search for a specific user id. This ignores the other above parameters, and will never return more than one result.
        schema:
          type: integer
      - name: from_conversation_id
        in: query
        required: false
        description: When searching by user_id, only users that could be normally messaged by this user will be returned. This parameter allows you to specify a conversation that will be referenced for a shared context – if both the current user and the searched user are in the conversation, the user will be returned. This is used to start new side conversations.
        schema:
          type: integer
      - name: permissions[]
        in: query
        required: false
        description: Array of permission strings to be checked for each matched context (e.g. “send_messages”). This argument determines which permissions may be returned in the response; it won’t prevent contexts from being returned if they don’t grant the permission(s).
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/search/all_courses:
    get:
      summary: Get Search All_Courses
      description: "A paginated list of all courses visible in the public index\n\nRequired OAuth scope: url:GET|/api/v1/search/all_courses"
      operationId: list_all_courses
      tags:
      - Search
      security:
      - bearerAuth: []
      parameters:
      - name: search
        in: query
        required: false
        description: Search terms used for matching users/courses/groups (e.g. “bob smith”). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.
        schema:
          type: string
      - name: public_only
        in: query
        required: false
        description: Only return courses with public content. Defaults to false.
        schema:
          type: boolean
      - name: open_enrollment_only
        in: query
        required: false
        description: Only return courses that allow self enrollment. Defaults to false.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/questions:
    get:
      summary: Get Courses Questions
      description: "Returns the paginated list of QuizQuestions in this quiz.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/questions"
      operationId: get_questions
      tags:
      - Quiz Questions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: quiz_submission_id
        in: query
        required: false
        description: 'If specified, the endpoint will return the questions that were presented for that submission. This is useful if the quiz has been modified after the submission was created and the latest quiz version’s set of questions does not match the submission’s. NOTE: you must specify quiz_submission_attempt as well if you specify this parameter.'
        schema:
          type: integer
      - name: quiz_submission_attempt
        in: query
        required: false
        description: The attempt of the submission you want the questions for.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id012
                  required: *id013
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Questions
      description: "Create a new quiz question for this quiz\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/questions"
      operationId: create_questions
      tags:
      - Quiz Questions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: question[question_name]
        in: query
        required: false
        description: The name of the question.
        schema:
          type: string
      - name: question[question_text]
        in: query
        required: false
        description: The text of the question.
        schema:
          type: string
      - name: question[quiz_group_id]
        in: query
        required: false
        description: The id of the quiz group to assign the question to.
        schema:
          type: integer
      - name: question[question_type]
        in: query
        required: false
        description: 'The type of question. Multiple optional fields depend upon the type of question to be used.Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question'
        schema:
          type: string
      - name: question[position]
        in: query
        required: false
        description: The order in which the question will be displayed in the quiz in relation to other questions.
        schema:
          type: integer
      - name: question[points_possible]
        in: query
        required: false
        description: The maximum amount of points received for answering this question correctly.
        schema:
          type: integer
      - name: question[correct_comments]
        in: query
        required: false
        description: The comment to display if the student answers the question correctly.
        schema:
          type: string
      - name: question[incorrect_comments]
        in: query
        required: false
        description: The comment to display if the student answers incorrectly.
        schema:
          type: string
      - name: question[neutral_comments]
        in: query
        required: false
        description: The comment to display regardless of how the student answered.
        schema:
          type: string
      - name: question[text_after_answers]
        in: query
        required: false
        description: no description
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id014
              type: object
              properties:
                question[answers]:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id014
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id012
                required: *id013
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}:
    get:
      summary: Get Courses Questions
      description: "Returns the quiz question with the given id\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id"
      operationId: get_questions
      tags:
      - Quiz Questions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The quiz question unique identifier.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id012
                required: *id013
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Questions
      description: "Updates an existing quiz question for this quiz\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id"
      operationId: update_questions
      tags:
      - Quiz Questions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: question[question_name]
        in: query
        required: false
        description: The name of the question.
        schema:
          type: string
      - name: question[question_text]
        in: query
        required: false
        description: The text of the question.
        schema:
          type: string
      - name: question[quiz_group_id]
        in: query
        required: false
        description: The id of the quiz group to assign the question to.
        schema:
          type: integer
      - name: question[question_type]
        in: query
        required: false
        description: 'The type of question. Multiple optional fields depend upon the type of question to be used.Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question'
        schema:
          type: string
      - name: question[position]
        in: query
        required: false
        description: The order in which the question will be displayed in the quiz in relation to other questions.
        schema:
          type: integer
      - name: question[points_possible]
        in: query
        required: false
        description: The maximum amount of points received for answering this question correctly.
        schema:
          type: integer
      - name: question[correct_comments]
        in: query
        required: false
        description: The comment to display if the student answers the question correctly.
        schema:
          type: string
      - name: question[incorrect_comments]
        in: query
        required: false
        description: The comment to display if the student answers incorrectly.
        schema:
          type: string
      - name: question[neutral_comments]
        in: query
        required: false
        description: The comment to display regardless of how the student answered.
        schema:
          type: string
      - name: question[text_after_answers]
        in: query
        required: false
        description: no description
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id015
              type: object
              properties:
                quiz_id:
                  type: string
                  description: The associated quiz’s unique identifier.
                id:
                  type: string
                  description: The quiz question’s unique identifier.
                question[answers]:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id015
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id012
                required: *id013
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Questions
      description: "Delete Courses Questions\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/questions/:id"
      operationId: delete_questions
      tags:
      - Quiz Questions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: quiz_id
        in: query
        required: false
        description: The associated quiz’s unique identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The quiz question’s unique identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}:
    get:
      summary: Get Polls Poll_Submissions
      description: "Returns the poll submission with the given id\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions/:id"
      operationId: get_poll_submissions
      tags:
      - PollSubmissions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: poll_session_id
        in: path
        required: true
        description: The poll_session_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions:
    post:
      summary: Post Polls Poll_Submissions
      description: "Create a new poll submission for this poll session\n\nRequired OAuth scope: url:POST|/api/v1/polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions"
      operationId: create_poll_submissions
      tags:
      - PollSubmissions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: poll_session_id
        in: path
        required: true
        description: The poll_session_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id016
              type: object
              properties:
                poll_submissions[][poll_choice_id]:
                  type: string
                  description: The chosen poll choice for this submission.
          application/x-www-form-urlencoded:
            schema: *id016
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/observees:
    get:
      summary: Get Users Observees
      description: "A paginated list of users that the given user is observing. This endpoint returns users linked to the observer at the account level (such that the observer is automatically enrolled in observees’ courses); it doesn’t return one-off observer enrollments from individual courses.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/observees"
      operationId: get_observees
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“avatar_url”: Optionally include avatar_url.Allowed values: avatar_url'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Observees
      description: "Register the given user to observe another user, given the observee’s credentials.\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/observees"
      operationId: create_observees
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: observee[unique_id]
        in: query
        required: true
        description: The login id for the user to observe. Required if access_token is omitted.
        schema:
          type: string
      - name: observee[password]
        in: query
        required: true
        description: The password for the user to observe. Required if access_token is omitted.
        schema:
          type: string
      - name: access_token
        in: query
        required: true
        description: The access token for the user to observe. Required if observee[unique_id] or observee[password] are omitted.
        schema:
          type: string
      - name: pairing_code
        in: query
        required: true
        description: A generated pairing code for the user to observe. Required if the Observer pairing code feature flag is enabled
        schema:
          type: string
      - name: root_account_id
        in: query
        required: false
        description: The ID for the root account to associate with the observation link. Defaults to the current domain account. If ‘all’ is specified, a link will be created for each root account associated to both the observer and observee.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/observers:
    get:
      summary: Get Users Observers
      description: "A paginated list of observers linked to a given user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/observers"
      operationId: get_observers
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“avatar_url”: Optionally include avatar_url.Allowed values: avatar_url'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/observees/{observee_id}:
    get:
      summary: Get Users Observees
      description: "Gets information about an observed user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/observees/:observee_id"
      operationId: get_observees
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: observee_id
        in: path
        required: true
        description: The observee_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Observees
      description: "Registers a user as being observed by the given user.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/observees/:observee_id"
      operationId: update_observees
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: observee_id
        in: path
        required: true
        description: The observee_id identifier
        schema:
          type: string
      - name: root_account_id
        in: query
        required: false
        description: The ID for the root account to associate with the observation link. If not specified, a link will be created for each root account associated to both the observer and observee.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Observees
      description: "Unregisters a user as being observed by the given user.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/observees/:observee_id"
      operationId: delete_observees
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: observee_id
        in: path
        required: true
        description: The observee_id identifier
        schema:
          type: string
      - name: root_account_id
        in: query
        required: false
        description: If specified, only removes the link for the given root account
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/observers/{observer_id}:
    get:
      summary: Get Users Observers
      description: "Gets information about an observer.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/observers/:observer_id"
      operationId: get_observers
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: observer_id
        in: path
        required: true
        description: The observer_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/observer_pairing_codes:
    post:
      summary: Post Users Observer_Pairing_Codes
      description: "If the user is a student, will generate a code to be used with self registration or observees APIs to link another user to this student. Returns a [PairingCode](#pairingcode) object.\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/observer_pairing_codes"
      operationId: create_observer_pairing_codes
      tags:
      - User Observees
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id017
                required: *id018
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quiz_extensions:
    post:
      summary: Post Courses Quiz_Extensions
      description: "Post Courses Quiz_Extensions\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quiz_extensions"
      operationId: create_quiz_extensions
      tags:
      - Course Quiz Extensions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: extra_attempts
        in: query
        required: false
        description: Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.
        schema:
          type: integer
      - name: extra_time
        in: query
        required: false
        description: The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)
        schema:
          type: integer
      - name: manually_unlocked
        in: query
        required: false
        description: Allow the student to take the quiz even if it’s locked for everyone else.
        schema:
          type: boolean
      - name: extend_from_now
        in: query
        required: false
        description: The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)
        schema:
          type: integer
      - name: extend_from_end_at
        in: query
        required: false
        description: The number of minutes to extend the quiz beyond the quiz’s current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id019
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user we want to add quiz extensions for.
          application/x-www-form-urlencoded:
            schema: *id019
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/authentication_providers:
    get:
      summary: Get Accounts Authentication_Providers
      description: "Returns a paginated list of authentication providers\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/authentication_providers"
      operationId: get_authentication_providers
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id020
                  required: *id021
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Authentication_Providers
      description: "Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, or SAML. Each authentication provider is specified as a set of parameters as described below. A provider specification must include an ‘auth\\_type’ parameter with a value of ‘apple’, ‘canvas’, ‘cas’, ‘clever’, ‘facebook’, ‘github’, ‘google’, ‘ldap’, ‘linkedin’, ‘microsoft’, ‘openid\\_connect’, or ‘saml’. The other recognized parameters depend on this auth\\_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth\\_type are ignored. You can set the ‘position’ for any provider. The config in the 1st position is considered the default. You can set ‘jit\\_provisioning’ for any provider besides Canvas. You can set ‘mfa\\_required’ for any provider. For Apple, the additional recognized parameters are: *   client\\_id \\[Required] The developer’s client identifier, as provided by WWDR. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘sub’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘firstName’, ‘lastName’, and ‘sub’. For Canvas, the additional recognized parameter is: *   self\\_registration ‘all’, ‘none’, or ‘observer’ - who is allowed to register as a new user For CAS, the additional recognized parameters are: *   auth\\_base The CAS server’s URL. *   log\\_in\\_url \\[Optional] An alternate SSO URL for logging into CAS. You probably should not set this. For Clever, the additional recognized parameters are: *   client\\_id \\[Required] The Clever application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The Clever application’s Client Secret. Not available if configured globally for Canvas. *   district\\_id \\[Optional] A district’s Clever ID. Leave this blank to let Clever handle the details with its District Picker. This is required for Clever Instant Login to work in a multi-tenant environment. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), ‘sis\\_id’, ‘email’, ‘student\\_number’, or ‘teacher\\_number’. Note that some fields may not be populated for all users at Clever. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘id’, ‘sis\\_id’, ‘email’, ‘student\\_number’, and ‘teacher\\_number’. For Facebook, the additional recognized parameters are: *   app\\_id \\[Required] The Facebook App ID. Not available if configured globally for Canvas. *   app\\_secret \\[Required] The Facebook App Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘first\\_name’, ‘id’, ‘last\\_name’, ‘locale’, and ‘name’. For GitHub, the additional recognized parameters are: *   domain \\[Optional] The domain of a GitHub Enterprise installation. I.e. github.mycompany.com. If not set, it will default to the public github.com. *   client\\_id \\[Required] The GitHub application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The GitHub application’s Client Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘login’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘id’, ‘login’, and ‘name’. For Google, the additional recognized parameters are: *   client\\_id \\[Required] The Google application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The Google application’s
        Client Secret. Not available if configured globally for Canvas. *   hosted\\_domain \\[Optional] A Google Apps domain to restrict logins to. See [developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param](https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param) *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘sub’ (the default), or ‘email’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘family\\_name’, ‘given\\_name’, ‘locale’, ‘name’, and ‘sub’. For LDAP, the additional recognized parameters are: *   auth\\_host The LDAP server’s URL. *   auth\\_port \\[Optional, Integer] The LDAP server’s TCP port. (default: 389) *   auth\\_over\\_tls \\[Optional] Whether to use TLS. Can be ‘simple\\_tls’, or ‘start\\_tls’. For backwards compatibility, booleans are also accepted, with true meaning simple\\_tls. If not provided, it will default to start\\_tls. *   auth\\_base \\[Optional] A default treebase parameter for searches performed against the LDAP server. *   auth\\_filter LDAP search filter. Use \\{{login\\}} as a placeholder for the username supplied by the user. For example: “(sAMAccountName=\\{{login\\}})”. *   identifier\\_format \\[Optional] The LDAP attribute to use to look up the Canvas login. Omit to use the username supplied by the user. *   auth\\_username Username *   auth\\_password Password For LinkedIn, the additional recognized parameters are: *   client\\_id \\[Required] The LinkedIn application’s Client ID. Not available if configured globally for Canvas. *   client\\_secret \\[Required] The LinkedIn application’s Client Secret. Not available if configured globally for Canvas. *   login\\_attribute \\[Optional] The attribute to use to look up the user’s login in Canvas. Either ‘id’ (the default), or ‘emailAddress’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘emailAddress’, ‘firstName’, ‘id’, ‘formattedName’, and ‘lastName’. For Microsoft, the additional recognized parameters are: *   application\\_id \\[Required] The application’s ID. *   application\\_secret \\[Required] The application’s Client Secret (Password) *   tenant \\[Optional] See [azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols](https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols)/ Valid values are ‘common’, ‘organizations’, ‘consumers’, or an Azure Active Directory Tenant (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to ‘common’ *   login\\_attribute \\[Optional] See [azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens](https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens) Valid values are ‘sub’, ‘email’, ‘oid’, or ‘preferred\\_username’. Note that email may not always be populated in the user’s profile at Microsoft. Oid will not be populated for personal Microsoft accounts. Defaults to ‘sub’ *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Valid provider attributes are ‘email’, ‘name’, ‘preferred\\_username’, ‘oid’, and ‘sub’. For OpenID Connect, the additional recognized parameters are: *   client\\_id \\[Required] The application’s Client ID. *   client\\_secret \\[Required] The application’s Client Secret. *   authorize\\_url \\[Required] The URL for getting starting the OAuth 2.0 web flow *   token\\_url \\[Required] The URL for exchanging the OAuth 2.0 authorization code for an Access Token and ID Token *   scope \\[Optional] Space separated additional scopes to request for the token. Note that you need not specify the ‘openid’ scope, or any scopes that can be automatically inferred by the rules defined at [openid.net/specs/openid-connect-core-1\\_0.html#ScopeClaims](http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) *   end\\_session\\_endpoint \\[Optional] URL to send the end user to after logging out of Canvas. See [openid.net/specs/openid-connect-session-1\\
        _0.html#RPLogout](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout) *   userinfo\\_endpoint \\[Optional] URL to request additional claims from. If the initial ID Token received from the provider cannot be used to satisfy the login\\_attribute and all federated\\_attributes, this endpoint will be queried for additional information. *   login\\_attribute \\[Optional] The attribute of the ID Token to look up the user’s login in Canvas. Defaults to ‘sub’. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Any value is allowed for the provider attribute names, but standard claims are listed at [openid.net/specs/openid-connect-core-1\\_0.html#StandardClaims](http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) For SAML, the additional recognized parameters are: *   metadata \\[Optional] An XML document to parse as SAML metadata, and automatically populate idp\\_entity\\_id, log\\_in\\_url, log\\_out\\_url, certificate\\_fingerprint, and identifier\\_format *   metadata\\_uri \\[Optional] A URI to download the SAML metadata from, and automatically populate idp\\_entity\\_id, log\\_in\\_url, log\\_out\\_url, certificate\\_fingerprint, and identifier\\_format. This URI will also be saved, and the metadata periodically refreshed, automatically. If the metadata contains multiple entities, also supply idp\\_entity\\_id to distinguish which one you want (otherwise the only entity in the metadata will be inferred). If you provide the URI ‘urn:mace:incommon’ or ‘[ukfederation.org.uk](http://ukfederation.org.uk)’, the InCommon or UK Access Management Federation metadata aggregate, respectively, will be used instead, and additional validation checks will happen (including validating that the metadata has been properly signed with the appropriate key). *   idp\\_entity\\_id The SAML IdP’s entity ID *   log\\_in\\_url The SAML service’s SSO target URL *   log\\_out\\_url \\[Optional] The SAML service’s SLO target URL *   certificate\\_fingerprint The SAML service’s certificate fingerprint. *   identifier\\_format The SAML service’s identifier format. Must be one of: * urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress * urn:oasis:names:tc:SAML:2.0:nameid-format:entity * urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos * urn:oasis:names:tc:SAML:2.0:nameid-format:persistent * urn:oasis:names:tc:SAML:2.0:nameid-format:transient * urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified * urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName * urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName *   requested\\_authn\\_context \\[Optional] The SAML AuthnContext *   sig\\_alg \\[Optional] If set, `AuthnRequest`, `LogoutRequest`, and `LogoutResponse` messages are signed with the corresponding algorithm. Supported algorithms are: * [http://www.w3.org/2000/09/xmldsig#rsa-sha1](http://www.w3.org/2000/09/xmldsig#rsa-sha1) * [http://www.w3.org/2001/04/xmldsig-more#rsa-sha256](http://www.w3.org/2001/04/xmldsig-more#rsa-sha256) RSA-SHA1 and RSA-SHA256 are acceptable aliases. *   federated\\_attributes \\[Optional] See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/authentication_providers"
      operationId: create_authentication_providers
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id020
                required: *id021
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/authentication_providers/{id}:
    get:
      summary: Get Accounts Authentication_Providers
      description: "Get the specified authentication provider\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/authentication_providers/:id"
      operationId: get_authentication_providers
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id020
                required: *id021
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Authentication_Providers
      description: "Update an authentication provider using the same options as the [Add authentication provider](#method.authentication_providers.create) endpoint. You cannot update an existing provider to a new authentication type.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/authentication_providers/:id"
      operationId: update_authentication_providers
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id020
                required: *id021
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Authentication_Providers
      description: "Delete the config\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/authentication_providers/:id"
      operationId: delete_authentication_providers
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/authentication_providers/{id}/restore:
    put:
      summary: Put Accounts Restore
      description: "Restore an authentication provider back to active that was previously deleted. Only available to admins who can manage\\_account\\_settings for given root account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/authentication_providers/:id/restore"
      operationId: update_restore
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id020
                required: *id021
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sso_settings:
    get:
      summary: Get Accounts Sso_Settings
      description: "The way to get the current state of each account level setting that’s relevant to Single Sign On configuration You can list the current state of each setting with “update\\_sso\\_settings”\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sso_settings"
      operationId: get_sso_settings
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id022
                required: *id023
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Sso_Settings
      description: "For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup. This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is. Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set. You can list the current state of each setting with “show\\_sso\\_settings”\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/sso_settings"
      operationId: update_sso_settings
      tags:
      - Authentication Providers
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id022
                required: *id023
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/line_items/{line_item_id}/results:
    get:
      summary: Get Courses Results
      description: "Show existing Results of a line item. Can be used to retrieve a specific student’s result by adding the user\\_id (defined as the lti\\_user\\_id or the Canvas user\\_id) as a query parameter (i.e. user\\_id=1000). If user\\_id is included, it will return only one Result in the collection if the result exists, otherwise it will be empty. May also limit number of results by adding the limit query param (i.e. limit=100) Returns a [Result](#result) object. ### [Show a Result](#method.lti/ims/results.show) <a href=\"#method.lti-ims-results.show\" id=\"method.lti-ims-results.show\"></a> [Lti::Ims::ResultsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/results_controller.rb)\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/line_items/:line_item_id/results"
      operationId: get_results
      tags:
      - Result
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: line_item_id
        in: path
        required: true
        description: The line_item_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: &id024
                  id:
                    type: string
                  userId:
                    type: string
                  resultScore:
                    type: integer
                  resultMaximum:
                    type: integer
                  comment:
                    type: 'null'
                  scoreOf:
                    type: string
                required: &id025
                - comment
                - id
                - resultMaximum
                - resultScore
                - scoreOf
                - userId
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/line_items/{line_item_id}/results/{id}:
    get:
      summary: Get Courses Results
      description: "Show existing Result of a line item. Returns a [Result](#result) object.\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/line_items/:line_item_id/results/:id"
      operationId: get_results
      tags:
      - Result
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: line_item_id
        in: path
        required: true
        description: The line_item_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id024
                required: *id025
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/extensions:
    post:
      summary: Post Courses Extensions
      description: "Post Courses Extensions\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/extensions"
      operationId: create_extensions
      tags:
      - Assignment Extensions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id026
              type: object
              properties:
                assignment_extensions[][user_id]:
                  type: string
                  description: The ID of the user we want to add assignment extensions for.
                assignment_extensions[][extra_attempts]:
                  type: string
                  description: Number of times the student is allowed to re-take the assignment over the limit.
          application/x-www-form-urlencoded:
            schema: *id026
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions:
    get:
      summary: Get Courses Submissions
      description: "Get a list of all submissions for this quiz. Users who can view or manage grades for a course will have submissions from multiple users returned. A user who can only submit will have only their own submissions returned. When a user has an in-progress submission, only that submission is returned. When there isn’t an in-progress quiz\\_submission, all completed submissions, including previous attempts, are returned.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions"
      operationId: get_submissions
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the quiz submission.Allowed values: submission, quiz, user'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Submissions
      description: "Start taking a Quiz by creating a QuizSubmission which you can use to answer questions and submit your answers.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions"
      operationId: create_submissions
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: access_code
        in: query
        required: false
        description: Access code for the Quiz, if any.
        schema:
          type: string
      - name: preview
        in: query
        required: false
        description: Whether this should be a preview QuizSubmission and not count towards the user’s course record. Teachers only.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submission:
    get:
      summary: Get Courses Submission
      description: "Get the submission for this quiz for the current user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submission"
      operationId: get_submission
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the quiz submission.Allowed values: submission, quiz, user'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}:
    get:
      summary: Get Courses Submissions
      description: "Get a single quiz submission.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id"
      operationId: get_submissions
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the quiz submission.Allowed values: submission, quiz, user'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Submissions
      description: "Update the amount of points a student has scored for questions they’ve answered, provide comments for the student about their answer(s), or simply fudge the total score by a specific amount of points.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id"
      operationId: update_submissions
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id027
              type: object
              properties:
                quiz_submissions[][attempt]:
                  type: string
                  description: The attempt number of the quiz submission that should be updated. This attempt MUST be already completed.
                quiz_submissions[][fudge_points]:
                  type: string
                  description: Amount of positive or negative points to fudge the total score by.
                quiz_submissions[][questions]:
                  type: string
                  description: 'A set of scores and comments for each question answered by the student. The keys are the question IDs, and the values are hashes of ‘scoreandcomment` entries. See Appendix: Manual Scoring for more on this parameter.'
          application/x-www-form-urlencoded:
            schema: *id027
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete:
    post:
      summary: Post Courses Complete
      description: "Complete the quiz submission by marking it as complete and grading it. When the quiz submission has been marked as complete, no further modifications will be allowed.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/complete"
      operationId: create_complete
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: access_code
        in: query
        required: false
        description: Access code for the Quiz, if any.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id028
              type: object
              properties:
                attempt:
                  type: string
                  description: The attempt number of the quiz submission that should be completed. Note that this must be the latest attempt index, as earlier attempts can not be modified.
                validation_token:
                  type: string
                  description: The unique validation token you received when this Quiz Submission was created.
          application/x-www-form-urlencoded:
            schema: *id028
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time:
    get:
      summary: Get Courses Time
      description: "Get the current timing data for the quiz attempt, both the end\\_at timestamp and the time\\_left parameter.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/time"
      operationId: get_time
      tags:
      - Quiz Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/admins:
    get:
      summary: Get Accounts Admins
      description: "A paginated list of the admins in the account\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/admins"
      operationId: get_admins
      tags:
      - Admins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user_id[]
        in: query
        required: false
        description: Scope the results to those with user IDs equal to any of the IDs specified here.
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name or full ID of the admins to match and return in the results list. Must be at least 2 characters.
        schema:
          type: string
      - name: include_deleted
        in: query
        required: false
        description: When set to true, returns admins who have been deleted
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id029
                  required: *id030
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Admins
      description: "Flag an existing user as an admin within the account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/admins"
      operationId: create_admins
      tags:
      - Admins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: DEPRECATEDThe user’s admin relationship with the account will becreated with the given role. Defaults to ‘AccountAdmin’.
        schema:
          type: string
      - name: role_id
        in: query
        required: false
        description: The user’s admin relationship with the account will be created with the given role. Defaults to the built-in role for ‘AccountAdmin’.
        schema:
          type: integer
      - name: send_confirmation
        in: query
        required: false
        description: Send a notification email to the new admin if true. Default is true.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id031
              type: object
              properties:
                user_id:
                  type: string
                  description: The id of the user to promote.
          application/x-www-form-urlencoded:
            schema: *id031
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id029
                required: *id030
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/admins/{user_id}:
    delete:
      summary: Delete Accounts Admins
      description: "Remove the rights associated with an account admin role from a user.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/admins/:user_id"
      operationId: delete_admins
      tags:
      - Admins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: DEPRECATEDAccount role to remove from the user.
        schema:
          type: string
      - name: role_id
        in: query
        required: false
        description: The id of the role representing the user’s admin relationship with the account.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id029
                required: *id030
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/admins/self:
    get:
      summary: Get Accounts Self
      description: "A paginated list of the current user’s roles in the account. The results are the same as those returned by the [List account admins](#method.admins.index) endpoint with `user_id` set to `self`, except the “Admins - Add / Remove” permission is not required. Returns a list of [Admin](#admin) objects.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/admins/self"
      operationId: get_self
      tags:
      - Admins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id029
                  required: *id030
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/assignment_overrides:
    get:
      summary: Get Courses Assignment_Overrides
      description: "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/assignment_overrides"
      operationId: get_assignment_overrides
      tags:
      - Quiz Assignment Overrides
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_assignment_overrides[][quiz_ids][]
        in: query
        required: false
        description: An array of quiz IDs. If omitted, overrides for all quizzes available to the operating user will be returned.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id032
                required: *id033
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/new_quizzes/assignment_overrides:
    get:
      summary: Get Courses Assignment_Overrides
      description: "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/new_quizzes/assignment_overrides"
      operationId: get_assignment_overrides
      tags:
      - Quiz Assignment Overrides
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_assignment_overrides[][quiz_ids][]
        in: query
        required: false
        description: An array of quiz IDs. If omitted, overrides for all quizzes available to the operating user will be returned.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id032
                required: *id033
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/collaborations:
    get:
      summary: Get Courses Collaborations
      description: "Get Courses Collaborations\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/collaborations"
      operationId: get_collaborations
      tags:
      - Collaborations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/collaborations:
    get:
      summary: Get Groups Collaborations
      description: "A paginated list of collaborations the current user has access to in the context of the course provided in the url. NOTE: this only returns ExternalToolCollaboration type collaborations. ``` curl https://<canvas>/api/v1/courses/1/collaborations/ ``` Returns a list of [Collaboration](#collaboration) objects. ### [List members of a collaboration.](#method.collaborations.members) <a href=\"#method.collaborations.members\" id=\"method.collaborations.members\"></a> [CollaborationsController#members](https://github.com/instructure/canvas-lms/blob/master/app/controllers/collaborations_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/collaborations"
      operationId: get_collaborations
      tags:
      - Collaborations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id034
                  required: *id035
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/collaborations/{id}/members:
    get:
      summary: Get Collaborations Members
      description: "A paginated list of the collaborators of a given collaboration\n\nRequired OAuth scope: url:GET|/api/v1/collaborations/:id/members"
      operationId: get_members
      tags:
      - Collaborations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“collaborator_lti_id”: Optional information to include with each member. Represents an identifier to be used for the member in an LTI context.“avatar_image_url”: Optional information to include with each member. The url for the avatar of a collaborator with type ‘user’.Allowed values: collaborator_lti_id, avatar_image_url'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id036
                  required: *id037
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/potential_collaborators:
    get:
      summary: Get Courses Potential_Collaborators
      description: "Get Courses Potential_Collaborators\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/potential_collaborators"
      operationId: get_potential_collaborators
      tags:
      - Collaborations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/potential_collaborators:
    get:
      summary: Get Groups Potential_Collaborators
      description: "A paginated list of the users who can potentially be added to a collaboration in the given context. For courses, this consists of all enrolled users. For groups, it is comprised of the group members plus the admins of the course containing the group. Returns a list of [User](../users#user) objects.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/potential_collaborators"
      operationId: get_potential_collaborators
      tags:
      - Collaborations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{id}:
    delete:
      summary: Delete Courses Assignments
      description: "Delete the given assignment.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignments/:id"
      operationId: delete_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id038
                required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Assignments
      description: "Returns the assignment with the given id.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:id"
      operationId: get_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the assignment. The “assignment_visibility” option requires that the Differentiated Assignments course feature be turned on. If “observed_users” is passed, submissions for observed users will also be included. For “score_statistics” to be included, the “submission” option must also be set. The “peer_review” option requires that the Peer Review Allocation and Grading course feature be turned on.Allowed values: submission, assignment_visibility, overrides, observed_users, can_edit, score_statistics, ab_guid, peer_review'
        schema:
          type: string
      - name: override_assignment_dates
        in: query
        required: false
        description: Apply assignment overrides to the assignment, defaults to true.
        schema:
          type: boolean
      - name: needs_grading_count_by_section
        in: query
        required: false
        description: Split up “needs_grading_count” by sections into the “needs_grading_count_by_section” key, defaults to false
        schema:
          type: boolean
      - name: all_dates
        in: query
        required: false
        description: All dates associated with the assignment, if applicable
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id038
                required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Assignments
      description: "Modify an existing assignment.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:id"
      operationId: update_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: assignment[name]
        in: query
        required: false
        description: The assignment name.
        schema:
          type: string
      - name: assignment[position]
        in: query
        required: false
        description: The position of this assignment in the group when displaying assignment lists.
        schema:
          type: integer
      - name: assignment[submission_types][]
        in: query
        required: false
        description: "Only applies if the assignment doesn’t have student submissions.List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.If not allowing online submissions, your options are:\"online_quiz\"\n\"none\"\n\"on_paper\"\n\"discussion_topic\"\n\"external_tool\"\nIf you are allowing online submissions, you can have one or many allowed submission types:\"online_upload\"\n\"online_text_entry\"\n\"online_url\"\n\"media_recording\" (Only valid when the Kaltura plugin is enabled)\n\"student_annotation\"\nAllowed values: online_quiz, none, on_paper, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording, student_annotation"
        schema:
          type: string
      - name: assignment[allowed_extensions][]
        in: query
        required: false
        description: 'Allowed extensions if submission_types includes “online_upload”Example:allowed_extensions: ["docx","ppt"]'
        schema:
          type: string
      - name: assignment[turnitin_enabled]
        in: query
        required: false
        description: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        schema:
          type: boolean
      - name: assignment[vericite_enabled]
        in: query
        required: false
        description: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        schema:
          type: boolean
      - name: assignment[turnitin_settings]
        in: query
        required: false
        description: Settings to send along to turnitin. See Assignment object definition for format.
        schema:
          type: string
      - name: assignment[sis_assignment_id]
        in: query
        required: false
        description: The sis id of the Assignment
        schema:
          type: string
      - name: assignment[integration_data]
        in: query
        required: true
        description: Data used for SIS integrations. Requires admin-level token with the “Manage SIS” permission. JSON string required.
        schema:
          type: string
      - name: assignment[integration_id]
        in: query
        required: false
        description: Unique ID from third party integrations
        schema:
          type: string
      - name: assignment[peer_reviews]
        in: query
        required: false
        description: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        schema:
          type: boolean
      - name: assignment[automatic_peer_reviews]
        in: query
        required: false
        description: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        schema:
          type: boolean
      - name: assignment[notify_of_update]
        in: query
        required: false
        description: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        schema:
          type: boolean
      - name: assignment[group_category_id]
        in: query
        required: false
        description: If present, the assignment will become a group assignment assigned to the group.
        schema:
          type: integer
      - name: assignment[grade_group_students_individually]
        in: query
        required: false
        description: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment’s score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        schema:
          type: integer
      - name: assignment[external_tool_tag_attributes]
        in: query
        required: false
        description: Hash of external tool parameters if submission_types is [“external_tool”]. See Assignment object definition for format.
        schema:
          type: string
      - name: assignment[grading_type]
        in: query
        required: false
        description: 'The strategy used for grading the assignment. The assignment defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded'
        schema:
          type: string
      - name: assignment[description]
        in: query
        required: false
        description: The assignment’s description, supports HTML.
        schema:
          type: string
      - name: assignment[assignment_group_id]
        in: query
        required: false
        description: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        schema:
          type: integer
      - name: assignment[only_visible_to_overrides]
        in: query
        required: false
        description: Whether this assignment is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on)
        schema:
          type: boolean
      - name: assignment[published]
        in: query
        required: false
        description: Whether this assignment is published. (Only useful if ‘draft state’ account setting is on) Unpublished assignments are not visible to students.
        schema:
          type: boolean
      - name: assignment[grading_standard_id]
        in: query
        required: false
        description: The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to ‘letter_grade’ unless it is already ‘gpa_scale’.
        schema:
          type: integer
      - name: assignment[omit_from_final_grade]
        in: query
        required: false
        description: Whether this assignment is counted towards a student’s final grade.
        schema:
          type: boolean
      - name: assignment[hide_in_gradebook]
        in: query
        required: false
        description: Whether this assignment is shown in the gradebook.
        schema:
          type: boolean
      - name: assignment[moderated_grading]
        in: query
        required: false
        description: Whether this assignment is moderated.
        schema:
          type: boolean
      - name: assignment[grader_count]
        in: query
        required: false
        description: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        schema:
          type: integer
      - name: assignment[final_grader_id]
        in: query
        required: false
        description: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        schema:
          type: integer
      - name: assignment[grader_comments_visible_to_graders]
        in: query
        required: false
        description: Boolean indicating if provisional graders’ comments are visible to other provisional graders. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[graders_anonymous_to_graders]
        in: query
        required: false
        description: Boolean indicating if provisional graders’ identities are hidden from other provisional graders. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[graders_names_visible_to_final_grader]
        in: query
        required: false
        description: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[anonymous_grading]
        in: query
        required: false
        description: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        schema:
          type: boolean
      - name: assignment[allowed_attempts]
        in: query
        required: false
        description: The number of submission attempts allowed for this assignment. Set to -1 or null for unlimited attempts.
        schema:
          type: integer
      - name: assignment[annotatable_attachment_id]
        in: query
        required: false
        description: The Attachment ID of the document being annotated.Only applies when submission_types includes “student_annotation”.
        schema:
          type: integer
      - name: assignment[force_updated_at]
        in: query
        required: false
        description: If true, updated_at will be set even if no changes were made.
        schema:
          type: boolean
      - name: assignment[peer_review][grading_type]
        in: query
        required: false
        description: 'The strategy used for grading peer reviews. Defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded'
        schema:
          type: string
      - name: assignment[submission_types][]
        in: query
        required: false
        description: '[DEPRECATED] Effective 2021-05-26 (notice given 2021-02-18)Only applies if the assignment doesn’t have student submissions.'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id040
              type: object
              properties:
                assignment[points_possible]:
                  type: string
                  description: The maximum points possible on the assignment.
                assignment[due_at]:
                  type: string
                  description: The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[lock_at]:
                  type: string
                  description: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[unlock_at]:
                  type: string
                  description: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[assignment_overrides][]:
                  type: string
                  description: List of overrides for the assignment. If the assignment[assignment_overrides] key is absent, any existing overrides are kept as is. If the assignment[assignment_overrides] key is present, existing overrides are updated or deleted (and new ones created, as necessary) to match the provided list.
                assignment[peer_review][points_possible]:
                  type: string
                  description: The maximum points possible for peer reviews.
                assignment[peer_review][due_at]:
                  type: string
                  description: The day/time the peer reviews are due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2025-08-20T12:10:00Z.
                assignment[peer_review][lock_at]:
                  type: string
                  description: The day/time the peer reviews are locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-25T12:10:00Z.
                assignment[peer_review][unlock_at]:
                  type: string
                  description: The day/time the peer reviews are unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-15T12:10:00Z.
          application/x-www-form-urlencoded:
            schema: *id040
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id038
                  required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments:
    get:
      summary: Get Courses Assignments
      description: "Get Courses Assignments\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments"
      operationId: get_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Assignments
      description: "Create a new assignment for this course. The assignment is created in the active state.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments"
      operationId: create_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment[position]
        in: query
        required: false
        description: The position of this assignment in the group when displaying assignment lists.
        schema:
          type: integer
      - name: assignment[submission_types][]
        in: query
        required: false
        description: "List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.If not allowing online submissions, your options are:\"online_quiz\"\n\"none\"\n\"on_paper\"\n\"discussion_topic\"\n\"external_tool\"\nIf you are allowing online submissions, you can have one or many allowed submission types:\"online_upload\"\n\"online_text_entry\"\n\"online_url\"\n\"media_recording\" (Only valid when the Kaltura plugin is enabled)\n\"student_annotation\"\nAllowed values: online_quiz, none, on_paper, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording, student_annotation"
        schema:
          type: string
      - name: assignment[allowed_extensions][]
        in: query
        required: false
        description: 'Allowed extensions if submission_types includes “online_upload”Example:allowed_extensions: ["docx","ppt"]'
        schema:
          type: string
      - name: assignment[turnitin_enabled]
        in: query
        required: false
        description: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        schema:
          type: boolean
      - name: assignment[vericite_enabled]
        in: query
        required: false
        description: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes “online_upload”. Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        schema:
          type: boolean
      - name: assignment[turnitin_settings]
        in: query
        required: false
        description: Settings to send along to turnitin. See Assignment object definition for format.
        schema:
          type: string
      - name: assignment[integration_data]
        in: query
        required: true
        description: Data used for SIS integrations. Requires admin-level token with the “Manage SIS” permission. JSON string required.
        schema:
          type: string
      - name: assignment[integration_id]
        in: query
        required: false
        description: Unique ID from third party integrations
        schema:
          type: string
      - name: assignment[peer_reviews]
        in: query
        required: false
        description: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        schema:
          type: boolean
      - name: assignment[automatic_peer_reviews]
        in: query
        required: false
        description: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        schema:
          type: boolean
      - name: assignment[notify_of_update]
        in: query
        required: false
        description: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        schema:
          type: boolean
      - name: assignment[group_category_id]
        in: query
        required: false
        description: If present, the assignment will become a group assignment assigned to the group.
        schema:
          type: integer
      - name: assignment[grade_group_students_individually]
        in: query
        required: false
        description: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment’s score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        schema:
          type: integer
      - name: assignment[external_tool_tag_attributes]
        in: query
        required: false
        description: Hash of external tool parameters if submission_types is [“external_tool”]. See Assignment object definition for format.
        schema:
          type: string
      - name: assignment[grading_type]
        in: query
        required: false
        description: 'The strategy used for grading the assignment. The assignment defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded'
        schema:
          type: string
      - name: assignment[description]
        in: query
        required: false
        description: The assignment’s description, supports HTML.
        schema:
          type: string
      - name: assignment[assignment_group_id]
        in: query
        required: false
        description: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        schema:
          type: integer
      - name: assignment[only_visible_to_overrides]
        in: query
        required: false
        description: Whether this assignment is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on)
        schema:
          type: boolean
      - name: assignment[published]
        in: query
        required: false
        description: Whether this assignment is published. (Only useful if ‘draft state’ account setting is on) Unpublished assignments are not visible to students.
        schema:
          type: boolean
      - name: assignment[grading_standard_id]
        in: query
        required: false
        description: The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to ‘letter_grade’ unless it is already ‘gpa_scale’.
        schema:
          type: integer
      - name: assignment[omit_from_final_grade]
        in: query
        required: false
        description: Whether this assignment is counted towards a student’s final grade.
        schema:
          type: boolean
      - name: assignment[hide_in_gradebook]
        in: query
        required: false
        description: Whether this assignment is shown in the gradebook.
        schema:
          type: boolean
      - name: assignment[quiz_lti]
        in: query
        required: false
        description: Whether this assignment should use the Quizzes 2 LTI tool. Sets the submission type to ‘external_tool’ and configures the external tool attributes to use the Quizzes 2 LTI tool configured for this course. Has no effect if no Quizzes 2 LTI tool is configured.
        schema:
          type: boolean
      - name: assignment[moderated_grading]
        in: query
        required: false
        description: Whether this assignment is moderated.
        schema:
          type: boolean
      - name: assignment[grader_count]
        in: query
        required: false
        description: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        schema:
          type: integer
      - name: assignment[final_grader_id]
        in: query
        required: false
        description: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        schema:
          type: integer
      - name: assignment[grader_comments_visible_to_graders]
        in: query
        required: false
        description: Boolean indicating if provisional graders’ comments are visible to other provisional graders. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[graders_anonymous_to_graders]
        in: query
        required: false
        description: Boolean indicating if provisional graders’ identities are hidden from other provisional graders. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[graders_names_visible_to_final_grader]
        in: query
        required: false
        description: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        schema:
          type: boolean
      - name: assignment[anonymous_grading]
        in: query
        required: false
        description: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        schema:
          type: boolean
      - name: assignment[allowed_attempts]
        in: query
        required: false
        description: The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.
        schema:
          type: integer
      - name: assignment[annotatable_attachment_id]
        in: query
        required: false
        description: The Attachment ID of the document being annotated.Only applies when submission_types includes “student_annotation”.
        schema:
          type: integer
      - name: assignment[peer_review][grading_type]
        in: query
        required: false
        description: 'The strategy used for grading peer reviews. Defaults to “points” if this field is omitted.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points, not_graded'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id041
              type: object
              properties:
                assignment[name]:
                  type: string
                  description: The assignment name.
                assignment[points_possible]:
                  type: string
                  description: The maximum points possible on the assignment.
                assignment[due_at]:
                  type: string
                  description: The day/time the assignment is due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[lock_at]:
                  type: string
                  description: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[unlock_at]:
                  type: string
                  description: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
                assignment[assignment_overrides][]:
                  type: string
                  description: List of overrides for the assignment.
                assignment[peer_review][points_possible]:
                  type: string
                  description: The maximum points possible for peer reviews.
                assignment[peer_review][due_at]:
                  type: string
                  description: The day/time the peer reviews are due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2025-08-20T12:10:00Z.
                assignment[peer_review][lock_at]:
                  type: string
                  description: The day/time the peer reviews are locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-25T12:10:00Z.
                assignment[peer_review][unlock_at]:
                  type: string
                  description: The day/time the peer reviews are unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2025-08-15T12:10:00Z.
          application/x-www-form-urlencoded:
            schema: *id041
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id038
                  required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments:
    get:
      summary: Get Courses Assignments
      description: "Returns the paginated list of assignments for the current course or assignment group.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id/assignments"
      operationId: get_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_group_id
        in: path
        required: true
        description: The assignment_group_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Optional information to include with each assignment:submissionThe current user’s current Submissionassignment_visibilityAn array of ids of students who can see the assignmentall_datesAn array of AssignmentDate structures, one for each override, and also a base if the assignment has an “Everyone” / “Everyone Else” dateoverridesAn array of AssignmentOverride structuresobserved_usersAn array of submissions for observed userscan_editan extra Boolean value will be included with each Assignment (and AssignmentDate if all_dates is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user’s ability to edit an assignment.score_statisticsAn object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if ‘submission’ is also included.ab_guidAn array of guid strings for academic benchmarksAllowed values: submission, assignment_visibility, all_dates, overrides, observed_users, can_edit, score_statistics, ab_guid'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial title of the assignments to match and return.
        schema:
          type: string
      - name: override_assignment_dates
        in: query
        required: false
        description: Apply assignment overrides for each assignment, defaults to true.
        schema:
          type: boolean
      - name: needs_grading_count_by_section
        in: query
        required: false
        description: Split up “needs_grading_count” by sections into the “needs_grading_count_by_section” key, defaults to false
        schema:
          type: boolean
      - name: bucket
        in: query
        required: false
        description: 'If included, only return certain assignments depending on due date and submission status.Allowed values: past, overdue, undated, ungraded, unsubmitted, upcoming, future'
        schema:
          type: string
      - name: assignment_ids[]
        in: query
        required: false
        description: if set, return only assignments specified
        schema:
          type: string
      - name: order_by
        in: query
        required: false
        description: 'Determines the order of the assignments. Defaults to “position”.Allowed values: position, name, due_at'
        schema:
          type: string
      - name: post_to_sis
        in: query
        required: false
        description: Return only assignments that have post_to_sis set or not set.
        schema:
          type: boolean
      - name: new_quizzes
        in: query
        required: false
        description: Return only New Quizzes assignments
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id038
                  required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/courses/{course_id}/assignments:
    get:
      summary: Get Users Assignments
      description: "Returns the paginated list of assignments for the specified user if the current user has rights to view. See [List assignments](#method.assignments_api.index) for valid arguments. ### [Duplicate assignment](#method.assignments_api.duplicate) <a href=\"#method.assignments_api.duplicate\" id=\"method.assignments_api.duplicate\"></a> [AssignmentsApiController#duplicate](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/courses/:course_id/assignments"
      operationId: get_assignments
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/duplicate:
    post:
      summary: Post Courses Duplicate
      description: "Duplicate an assignment and return a json based on result\\_type argument.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/duplicate"
      operationId: create_duplicate
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: result_type
        in: query
        required: false
        description: 'Optional information: When the root account has the feature ‘newquizzes_on_quiz_pageenabled and this argument is set to “Quiz” the response will be serialized into a quiz format(<a href="doc/api/quizzes.md#Quiz" title="quizzes">quizzes</a>); When this argument isn’t specified the response will be serialized into an assignment format;</p> Allowed values:Quiz`'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id038
                required: *id039
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/users/{user_id}/group_members:
    get:
      summary: Get Courses Group_Members
      description: "Returns student ids and names for the group.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/users/:user_id/group_members"
      operationId: get_group_members
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id042
                  required: *id043
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/bulk_update:
    put:
      summary: Put Courses Bulk_Update
      description: "Update due dates and availability dates for multiple assignments in a course. Accepts a JSON array of objects containing two keys each: `id`, the assignment id, and `all_dates`, an array of `AssignmentDate` structures containing the base and/or override dates for the assignment, as returned from the [List assignments](#method.assignments_api.index) endpoint with include\\[]=all\\_dates. This endpoint cannot create or destroy assignment overrides; any existing assignment overrides that are not referenced in the arguments will be left alone. If an override is given, any dates that are not supplied with it will be defaulted. To clear a date, specify null explicitly. All referenced assignments will be validated before any are saved. A list of errors will be returned if any provided dates are invalid, and no changes will be saved. The bulk update is performed in a background job, use the [Progress API](../progress#method.progress.show) to check its status.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/bulk_update"
      operationId: update_bulk_update
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/overrides:
    get:
      summary: Get Courses Overrides
      description: "Returns the paginated list of overrides for this assignment that target sections/groups/students visible to the current user. Returns a list of [AssignmentOverride](#assignmentoverride) objects. ### [Get a single assignment override](#method.assignment_overrides.show) <a href=\"#method.assignment_overrides.show\" id=\"method.assignment_overrides.show\"></a> [AssignmentOverridesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/overrides"
      operationId: get_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id044
                  required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Overrides
      description: "One of student\\_ids, group\\_id, or course\\_section\\_id must be present. At most one should be present; if multiple are present only the most specific (student\\_ids first, then group\\_id, then course\\_section\\_id) is used and any others are ignored.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/overrides"
      operationId: create_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: assignment_override[student_ids][]
        in: query
        required: false
        description: The IDs of the override’s target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override.
        schema:
          type: integer
      - name: assignment_override[title]
        in: query
        required: true
        description: The title of the adhoc assignment override. Required if student_ids is present, ignored otherwise (the title is set to the name of the targetted group or section instead).
        schema:
          type: string
      - name: assignment_override[group_id]
        in: query
        required: false
        description: 'The ID of the override’s target group. If present, the following conditions must be met for the override to be successful:the assignment MUST be a group assignment (a group_category_id is assigned to it)the ID must identify an active group in the group set the assignment is inthe ID must not be targetted by a different overrideSee Appendix: Group assignments for more info.'
        schema:
          type: integer
      - name: assignment_override[course_section_id]
        in: query
        required: false
        description: The ID of the override’s target section. If present, must identify an active section of the assignment’s course not already targetted by a different override.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id046
              type: object
              properties:
                assignment_override[due_at]:
                  type: string
                  description: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
                assignment_override[unlock_at]:
                  type: string
                  description: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
                assignment_override[lock_at]:
                  type: string
                  description: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
          application/x-www-form-urlencoded:
            schema: *id046
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id044
                required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}:
    get:
      summary: Get Courses Overrides
      description: "Returns details of the the override with the given id. Returns an [AssignmentOverride](#assignmentoverride) object. ### [Redirect to the assignment override for a group](#method.assignment_overrides.group_alias) <a href=\"#method.assignment_overrides.group_alias\" id=\"method.assignment_overrides.group_alias\"></a> [AssignmentOverridesController#group\\_alias](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
      operationId: get_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id044
                required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Overrides
      description: "All current overridden values must be supplied if they are to be retained; e.g. if due\\_at was overridden, but this PUT omits a value for due\\_at, due\\_at will no longer be overridden. If the override is adhoc and student\\_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
      operationId: update_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: assignment_override[student_ids][]
        in: query
        required: false
        description: The IDs of the override’s target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override. Ignored unless the override being updated is adhoc.
        schema:
          type: integer
      - name: assignment_override[title]
        in: query
        required: false
        description: The title of an adhoc assignment override. Ignored unless the override being updated is adhoc.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id047
              type: object
              properties:
                assignment_override[due_at]:
                  type: string
                  description: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
                assignment_override[unlock_at]:
                  type: string
                  description: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
                assignment_override[lock_at]:
                  type: string
                  description: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
          application/x-www-form-urlencoded:
            schema: *id047
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id044
                required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Overrides
      description: "Deletes an override and returns its former details.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
      operationId: delete_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id044
                required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/assignments/{assignment_id}/override:
    get:
      summary: Get Groups Override
      description: "Responds with a redirect to the override for the given group, if any (404 otherwise). ### [Redirect to the assignment override for a section](#method.assignment_overrides.section_alias) <a href=\"#method.assignment_overrides.section_alias\" id=\"method.assignment_overrides.section_alias\"></a> [AssignmentOverridesController#section\\_alias](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/assignments/:assignment_id/override"
      operationId: get_override
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{course_section_id}/assignments/{assignment_id}/override:
    get:
      summary: Get Sections Override
      description: "Responds with a redirect to the override for the given section, if any (404 otherwise). ### [Create an assignment override](#method.assignment_overrides.create) <a href=\"#method.assignment_overrides.create\" id=\"method.assignment_overrides.create\"></a> [AssignmentOverridesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/sections/:course_section_id/assignments/:assignment_id/override"
      operationId: get_override
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_section_id
        in: path
        required: true
        description: The course_section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/overrides:
    get:
      summary: Get Courses Overrides
      description: "Returns a list of specified overrides in this course, providing they target sections/groups/students visible to the current user. Returns null elements in the list for requests that were not found.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/overrides"
      operationId: get_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_overrides[][id]
        in: query
        required: false
        description: Ids of overrides to retrieve
        schema:
          type: string
      - name: assignment_overrides[][assignment_id]
        in: query
        required: false
        description: Ids of assignments for each override
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id044
                  required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Overrides
      description: "Creates the specified overrides for each assignment. Handles creation in a transaction, so all records are created or none are. One of student\\_ids, group\\_id, or course\\_section\\_id must be present. At most one should be present; if multiple are present only the most specific (student\\_ids first, then group\\_id, then course\\_section\\_id) is used and any others are ignored. Errors are reported in an errors attribute, an array of errors corresponding to inputs. Global errors will be reported as a single element errors array\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/overrides"
      operationId: create_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id048
              type: object
              properties:
                assignment_overrides[]:
                  type: string
                  description: Attributes for the new assignment overrides. See Create an assignment override for available attributes
          application/x-www-form-urlencoded:
            schema: *id048
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id044
                  required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Overrides
      description: "Updates a list of specified overrides for each assignment. Handles overrides in a transaction, so either all updates are applied or none. See [Update an assignment override](#method.assignment_overrides.update) for available attributes. All current overridden values must be supplied if they are to be retained; e.g. if due\\_at was overridden, but this PUT omits a value for due\\_at, due\\_at will no longer be overridden. If the override is adhoc and student\\_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides. Errors are reported in an errors attribute, an array of errors corresponding to inputs. Global errors will be reported as a single element errors array\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/overrides"
      operationId: update_overrides
      tags:
      - Assignments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id049
              type: object
              properties:
                assignment_overrides[]:
                  type: string
                  description: Attributes for the updated overrides.
          application/x-www-form-urlencoded:
            schema: *id049
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id044
                  required: *id045
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/quiz_submissions/{quiz_submission_id}/questions:
    get:
      summary: Get Quiz_Submissions Questions
      description: "Get a list of all the question records for this quiz submission.\n\nRequired OAuth scope: url:GET|/api/v1/quiz_submissions/:quiz_submission_id/questions"
      operationId: get_questions
      tags:
      - Quiz Submission Questions
      security:
      - bearerAuth: []
      parameters:
      - name: quiz_submission_id
        in: path
        required: true
        description: The quiz_submission_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the quiz submission question.Allowed values: quiz_question'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Quiz_Submissions Questions
      description: "Provide or update an answer to one or more QuizQuestions.\n\nRequired OAuth scope: url:POST|/api/v1/quiz_submissions/:quiz_submission_id/questions"
      operationId: create_questions
      tags:
      - Quiz Submission Questions
      security:
      - bearerAuth: []
      parameters:
      - name: quiz_submission_id
        in: path
        required: true
        description: The quiz_submission_id identifier
        schema:
          type: string
      - name: access_code
        in: query
        required: false
        description: Access code for the Quiz, if any.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id050
              type: object
              properties:
                attempt:
                  type: string
                  description: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
                validation_token:
                  type: string
                  description: The unique validation token you received when the Quiz Submission was created.
                quiz_questions[]:
                  type: string
                  description: 'Set of question IDs and the answer value.See Appendix: Question Answer Formats for the accepted answer formats for each question type.'
          application/x-www-form-urlencoded:
            schema: *id050
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id051
                  required: *id052
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/formatted_answer:
    get:
      summary: Get Quiz_Submissions Formatted_Answer
      description: "Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number\n\nRequired OAuth scope: url:GET|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/formatted_answer"
      operationId: get_formatted_answer
      tags:
      - Quiz Submission Questions
      security:
      - bearerAuth: []
      parameters:
      - name: quiz_submission_id
        in: path
        required: true
        description: The quiz_submission_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: answer
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag:
    put:
      summary: Put Quiz_Submissions Flag
      description: "Set a flag on a quiz question to indicate that you want to return to it later.\n\nRequired OAuth scope: url:PUT|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/flag"
      operationId: update_flag
      tags:
      - Quiz Submission Questions
      security:
      - bearerAuth: []
      parameters:
      - name: quiz_submission_id
        in: path
        required: true
        description: The quiz_submission_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: access_code
        in: query
        required: false
        description: Access code for the Quiz, if any.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id053
              type: object
              properties:
                attempt:
                  type: string
                  description: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
                validation_token:
                  type: string
                  description: The unique validation token you received when the Quiz Submission was created.
          application/x-www-form-urlencoded:
            schema: *id053
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag:
    put:
      summary: Put Quiz_Submissions Unflag
      description: "Remove the flag that you previously set on a quiz question after you’ve returned to it.\n\nRequired OAuth scope: url:PUT|/api/v1/quiz_submissions/:quiz_submission_id/questions/:id/unflag"
      operationId: update_unflag
      tags:
      - Quiz Submission Questions
      security:
      - bearerAuth: []
      parameters:
      - name: quiz_submission_id
        in: path
        required: true
        description: The quiz_submission_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: access_code
        in: query
        required: false
        description: Access code for the Quiz, if any.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id054
              type: object
              properties:
                attempt:
                  type: string
                  description: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
                validation_token:
                  type: string
                  description: The unique validation token you received when the Quiz Submission was created.
          application/x-www-form-urlencoded:
            schema: *id054
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/outcomes/{id}:
    get:
      summary: List Outcomes
      description: "Returns the details of the outcome with the given id.\n\nRequired OAuth scope: url:GET|/api/v1/outcomes/:id"
      operationId: get_outcomes
      tags:
      - Outcomes
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: add_defaults
        in: query
        required: false
        description: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id055
                required: *id056
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Outcomes
      description: "Modify an existing outcome. Fields not provided are left as is; unrecognized fields are ignored. If any new ratings are provided, the combination of all new ratings provided completely replace any existing embedded rubric criterion; it is not possible to tweak the ratings of the embedded rubric criterion. A new embedded rubric criterion’s mastery\\_points default to the maximum points in the highest rating if not specified in the mastery\\_points parameter. Any new ratings lacking a description are given a default of “No description”. Any new ratings lacking a point value are given a default of 0.\n\nRequired OAuth scope: url:PUT|/api/v1/outcomes/:id"
      operationId: update_outcomes
      tags:
      - Outcomes
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: The new outcome title.
        schema:
          type: string
      - name: display_name
        in: query
        required: false
        description: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: The new outcome description.
        schema:
          type: string
      - name: vendor_guid
        in: query
        required: false
        description: A custom GUID for the learning standard.
        schema:
          type: string
      - name: mastery_points
        in: query
        required: false
        description: The new mastery threshold for the embedded rubric criterion.
        schema:
          type: integer
      - name: ratings[][description]
        in: query
        required: false
        description: The description of a new rating level for the embedded rubric criterion.
        schema:
          type: string
      - name: ratings[][points]
        in: query
        required: false
        description: The points corresponding to a new rating level for the embedded rubric criterion.
        schema:
          type: integer
      - name: calculation_method
        in: query
        required: false
        description: 'The new calculation method. If the Outcomes New Decaying Average Calculation Method FF is ENABLED then “weighted_average” can be used and it is same as previous “decaying_average” and new “decaying_average” will have improved version of calculation.Allowed values: weighted_average, decaying_average, n_mastery, latest, highest, average'
        schema:
          type: string
      - name: calculation_int
        in: query
        required: false
        description: The new calculation int. Only applies if the calculation_method is “decaying_average” or “n_mastery”
        schema:
          type: integer
      - name: add_defaults
        in: query
        required: false
        description: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id055
                required: *id056
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_alignments:
    get:
      summary: Get Courses Outcome_Alignments
      description: "Returns all assignments aligned to a specific outcome for a student in a course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_alignments"
      operationId: get_outcome_alignments
      tags:
      - Outcomes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the course
        schema:
          type: integer
      - name: student_id
        in: query
        required: false
        description: The id of the student
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties:
                    id:
                      type: integer
                    assignment_id:
                      type: integer
                    assessment_id:
                      type: integer
                    submission_types:
                      type: string
                    url:
                      type: string
                    title:
                      type: string
                  required:
                  - assessment_id
                  - assignment_id
                  - id
                  - submission_types
                  - title
                  - url
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/lti_resource_links:
    get:
      summary: Get Courses Lti_Resource_Links
      description: "Returns all Resource Links in the specified course. This includes links that are associated with Assignments, Module Items, Collaborations, and that are embedded in rich content. This endpoint is paginated, and will return 50 links per page by default. Links are sorted by the order in which they were created.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/lti_resource_links"
      operationId: get_lti_resource_links
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: include_deleted
        in: query
        required: false
        description: Include deleted resource links and links associated with deleted content in response. Default is false.
        schema:
          type: boolean
      - name: per_page
        in: query
        required: false
        description: The number of registrations to return per page. Defaults to 50.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Lti_Resource_Links
      description: "Create a new LTI Resource Link in the specified course with the provided parameters.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/lti_resource_links"
      operationId: create_lti_resource_links
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: The title of the resource link.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id057
              type: object
              properties:
                url:
                  type: string
                  description: The launch URL for this resource link.
                custom:
                  type: string
                  description: Custom parameters to be sent to the tool when launching this link.
          application/x-www-form-urlencoded:
            schema: *id057
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/lti_resource_links/{id}:
    get:
      summary: Get Courses Lti_Resource_Links
      description: "Return details about the specified resource link. The ID can be in the standard Canvas format (“1”), or in these special formats: * resource\\_link\\_uuid:\\<uuid> - Find the resource link by its resource\\_link\\_uuid * lookup\\_uuid:\\<uuid> - Find the resource link by its lookup\\_uuid\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/lti_resource_links/:id"
      operationId: get_lti_resource_links
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include_deleted
        in: query
        required: false
        description: Include deleted resource links in search. Default is false.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Lti_Resource_Links
      description: "Update the specified resource link with the provided parameters.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/lti_resource_links/:id"
      operationId: update_lti_resource_links
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: url
        in: query
        required: false
        description: The launch URL for this resource link. Caution! URL must match the URL or domain of the tool associated with this resource link
        schema:
          type: string
      - name: include_deleted
        in: query
        required: false
        description: Update link even if it is deleted. Default is false.
        schema:
          type: boolean
      - name: context_external_tool_id
        in: query
        required: false
        description: The Canvas identifier for the LTI 1.3 External Tool that the LTI Resource Link was originally installed from. Caution! The resource link url must match the tool’s domain or url.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id058
              type: object
              properties:
                custom:
                  type: string
                  description: Custom parameters to be sent to the tool when launching this link. Caution! Changing these from what the tool provided could result in errors if the tool doesn’t see what it’s expecting.
          application/x-www-form-urlencoded:
            schema: *id058
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Lti_Resource_Links
      description: "Delete the specified resource link. The ID can be in the standard Canvas format (“1”), or in these special formats: * resource\\_link\\_uuid:\\<uuid> - Find the resource link by its resource\\_link\\_uuid * lookup\\_uuid:\\<uuid> - Find the resource link by its lookup\\_uuid Only links that are not associated with Assignments, Module Items, or Collaborations can be deleted.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/lti_resource_links/:id"
      operationId: delete_lti_resource_links
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/lti_resource_links/bulk:
    post:
      summary: Post Courses Bulk
      description: "Create up to 100 new LTI Resource Links in the specified course with the provided parameters.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/lti_resource_links/bulk"
      operationId: create_bulk
      tags:
      - LTI Resource Links
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: POST
        in: query
        required: true
        description: body [Required, Array] The POST body should be a JSON array of objects containing the parameters for each link to create.
        schema:
          type: string
      - name: '[]title'
        in: query
        required: false
        description: Each object may contain a title.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id059
              type: object
              properties:
                '[]url':
                  type: string
                  description: Each object must contain a launch URL.
                '[]custom':
                  type: string
                  description: Custom parameters to be sent to the tool when launching this link.
          application/x-www-form-urlencoded:
            schema: *id059
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels:
    get:
      summary: Get Users Communication_Channels
      description: "Returns a paginated list of communication channels for the specified user, sorted by position.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels"
      operationId: get_communication_channels
      tags:
      - Communication Channels
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id060
                  required: *id061
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Communication_Channels
      description: "Creates a new communication channel for the specified user.\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/communication_channels"
      operationId: create_communication_channels
      tags:
      - Communication Channels
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: communication_channel[token]
        in: query
        required: false
        description: A registration id, device token, or equivalent token given to an app when registering with a push notification provider. Only valid for “push” type channels.
        schema:
          type: string
      - name: skip_confirmation
        in: query
        required: false
        description: Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id062
              type: object
              properties:
                communication_channel[address]:
                  type: string
                  description: An email address or SMS number. Not required for “push” type channels.
                communication_channel[type]:
                  type: string
                  description: The type of communication channel.In order to enable push notification support, the server must be properly configured (via ‘sns_credsin Vault) to communicate with Amazon Simple Notification Services, and the developer key used to create the access token from this request must have an SNS ARN configured on it.</p> Allowed values:email, sms, push`
              required:
              - communication_channel[address]
          application/x-www-form-urlencoded:
            schema: *id062
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id060
                required: *id061
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{id}:
    delete:
      summary: Delete Users Communication_Channels
      description: "Delete Users Communication_Channels\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/communication_channels/:id"
      operationId: delete_communication_channels
      tags:
      - Communication Channels
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{type}/{address}:
    delete:
      summary: Delete Users Communication_Channels
      description: "Delete an existing communication channel.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/communication_channels/:type/:address"
      operationId: delete_communication_channels
      tags:
      - Communication Channels
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: type
        in: path
        required: true
        description: The type identifier
        schema:
          type: string
      - name: address
        in: path
        required: true
        description: The address identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id060
                required: *id061
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/push:
    delete:
      summary: Delete Users Push
      description: "Delete Users Push\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/communication_channels/push"
      operationId: delete_push
      tags:
      - Communication Channels
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/front_page:
    get:
      summary: Get Courses Front_Page
      description: "Get Courses Front_Page\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/front_page"
      operationId: get_front_page
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Front_Page
      description: "Put Courses Front_Page\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/front_page"
      operationId: update_front_page
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/front_page:
    get:
      summary: Get Groups Front_Page
      description: "Retrieve the content of the front page\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/front_page"
      operationId: get_front_page
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Front_Page
      description: "Update the title or contents of the front page\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/front_page"
      operationId: update_front_page
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: wiki_page[title]
        in: query
        required: false
        description: 'The title for the new page. NOTE: changing a page’s title will change its url. The updated url will be returned in the result.'
        schema:
          type: string
      - name: wiki_page[body]
        in: query
        required: false
        description: The content for the new page.
        schema:
          type: string
      - name: wiki_page[editing_roles]
        in: query
        required: false
        description: 'Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public'
        schema:
          type: string
      - name: wiki_page[notify_of_update]
        in: query
        required: false
        description: Whether participants should be notified when this page changes.
        schema:
          type: boolean
      - name: wiki_page[published]
        in: query
        required: false
        description: Whether the page is published (true) or draft state (false).
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}/duplicate:
    post:
      summary: Post Courses Duplicate
      description: "Duplicate a wiki page\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/pages/:url_or_id/duplicate"
      operationId: create_duplicate
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages:
    get:
      summary: Get Courses Pages
      description: "Get Courses Pages\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages"
      operationId: get_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Pages
      description: "Post Courses Pages\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/pages"
      operationId: create_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/pages:
    get:
      summary: Get Groups Pages
      description: "A paginated list of the wiki pages associated with a course or group\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/pages"
      operationId: get_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'Sort results by this field.Allowed values: title, created_at, updated_at'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The sorting order. Defaults to ‘asc’.Allowed values: asc, desc'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial title of the pages to match and return.
        schema:
          type: string
      - name: published
        in: query
        required: false
        description: If true, include only published paqes. If false, exclude published pages. If not present, do not filter on published status.
        schema:
          type: boolean
      - name: include[]
        in: query
        required: false
        description: '“enrollments”: Optionally include the page body with each Page.If this is a block_editor page, returns the block_editor_attributes.Allowed values: body'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id063
                  required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Pages
      description: "Create a new wiki page\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/pages"
      operationId: create_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: wiki_page[body]
        in: query
        required: false
        description: The content for the new page.
        schema:
          type: string
      - name: wiki_page[editing_roles]
        in: query
        required: false
        description: 'Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public'
        schema:
          type: string
      - name: wiki_page[notify_of_update]
        in: query
        required: false
        description: Whether participants should be notified when this page changes.
        schema:
          type: boolean
      - name: wiki_page[published]
        in: query
        required: false
        description: Whether the page is published (true) or draft state (false).
        schema:
          type: boolean
      - name: wiki_page[front_page]
        in: query
        required: false
        description: Set an unhidden page as the front page (if true)
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id065
              type: object
              properties:
                wiki_page[title]:
                  type: string
                  description: The title for the new page.
                wiki_page[publish_at]:
                  type: string
                  description: Schedule a future date/time to publish the page. This will have no effect unless the “Scheduled Page Publication” feature is enabled in the account. If a future date is supplied, the page will be unpublished and wiki_page[published] will be ignored.
          application/x-www-form-urlencoded:
            schema: *id065
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}:
    get:
      summary: Get Courses Pages
      description: "Get Courses Pages\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages/:url_or_id"
      operationId: get_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Pages
      description: "Put Courses Pages\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/pages/:url_or_id"
      operationId: update_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Pages
      description: "Delete Courses Pages\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/pages/:url_or_id"
      operationId: delete_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/pages/{url_or_id}:
    get:
      summary: Get Groups Pages
      description: "Retrieve the content of a wiki page\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/pages/:url_or_id"
      operationId: get_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Pages
      description: "Update the title or contents of a wiki page NOTE: You cannot specify the ID when creating a page. If you pass a numeric value as the page identifier and that does not represent a page ID that already exists, it will be interpreted as a URL.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/pages/:url_or_id"
      operationId: update_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      - name: wiki_page[title]
        in: query
        required: false
        description: 'The title for the new page. NOTE: changing a page’s title will change its url. The updated url will be returned in the result.'
        schema:
          type: string
      - name: wiki_page[body]
        in: query
        required: false
        description: The content for the new page.
        schema:
          type: string
      - name: wiki_page[editing_roles]
        in: query
        required: false
        description: 'Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).“teachers”Allows editing by teachers in the course.“students”Allows editing by students in the course.“members”For group wikis, allows editing by members of the group.“public”Allows editing by any user.Allowed values: teachers, students, members, public'
        schema:
          type: string
      - name: wiki_page[notify_of_update]
        in: query
        required: false
        description: Whether participants should be notified when this page changes.
        schema:
          type: boolean
      - name: wiki_page[published]
        in: query
        required: false
        description: Whether the page is published (true) or draft state (false).
        schema:
          type: boolean
      - name: wiki_page[front_page]
        in: query
        required: false
        description: Set an unhidden page as the front page (if true)
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id066
              type: object
              properties:
                wiki_page[publish_at]:
                  type: string
                  description: Schedule a future date/time to publish the page. This will have no effect unless the “Scheduled Page Publication” feature is enabled in the account. If a future date is set and the page is already published, it will be unpublished.
          application/x-www-form-urlencoded:
            schema: *id066
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Pages
      description: "Delete a wiki page\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/pages/:url_or_id"
      operationId: delete_pages
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id063
                required: *id064
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}/revisions:
    get:
      summary: Get Courses Revisions
      description: "Get Courses Revisions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions"
      operationId: get_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/pages/{url_or_id}/revisions:
    get:
      summary: Get Groups Revisions
      description: "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions"
      operationId: get_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id067
                  required: *id068
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}/revisions/latest:
    get:
      summary: Get Courses Latest
      description: "Get Courses Latest\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions/latest"
      operationId: get_latest
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/pages/{url_or_id}/revisions/latest:
    get:
      summary: Get Groups Latest
      description: "Get Groups Latest\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions/latest"
      operationId: get_latest
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}/revisions/{revision_id}:
    get:
      summary: Get Courses Revisions
      description: "Get Courses Revisions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id"
      operationId: get_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      - name: revision_id
        in: path
        required: true
        description: The revision_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Revisions
      description: "Post Courses Revisions\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/pages/:url_or_id/revisions/:revision_id"
      operationId: create_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      - name: revision_id
        in: path
        required: true
        description: The revision_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/pages/{url_or_id}/revisions/{revision_id}:
    get:
      summary: Get Groups Revisions
      description: "Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id"
      operationId: get_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      - name: revision_id
        in: path
        required: true
        description: The revision_id identifier
        schema:
          type: string
      - name: summary
        in: query
        required: false
        description: If set, exclude page content from results
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id067
                required: *id068
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Revisions
      description: "Revert a page to a prior revision.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/pages/:url_or_id/revisions/:revision_id"
      operationId: create_revisions
      tags:
      - Pages
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      - name: revision_id
        in: path
        required: true
        description: The revision_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id069
              type: object
              properties:
                revision_id:
                  type: string
                  description: The revision to revert to (use the List Revisions API to see available revisions)
          application/x-www-form-urlencoded:
            schema: *id069
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id067
                required: *id068
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/developer_key/update_public_jwk:
    put:
      summary: Put Developer_Key Update_Public_Jwk
      description: "Rotate the public key in jwk format when using lti services\n\nRequired OAuth scope: url:PUT|/api/lti/developer_key/update_public_jwk"
      operationId: update_update_public_jwk
      tags:
      - Public JWK
      security:
      - bearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &id070
              type: object
              properties:
                public_jwk:
                  type: string
                  description: The new public jwk that will be set to the tools current public jwk.
          application/x-www-form-urlencoded:
            schema: *id070
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions:
    get:
      summary: Get Polls Poll_Sessions
      description: "Returns the paginated list of PollSessions in this poll.\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_sessions"
      operationId: get_poll_sessions
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Polls Poll_Sessions
      description: "Create a new poll session for this poll\n\nRequired OAuth scope: url:POST|/api/v1/polls/:poll_id/poll_sessions"
      operationId: create_poll_sessions
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: poll_sessions[][course_section_id]
        in: query
        required: false
        description: The id of the course section this session is associated with.
        schema:
          type: integer
      - name: poll_sessions[][has_public_results]
        in: query
        required: false
        description: Whether or not results are viewable by students.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id071
              type: object
              properties:
                poll_sessions[][course_id]:
                  type: string
                  description: The id of the course this session is associated with.
          application/x-www-form-urlencoded:
            schema: *id071
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions/{id}:
    get:
      summary: Get Polls Poll_Sessions
      description: "Returns the poll session with the given id\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_sessions/:id"
      operationId: get_poll_sessions
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Polls Poll_Sessions
      description: "Update an existing poll session for this poll\n\nRequired OAuth scope: url:PUT|/api/v1/polls/:poll_id/poll_sessions/:id"
      operationId: update_poll_sessions
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: poll_sessions[][course_id]
        in: query
        required: false
        description: The id of the course this session is associated with.
        schema:
          type: integer
      - name: poll_sessions[][course_section_id]
        in: query
        required: false
        description: The id of the course section this session is associated with.
        schema:
          type: integer
      - name: poll_sessions[][has_public_results]
        in: query
        required: false
        description: Whether or not results are viewable by students.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Polls Poll_Sessions
      description: "Delete Polls Poll_Sessions\n\nRequired OAuth scope: url:DELETE|/api/v1/polls/:poll_id/poll_sessions/:id"
      operationId: delete_poll_sessions
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions/{id}/open:
    get:
      summary: Get Polls Open
      description: "### [Close an opened poll session](#method.polling/poll_sessions.close) <a href=\"#method.polling-poll_sessions.close\" id=\"method.polling-poll_sessions.close\"></a> [Polling::PollSessionsController#close](https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_sessions/:id/open"
      operationId: get_open
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_sessions/{id}/close:
    get:
      summary: Get Polls Close
      description: "### [List opened poll sessions](#method.polling/poll_sessions.opened) <a href=\"#method.polling-poll_sessions.opened\" id=\"method.polling-poll_sessions.opened\"></a> [Polling::PollSessionsController#opened](https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_sessions/:id/close"
      operationId: get_close
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/poll_sessions/opened:
    get:
      summary: Get Poll_Sessions Opened
      description: "A paginated list of all opened poll sessions available to the current user.\n\nRequired OAuth scope: url:GET|/api/v1/poll_sessions/opened"
      operationId: list_opened
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/poll_sessions/closed:
    get:
      summary: Get Poll_Sessions Closed
      description: "A paginated list of all closed poll sessions available to the current user.\n\nRequired OAuth scope: url:GET|/api/v1/poll_sessions/closed"
      operationId: list_closed
      tags:
      - Poll Sessions
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/jwts:
    post:
      summary: Create Jwts
      description: "Create a unique JWT for use with other Canvas services Generates a different JWT each time it’s called. Each JWT expires after a short window (1 hour)\n\nRequired OAuth scope: url:POST|/api/v1/jwts"
      operationId: create_jwts
      tags:
      - JWTs
      security:
      - bearerAuth: []
      parameters:
      - name: workflows[]
        in: query
        required: false
        description: Adds additional data to the JWT to be used by the consuming service workflow
        schema:
          type: string
      - name: context_type
        in: query
        required: false
        description: 'The type of the context to generate the JWT for, in case the workflow requires it. Case insensitive.Allowed values: Course, User, Account'
        schema:
          type: string
      - name: context_id
        in: query
        required: false
        description: The id of the context to generate the JWT for, in case the workflow requires it.
        schema:
          type: integer
      - name: context_uuid
        in: query
        required: false
        description: The uuid of the context to generate the JWT for, in case the workflow requires it. Note that context_id and context_uuid are mutually exclusive. If both are provided, an error will be returned.
        schema:
          type: string
      - name: canvas_audience
        in: query
        required: false
        description: Defaults to true. If false, the JWT will be signed, but not encrypted, for use in downstream services. The default encrypted behaviour can be used to talk to Canvas itself.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id072
                required: *id073
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/jwts/refresh:
    post:
      summary: Post Jwts Refresh
      description: "Refresh a JWT for use with other canvas services Generates a different JWT each time it’s called, each one expires after a short window (1 hour).\n\nRequired OAuth scope: url:POST|/api/v1/jwts/refresh"
      operationId: create_refresh
      tags:
      - JWTs
      security:
      - bearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &id074
              type: object
              properties:
                jwt:
                  type: string
                  description: An existing JWT token to be refreshed. The new token will have the same context and workflows as the existing token.
          application/x-www-form-urlencoded:
            schema: *id074
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id072
                required: *id073
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics:
    get:
      summary: Get Courses Discussion_Topics
      description: "Get Courses Discussion_Topics\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics"
      operationId: get_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Discussion_Topics
      description: "Post Courses Discussion_Topics\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics"
      operationId: create_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics:
    get:
      summary: Get Groups Discussion_Topics
      description: "Returns the paginated list of discussion topics for this course or group.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics"
      operationId: get_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: "If “all_dates” is passed, all dates associated with graded discussions’ assignments will be included. if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to.\nIf “overrides” is passed, the overrides for the assignment will be includedAllowed values: all_dates, sections, sections_user_count, overrides"
        schema:
          type: string
      - name: order_by
        in: query
        required: false
        description: 'Determines the order of the discussion topic list. Defaults to “position”.Allowed values: position, recent_activity, title'
        schema:
          type: string
      - name: scope
        in: query
        required: false
        description: 'Only return discussion topics in the given state(s). Defaults to including all topics. Filtering is done after pagination, so pages may be smaller than requested if topics are filtered. Can pass multiple states as comma separated string.Allowed values: locked, unlocked, pinned, unpinned'
        schema:
          type: string
      - name: only_announcements
        in: query
        required: false
        description: Return announcements instead of discussion topics. Defaults to false
        schema:
          type: boolean
      - name: filter_by
        in: query
        required: false
        description: 'The state of the discussion topic to return. Currently only supports unread state.Allowed values: all, unread'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial title of the discussion topics to match and return.
        schema:
          type: string
      - name: exclude_context_module_locked_topics
        in: query
        required: false
        description: For students, exclude topics that are locked by module progression. Defaults to false.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id075
                  required: *id076
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Discussion_Topics
      description: "Create an new discussion topic for the course or group.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics"
      operationId: create_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: message
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: discussion_type
        in: query
        required: false
        description: 'The type of discussion. Defaults to side_comment or not_threaded if not value is given. Accepted values are ‘side_comment’, ‘not_threaded’ for discussions that only allow one level of nested comments, and ‘threaded’ for fully threaded discussions.Allowed values: side_comment, threaded, not_threaded'
        schema:
          type: string
      - name: published
        in: query
        required: false
        description: Whether this topic is published (true) or draft state (false). Only teachers and TAs have the ability to create draft state topics.
        schema:
          type: boolean
      - name: allow_rating
        in: query
        required: false
        description: Whether or not users can rate entries in this topic.
        schema:
          type: boolean
      - name: podcast_enabled
        in: query
        required: false
        description: If true, the topic will have an associated podcast feed.
        schema:
          type: boolean
      - name: podcast_has_student_posts
        in: query
        required: false
        description: If true, the podcast will include posts from students as well. Implies podcast_enabled.
        schema:
          type: boolean
      - name: require_initial_post
        in: query
        required: false
        description: If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.
        schema:
          type: boolean
      - name: is_announcement
        in: query
        required: false
        description: If true, this topic is an announcement. It will appear in the announcement’s section rather than the discussions section. This requires announcment-posting permissions.
        schema:
          type: boolean
      - name: pinned
        in: query
        required: false
        description: If true, this topic will be listed in the “Pinned Discussion” section
        schema:
          type: boolean
      - name: position_after
        in: query
        required: false
        description: By default, discussions are sorted chronologically by creation date, you can pass the id of another topic to have this one show up after the other when they are listed.
        schema:
          type: string
      - name: group_category_id
        in: query
        required: false
        description: If present, the topic will become a group discussion assigned to the group.
        schema:
          type: integer
      - name: only_graders_can_rate
        in: query
        required: false
        description: If true, only graders will be allowed to rate entries.
        schema:
          type: boolean
      - name: sort_order
        in: query
        required: false
        description: 'Default sort order of the discussion. Accepted values are “asc”, “desc”.Allowed values: asc, desc'
        schema:
          type: string
      - name: sort_order_locked
        in: query
        required: false
        description: If true, users cannot choose their prefered sort order
        schema:
          type: boolean
      - name: expanded
        in: query
        required: false
        description: If true, thread will be expanded by default
        schema:
          type: boolean
      - name: expanded_locked
        in: query
        required: false
        description: If true, users cannot choose their prefered thread expansion setting
        schema:
          type: boolean
      - name: sort_by_rating
        in: query
        required: false
        description: (DEPRECATED) If true, entries will be sorted by rating.
        schema:
          type: boolean
      - name: specific_sections
        in: query
        required: false
        description: A comma-separated list of sections ids to which the discussion topic should be made specific to. If it is not desired to make the discussion topic specific to sections, then this parameter may be omitted or set to “all”. Can only be present only on announcements and only those that are for a course (as opposed to a group).
        schema:
          type: string
      - name: lock_comment
        in: query
        required: false
        description: If is_announcement and lock_comment are true, ‘Allow Participants to Comment’ setting is disabled.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id077
              type: object
              properties:
                delayed_post_at:
                  type: string
                  description: If a timestamp is given, the topic will not be published until that time.
                lock_at:
                  type: string
                  description: If a timestamp is given, the topic will be scheduled to lock at the provided timestamp. If the timestamp is in the past, the topic will be locked.
                assignment:
                  type: string
                  description: To create an assignment discussion, pass the assignment parameters as a sub-object. See the Create an Assignment API for the available parameters. The name parameter will be ignored, as it’s taken from the discussion title. If you want to make a discussion that was an assignment NOT an assignment, pass set_assignment = false as part of the assignment object
                attachment:
                  type: string
                  description: A multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.
          application/x-www-form-urlencoded:
            schema: *id077
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}:
    put:
      summary: Put Courses Discussion_Topics
      description: "Put Courses Discussion_Topics\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id"
      operationId: update_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Discussion_Topics
      description: "Delete Courses Discussion_Topics\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id"
      operationId: delete_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Discussion_Topics
      description: "Get Courses Discussion_Topics\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id"
      operationId: get_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}:
    put:
      summary: Put Groups Discussion_Topics
      description: "Update an existing discussion topic for the course or group.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id"
      operationId: update_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: message
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: discussion_type
        in: query
        required: false
        description: 'The type of discussion. Defaults to side_comment or not_threaded if not value is given. Accepted values are ‘side_comment’, ‘not_threaded’ for discussions that only allow one level of nested comments, and ‘threaded’ for fully threaded discussions.Allowed values: side_comment, threaded, not_threaded'
        schema:
          type: string
      - name: published
        in: query
        required: false
        description: Whether this topic is published (true) or draft state (false). Only teachers and TAs have the ability to create draft state topics.
        schema:
          type: boolean
      - name: podcast_enabled
        in: query
        required: false
        description: If true, the topic will have an associated podcast feed.
        schema:
          type: boolean
      - name: podcast_has_student_posts
        in: query
        required: false
        description: If true, the podcast will include posts from students as well. Implies podcast_enabled.
        schema:
          type: boolean
      - name: require_initial_post
        in: query
        required: false
        description: If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.
        schema:
          type: boolean
      - name: is_announcement
        in: query
        required: false
        description: If true, this topic is an announcement. It will appear in the announcement’s section rather than the discussions section. This requires announcment-posting permissions.
        schema:
          type: boolean
      - name: pinned
        in: query
        required: false
        description: If true, this topic will be listed in the “Pinned Discussion” section
        schema:
          type: boolean
      - name: position_after
        in: query
        required: false
        description: By default, discussions are sorted chronologically by creation date, you can pass the id of another topic to have this one show up after the other when they are listed.
        schema:
          type: string
      - name: group_category_id
        in: query
        required: false
        description: If present, the topic will become a group discussion assigned to the group.
        schema:
          type: integer
      - name: allow_rating
        in: query
        required: false
        description: If true, users will be allowed to rate entries.
        schema:
          type: boolean
      - name: only_graders_can_rate
        in: query
        required: false
        description: If true, only graders will be allowed to rate entries.
        schema:
          type: boolean
      - name: sort_order
        in: query
        required: false
        description: 'Default sort order of the discussion. Accepted values are “asc”, “desc”.Allowed values: asc, desc'
        schema:
          type: string
      - name: sort_order_locked
        in: query
        required: false
        description: If true, users cannot choose their prefered sort order
        schema:
          type: boolean
      - name: expanded
        in: query
        required: false
        description: If true, thread will be expanded by default
        schema:
          type: boolean
      - name: expanded_locked
        in: query
        required: false
        description: If true, users cannot choose their prefered thread expansion setting
        schema:
          type: boolean
      - name: sort_by_rating
        in: query
        required: false
        description: (DEPRECATED) If true, entries will be sorted by rating.
        schema:
          type: boolean
      - name: specific_sections
        in: query
        required: false
        description: A comma-separated list of sections ids to which the discussion topic should be made specific too. If it is not desired to make the discussion topic specific to sections, then this parameter may be omitted or set to “all”. Can only be present only on announcements and only those that are for a course (as opposed to a group).
        schema:
          type: string
      - name: lock_comment
        in: query
        required: false
        description: If is_announcement and lock_comment are true, ‘Allow Participants to Comment’ setting is disabled.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id078
              type: object
              properties:
                delayed_post_at:
                  type: string
                  description: If a timestamp is given, the topic will not be published until that time.
                lock_at:
                  type: string
                  description: If a timestamp is given, the topic will be scheduled to lock at the provided timestamp. If the timestamp is in the past, the topic will be locked.
                assignment:
                  type: string
                  description: To create an assignment discussion, pass the assignment parameters as a sub-object. See the Create an Assignment API for the available parameters. The name parameter will be ignored, as it’s taken from the discussion title. If you want to make a discussion that was an assignment NOT an assignment, pass set_assignment = false as part of the assignment object
          application/x-www-form-urlencoded:
            schema: *id078
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Discussion_Topics
      description: "Deletes the discussion topic. This will also delete the assignment, if it’s an assignment discussion.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id"
      operationId: delete_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Groups Discussion_Topics
      description: "Returns data on an individual discussion topic. See the List action for the response formatting.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id"
      operationId: get_discussion_topics
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: "If “all_dates” is passed, all dates associated with graded discussions’ assignments will be included. if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to.\nIf “overrides” is passed, the overrides for the assignment will be includedAllowed values: all_dates, sections, sections_user_count, overrides"
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/reorder:
    post:
      summary: Post Courses Reorder
      description: "Post Courses Reorder\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/reorder"
      operationId: create_reorder
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/reorder:
    post:
      summary: Post Groups Reorder
      description: "Puts the pinned discussion topics in the specified order. All pinned topics should be included.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/reorder"
      operationId: create_reorder
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id079
              type: object
              properties:
                order[]:
                  type: string
                  description: The ids of the pinned discussion topics in the desired order. (For example, “order=104,102,103”.)
          application/x-www-form-urlencoded:
            schema: *id079
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}:
    put:
      summary: Put Courses Entries
      description: "Put Courses Entries\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id"
      operationId: update_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Entries
      description: "Delete Courses Entries\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id"
      operationId: delete_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}:
    put:
      summary: Put Groups Entries
      description: "Update an existing discussion entry. The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id"
      operationId: update_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: message
        in: query
        required: false
        description: The updated body of the entry.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Entries
      description: "Delete a discussion entry. The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the delete is not allowed, a 401 will be returned. The discussion will be marked deleted, and the user\\_id and message will be cleared out.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:id"
      operationId: delete_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/summaries:
    get:
      summary: Get Courses Summaries
      description: "Get Courses Summaries\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries"
      operationId: get_summaries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Summaries
      description: "Post Courses Summaries\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries"
      operationId: create_summaries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/summaries:
    get:
      summary: Get Groups Summaries
      description: "Returns: (1) last userInput (what current user had keyed in to produce the last discussion summary), (2) last discussion summary generated by the current user for current discussion topic, based on userInput, (3) and some usage information.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries"
      operationId: get_summaries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Summaries
      description: "Generates a summary for a discussion topic. Returns the summary text and usage information.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries"
      operationId: create_summaries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: userInput
        in: query
        required: false
        description: Areas or topics for the summary to focus on.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/summaries/disable:
    put:
      summary: Put Courses Disable
      description: "Put Courses Disable\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/disable"
      operationId: update_disable
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/summaries/disable:
    put:
      summary: Put Groups Disable
      description: "Deprecated, to remove after VICE-5047 gets merged Disables the summary for a discussion topic.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/disable"
      operationId: update_disable
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/summaries/{summary_id}/feedback:
    post:
      summary: Post Courses Feedback
      description: "Post Courses Feedback\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/summaries/:summary_id/feedback"
      operationId: create_feedback
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: summary_id
        in: path
        required: true
        description: The summary_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/summaries/{summary_id}/feedback:
    post:
      summary: Post Groups Feedback
      description: "Persists feedback on a discussion topic summary.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/summaries/:summary_id/feedback"
      operationId: create_feedback
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: summary_id
        in: path
        required: true
        description: The summary_id identifier
        schema:
          type: string
      - name: _action
        in: query
        required: true
        description: 'Required The action to take on the summary. Possible values are:“seen”: Marks the summary as seen. This action saves the feedback if it’s not already persisted.“like”: Marks the summary as liked.“dislike”: Marks the summary as disliked.“reset_like”: Resets the like status of the summary.“regenerate”: Regenerates the summary feedback.“disable_summary”: Disables the summary feedback.Any other value will result in an error response.'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/view:
    get:
      summary: Get Courses View
      description: "Get Courses View\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/view"
      operationId: get_view
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/view:
    get:
      summary: Get Groups View
      description: "Return a cached structure of the discussion topic, containing all entries, their authors, and their message bodies. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. In some rare situations, this cached structure may not be available yet. In that case, the server will respond with a 503 error, and the caller should try again soon. The response is an object containing the following keys: * “participants”: A list of summary information on users who have posted to the discussion. Each value is an object containing their id, display\\_name, and avatar\\_url. * “unread\\_entries”: A list of entry ids that are unread by the current user. this implies that any entry not in this list is read. * “entry\\_ratings”: A map of entry ids to ratings by the current user. Entries not in this list have no rating. Only populated if rating is enabled. * “forced\\_entries”: A list of entry ids that have forced\\_read\\_state set to true. This flag is meant to indicate the entry’s read\\_state has been manually set to ‘unread’ by the user, so the entry should not be automatically marked as read. * “view”: A threaded view of all the entries in the discussion, containing the id, user\\_id, and message. * “new\\_entries”: Because this view is eventually consistent, it’s possible that newly created or updated entries won’t yet be reflected in the view. If the application wants to also get a flat list of all entries not yet reflected in the view, pass include\\_new\\_entries=1 to the request and this array of entries will be returned. These entries are returned in a flat array, in ascending created\\_at order.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/view"
      operationId: get_view
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries:
    post:
      summary: Post Courses Entries
      description: "Post Courses Entries\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries"
      operationId: create_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Entries
      description: "Get Courses Entries\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries"
      operationId: get_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries:
    post:
      summary: Post Groups Entries
      description: "Create a new entry in a discussion topic. Returns a json representation of the created entry (see documentation for ‘entries’ method) on success.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries"
      operationId: create_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: message
        in: query
        required: false
        description: The body of the entry.
        schema:
          type: string
      - name: attachment
        in: query
        required: false
        description: a multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Groups Entries
      description: "Retrieve the (paginated) top-level entries in a discussion topic. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. Will include the 10 most recent replies, if any, for each entry returned. If the topic is a root topic with children corresponding to groups of a group assignment, entries from those subtopics for which the user belongs to the corresponding group will be returned. Ordering of returned entries is newest-first by posting timestamp (reply activity is ignored).\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries"
      operationId: get_entries
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/duplicate:
    post:
      summary: Post Courses Duplicate
      description: "Post Courses Duplicate\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/duplicate"
      operationId: create_duplicate
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/duplicate:
    post:
      summary: Post Groups Duplicate
      description: "Duplicate a discussion topic according to context (Course/Group)\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/duplicate"
      operationId: create_duplicate
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id075
                required: *id076
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies:
    post:
      summary: Post Courses Replies
      description: "Post Courses Replies\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies"
      operationId: create_replies
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Replies
      description: "Get Courses Replies\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies"
      operationId: get_replies
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies:
    post:
      summary: Post Groups Replies
      description: "Add a reply to an entry in a discussion topic. Returns a json representation of the created reply (see documentation for ‘replies’ method) on success. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies"
      operationId: create_replies
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      - name: message
        in: query
        required: false
        description: The body of the entry.
        schema:
          type: string
      - name: attachment
        in: query
        required: false
        description: a multipart/form-data form-field-style attachment. Attachments larger than 1 kilobyte are subject to quota restrictions.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Groups Replies
      description: "Retrieve the (paginated) replies to a top-level entry in a discussion topic. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’. Ordering of returned entries is newest-first by creation timestamp.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/replies"
      operationId: get_replies
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list:
    get:
      summary: Get Courses Entry_List
      description: "Get Courses Entry_List\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:topic_id/entry_list"
      operationId: get_entry_list
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list:
    get:
      summary: Get Groups Entry_List
      description: "Retrieve a paginated list of discussion entries, given a list of ids. May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body ‘require\\_initial\\_post’.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/discussion_topics/:topic_id/entry_list"
      operationId: get_entry_list
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: ids[]
        in: query
        required: false
        description: A list of entry ids to retrieve. Entries will be returned in id order, smallest id first.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/read:
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/read"
      operationId: update_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Read
      description: "Delete Courses Read\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/read"
      operationId: delete_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/read:
    put:
      summary: Put Groups Read
      description: "Mark the initial text of the discussion topic as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/read"
      operationId: update_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Read
      description: "Mark the initial text of the discussion topic as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/read"
      operationId: delete_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/read_all:
    put:
      summary: Put Courses Read_All
      description: "Put Courses Read_All\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/read_all"
      operationId: update_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/read_all:
    put:
      summary: Put Groups Read_All
      description: "Mark the initial text of all the discussion topics as read in the context. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/read_all"
      operationId: update_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all:
    put:
      summary: Put Courses Read_All
      description: "Put Courses Read_All\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all"
      operationId: update_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Read_All
      description: "Delete Courses Read_All\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all"
      operationId: delete_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all:
    put:
      summary: Put Groups Read_All
      description: "Mark the discussion topic and all its entries as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all"
      operationId: update_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: forced_read_state
        in: query
        required: false
        description: A boolean value to set all of the entries’ forced_read_state. No change is made if this argument is not specified.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Read_All
      description: "Mark the discussion topic and all its entries as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/read_all"
      operationId: delete_read_all
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: forced_read_state
        in: query
        required: false
        description: A boolean value to set all of the entries’ forced_read_state. No change is made if this argument is not specified.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read:
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read"
      operationId: update_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Read
      description: "Delete Courses Read\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read"
      operationId: delete_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read:
    put:
      summary: Put Groups Read
      description: "Mark a discussion entry as read. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read"
      operationId: update_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      - name: forced_read_state
        in: query
        required: false
        description: A boolean value to set the entry’s forced_read_state. No change is made if this argument is not specified.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Read
      description: "Mark a discussion entry as unread. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/read"
      operationId: delete_read
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      - name: forced_read_state
        in: query
        required: false
        description: A boolean value to set the entry’s forced_read_state. No change is made if this argument is not specified.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating:
    post:
      summary: Post Courses Rating
      description: "Post Courses Rating\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/rating"
      operationId: create_rating
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating:
    post:
      summary: Post Groups Rating
      description: "Rate a discussion entry. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/discussion_topics/:topic_id/entries/:entry_id/rating"
      operationId: create_rating
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      - name: entry_id
        in: path
        required: true
        description: The entry_id identifier
        schema:
          type: string
      - name: rating
        in: query
        required: false
        description: A rating to set on this entry. Only 0 and 1 are accepted.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed:
    put:
      summary: Put Courses Subscribed
      description: "Put Courses Subscribed\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed"
      operationId: update_subscribed
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Subscribed
      description: "Delete Courses Subscribed\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed"
      operationId: delete_subscribed
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed:
    put:
      summary: Put Groups Subscribed
      description: "Subscribe to a topic to receive notifications about new entries On success, the response will be 204 No Content with an empty body\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed"
      operationId: update_subscribed
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Subscribed
      description: "Unsubscribe from a topic to stop receiving notifications about new entries On success, the response will be 204 No Content with an empty body\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/discussion_topics/:topic_id/subscribed"
      operationId: delete_subscribed
      tags:
      - Discussion Topics
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: topic_id
        in: path
        required: true
        description: The topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files:
    post:
      summary: Post Courses Files
      description: "Associate a new quiz submission file This API endpoint is the first step in uploading a quiz submission file. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow as these parameters are interpreted as per the documentation there.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/self/files"
      operationId: create_files
      tags:
      - Quiz Submission Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the quiz submission file
        schema:
          type: string
      - name: on_duplicate
        in: query
        required: false
        description: How to handle duplicate names
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events:
    post:
      summary: Post Courses Events
      description: "Store a set of events which were captured during a quiz taking session. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events"
      operationId: create_events
      tags:
      - Quiz Submission Events
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id080
              type: object
              properties:
                quiz_submission_events[]:
                  type: string
                  description: The submission events to be recorded
          application/x-www-form-urlencoded:
            schema: *id080
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Events
      description: "Retrieve the set of events captured during a specific submission attempt.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/submissions/:id/events"
      operationId: get_events
      tags:
      - Quiz Submission Events
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: attempt
        in: query
        required: false
        description: The specific submission attempt to look up the events for. If unspecified, the latest attempt will be used.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations:
    get:
      summary: List Conversations
      description: "Returns the paginated list of conversations for the current user, most recent ones first. ``` \"uuid:W9GQIcdoDTqwX8mxIunDQQVL6WZTaGmpa5xovmCB\", or \"course_456\". For users, you can use either their numeric ID or UUID prefixed with \"uuid:\". Can be an array (by setting \"filter[]\") or single value (by setting \"filter\") ```\n\nRequired OAuth scope: url:GET|/api/v1/conversations"
      operationId: list_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: scope
        in: query
        required: false
        description: 'When set, only return conversations of the specified type. For example, set to “unread” to return only conversations that haven’t been read. The default behavior is to return all non-archived conversations (i.e. read and unread).Allowed values: unread, starred, archived, sent'
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: When set, only return conversations for the specified courses, groups or users. The id should be prefixed with its type, e.g. “user_123”,
        schema:
          type: string
      - name: filter_mode
        in: query
        required: false
        description: 'When filter[] contains multiple filters, combine them with this mode, filtering conversations that at have at least all of the contexts (“and”) or at least one of the contexts (“or”)Allowed values: and, or, default or'
        schema:
          type: string
      - name: interleave_submissions
        in: query
        required: false
        description: (Obsolete) Submissions are no longer linked to conversations. This parameter is ignored.
        schema:
          type: boolean
      - name: include_all_conversation_ids
        in: query
        required: false
        description: Default is false. If true, the top-level element of the response will be an object rather than an array, and will have the keys “conversations” which will contain the paged conversation data, and “conversation_ids” which will contain the ids of all conversations under this scope/filter in the same order.
        schema:
          type: boolean
      - name: include[]
        in: query
        required: false
        description: '“participant_avatars”Optionally include an “avatar_url” key for each user participating in the conversation“uuid”Optionally include an “uuid” key for each user participating in the conversationAllowed values: participant_avatars, uuid'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id081
                  required: *id082
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Conversations
      description: "Create a new conversation with one or more recipients. If there is already an existing private conversation with the given recipients, it will be reused. ``` (either numeric IDs or UUIDs prefixed with \"uuid:\"), or course/group ids prefixed with \"course_\" or \"group_\" respectively, e.g. recipients[]=1&recipients[]=uuid:W9GQIcdoDTqwX8mxIunDQQVL6WZTaGmpa5xovmCBx&recipients[]=course_3. If the course/group has over 100 enrollments, 'bulk_message' and 'group_conversation' must be set to true. ```\n\nRequired OAuth scope: url:POST|/api/v1/conversations"
      operationId: create_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: subject
        in: query
        required: false
        description: The subject of the conversation. This is ignored when reusing a conversation. Maximum length is 255 characters.
        schema:
          type: string
      - name: force_new
        in: query
        required: false
        description: Forces a new message to be created, even if there is an existing private conversation.
        schema:
          type: boolean
      - name: group_conversation
        in: query
        required: false
        description: Defaults to false. When false, individual private conversations will be created with each recipient. If true, this will be a group conversation (i.e. all recipients may see all messages and replies). Must be set true if the number of recipients is over the set maximum (default is 100).
        schema:
          type: boolean
      - name: attachment_ids[]
        in: query
        required: false
        description: An array of attachments ids. These must be files that have been previously uploaded to the sender’s “conversation attachments” folder.
        schema:
          type: string
      - name: media_comment_id
        in: query
        required: false
        description: Media comment id of an audio or video file to be associated with this message.
        schema:
          type: string
      - name: media_comment_type
        in: query
        required: false
        description: 'Type of the associated media fileAllowed values: audio, video'
        schema:
          type: string
      - name: mode
        in: query
        required: false
        description: 'Determines whether the messages will be created/sent synchronously or asynchronously. Defaults to sync, and this option is ignored if this is a group conversation or there is just one recipient (i.e. it must be a bulk private message). When sent async, the response will be an empty array (batch status can be queried via the batches API)Allowed values: sync, async'
        schema:
          type: string
      - name: scope
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived'
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: Used when generating “visible” in the API response. See the explanation under the index API action
        schema:
          type: string
      - name: filter_mode
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or'
        schema:
          type: string
      - name: context_code
        in: query
        required: false
        description: The course or group that is the context for this conversation. Same format as courses or groups in the recipients argument.
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“uuid”Optionally include an “uuid” key for each user participating in the conversationAllowed values: uuid'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id083
              type: object
              properties:
                recipients[]:
                  type: string
                  description: An array of recipient ids. These may be user ids
                body:
                  type: string
                  description: The message to be sent
          application/x-www-form-urlencoded:
            schema: *id083
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Conversations
      description: "Perform a change on a set of conversations. Operates asynchronously; use the [progress endpoint](../progress#method.progress.show) to query the status of an operation.\n\nRequired OAuth scope: url:PUT|/api/v1/conversations"
      operationId: update_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &id084
              type: object
              properties:
                conversation_ids[]:
                  type: string
                  description: List of conversations to update. Limited to 500 conversations.
                event:
                  type: string
                  description: 'The action to take on each conversation.Allowed values: mark_as_read, mark_as_unread, star, unstar, archive, destroy'
          application/x-www-form-urlencoded:
            schema: *id084
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/batches:
    get:
      summary: Get Conversations Batches
      description: "Returns any currently running conversation batches for the current user. Conversation batches are created when a bulk private message is sent asynchronously (see the mode argument to the [create API action](#method.conversations.create)).\n\nRequired OAuth scope: url:GET|/api/v1/conversations/batches"
      operationId: list_batches
      tags:
      - Conversations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/{id}:
    get:
      summary: List Conversations
      description: "Returns information for a single conversation for the current user. Response includes all fields that are present in the list/index action as well as messages and extended participant information.\n\nRequired OAuth scope: url:GET|/api/v1/conversations/:id"
      operationId: get_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: interleave_submissions
        in: query
        required: false
        description: (Obsolete) Submissions are no longer linked to conversations. This parameter is ignored.
        schema:
          type: boolean
      - name: scope
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived'
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: Used when generating “visible” in the API response. See the explanation under the index API action
        schema:
          type: string
      - name: filter_mode
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or'
        schema:
          type: string
      - name: auto_mark_as_read
        in: query
        required: false
        description: Default true. If true, unread conversations will be automatically marked as read. This will default to false in a future API release, so clients should explicitly send true if that is the desired behavior.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Conversations
      description: "Updates attributes for a single conversation.\n\nRequired OAuth scope: url:PUT|/api/v1/conversations/:id"
      operationId: update_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: conversation[workflow_state]
        in: query
        required: false
        description: 'Change the state of this conversationAllowed values: read, unread, archived'
        schema:
          type: string
      - name: conversation[subscribed]
        in: query
        required: false
        description: Toggle the current user’s subscription to the conversation (only valid for group conversations). If unsubscribed, the user will still have access to the latest messages, but the conversation won’t be automatically flagged as unread, nor will it jump to the top of the inbox.
        schema:
          type: boolean
      - name: conversation[starred]
        in: query
        required: false
        description: Toggle the starred state of the current user’s view of the conversation.
        schema:
          type: boolean
      - name: scope
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: unread, starred, archived'
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: Used when generating “visible” in the API response. See the explanation under the index API action
        schema:
          type: string
      - name: filter_mode
        in: query
        required: false
        description: 'Used when generating “visible” in the API response. See the explanation under the index API actionAllowed values: and, or, default or'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Conversations
      description: "Delete this conversation and its messages. Note that this only deletes this user’s view of the conversation. Response includes same fields as UPDATE action\n\nRequired OAuth scope: url:DELETE|/api/v1/conversations/:id"
      operationId: delete_conversations
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/mark_all_as_read:
    post:
      summary: Post Conversations Mark_All_As_Read
      description: "Mark all conversations as read. ### [Delete a conversation](#method.conversations.destroy) <a href=\"#method.conversations.destroy\" id=\"method.conversations.destroy\"></a> [ConversationsController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/conversations/mark_all_as_read"
      operationId: create_mark_all_as_read
      tags:
      - Conversations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/{id}/add_recipients:
    post:
      summary: Post Conversations Add_Recipients
      description: "Add recipients to an existing group conversation. Response is similar to the GET/show action, except that only includes the latest message (e.g. “joe was added to the conversation by bob”)\n\nRequired OAuth scope: url:POST|/api/v1/conversations/:id/add_recipients"
      operationId: create_add_recipients
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id085
              type: object
              properties:
                recipients[]:
                  type: string
                  description: An array of recipient ids. These may be user ids or course/group ids prefixed with “course_” or “group_” respectively, e.g. recipients[]=1\&recipients=2\&recipients[]=course_3
          application/x-www-form-urlencoded:
            schema: *id085
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/{id}/add_message:
    post:
      summary: Post Conversations Add_Message
      description: "Add a message to an existing conversation. Response is similar to the GET/show action, except that only includes the latest message (i.e. what we just sent) An array of user ids. Defaults to all of the current conversation recipients. To explicitly send a message to no other recipients, this array should consist of the logged-in user id. An array of message ids from this conversation to send to recipients of the new message. Recipients who already had a copy of included messages will not be affected.\n\nRequired OAuth scope: url:POST|/api/v1/conversations/:id/add_message"
      operationId: create_add_message
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: attachment_ids[]
        in: query
        required: false
        description: An array of attachments ids. These must be files that have been previously uploaded to the sender’s “conversation attachments” folder.
        schema:
          type: string
      - name: media_comment_id
        in: query
        required: false
        description: Media comment id of an audio of video file to be associated with this message.
        schema:
          type: string
      - name: media_comment_type
        in: query
        required: false
        description: 'Type of the associated media file.Allowed values: audio, video'
        schema:
          type: string
      - name: recipients[]
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: included_messages[]
        in: query
        required: false
        description: no description
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id086
              type: object
              properties:
                body:
                  type: string
                  description: The message to be sent.
          application/x-www-form-urlencoded:
            schema: *id086
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/{id}/remove_messages:
    post:
      summary: Post Conversations Remove_Messages
      description: "Delete messages from this conversation. Note that this only affects this user’s view of the conversation. If all messages are deleted, the conversation will be as well (equivalent to DELETE)\n\nRequired OAuth scope: url:POST|/api/v1/conversations/:id/remove_messages"
      operationId: create_remove_messages
      tags:
      - Conversations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id087
              type: object
              properties:
                remove[]:
                  type: string
                  description: Array of message ids to be deleted
          application/x-www-form-urlencoded:
            schema: *id087
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conversations/unread_count:
    get:
      summary: Get Conversations Unread_Count
      description: "Get the number of unread conversations for the current user\n\nRequired OAuth scope: url:GET|/api/v1/conversations/unread_count"
      operationId: list_unread_count
      tags:
      - Conversations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubrics:
    post:
      summary: Post Courses Rubrics
      description: "Returns the rubric with the given id. Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like ``` { 'rubric': Rubric, 'rubric_association': RubricAssociation } ``` This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/rubrics"
      operationId: create_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The id of the rubric
        schema:
          type: integer
      - name: rubric_association_id
        in: query
        required: false
        description: The id of the rubric association object (not the course/assignment itself, but the join table record id). It can be used in place of rubric_association[association_id] and rubric_association[association_type] if desired.
        schema:
          type: integer
      - name: rubric[title]
        in: query
        required: false
        description: The title of the rubric
        schema:
          type: string
      - name: rubric[free_form_criterion_comments]
        in: query
        required: false
        description: Whether or not you can write custom comments in the ratings field for a rubric
        schema:
          type: boolean
      - name: rubric_association[association_id]
        in: query
        required: false
        description: The id of the object with which this rubric is associated
        schema:
          type: integer
      - name: rubric_association[association_type]
        in: query
        required: false
        description: 'The type of object this rubric is associated withAllowed values: Assignment, Course, Account'
        schema:
          type: string
      - name: rubric_association[use_for_grading]
        in: query
        required: false
        description: Whether or not the associated rubric is used for grade calculation
        schema:
          type: boolean
      - name: rubric_association[hide_score_total]
        in: query
        required: false
        description: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        schema:
          type: boolean
      - name: rubric_association[purpose]
        in: query
        required: false
        description: Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its context
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id088
              type: object
              properties:
                rubric[criteria]:
                  type: string
                  description: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
          application/x-www-form-urlencoded:
            schema: *id088
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Rubrics
      description: "Returns the paginated list of active rubrics for the current context. ### [Get a single rubric](#method.rubrics_api.show) <a href=\"#method.rubrics_api.show\" id=\"method.rubrics_api.show\"></a> [RubricsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/rubrics"
      operationId: get_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubrics/{id}:
    put:
      summary: Put Courses Rubrics
      description: "Returns the rubric with the given id. Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like ``` { 'rubric': Rubric, 'rubric_association': RubricAssociation } ``` This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/rubrics/:id"
      operationId: update_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The id of the rubric
        schema:
          type: integer
      - name: rubric_association_id
        in: query
        required: false
        description: The id of the rubric association object (not the course/assignment itself, but the join table record id). It can be used in place of rubric_association[association_id] and rubric_association[association_type] if desired.
        schema:
          type: integer
      - name: rubric[title]
        in: query
        required: false
        description: The title of the rubric
        schema:
          type: string
      - name: rubric[free_form_criterion_comments]
        in: query
        required: false
        description: Whether or not you can write custom comments in the ratings field for a rubric
        schema:
          type: boolean
      - name: rubric[skip_updating_points_possible]
        in: query
        required: false
        description: Whether or not to update the points possible
        schema:
          type: boolean
      - name: rubric_association[association_id]
        in: query
        required: false
        description: The id of the object with which this rubric is associated
        schema:
          type: integer
      - name: rubric_association[association_type]
        in: query
        required: false
        description: 'The type of object this rubric is associated withAllowed values: Assignment, Course, Account'
        schema:
          type: string
      - name: rubric_association[use_for_grading]
        in: query
        required: false
        description: Whether or not the associated rubric is used for grade calculation
        schema:
          type: boolean
      - name: rubric_association[hide_score_total]
        in: query
        required: false
        description: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        schema:
          type: boolean
      - name: rubric_association[purpose]
        in: query
        required: false
        description: 'Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id089
              type: object
              properties:
                rubric[criteria]:
                  type: string
                  description: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
          application/x-www-form-urlencoded:
            schema: *id089
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Rubrics
      description: "Deletes a Rubric and removes all RubricAssociations. Returns a [Rubric](#rubric) object. ### [List rubrics](#method.rubrics_api.index) <a href=\"#method.rubrics_api.index\" id=\"method.rubrics_api.index\"></a> [RubricsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/rubrics/:id"
      operationId: delete_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id090
                required: *id091
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Rubrics
      description: "Returns the rubric with the given id.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/rubrics/:id"
      operationId: get_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Related records to include in the response.Allowed values: assessments, graded_assessments, peer_assessments, associations, assignment_associations, course_associations, account_associations'
        schema:
          type: string
      - name: style
        in: query
        required: false
        description: 'Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.Allowed values: full, comments_only'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id090
                required: *id091
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/rubrics:
    get:
      summary: Get Accounts Rubrics
      description: "Get Accounts Rubrics\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/rubrics"
      operationId: get_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/rubrics/{id}:
    get:
      summary: Get Accounts Rubrics
      description: "Get Accounts Rubrics\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/rubrics/:id"
      operationId: get_rubrics
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubrics/{id}/used_locations:
    get:
      summary: Get Courses Used_Locations
      description: "Get Courses Used_Locations\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/rubrics/:id/used_locations"
      operationId: get_used_locations
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/rubrics/{id}/used_locations:
    get:
      summary: Get Accounts Used_Locations
      description: "Returns the courses and assignments where a rubric is being used ### [Creates a rubric using a CSV file](#method.rubrics_api.upload) <a href=\"#method.rubrics_api.upload\" id=\"method.rubrics_api.upload\"></a> [RubricsApiController#upload](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/rubrics/:id/used_locations"
      operationId: get_used_locations
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubrics/upload:
    post:
      summary: Post Courses Upload
      description: "Post Courses Upload\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/rubrics/upload"
      operationId: create_upload
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/rubrics/upload:
    post:
      summary: Post Accounts Upload
      description: "Returns the rubric import object that was created ### [Templated file for importing a rubric](#method.rubrics_api.upload_template) <a href=\"#method.rubrics_api.upload_template\" id=\"method.rubrics_api.upload_template\"></a> [RubricsApiController#upload\\_template](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/rubrics/upload"
      operationId: create_upload
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/rubrics/upload_template:
    get:
      summary: Get Rubrics Upload_Template
      description: "Returns a CSV template file that can be used to import rubrics into Canvas. ### [Get the status of a rubric import](#method.rubrics_api.upload_status) <a href=\"#method.rubrics_api.upload_status\" id=\"method.rubrics_api.upload_status\"></a> [RubricsApiController#upload\\_status](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/rubrics/upload_template"
      operationId: list_upload_template
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubrics/upload/{id}:
    get:
      summary: Get Courses Upload
      description: "Get Courses Upload\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/rubrics/upload/:id"
      operationId: get_upload
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/rubrics/upload/{id}:
    get:
      summary: Get Accounts Upload
      description: "Can return the latest rubric import for an account or course, or a specific import by id ### [Create a single rubric assessment](#method.rubric_assessments.create) <a href=\"#method.rubric_assessments.create\" id=\"method.rubric_assessments.create\"></a> [RubricAssessmentsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_assessments_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/rubrics/upload/:id"
      operationId: get_upload
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments:
    post:
      summary: Post Courses Rubric_Assessments
      description: "Returns the rubric assessment with the given id. The returned object also provides the information of ``` :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact ```\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments"
      operationId: create_rubric_assessments
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: rubric_association_id
        in: path
        required: true
        description: The rubric_association_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the course
        schema:
          type: integer
      - name: rubric_association_id
        in: query
        required: false
        description: The id of the object with which this rubric assessment is associated
        schema:
          type: integer
      - name: provisional
        in: query
        required: false
        description: (optional) Indicates whether this assessment is provisional, defaults to false.
        schema:
          type: string
      - name: final
        in: query
        required: false
        description: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        schema:
          type: string
      - name: graded_anonymously
        in: query
        required: false
        description: (optional) Defaults to false
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id092
              type: object
              properties:
                rubric_assessment:
                  type: string
                  description: "A Hash of data to complement the rubric assessment: The user id that refers to the person being assessedrubric_assessment[user_id]\nAssessment type. There are only three valid types: ‘grading’, ‘peer_review’, or ‘provisional_grade’rubric_assessment[assessment_type]\nThe points awarded for this row.rubric_assessment[criterion_id][points]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated."
          application/x-www-form-urlencoded:
            schema: *id092
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}:
    put:
      summary: Put Courses Rubric_Assessments
      description: "Returns the rubric assessment with the given id. The returned object also provides the information of ``` :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact ```\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id"
      operationId: update_rubric_assessments
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: rubric_association_id
        in: path
        required: true
        description: The rubric_association_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The id of the rubric assessment
        schema:
          type: integer
      - name: course_id
        in: query
        required: false
        description: The id of the course
        schema:
          type: integer
      - name: rubric_association_id
        in: query
        required: false
        description: The id of the object with which this rubric assessment is associated
        schema:
          type: integer
      - name: provisional
        in: query
        required: false
        description: (optional) Indicates whether this assessment is provisional, defaults to false.
        schema:
          type: string
      - name: final
        in: query
        required: false
        description: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        schema:
          type: string
      - name: graded_anonymously
        in: query
        required: false
        description: (optional) Defaults to false
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id093
              type: object
              properties:
                rubric_assessment:
                  type: string
                  description: "A Hash of data to complement the rubric assessment: The user id that refers to the person being assessedrubric_assessment[user_id]\nAssessment type. There are only three valid types: ‘grading’, ‘peer_review’, or ‘provisional_grade’rubric_assessment[assessment_type]\nThe points awarded for this row.rubric_assessment[criterion_id][points]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated."
          application/x-www-form-urlencoded:
            schema: *id093
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Rubric_Assessments
      description: "Deletes a rubric assessment Returns a [RubricAssessment](#rubricassessment) object. ### [Create a RubricAssociation](#method.rubric_associations.create) <a href=\"#method.rubric_associations.create\" id=\"method.rubric_associations.create\"></a> [RubricAssociationsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_associations_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id"
      operationId: delete_rubric_assessments
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: rubric_association_id
        in: path
        required: true
        description: The rubric_association_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id094
                required: *id095
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubric_associations:
    post:
      summary: Post Courses Rubric_Associations
      description: "Returns the rubric with the given id.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/rubric_associations"
      operationId: create_rubric_associations
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: rubric_association[rubric_id]
        in: query
        required: false
        description: The id of the Rubric
        schema:
          type: integer
      - name: rubric_association[association_id]
        in: query
        required: false
        description: The id of the object with which this rubric is associated
        schema:
          type: integer
      - name: rubric_association[association_type]
        in: query
        required: false
        description: 'The type of object this rubric is associated withAllowed values: Assignment, Course, Account'
        schema:
          type: string
      - name: rubric_association[title]
        in: query
        required: false
        description: The name of the object this rubric is associated with
        schema:
          type: string
      - name: rubric_association[use_for_grading]
        in: query
        required: false
        description: Whether or not the associated rubric is used for grade calculation
        schema:
          type: boolean
      - name: rubric_association[hide_score_total]
        in: query
        required: false
        description: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        schema:
          type: boolean
      - name: rubric_association[purpose]
        in: query
        required: false
        description: 'Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark'
        schema:
          type: string
      - name: rubric_association[bookmarked]
        in: query
        required: false
        description: Whether or not the associated rubric appears in its context
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id096
                required: *id097
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/rubric_associations/{id}:
    put:
      summary: Put Courses Rubric_Associations
      description: "Returns the rubric with the given id.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/rubric_associations/:id"
      operationId: update_rubric_associations
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The id of the RubricAssociation to update
        schema:
          type: integer
      - name: rubric_association[rubric_id]
        in: query
        required: false
        description: The id of the Rubric
        schema:
          type: integer
      - name: rubric_association[association_id]
        in: query
        required: false
        description: The id of the object with which this rubric is associated
        schema:
          type: integer
      - name: rubric_association[association_type]
        in: query
        required: false
        description: 'The type of object this rubric is associated withAllowed values: Assignment, Course, Account'
        schema:
          type: string
      - name: rubric_association[title]
        in: query
        required: false
        description: The name of the object this rubric is associated with
        schema:
          type: string
      - name: rubric_association[use_for_grading]
        in: query
        required: false
        description: Whether or not the associated rubric is used for grade calculation
        schema:
          type: boolean
      - name: rubric_association[hide_score_total]
        in: query
        required: false
        description: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        schema:
          type: boolean
      - name: rubric_association[purpose]
        in: query
        required: false
        description: 'Whether or not the association is for grading (and thus linked to an assignment) or if it’s to indicate the rubric should appear in its contextAllowed values: grading, bookmark'
        schema:
          type: string
      - name: rubric_association[bookmarked]
        in: query
        required: false
        description: Whether or not the associated rubric appears in its context
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id096
                required: *id097
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Rubric_Associations
      description: "Delete the RubricAssociation with the given ID Returns a [RubricAssociation](#rubricassociation) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/rubric_associations/:id"
      operationId: delete_rubric_associations
      tags:
      - Rubrics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id096
                required: *id097
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}:
    get:
      summary: Get Courses Groups
      description: "Returns details of the quiz group with the given id. Returns a [QuizGroup](#quizgroup) object. ### [Create a question group](#method.quizzes/quiz_groups.create) <a href=\"#method.quizzes-quiz_groups.create\" id=\"method.quizzes-quiz_groups.create\"></a> [Quizzes::QuizGroupsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id"
      operationId: get_groups
      tags:
      - Quiz Question Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id098
                required: *id099
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Groups
      description: "Update a question group\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id"
      operationId: update_groups
      tags:
      - Quiz Question Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: quiz_groups[][name]
        in: query
        required: false
        description: The name of the question group.
        schema:
          type: string
      - name: quiz_groups[][pick_count]
        in: query
        required: false
        description: The number of questions to randomly select for this group.
        schema:
          type: integer
      - name: quiz_groups[][question_points]
        in: query
        required: false
        description: The number of points to assign to each question in the group.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Groups
      description: "Delete a question group \\<b>204 No Content\\<b> response code is returned if the deletion was successful. ### [Reorder question groups](#method.quizzes/quiz_groups.reorder) <a href=\"#method.quizzes-quiz_groups.reorder\" id=\"method.quizzes-quiz_groups.reorder\"></a> [Quizzes::QuizGroupsController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id"
      operationId: delete_groups
      tags:
      - Quiz Question Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/groups:
    post:
      summary: Post Courses Groups
      description: "Create a new question group for this quiz\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/groups"
      operationId: create_groups
      tags:
      - Quiz Question Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: quiz_groups[][name]
        in: query
        required: false
        description: The name of the question group.
        schema:
          type: string
      - name: quiz_groups[][pick_count]
        in: query
        required: false
        description: The number of questions to randomly select for this group.
        schema:
          type: integer
      - name: quiz_groups[][question_points]
        in: query
        required: false
        description: The number of points to assign to each question in the group.
        schema:
          type: integer
      - name: quiz_groups[][assessment_question_bank_id]
        in: query
        required: false
        description: The id of the assessment question bank to pull questions from.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder:
    post:
      summary: Post Courses Reorder
      description: "Change the order of the quiz questions within the group \\<b>204 No Content\\<b> response code is returned if the reorder was successful.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/groups/:id/reorder"
      operationId: create_reorder
      tags:
      - Quiz Question Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: order[][type]
        in: query
        required: false
        description: 'The type of item is always ‘question’ for a groupAllowed values: question'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id100
              type: object
              properties:
                order[][id]:
                  type: string
                  description: The associated item’s unique identifier
          application/x-www-form-urlencoded:
            schema: *id100
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/announcements:
    get:
      summary: List Announcements
      description: "Returns the paginated list of announcements for the given courses and date range. Note that a `context_code` field is added to the responses so you can tell which course each announcement belongs to.\n\nRequired OAuth scope: url:GET|/api/v1/announcements"
      operationId: list_announcements
      tags:
      - Announcements
      security:
      - bearerAuth: []
      parameters:
      - name: context_codes[]
        in: query
        required: false
        description: List of context_codes to retrieve announcements for (for example, course_123). Only courses are presently supported. The call will fail unless the caller has View Announcements permission in all listed courses.
        schema:
          type: string
      - name: start_date
        in: query
        required: false
        description: 'Only return announcements posted since the start_date (inclusive). Defaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        description: 'Only return announcements posted before the end_date (inclusive). Defaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. Announcements scheduled for future posting will only be returned to course administrators.'
        schema:
          type: string
      - name: available_after
        in: query
        required: false
        description: 'Only return announcements having locked_at nil or after available_after (exclusive). The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. Effective only for students (who don’t have moderate forum right).'
        schema:
          type: string
      - name: active_only
        in: query
        required: false
        description: Only return active announcements that have been published. Applies only to requesting users that have permission to view unpublished items. Defaults to false for users with access to view unpublished items, otherwise true and unmodifiable.
        schema:
          type: boolean
      - name: latest_only
        in: query
        required: false
        description: Only return the latest announcement for each associated context. The response will include at most one announcement for each specified context in the context_codes[] parameter. Defaults to false.
        schema:
          type: boolean
      - name: include
        in: query
        required: false
        description: "Optional list of resources to include with the response. May include a string of the name of the resource. Possible values are: “sections”, “sections_user_count” if “sections” is passed, includes the course sections that are associated with the topic, if the topic is specific to certain sections of the course. If “sections_user_count” is passed, then:(a) If sections were asked for and the topic is specific to certain\n    course sections sections, includes the number of users in each\n    section. (as part of the section json asked for above)\n(b) Else, includes at the root level the total number of users in the\n    topic's context (group or course) that the topic applies to."
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/history:
    get:
      summary: Get Users History
      description: "Return a paginated list of the user’s recent history. History entries are returned in descending order, newest to oldest. You may list history entries for yourself (use `self` as the user\\_id), for a student you observe, or for a user you manage as an administrator. Note that the `per_page` pagination argument is not supported and the number of history entries returned per page will vary. Returns a list of [HistoryEntry](#historyentry) objects.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/history"
      operationId: get_history
      tags:
      - History
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id101
                  required: *id102
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares:
    post:
      summary: Post Users Content_Shares
      description: "Share content directly between two or more users\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/content_shares"
      operationId: create_content_shares
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id103
              type: object
              properties:
                receiver_ids:
                  type: string
                  description: IDs of users to share the content with.
                content_type:
                  type: string
                  description: 'Type of content you are sharing.Allowed values: assignment, discussion_topic, page, quiz, module, module_item'
                content_id:
                  type: string
                  description: The id of the content that you are sharing
          application/x-www-form-urlencoded:
            schema: *id103
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id104
                required: *id105
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares/sent:
    get:
      summary: Get Users Sent
      description: "Get Users Sent\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_shares/sent"
      operationId: get_sent
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares/received:
    get:
      summary: Get Users Received
      description: "Return a paginated list of content shares a user has sent or received. Use `self` as the user\\_id to retrieve your own content shares. Only linked observers and administrators may view other users’ content shares.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_shares/received"
      operationId: get_received
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id104
                  required: *id105
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares/unread_count:
    get:
      summary: Get Users Unread_Count
      description: "Return the number of content shares a user has received that have not yet been read. Use `self` as the user\\_id to retrieve your own content shares. Only linked observers and administrators may view other users’ content shares.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_shares/unread_count"
      operationId: get_unread_count
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares/{id}:
    get:
      summary: Get Users Content_Shares
      description: "Return information about a single content share. You may use `self` as the user\\_id to retrieve your own content share.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_shares/:id"
      operationId: get_content_shares
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id104
                required: *id105
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Content_Shares
      description: "Remove a content share from your list. Use `self` as the user\\_id. Note that this endpoint does not delete other users’ copies of the content share.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/content_shares/:id"
      operationId: delete_content_shares
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Content_Shares
      description: "Mark a content share read or unread\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/content_shares/:id"
      operationId: update_content_shares
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: read_state
        in: query
        required: false
        description: 'Read state for the content shareAllowed values: read, unread'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id104
                required: *id105
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_shares/{id}/add_users:
    post:
      summary: Post Users Add_Users
      description: "Send a previously created content share to additional users\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/content_shares/:id/add_users"
      operationId: create_add_users
      tags:
      - Content Shares
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id106
              type: object
              properties:
                receiver_ids:
                  type: string
                  description: IDs of users to share the content with.
          application/x-www-form-urlencoded:
            schema: *id106
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id104
                required: *id105
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}:
    get:
      summary: Get V1 Items
      description: "Get details about a single item in a new quiz.\n\nRequired OAuth scope: url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id"
      operationId: get_items
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: item_id
        in: path
        required: true
        description: The item_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The id of the assignment associated with the quiz.
        schema:
          type: string
      - name: item_id
        in: query
        required: false
        description: The id of the item associated with the quiz.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id107
                required: *id108
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Patch V1 Items
      description: "Update a single quiz item in a new quiz. Only `QuestionItem` types can be updated.\n\nRequired OAuth scope: url:PATCH|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id"
      operationId: update_items
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: item_id
        in: path
        required: true
        description: The item_id identifier
        schema:
          type: string
      - name: item[position]
        in: query
        required: false
        description: The position of the item within the quiz.
        schema:
          type: integer
      - name: item[entry_type]
        in: query
        required: false
        description: 'The type of the item.Allowed values: Item'
        schema:
          type: string
      - name: item[entry][title]
        in: query
        required: false
        description: The question title.
        schema:
          type: string
      - name: item[entry][item_body]
        in: query
        required: false
        description: The question stem (rich content).
        schema:
          type: string
      - name: item[entry][calculator_type]
        in: query
        required: false
        description: 'Type of calculator the user will have access to during the question.Allowed values: none, basic, scientific'
        schema:
          type: string
      - name: item[entry][feedback][neutral]
        in: query
        required: false
        description: General feedback to show regardless of answer (rich content).
        schema:
          type: string
      - name: item[entry][feedback][correct]
        in: query
        required: false
        description: Feedback to show if the question is answered correctly (rich content).
        schema:
          type: string
      - name: item[entry][feedback][incorrect]
        in: query
        required: false
        description: Feedback to show if the question is answered incorrectly (rich content).
        schema:
          type: string
      - name: item[entry][interaction_type_slug]
        in: query
        required: false
        description: 'The type of question. One of ‘multi-answer’, ‘matching’, ‘categorization’, ‘file-upload’, ‘formula’, ‘ordering’, ‘rich-fill-blank’, ‘hot-spot’, ‘choice’, ‘numeric’, ‘true-false’, or ‘essay’. See Appendix: Question Types for more info about each type.'
        schema:
          type: string
      - name: item[entry][scoring_algorithm]
        in: query
        required: false
        description: 'The algorithm used to score the question. See Appendix: Question Types for more info about this field.'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id109
              type: object
              properties:
                course_id:
                  type: string
                  description: no description
                assignment_id:
                  type: string
                  description: The id of the assignment associated with the quiz.
                item_id:
                  type: string
                  description: The id of the item associated with the quiz.
                item[points_possible]:
                  type: string
                  description: The number of points available to score on this item. Must be positive.
                item[entry][interaction_data]:
                  type: string
                  description: 'An object that contains the question data. See Appendix: Question Types for more info about this field.'
                item[entry][properties]:
                  type: string
                  description: 'An object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.'
                item[entry][scoring_data]:
                  type: string
                  description: 'An object that describes how to score the question. See Appendix: Question Types for more info about this field.'
                item[entry][answer_feedback]:
                  type: string
                  description: Feedback provided for each answer (rich content, only available on ‘choice’ question types).
          application/x-www-form-urlencoded:
            schema: *id109
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id107
                required: *id108
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete V1 Items
      description: "Delete a single quiz item in a new quiz.\n\nRequired OAuth scope: url:DELETE|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/:item_id"
      operationId: delete_items
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: item_id
        in: path
        required: true
        description: The item_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The id of the assignment associated with the quiz.
        schema:
          type: string
      - name: item_id
        in: query
        required: false
        description: The id of the item associated with the quiz.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id107
                required: *id108
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items:
    get:
      summary: Get V1 Items
      description: "Get a list of items in a new quiz.\n\nRequired OAuth scope: url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items"
      operationId: get_items
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id107
                  required: *id108
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post V1 Items
      description: "Create a quiz item in a new quiz. Only `QuestionItem` types can be created.\n\nRequired OAuth scope: url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items"
      operationId: create_items
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: item[position]
        in: query
        required: false
        description: The position of the item within the quiz.
        schema:
          type: integer
      - name: item[entry][title]
        in: query
        required: false
        description: The question title.
        schema:
          type: string
      - name: item[entry][calculator_type]
        in: query
        required: false
        description: 'Type of calculator the user will have access to during the question.Allowed values: none, basic, scientific'
        schema:
          type: string
      - name: item[entry][feedback][neutral]
        in: query
        required: false
        description: General feedback to show regardless of answer (rich content).
        schema:
          type: string
      - name: item[entry][feedback][correct]
        in: query
        required: false
        description: Feedback to show if the question is answered correctly (rich content).
        schema:
          type: string
      - name: item[entry][feedback][incorrect]
        in: query
        required: false
        description: Feedback to show if the question is answered incorrectly (rich content).
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id110
              type: object
              properties:
                course_id:
                  type: string
                  description: no description
                assignment_id:
                  type: string
                  description: The id of the assignment associated with the quiz.
                item[points_possible]:
                  type: string
                  description: The number of points available to score on this item. Must be positive.
                item[entry_type]:
                  type: string
                  description: 'The type of the item.Allowed values: Item'
                item[entry][item_body]:
                  type: string
                  description: The question stem (rich content).
                item[entry][interaction_type_slug]:
                  type: string
                  description: 'The type of question. One of ‘multi-answer’, ‘matching’, ‘categorization’, ‘file-upload’, ‘formula’, ‘ordering’, ‘rich-fill-blank’, ‘hot-spot’, ‘choice’, ‘numeric’, ‘true-false’, or ‘essay’. See Appendix: Question Types for more info about each type.'
                item[entry][interaction_data]:
                  type: string
                  description: 'An object that contains the question data. See Appendix: Question Types for more info about this field.'
                item[entry][properties]:
                  type: string
                  description: 'An object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.'
                item[entry][scoring_data]:
                  type: string
                  description: 'An object that describes how to score the question. See Appendix: Question Types for more info about this field.'
                item[entry][answer_feedback]:
                  type: string
                  description: Feedback provided for each answer (rich content, only available on ‘choice’ question types).
                item[entry][scoring_algorithm]:
                  type: string
                  description: 'The algorithm used to score the question. See Appendix: Question Types for more info about this field.'
          application/x-www-form-urlencoded:
            schema: *id110
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id107
                required: *id108
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/media_upload_url:
    get:
      summary: Get V1 Media_Upload_Url
      description: "Get a url for uploading media for use in hot-spot question types. See the hot-spot question type in the [Appendix: Question Types](#Question+Types-appendix) for more details about using this endpoint.\n\nRequired OAuth scope: url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/items/media_upload_url"
      operationId: get_media_upload_url
      tags:
      - New Quiz Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/inst_access_tokens:
    post:
      summary: Create Inst_Access_Tokens
      description: "Create a unique, encrypted InstAccess token. Generates a different InstAccess token each time it’s called, each one expires after a short window (1 hour).\n\nRequired OAuth scope: url:POST|/api/v1/inst_access_tokens"
      operationId: create_inst_access_tokens
      tags:
      - InstAccess tokens
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id111
                required: *id112
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews:
    get:
      summary: Get Courses Peer_Reviews
      description: "Get Courses Peer_Reviews\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/peer_reviews"
      operationId: get_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews:
    get:
      summary: Get Sections Peer_Reviews
      description: "Get Sections Peer_Reviews\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/peer_reviews"
      operationId: get_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews:
    get:
      summary: Get Courses Peer_Reviews
      description: "Get Courses Peer_Reviews\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: get_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Peer_Reviews
      description: "Post Courses Peer_Reviews\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: create_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Peer_Reviews
      description: "Delete Courses Peer_Reviews\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: delete_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews:
    get:
      summary: Get Sections Peer_Reviews
      description: "Get a list of all Peer Reviews for this assignment\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: get_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the peer review.Allowed values: submission_comments, user'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id113
                  required: *id114
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Sections Peer_Reviews
      description: "Create a peer review for the assignment\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: create_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id115
              type: object
              properties:
                user_id:
                  type: string
                  description: user_id to assign as reviewer on this assignment
          application/x-www-form-urlencoded:
            schema: *id115
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id113
                required: *id114
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Sections Peer_Reviews
      description: "Delete a peer review for the assignment\n\nRequired OAuth scope: url:DELETE|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews"
      operationId: delete_peer_reviews
      tags:
      - Peer Reviews
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: user_id to delete as reviewer on this assignment
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id113
                required: *id114
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/line_items/{line_item_id}/scores:
    post:
      summary: Post Courses Scores
      description: "Create a new Result from the score params. If this is for the first created line\\_item for a resourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission record will be created for the associated assignment when gradingProgress is set to FullyGraded or PendingManual. The submission score will also be updated when a score object is sent with either of those two values for gradingProgress. If a score object is sent with either of FullyGraded or PendingManual as the value for gradingProgress and scoreGiven is missing, the assignment will not be graded. This also supposes the line\\_item meets the condition to create a submission. A submission comment with an unknown author will be created when the comment value is included. This also supposes the line\\_item meets the condition to create a submission. It is also possible to submit a file along with this score, which will attach the file to the submission that is created. Files should be formatted as Content Items, with the correct syntax below. Returns a url pointing to the Result. If any files were submitted, also returns the Content Items which were sent in the request, each with a url pointing to the Progress of the file upload.\n\nRequired OAuth scope: url:POST|/api/lti/courses/:course_id/line_items/:line_item_id/scores"
      operationId: create_scores
      tags:
      - Score
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: line_item_id
        in: path
        required: true
        description: The line_item_id identifier
        schema:
          type: string
      - name: comment
        in: query
        required: false
        description: Comment visible to the student about this score.
        schema:
          type: string
      - name: submission[submittedAt]
        in: query
        required: false
        description: Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision.
        schema:
          type: string
      - name: https://canvas.instructure.com/lti/submission[new_submission]
        in: query
        required: false
        description: (EXTENSION field) flag to indicate that this is a new submission. Defaults to true unless submission_type is none.
        schema:
          type: boolean
      - name: https://canvas.instructure.com/lti/submission[preserve_score]
        in: query
        required: false
        description: (EXTENSION field) flag to prevent a request from clearing an existing grade for a submission. Defaults to false.
        schema:
          type: boolean
      - name: https://canvas.instructure.com/lti/submission[prioritize_non_tool_grade]
        in: query
        required: false
        description: (EXTENSION field) flag to prevent a request from overwriting an existing grade for a submission. Defaults to false.
        schema:
          type: boolean
      - name: https://canvas.instructure.com/lti/submission[submission_type]
        in: query
        required: false
        description: '(EXTENSION field) permissible values are: none, basic_lti_launch, online_text_entry, external_tool, online_upload, or online_url. Defaults to external_tool. Ignored if content_items are provided.'
        schema:
          type: string
      - name: https://canvas.instructure.com/lti/submission[submission_data]
        in: query
        required: false
        description: (EXTENSION field) submission data (URL or body text). Only used for submission_types basic_lti_launch, online_text_entry, online_url. Ignored if content_items are provided.
        schema:
          type: string
      - name: https://canvas.instructure.com/lti/submission[submitted_at]
        in: query
        required: false
        description: (EXTENSION field) Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision. This should match the date and time that the original submission happened in Canvas. Use of submission.submittedAt is preferred.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id116
              type: object
              properties:
                userId:
                  type: string
                  description: The lti_user_id or the Canvas user_id. Returns a 422 if user not found in Canvas or is not a student.
                activityProgress:
                  type: string
                  description: Indicate to Canvas the status of the user towards the activity’s completion. Must be one of Initialized, Started, InProgress, Submitted, Completed.
                gradingProgress:
                  type: string
                  description: Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded.
                timestamp:
                  type: string
                  description: Date and time when the score was modified in the tool. Should use ISO8601-formatted date with subsecond precision. Returns a 400 if the timestamp is earlier than the updated_at time of the Result.
                scoreGiven:
                  type: string
                  description: The Current score received in the tool for this line item and user, scaled to the scoreMaximum
                scoreMaximum:
                  type: string
                  description: Maximum possible score for this result; it must be present if scoreGiven is present. Returns 422 if not present when scoreGiven is present.
                submission:
                  type: string
                  description: Contains metadata about the submission attempt. Supported fields listed below.
                https://canvas.instructure.com/lti/submission:
                  type: string
                  description: (EXTENSION) Optional submission type and data. Fields listed below.
                https://canvas.instructure.com/lti/submission[content_items]:
                  type: string
                  description: '(EXTENSION field) Files that should be included with the submission. Each item should contain ‘type: file`, and a url pointing to the file. It can also contain a title, and an explicit MIME type if needed (otherwise, MIME type will be inferred from the title or url). If any items are present, submission_type will be online_upload.'
          application/x-www-form-urlencoded:
            schema: *id116
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/career/experience_summary:
    get:
      summary: Get Career Experience_Summary
      description: "Returns the current user’s active experience and available experiences they can switch to.\n\nRequired OAuth scope: url:GET|/api/v1/career/experience_summary"
      operationId: list_experience_summary
      tags:
      - Canvas Career Experiences
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id117
                required: *id118
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/career/switch_experience:
    post:
      summary: Post Career Switch_Experience
      description: "Switch the current user’s active experience to the specified one.\n\nRequired OAuth scope: url:POST|/api/v1/career/switch_experience"
      operationId: create_switch_experience
      tags:
      - Canvas Career Experiences
      security:
      - bearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &id119
              type: object
              properties:
                experience:
                  type: string
                  description: 'The experience to switch to.Allowed values: academic, career'
          application/x-www-form-urlencoded:
            schema: *id119
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/career/switch_role:
    post:
      summary: Post Career Switch_Role
      description: "Switch the current user’s role within the current experience.\n\nRequired OAuth scope: url:POST|/api/v1/career/switch_role"
      operationId: create_switch_role
      tags:
      - Canvas Career Experiences
      security:
      - bearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &id120
              type: object
              properties:
                role:
                  type: string
                  description: 'The role to switch to.Allowed values: learner, learning_provider'
          application/x-www-form-urlencoded:
            schema: *id120
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/progress/{id}:
    get:
      summary: List Progress
      description: "Return completion and status information about an asynchronous job Returns a [Progress](#progress) object. ### [Cancel progress](#method.progress.cancel) <a href=\"#method.progress.cancel\" id=\"method.progress.cancel\"></a> [ProgressController#cancel](https://github.com/instructure/canvas-lms/blob/master/app/controllers/progress_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/progress/:id"
      operationId: get_progress
      tags:
      - Progress
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: &id121
                  id:
                    type: integer
                  context_id:
                    type: integer
                  context_type:
                    type: string
                  user_id:
                    type: integer
                  tag:
                    type: string
                  completion:
                    type: integer
                  workflow_state:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  message:
                    type: string
                  results:
                    type: object
                    properties:
                      id:
                        type: string
                    required:
                    - id
                  url:
                    type: string
                required: &id122
                - completion
                - context_id
                - context_type
                - created_at
                - id
                - message
                - results
                - tag
                - updated_at
                - url
                - user_id
                - workflow_state
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/progress/{id}/cancel:
    post:
      summary: Post Progress Cancel
      description: "Cancel an asynchronous job associated with a Progress object If you include “message” in the POSTed data, it will be set on the Progress and returned. This is handy to distinguish between cancel and fail for a workflow\\_state of “failed”. Returns a [Progress](#progress) object. ### [Query progress](#method.lti/ims/progress.show) <a href=\"#method.lti-ims-progress.show\" id=\"method.lti-ims-progress.show\"></a> [Lti::Ims::ProgressController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/progress_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/progress/:id/cancel"
      operationId: create_cancel
      tags:
      - Progress
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id121
                required: *id122
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/progress/{id}:
    get:
      summary: Get Courses Progress
      description: "Return completion and status information about an asynchronous job Returns a [Progress](#progress) object.\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/progress/:id"
      operationId: get_progress
      tags:
      - Progress
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id121
                required: *id122
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_columns:
    get:
      summary: Get Courses Custom_Gradebook_Columns
      description: "A paginated list of all custom gradebook columns for a course\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/custom_gradebook_columns"
      operationId: get_custom_gradebook_columns
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: include_hidden
        in: query
        required: false
        description: Include hidden parameters (defaults to false)
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id123
                  required: *id124
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Custom_Gradebook_Columns
      description: "Create a custom gradebook column\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/custom_gradebook_columns"
      operationId: create_custom_gradebook_columns
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: column[position]
        in: query
        required: false
        description: The position of the column relative to other custom columns
        schema:
          type: integer
      - name: column[hidden]
        in: query
        required: false
        description: Hidden columns are not displayed in the gradebook
        schema:
          type: boolean
      - name: column[teacher_notes]
        in: query
        required: false
        description: Set this if the column is created by a teacher. The gradebook only supports one teacher_notes column.
        schema:
          type: boolean
      - name: column[read_only]
        in: query
        required: false
        description: Set this to prevent the column from being editable in the gradebook ui
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id125
              type: object
              properties:
                column[title]:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id125
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id123
                required: *id124
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_columns/{id}:
    put:
      summary: Put Courses Custom_Gradebook_Columns
      description: "Accepts the same parameters as custom gradebook column creation Returns a [CustomColumn](#customcolumn) object. ### [Delete a custom gradebook column](#method.custom_gradebook_columns_api.destroy) <a href=\"#method.custom_gradebook_columns_api.destroy\" id=\"method.custom_gradebook_columns_api.destroy\"></a> [CustomGradebookColumnsApiController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb)\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/custom_gradebook_columns/:id"
      operationId: update_custom_gradebook_columns
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id123
                required: *id124
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Custom_Gradebook_Columns
      description: "Permanently deletes a custom column and its associated data Returns a [CustomColumn](#customcolumn) object. ### [Reorder custom columns](#method.custom_gradebook_columns_api.reorder) <a href=\"#method.custom_gradebook_columns_api.reorder\" id=\"method.custom_gradebook_columns_api.reorder\"></a> [CustomGradebookColumnsApiController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/custom_gradebook_columns/:id"
      operationId: delete_custom_gradebook_columns
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id123
                required: *id124
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_columns/reorder:
    post:
      summary: Post Courses Reorder
      description: "Puts the given columns in the specified order\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/custom_gradebook_columns/reorder"
      operationId: create_reorder
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id126
              type: object
              properties:
                order[]:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id126
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_columns/{id}/data:
    get:
      summary: Get Courses Data
      description: "This does not list entries for students without associated data.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/custom_gradebook_columns/:id/data"
      operationId: get_data
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include_hidden
        in: query
        required: false
        description: If true, hidden columns will be included in the result. If false or absent, only visible columns will be returned.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id127
                  required: *id128
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}:
    put:
      summary: Put Courses Data
      description: "Set the content of a custom column\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/custom_gradebook_columns/:id/data/:user_id"
      operationId: update_data
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id129
              type: object
              properties:
                column_data[content]:
                  type: string
                  description: Column content. Setting this to blank will delete the datum object.
          application/x-www-form-urlencoded:
            schema: *id129
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id127
                required: *id128
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/custom_gradebook_column_data:
    put:
      summary: Put Courses Custom_Gradebook_Column_Data
      description: "Set the content of custom columns { ``` \"column_data\": [ { \"column_id\": example_column_id, \"user_id\": example_student_id, \"content\": example_content }, { \"column_id\": example_column_id, \"user_id\": example_student_id, \"content: example_content } ] ``` }\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/custom_gradebook_column_data"
      operationId: update_custom_gradebook_column_data
      tags:
      - Custom Gradebook Columns
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id130
              type: object
              properties:
                column_data[]:
                  type: string
                  description: Column content. Setting this to an empty string will delete the data object.
          application/x-www-form-urlencoded:
            schema: *id130
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/temporary_enrollment_pairings:
    get:
      summary: Get Accounts Temporary_Enrollment_Pairings
      description: "Returns the list of temporary enrollment pairings for a root account. Returns a list of [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) objects. ### [Get a single temporary enrollment pairing](#method.temporary_enrollment_pairings_api.show) <a href=\"#method.temporary_enrollment_pairings_api.show\" id=\"method.temporary_enrollment_pairings_api.show\"></a> [TemporaryEnrollmentPairingsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings"
      operationId: get_temporary_enrollment_pairings
      tags:
      - Temporary Enrollment Pairings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id131
                  required: *id132
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Temporary_Enrollment_Pairings
      description: "Create a Temporary Enrollment Pairing.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/temporary_enrollment_pairings"
      operationId: create_temporary_enrollment_pairings
      tags:
      - Temporary Enrollment Pairings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: workflow_state
        in: query
        required: false
        description: The workflow state of the temporary enrollment pairing.
        schema:
          type: string
      - name: ending_enrollment_state
        in: query
        required: false
        description: 'The ending enrollment state to be given to each associated enrollment when the enrollment period has been reached. Defaults to “deleted” if no value is given. Accepted values are “deleted”, “completed”, and “inactive”.Allowed values: deleted, completed, inactive'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id131
                required: *id132
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/temporary_enrollment_pairings/{id}:
    get:
      summary: Get Accounts Temporary_Enrollment_Pairings
      description: "Returns the temporary enrollment pairing with the given id. Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object. ### [New TemporaryEnrollmentPairing](#method.temporary_enrollment_pairings_api.new) <a href=\"#method.temporary_enrollment_pairings_api.new\" id=\"method.temporary_enrollment_pairings_api.new\"></a> [TemporaryEnrollmentPairingsApiController#new](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id"
      operationId: get_temporary_enrollment_pairings
      tags:
      - Temporary Enrollment Pairings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id131
                required: *id132
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Temporary_Enrollment_Pairings
      description: "Delete a temporary enrollment pairing Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/temporary_enrollment_pairings/:id"
      operationId: delete_temporary_enrollment_pairings
      tags:
      - Temporary Enrollment Pairings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id131
                required: *id132
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/temporary_enrollment_pairings/new:
    get:
      summary: Get Accounts New
      description: "Initialize an unsaved Temporary Enrollment Pairing. Returns a [TemporaryEnrollmentPairing](#temporaryenrollmentpairing) object. ### [Create Temporary Enrollment Pairing](#method.temporary_enrollment_pairings_api.create) <a href=\"#method.temporary_enrollment_pairings_api.create\" id=\"method.temporary_enrollment_pairings_api.create\"></a> [TemporaryEnrollmentPairingsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/temporary_enrollment_pairings_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/temporary_enrollment_pairings/new"
      operationId: get_new
      tags:
      - Temporary Enrollment Pairings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id131
                required: *id132
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/eportfolios:
    get:
      summary: Get Users Eportfolios
      description: "Get a list of all ePortfolios for the specified user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/eportfolios"
      operationId: get_eportfolios
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'deletedInclude deleted ePortfolios. Only available to admins who canmoderate_user_content.Allowed values: deleted'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id133
                  required: *id134
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Eportfolios
      description: "Update the spam\\_status for all active eportfolios of a user. Only available to admins who can moderate\\_user\\_content.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/eportfolios"
      operationId: update_eportfolios
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: spam_status
        in: query
        required: false
        description: 'The spam status for all the ePortfoliosAllowed values: marked_as_spam, marked_as_safe'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/eportfolios/{id}:
    get:
      summary: List Eportfolios
      description: "Get details for a single ePortfolio. Returns an [ePortfolio](#eportfolio) object. ### [Delete an ePortfolio](#method.eportfolios_api.delete) <a href=\"#method.eportfolios_api.delete\" id=\"method.eportfolios_api.delete\"></a> [EportfoliosApiController#delete](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/eportfolios/:id"
      operationId: get_eportfolios
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id133
                required: *id134
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Eportfolios
      description: "Mark an ePortfolio as deleted. Returns an [ePortfolio](#eportfolio) object. ### [Get ePortfolio Pages](#method.eportfolios_api.pages) <a href=\"#method.eportfolios_api.pages\" id=\"method.eportfolios_api.pages\"></a> [EportfoliosApiController#pages](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/eportfolios/:id"
      operationId: delete_eportfolios
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id133
                required: *id134
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/eportfolios/{eportfolio_id}/pages:
    get:
      summary: Get Eportfolios Pages
      description: "Get details for the pages of an ePortfolio Returns a list of [ePortfolioPage](#eportfoliopage) objects. ### [Moderate an ePortfolio](#method.eportfolios_api.moderate) <a href=\"#method.eportfolios_api.moderate\" id=\"method.eportfolios_api.moderate\"></a> [EportfoliosApiController#moderate](https://github.com/instructure/canvas-lms/blob/master/app/controllers/eportfolios_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/eportfolios/:eportfolio_id/pages"
      operationId: get_pages
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: eportfolio_id
        in: path
        required: true
        description: The eportfolio_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id135
                  required: *id136
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/eportfolios/{eportfolio_id}/moderate:
    put:
      summary: Put Eportfolios Moderate
      description: "Update the spam\\_status of an eportfolio. Only available to admins who can moderate\\_user\\_content.\n\nRequired OAuth scope: url:PUT|/api/v1/eportfolios/:eportfolio_id/moderate"
      operationId: update_moderate
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: eportfolio_id
        in: path
        required: true
        description: The eportfolio_id identifier
        schema:
          type: string
      - name: spam_status
        in: query
        required: false
        description: 'The spam status for the ePortfolioAllowed values: marked_as_spam, marked_as_safe'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id133
                required: *id134
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/eportfolios/{eportfolio_id}/restore:
    put:
      summary: Put Eportfolios Restore
      description: "Restore an ePortfolio back to active that was previously deleted. Only available to admins who can moderate\\_user\\_content. Returns an [ePortfolio](#eportfolio) object.\n\nRequired OAuth scope: url:PUT|/api/v1/eportfolios/:eportfolio_id/restore"
      operationId: update_restore
      tags:
      - ePortfolios
      security:
      - bearerAuth: []
      parameters:
      - name: eportfolio_id
        in: path
        required: true
        description: The eportfolio_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id133
                required: *id134
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences:
    get:
      summary: Get Users Notification_Preferences
      description: "Get Users Notification_Preferences\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences"
      operationId: get_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences:
    get:
      summary: Get Users Notification_Preferences
      description: "Fetch all preferences for the given communication channel Returns a list of [NotificationPreference](#notificationpreference) objects. ### [List of preference categories](#method.notification_preferences.category_index) <a href=\"#method.notification_preferences.category_index\" id=\"method.notification_preferences.category_index\"></a> [NotificationPreferencesController#category\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences"
      operationId: get_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: type
        in: path
        required: true
        description: The type identifier
        schema:
          type: string
      - name: address
        in: path
        required: true
        description: The address identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id137
                  required: *id138
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories:
    get:
      summary: Get Users Notification_Preference_Categories
      description: "Fetch all notification preference categories for the given communication channel ### [Get a preference](#method.notification_preferences.show) <a href=\"#method.notification_preferences.show\" id=\"method.notification_preferences.show\"></a> [NotificationPreferencesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preference_categories"
      operationId: get_notification_preference_categories
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}:
    get:
      summary: Get Users Notification_Preferences
      description: "Get Users Notification_Preferences\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels/:communication_channel_id/notification_preferences/:notification"
      operationId: get_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      - name: notification
        in: path
        required: true
        description: The notification identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}:
    get:
      summary: Get Users Notification_Preferences
      description: "Fetch the preference for the given notification for the given communication channel Returns a [NotificationPreference](#notificationpreference) object. ### [Update a preference](#method.notification_preferences.update) <a href=\"#method.notification_preferences.update\" id=\"method.notification_preferences.update\"></a> [NotificationPreferencesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/communication_channels/:type/:address/notification_preferences/:notification"
      operationId: get_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: type
        in: path
        required: true
        description: The type identifier
        schema:
          type: string
      - name: address
        in: path
        required: true
        description: The address identifier
        schema:
          type: string
      - name: notification
        in: path
        required: true
        description: The notification identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id137
                required: *id138
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}:
    put:
      summary: Put Users Notification_Preferences
      description: "Put Users Notification_Preferences\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences/:notification"
      operationId: update_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      - name: notification
        in: path
        required: true
        description: The notification identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}:
    put:
      summary: Put Users Notification_Preferences
      description: "Change the preference for a single notification for a single communication channel\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/communication_channels/:type/:address/notification_preferences/:notification"
      operationId: update_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: type
        in: path
        required: true
        description: The type identifier
        schema:
          type: string
      - name: address
        in: path
        required: true
        description: The address identifier
        schema:
          type: string
      - name: notification
        in: path
        required: true
        description: The notification identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id139
              type: object
              properties:
                notification_preferences[frequency]:
                  type: string
                  description: The desired frequency for this notification
          application/x-www-form-urlencoded:
            schema: *id139
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}:
    put:
      summary: Put Users Notification_Preference_Categories
      description: "Change the preferences for multiple notifications based on the category for a single communication channel\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preference_categories/:category"
      operationId: update_notification_preference_categories
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      - name: category
        in: path
        required: true
        description: The category identifier
        schema:
          type: string
      - name: category
        in: query
        required: false
        description: The name of the category. Must be parameterized (e.g. The category “Course Content” should be “course_content”)
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id140
              type: object
              properties:
                notification_preferences[frequency]:
                  type: string
                  description: The desired frequency for each notification in the category
          application/x-www-form-urlencoded:
            schema: *id140
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences:
    put:
      summary: Put Users Notification_Preferences
      description: "Put Users Notification_Preferences\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/communication_channels/:communication_channel_id/notification_preferences"
      operationId: update_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: communication_channel_id
        in: path
        required: true
        description: The communication_channel_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/communication_channels/{type}/{address}/notification_preferences:
    put:
      summary: Put Users Notification_Preferences
      description: "Change the preferences for multiple notifications for a single communication channel at once\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/communication_channels/:type/:address/notification_preferences"
      operationId: update_notification_preferences
      tags:
      - Notification Preferences
      security:
      - bearerAuth: []
      parameters:
      - name: type
        in: path
        required: true
        description: The type identifier
        schema:
          type: string
      - name: address
        in: path
        required: true
        description: The address identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id141
              type: object
              properties:
                notification_preferences[<X>][frequency]:
                  type: string
                  description: The desired frequency for \ notification
          application/x-www-form-urlencoded:
            schema: *id141
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls:
    get:
      summary: List Polls
      description: "Returns the paginated list of polls for the current user.\n\nRequired OAuth scope: url:GET|/api/v1/polls"
      operationId: list_polls
      tags:
      - Polls
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Polls
      description: "Create a new poll for the current user\n\nRequired OAuth scope: url:POST|/api/v1/polls"
      operationId: create_polls
      tags:
      - Polls
      security:
      - bearerAuth: []
      parameters:
      - name: polls[][description]
        in: query
        required: false
        description: A brief description or instructions for the poll.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id142
              type: object
              properties:
                polls[][question]:
                  type: string
                  description: The title of the poll.
          application/x-www-form-urlencoded:
            schema: *id142
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{id}:
    get:
      summary: List Polls
      description: "Returns the poll with the given id\n\nRequired OAuth scope: url:GET|/api/v1/polls/:id"
      operationId: get_polls
      tags:
      - Polls
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Polls
      description: "Update an existing poll belonging to the current user\n\nRequired OAuth scope: url:PUT|/api/v1/polls/:id"
      operationId: update_polls
      tags:
      - Polls
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: polls[][description]
        in: query
        required: false
        description: A brief description or instructions for the poll.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id143
              type: object
              properties:
                polls[][question]:
                  type: string
                  description: The title of the poll.
          application/x-www-form-urlencoded:
            schema: *id143
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Polls
      description: "Delete Polls\n\nRequired OAuth scope: url:DELETE|/api/v1/polls/:id"
      operationId: delete_polls
      tags:
      - Polls
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/tokens/{id}:
    get:
      summary: Get Users Tokens
      description: "The ID can be the actual database ID of the token, or the ‘token\\_hint’ value. ### [Create an access token](#method.tokens.create) <a href=\"#method.tokens.create\" id=\"method.tokens.create\"></a> [TokensController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/tokens_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/tokens/:id"
      operationId: get_tokens
      tags:
      - Access Tokens
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Tokens
      description: "Update an existing access token. The ID can be the actual database ID of the token, or the ‘token\\_hint’ value. Regenerating an expired token requires a new expiration date.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/tokens/:id"
      operationId: update_tokens
      tags:
      - Access Tokens
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: token[purpose]
        in: query
        required: false
        description: The purpose of the token.
        schema:
          type: string
      - name: token[regenerate]
        in: query
        required: false
        description: Regenerate the actual token.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id144
              type: object
              properties:
                token[expires_at]:
                  type: string
                  description: The time at which the token will expire.
                token[scopes][]:
                  type: string
                  description: The scopes to associate with the token.
          application/x-www-form-urlencoded:
            schema: *id144
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Tokens
      description: "The ID can be the actual database ID of the token, or the ‘token\\_hint’ value.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/tokens/:id"
      operationId: delete_tokens
      tags:
      - Access Tokens
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/tokens:
    post:
      summary: Post Users Tokens
      description: "Create a new access token for the specified user. If the user is not the current user, the token will be created as “pending”, and must be activated by the user before it can be used.\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/tokens"
      operationId: create_tokens
      tags:
      - Access Tokens
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id145
              type: object
              properties:
                token[purpose]:
                  type: string
                  description: The purpose of the token.
                token[expires_at]:
                  type: string
                  description: The time at which the token will expire.
                token[scopes][]:
                  type: string
                  description: The scopes to associate with the token. Ignored if the default developer key does not have the “enable scopes” option enabled. In such cases, the token will inherit the user’s permissions instead.
          application/x-www-form-urlencoded:
            schema: *id145
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters:
    get:
      summary: Get Courses Ip_Filters
      description: "Get a list of available IP filters for this Quiz.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/ip_filters"
      operationId: get_ip_filters
      tags:
      - Quiz IP Filters
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports:
    get:
      summary: Get Accounts Sis_Imports
      description: "Returns the list of SIS imports for an account Example: ``` curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\ -H 'Authorization: Bearer <token>' ```\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sis_imports"
      operationId: get_sis_imports
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: created_since
        in: query
        required: false
        description: If set, only shows imports created after the specified date (use ISO8601 format)
        schema:
          type: string
      - name: created_before
        in: query
        required: false
        description: If set, only shows imports created before the specified date (use ISO8601 format)
        schema:
          type: string
      - name: workflow_state[]
        in: query
        required: false
        description: 'If set, only returns imports that are in the given state.Allowed values: initializing, created, importing, cleanup_batch, imported, imported_with_messages, aborted, failed, failed_with_messages, restoring, partially_restored, restored'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id146
                  required: *id147
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Sis_Imports
      description: "Import SIS data into Canvas. Must be on a root account with SIS imports enabled. For more information on the format that’s expected here, please see the “SIS CSV” section in the API docs.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/sis_imports"
      operationId: create_sis_imports
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: import_type
        in: query
        required: false
        description: Choose the data format for reading SIS data. With a standard Canvas install, this option can only be ‘instructure_csv’, and if unprovided, will be assumed to be so. Can be part of the query string.
        schema:
          type: string
      - name: attachment
        in: query
        required: true
        description: "There are two ways to post SIS import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be SIS data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: application/octet-stream' --data-binary @<filename>.zip <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&extension=zip\ncurl -H 'Content-Type: application/zip' --data-binary @<filename>.zip <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&batch_mode=1&batch_mode_term_id=15\nIf the attachment is a zip file, the uncompressed file(s) cannot be 100x larger than the zip, or the import will fail. For example, if the zip file is 1KB but the total size of the uncompressed file(s) is 100KB or greater the import will fail. There is a hard cap of 50 GB."
        schema:
          type: string
      - name: extension
        in: query
        required: false
        description: Recommended for raw post request style imports. This field will be used to distinguish between zip, xml, csv, and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to zip-file format if all else fails.
        schema:
          type: string
      - name: batch_mode
        in: query
        required: false
        description: If set, this SIS import will be run in batch mode, deleting any data previously imported via SIS that is not present in this latest import. See the SIS CSV Format page for details. Batch mode cannot be used with diffing.
        schema:
          type: boolean
      - name: batch_mode_term_id
        in: query
        required: true
        description: Limit deletions to only this term. Required if batch mode is enabled.
        schema:
          type: string
      - name: multi_term_batch_mode
        in: query
        required: false
        description: Runs batch mode against all terms in terms file. Requires change_threshold.
        schema:
          type: boolean
      - name: skip_deletes
        in: query
        required: false
        description: When set the import will skip any deletes. This does not account for objects that are deleted during the batch mode cleanup process.
        schema:
          type: boolean
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is false. If true, any fields containing “sticky” or UI changes will be overridden. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      - name: add_sis_stickiness
        in: query
        required: false
        description: This option, if present, will process all changes as if they were UI changes. This means that “stickiness” will be added to changed fields. This option is only processed if ‘override_sis_stickiness’ is also provided.
        schema:
          type: boolean
      - name: clear_sis_stickiness
        in: query
        required: false
        description: This option, if present, will clear “stickiness” from all fields processed by this import. Requires that ‘override_sis_stickiness’ is also provided. If ‘add_sis_stickiness’ is also provided, ‘clear_sis_stickiness’ will overrule the behavior of ‘add_sis_stickiness’
        schema:
          type: boolean
      - name: update_sis_id_if_login_claimed
        in: query
        required: false
        description: This option, if present, will override the old (or non-existent) non-matching SIS ID with the new SIS ID in the upload, if a pseudonym is found from the login field and the SIS ID doesn’t match.
        schema:
          type: boolean
      - name: diffing_data_set_identifier
        in: query
        required: false
        description: If set on a CSV import, Canvas will attempt to optimize the SIS import by comparing this set of CSVs to the previous set that has the same data set identifier, and only applying the difference between the two. See the SIS CSV Format documentation for more details. Diffing cannot be used with batch_mode
        schema:
          type: string
      - name: diffing_remaster_data_set
        in: query
        required: false
        description: If true, and diffing_data_set_identifier is sent, this SIS import will be part of the data set, but diffing will not be performed. See the SIS CSV Format documentation for details.
        schema:
          type: boolean
      - name: diffing_drop_status
        in: query
        required: false
        description: 'If diffing_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. Defaults to ‘deleted’Allowed values: deleted, completed, inactive'
        schema:
          type: string
      - name: diffing_user_remove_status
        in: query
        required: false
        description: 'For users removed from one batch to the next one using the same diffing_data_set_identifier, set their status to the value of this argument. Defaults to ‘deleted’.Allowed values: deleted, suspended'
        schema:
          type: string
      - name: batch_mode_enrollment_drop_status
        in: query
        required: false
        description: 'If batch_mode_enrollment_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. This will have an effect if multi_term_batch_mode is set. Defaults to ‘deleted’ This will still mark courses and sections that are not included in the sis_batch as deleted, and subsequently enrollments in the deleted courses and sections as deleted.Allowed values: deleted, completed, inactive'
        schema:
          type: string
      - name: change_threshold
        in: query
        required: false
        description: 'If set with batch_mode, the batch cleanup process will not run if the number of items deleted is higher than the percentage set. If set to 10 and a term has 200 enrollments, and batch would delete more than 20 of the enrollments the batch will abort before the enrollments are deleted. The change_threshold will be evaluated for course, sections, and enrollments independently. If set with diffing, diffing will not be performed if the files are greater than the threshold as a percent. If set to 5 and the file is more than 5% smaller or more than 5% larger than the file that is being compared to, diffing will not be performed. If the files are less than 5%, diffing will be performed. The way the percent is calculated is by taking the size of the current import and dividing it by the size of the previous import. The formula used is:'
        schema:
          type: integer
      - name: diff_row_count_threshold
        in: query
        required: false
        description: If set with diffing, diffing will not be performed if the number of rows to be run in the fully calculated diff import exceeds the threshold.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id146
                required: *id147
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/importing:
    get:
      summary: Get Accounts Importing
      description: "Returns the SIS imports that are currently processing for an account. If no imports are running, will return an empty array. Example: ``` curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/importing \\ -H 'Authorization: Bearer <token>' ``` Returns a [SisImport](#sisimport) object. ### [Import SIS data](#method.sis_imports_api.create) <a href=\"#method.sis_imports_api.create\" id=\"method.sis_imports_api.create\"></a> [SisImportsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sis_imports/importing"
      operationId: get_importing
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id146
                required: *id147
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/{id}:
    get:
      summary: Get Accounts Sis_Imports
      description: "Get the status of an already created SIS import. ``` Examples: curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\ -H 'Authorization: Bearer <token>' ``` Returns a [SisImport](#sisimport) object. ### [Restore workflow\\_states of SIS imported items](#method.sis_imports_api.restore_states) <a href=\"#method.sis_imports_api.restore_states\" id=\"method.sis_imports_api.restore_states\"></a> [SisImportsApiController#restore\\_states](https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sis_imports/:id"
      operationId: get_sis_imports
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id146
                required: *id147
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/{id}/restore_states:
    put:
      summary: Put Accounts Restore_States
      description: "This will restore the the workflow\\_state for all the items that changed their workflow\\_state during the import being restored. This will restore states for items imported with the following importers: accounts.csv terms.csv courses.csv sections.csv group\\_categories.csv groups.csv users.csv admins.csv This also restores states for other items that changed during the import. An example would be if an enrollment was deleted from a sis import and the group\\_membership was also deleted as a result of the enrollment deletion, both items would be restored when the sis batch is restored. Restore data is retained for 30 days post-import. This endpoint is unavailable after that time.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/sis_imports/:id/restore_states"
      operationId: update_restore_states
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: batch_mode
        in: query
        required: false
        description: If set, will only restore items that were deleted from batch_mode.
        schema:
          type: boolean
      - name: undelete_only
        in: query
        required: false
        description: If set, will only restore items that were deleted. This will ignore any items that were created or modified.
        schema:
          type: boolean
      - name: unconclude_only
        in: query
        required: false
        description: If set, will only restore enrollments that were concluded. This will ignore any items that were created or deleted.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/{id}/abort:
    put:
      summary: Put Accounts Abort
      description: "Abort a SIS import that has not completed. Aborting a sis batch that is running can take some time for every process to see the abort event. Subsequent sis batches begin to process 10 minutes after the abort to allow each process to clean up properly.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/sis_imports/:id/abort"
      operationId: update_abort
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id146
                required: *id147
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/abort_all_pending:
    put:
      summary: Put Accounts Abort_All_Pending
      description: "Abort already created but not processed or processing SIS imports.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/sis_imports/abort_all_pending"
      operationId: update_abort_all_pending
      tags:
      - SIS Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/terms/{term_id}/activity:
    get:
      summary: Get Accounts Activity
      description: "Get Accounts Activity\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/activity"
      operationId: get_activity
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: term_id
        in: path
        required: true
        description: The term_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/current/activity:
    get:
      summary: Get Accounts Activity
      description: "Get Accounts Activity\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/current/activity"
      operationId: get_activity
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/completed/activity:
    get:
      summary: Get Accounts Activity
      description: "Returns page view hits summed across all courses in the department. Two groupings of these counts are returned; one by day (`by_date`), the other by category (`by_category`). The possible categories are announcements, assignments, collaborations, conferences, discussions, files, general, grades, groups, modules, other, pages, and quizzes. This and the other department-level endpoints have three variations which all return the same style of data but for different subsets of courses. All share the prefix /api/v1/accounts/\\<account\\_id>/analytics. The possible suffixes are: ``` * /current: includes all available courses in the default term * /completed: includes all concluded courses in the default term * /terms/<term_id>: includes all available or concluded courses in the given term. ``` Courses not yet offered or which have been deleted are never included. /current and /completed are intended for use when the account has only one term. /terms/\\<term\\_id> is intended for use when the account has multiple terms. The action follows the suffix.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/completed/activity"
      operationId: get_activity
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/terms/{term_id}/grades:
    get:
      summary: Get Accounts Grades
      description: "Get Accounts Grades\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/grades"
      operationId: get_grades
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: term_id
        in: path
        required: true
        description: The term_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/current/grades:
    get:
      summary: Get Accounts Grades
      description: "Get Accounts Grades\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/current/grades"
      operationId: get_grades
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/completed/grades:
    get:
      summary: Get Accounts Grades
      description: "Returns the distribution of grades for students in courses in the department. Each data point is one student’s current grade in one course; if a student is in multiple courses, he contributes one value per course, but if he’s enrolled multiple times in the same course (e.g. a lecture section and a lab section), he only constributes on value for that course. Grades are binned to the nearest integer score; anomalous grades outside the 0 to 100 range are ignored. The raw counts are returned, not yet normalized by the total count. Shares the same variations on endpoint as the participation data.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/completed/grades"
      operationId: get_grades
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics:
    get:
      summary: Get Accounts Statistics
      description: "Get Accounts Statistics\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics"
      operationId: get_statistics
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: term_id
        in: path
        required: true
        description: The term_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/current/statistics:
    get:
      summary: Get Accounts Statistics
      description: "Get Accounts Statistics\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/current/statistics"
      operationId: get_statistics
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/completed/statistics:
    get:
      summary: Get Accounts Statistics
      description: "Returns numeric statistics about the department and term (or filter). Shares the same variations on endpoint as the participation data.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/completed/statistics"
      operationId: get_statistics
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics_by_subaccount:
    get:
      summary: Get Accounts Statistics_By_Subaccount
      description: "Get Accounts Statistics_By_Subaccount\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics_by_subaccount"
      operationId: get_statistics_by_subaccount
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: term_id
        in: path
        required: true
        description: The term_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/current/statistics_by_subaccount:
    get:
      summary: Get Accounts Statistics_By_Subaccount
      description: "Get Accounts Statistics_By_Subaccount\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/current/statistics_by_subaccount"
      operationId: get_statistics_by_subaccount
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/analytics/completed/statistics_by_subaccount:
    get:
      summary: Get Accounts Statistics_By_Subaccount
      description: "Returns numeric statistics about the department subaccounts and term (or filter). Shares the same variations on endpoint as the participation data.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/analytics/completed/statistics_by_subaccount"
      operationId: get_statistics_by_subaccount
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/activity:
    get:
      summary: Get Courses Activity
      description: "Returns page view hits and participation numbers grouped by day through the entire history of the course. Page views is returned as a hash, where the hash keys are dates in the format “YYYY-MM-DD”. The page\\_views result set includes page views broken out by access category. Participations is returned as an array of dates in the format “YYYY-MM-DD”.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/activity"
      operationId: get_activity
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/assignments:
    get:
      summary: Get Courses Assignments
      description: "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown, and a breakdown of on-time/late status of homework submissions.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/assignments"
      operationId: get_assignments
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: async
        in: query
        required: false
        description: If async is true, then the course_assignments call can happen asynch- ronously and MAY return a response containing a progress_url key instead of an assignments array. If it does, then it is the caller’s responsibility to poll the API again to see if the progress is complete. If the data is ready (possibly even on the first async call) then it will be passed back normally, as documented in the example response.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/student_summaries:
    get:
      summary: Get Courses Student_Summaries
      description: "Returns a summary of per-user access information for all students in a course. This includes total page views, total participations, and a breakdown of on-time/late status for all homework submissions in the course. Each student’s summary also includes the maximum number of page views and participations by any student in the course, which may be useful for some visualizations (since determining maximums client side can be tricky with pagination).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/student_summaries"
      operationId: get_student_summaries
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: sort_column
        in: query
        required: false
        description: 'The order results in which results are returned. Defaults to “name”.Allowed values: name, name_descending, score, score_descending, participations, participations_descending, page_views, page_views_descending'
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: If set, returns only the specified student.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/users/{student_id}/activity:
    get:
      summary: Get Courses Activity
      description: "Returns page view hits grouped by hour, and participation details through the entire history of the course. ‘page\\_views\\` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour. \\`participations\\` are returned as an array of hashes, sorted oldest to newest.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/activity"
      operationId: get_activity
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: student_id
        in: path
        required: true
        description: The student_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/users/{student_id}/assignments:
    get:
      summary: Get Courses Assignments
      description: "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown (including the student’s actual grade), and the basic submission information for the student’s submission if it exists.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/assignments"
      operationId: get_assignments
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: student_id
        in: path
        required: true
        description: The student_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/analytics/users/{student_id}/communication:
    get:
      summary: Get Courses Communication
      description: "Returns messaging “hits” grouped by day through the entire history of the course. Returns a hash containing the number of instructor-to-student messages, and student-to-instructor messages, where the hash keys are dates in the format “YYYY-MM-DD”. Message hits include Conversation messages and comments on homework submissions.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/analytics/users/:student_id/communication"
      operationId: get_communication
      tags:
      - Analytics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: student_id
        in: path
        required: true
        description: The student_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules:
    get:
      summary: Get Courses Modules
      description: "A paginated list of the modules in a course\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules"
      operationId: get_modules
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“items”: Return module items inline if possible. This parameter suggests that Canvas return module items directly in the Module object JSON, to avoid having to make separate API requests for each module when enumerating modules and items. Canvas is free to omit ‘items’ for any particular module if it deems them too numerous to return inline. Callers must be prepared to use the List Module Items API if items are not returned.“content_details”: Requires ‘items’. Returns additional details with module items specific to their associated content items. Includes standard lock information for each item.Allowed values: items, content_details'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name of the modules (and module items, if ‘items’ is specified with include[]) to match and return.
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: Returns module completion information for the student with this id.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: &id149
                    id:
                      type: integer
                    workflow_state:
                      type: string
                    position:
                      type: integer
                    name:
                      type: string
                    unlock_at:
                      type: string
                    require_sequential_progress:
                      type: boolean
                    requirement_type:
                      type: string
                    prerequisite_module_ids:
                      type: array
                      items:
                        type: integer
                    items_count:
                      type: integer
                    items_url:
                      type: string
                    items:
                      type: 'null'
                    state:
                      type: string
                    completed_at:
                      type: 'null'
                    publish_final_grade:
                      type: 'null'
                    published:
                      type: boolean
                  required: &id150
                  - completed_at
                  - id
                  - items
                  - items_count
                  - items_url
                  - name
                  - position
                  - prerequisite_module_ids
                  - publish_final_grade
                  - published
                  - require_sequential_progress
                  - requirement_type
                  - state
                  - unlock_at
                  - workflow_state
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Modules
      description: "Create and return a new module\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/modules"
      operationId: create_modules
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module[position]
        in: query
        required: false
        description: The position of this module in the course (1-based)
        schema:
          type: integer
      - name: module[require_sequential_progress]
        in: query
        required: false
        description: Whether module items must be unlocked in order
        schema:
          type: boolean
      - name: module[prerequisite_module_ids][]
        in: query
        required: false
        description: IDs of Modules that must be completed before this one is unlocked. Prerequisite modules must precede this module (i.e. have a lower position value), otherwise they will be ignored
        schema:
          type: string
      - name: module[publish_final_grade]
        in: query
        required: false
        description: Whether to publish the student’s final grade for the course upon completion of this module.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id148
              type: object
              properties:
                module[name]:
                  type: string
                  description: The name of the module
                module[unlock_at]:
                  type: string
                  description: The date the module will unlock
          application/x-www-form-urlencoded:
            schema: *id148
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id149
                required: *id150
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{id}:
    get:
      summary: Get Courses Modules
      description: "Get information about a single module\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules/:id"
      operationId: get_modules
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“items”: Return module items inline if possible. This parameter suggests that Canvas return module items directly in the Module object JSON, to avoid having to make separate API requests for each module when enumerating modules and items. Canvas is free to omit ‘items’ for any particular module if it deems them too numerous to return inline. Callers must be prepared to use the List Module Items API if items are not returned.“content_details”: Requires ‘items’. Returns additional details with module items specific to their associated content items. Includes standard lock information for each item.Allowed values: items, content_details'
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: Returns module completion information for the student with this id.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id149
                required: *id150
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Modules
      description: "Update and return an existing module\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/modules/:id"
      operationId: update_modules
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: module[name]
        in: query
        required: false
        description: The name of the module
        schema:
          type: string
      - name: module[position]
        in: query
        required: false
        description: The position of the module in the course (1-based)
        schema:
          type: integer
      - name: module[require_sequential_progress]
        in: query
        required: false
        description: Whether module items must be unlocked in order
        schema:
          type: boolean
      - name: module[prerequisite_module_ids][]
        in: query
        required: false
        description: IDs of Modules that must be completed before this one is unlocked Prerequisite modules must precede this module (i.e. have a lower position value), otherwise they will be ignored
        schema:
          type: string
      - name: module[publish_final_grade]
        in: query
        required: false
        description: Whether to publish the student’s final grade for the course upon completion of this module.
        schema:
          type: boolean
      - name: module[published]
        in: query
        required: false
        description: Whether the module is published and visible to students
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id151
              type: object
              properties:
                module[unlock_at]:
                  type: string
                  description: The date the module will unlock
          application/x-www-form-urlencoded:
            schema: *id151
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id149
                required: *id150
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Modules
      description: "Delete a module\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/modules/:id"
      operationId: delete_modules
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id149
                required: *id150
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{id}/relock:
    put:
      summary: Put Courses Relock
      description: "Resets module progressions to their default locked state and recalculates them based on the current requirements. Adding progression requirements to an active course will not lock students out of modules they have already unlocked unless this action is called.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/modules/:id/relock"
      operationId: update_relock
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id149
                required: *id150
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{module_id}/items:
    get:
      summary: Get Courses Items
      description: "A paginated list of the items in a module\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules/:module_id/items"
      operationId: get_items
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'If included, will return additional details specific to the content associated with each item. Refer to the Module Item specification for more details. Includes standard lock information for each item.Allowed values: content_details'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial title of the items to match and return.
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: Returns module completion information for the student with this id.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: &id153
                    id:
                      type: integer
                    module_id:
                      type: integer
                    position:
                      type: integer
                    title:
                      type: string
                    indent:
                      type: integer
                    type:
                      type: string
                    content_id:
                      type: integer
                    html_url:
                      type: string
                    url:
                      type: string
                    page_url:
                      type: string
                    external_url:
                      type: string
                    new_tab:
                      type: boolean
                    completion_requirement:
                      type: object
                      properties:
                        type:
                          type: string
                        min_score:
                          type: integer
                        completed:
                          type: boolean
                      required:
                      - completed
                      - min_score
                      - type
                    content_details:
                      type: object
                      properties:
                        points_possible:
                          type: integer
                        due_at:
                          type: string
                        unlock_at:
                          type: string
                        lock_at:
                          type: string
                      required:
                      - due_at
                      - lock_at
                      - points_possible
                      - unlock_at
                    published:
                      type: boolean
                  required: &id154
                  - completion_requirement
                  - content_details
                  - content_id
                  - external_url
                  - html_url
                  - id
                  - indent
                  - module_id
                  - new_tab
                  - page_url
                  - position
                  - published
                  - title
                  - type
                  - url
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Items
      description: "Create and return a new module item\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/modules/:module_id/items"
      operationId: create_items
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: module_item[title]
        in: query
        required: false
        description: The name of the module item and associated content
        schema:
          type: string
      - name: module_item[position]
        in: query
        required: false
        description: The position of this item in the module (1-based).
        schema:
          type: integer
      - name: module_item[indent]
        in: query
        required: false
        description: 0-based indent level; module items may be indented to show a hierarchy
        schema:
          type: integer
      - name: module_item[page_url]
        in: query
        required: true
        description: Suffix for the linked wiki page (e.g. ‘front-page’). Required for ‘Page’ type.
        schema:
          type: string
      - name: module_item[external_url]
        in: query
        required: true
        description: External url that the item points to. [Required for ‘ExternalUrl’ and ‘ExternalTool’ types.
        schema:
          type: string
      - name: module_item[new_tab]
        in: query
        required: false
        description: Whether the external tool opens in a new tab. Only applies to ‘ExternalTool’ type.
        schema:
          type: boolean
      - name: module_item[completion_requirement][type]
        in: query
        required: false
        description: 'Completion requirement for this module item. “must_view”: Applies to all item types “must_contribute”: Only applies to “Assignment”, “Discussion”, and “Page” types “must_submit”, “min_score”: Only apply to “Assignment” and “Quiz” types “must_mark_done”: Only applies to “Assignment” and “Page” types Inapplicable types will be ignoredAllowed values: must_view, must_contribute, must_submit, must_mark_done'
        schema:
          type: string
      - name: module_item[completion_requirement][min_score]
        in: query
        required: true
        description: Minimum score required to complete. Required for completion_requirement type ‘min_score’.
        schema:
          type: integer
      - name: module_item[iframe][width]
        in: query
        required: false
        description: Width of the ExternalTool on launch
        schema:
          type: integer
      - name: module_item[iframe][height]
        in: query
        required: false
        description: Height of the ExternalTool on launch
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id152
              type: object
              properties:
                module_item[type]:
                  type: string
                  description: 'The type of content linked to the itemAllowed values: File, Page, Discussion, Assignment, Quiz, SubHeader, ExternalUrl, ExternalTool'
                module_item[content_id]:
                  type: string
                  description: The id of the content to link to the module item. Required, except for ‘ExternalUrl’, ‘Page’, and ‘SubHeader’ types.
              required:
              - module_item[content_id]
          application/x-www-form-urlencoded:
            schema: *id152
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id153
                required: *id154
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{module_id}/items/{id}:
    get:
      summary: Get Courses Items
      description: "Get information about a single module item\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules/:module_id/items/:id"
      operationId: get_items
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'If included, will return additional details specific to the content associated with this item. Refer to the Module Item specification for more details. Includes standard lock information for each item.Allowed values: content_details'
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: Returns module completion information for the student with this id.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id153
                required: *id154
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Items
      description: "Update and return an existing module item\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/modules/:module_id/items/:id"
      operationId: update_items
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: module_item[title]
        in: query
        required: false
        description: The name of the module item
        schema:
          type: string
      - name: module_item[position]
        in: query
        required: false
        description: The position of this item in the module (1-based)
        schema:
          type: integer
      - name: module_item[indent]
        in: query
        required: false
        description: 0-based indent level; module items may be indented to show a hierarchy
        schema:
          type: integer
      - name: module_item[external_url]
        in: query
        required: false
        description: External url that the item points to. Only applies to ‘ExternalUrl’ type.
        schema:
          type: string
      - name: module_item[new_tab]
        in: query
        required: false
        description: Whether the external tool opens in a new tab. Only applies to ‘ExternalTool’ type.
        schema:
          type: boolean
      - name: module_item[completion_requirement][type]
        in: query
        required: false
        description: 'Completion requirement for this module item. “must_view”: Applies to all item types “must_contribute”: Only applies to “Assignment”, “Discussion”, and “Page” types “must_submit”, “min_score”: Only apply to “Assignment” and “Quiz” types “must_mark_done”: Only applies to “Assignment” and “Page” types Inapplicable types will be ignoredAllowed values: must_view, must_contribute, must_submit, must_mark_done'
        schema:
          type: string
      - name: module_item[completion_requirement][min_score]
        in: query
        required: true
        description: Minimum score required to complete, Required for completion_requirement type ‘min_score’.
        schema:
          type: integer
      - name: module_item[published]
        in: query
        required: false
        description: Whether the module item is published and visible to students.
        schema:
          type: boolean
      - name: module_item[module_id]
        in: query
        required: false
        description: Move this item to another module by specifying the target module id here. The target module must be in the same course.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id153
                required: *id154
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Items
      description: "Delete a module item\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/modules/:module_id/items/:id"
      operationId: delete_items
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id153
                required: *id154
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path:
    post:
      summary: Post Courses Select_Mastery_Path
      description: "Select a mastery path when module item includes several possible paths. Requires Mastery Paths feature to be enabled. Returns a compound document with the assignments included in the given path and any module items related to those assignments\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/modules/:module_id/items/:id/select_mastery_path"
      operationId: create_select_mastery_path
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: assignment_set_id
        in: query
        required: false
        description: Assignment set chosen, as specified in the mastery_paths portion of the context module item response
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: Which student the selection applies to. If not specified, current user is implied.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{module_id}/items/{id}/done:
    put:
      summary: Put Courses Done
      description: "Mark a module item as done/not done. Use HTTP method PUT to mark as done, and DELETE to mark as not done.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/modules/:module_id/items/:id/done"
      operationId: update_done
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/module_item_sequence:
    get:
      summary: Get Courses Module_Item_Sequence
      description: "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items in the course sequence, and also any applicable mastery path rules\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/module_item_sequence"
      operationId: get_module_item_sequence
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: asset_type
        in: query
        required: false
        description: 'The type of asset to find module sequence information for. Use the ModuleItem if it is known (e.g., the user navigated from a module item), since this will avoid ambiguity if the asset appears more than once in the module sequence.Allowed values: ModuleItem, File, Page, Discussion, Assignment, Quiz, ExternalTool'
        schema:
          type: string
      - name: asset_id
        in: query
        required: false
        description: The id of the asset (or the url in the case of a Page)
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id155
                required: *id156
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read:
    post:
      summary: Post Courses Mark_Read
      description: "Fulfills “must view” requirement for a module item. It is generally not necessary to do this explicitly, but it is provided for applications that need to access external content directly (bypassing the html\\_url redirect that normally allows Canvas to fulfill “must view” requirements). This endpoint cannot be used to complete requirements on locked or unpublished module items.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/modules/:module_id/items/:id/mark_read"
      operationId: create_mark_read
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: module_id
        in: path
        required: true
        description: The module_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{context_module_id}/assignment_overrides:
    get:
      summary: Get Courses Assignment_Overrides
      description: "Returns a paginated list of AssignmentOverrides that apply to the ContextModule.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides"
      operationId: get_assignment_overrides
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: context_module_id
        in: path
        required: true
        description: The context_module_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id157
                  required: *id158
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Assignment_Overrides
      description: "Accepts a list of overrides and applies them to the ContextModule. Returns 204 No Content response code if successful.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/modules/:context_module_id/assignment_overrides"
      operationId: update_assignment_overrides
      tags:
      - Modules
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: context_module_id
        in: path
        required: true
        description: The context_module_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id159
              type: object
              properties:
                overrides[]:
                  type: string
                  description: 'List of overrides to apply to the module. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the module’s overrides. Keys for each override object can include: ‘id’, ‘title’, ‘student_ids’, and ‘course_section_id’. ‘group_id’ is accepted if the Differentiation Tags account setting is enabled.'
          application/x-www-form-urlencoded:
            schema: *id159
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/reports:
    get:
      summary: Get Accounts Reports
      description: "Returns a paginated list of reports for the current context.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/reports"
      operationId: get_reports
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“description_html”an HTML description of the report, with example output“parameters_html”an HTML form for the report parametersAllowed values: description_html, params_html'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/reports/{report}:
    post:
      summary: Post Accounts Reports
      description: "Generates a report instance for the account. Note that “report” in the request must match one of the available report names. To fetch a list of available report names and parameters for each report (including whether or not those parameters are required), see [List Available Reports](#method.account_reports.available_reports).\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/reports/:report"
      operationId: create_reports
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: report
        in: path
        required: true
        description: The report identifier
        schema:
          type: string
      - name: parameters[skip_message]
        in: query
        required: false
        description: If true, no message will be sent to the user upon completion of the report.
        schema:
          type: boolean
      - name: parameters[course_id]
        in: query
        required: false
        description: 'The id of the course to report on. Note: this parameter has been listed to serve as an example and may not be valid for every report.'
        schema:
          type: integer
      - name: parameters[users]
        in: query
        required: false
        description: 'If true, user data will be included. If false, user data will be omitted. Note: this parameter has been listed to serve as an example and may not be valid for every report.'
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id160
              type: object
              properties:
                parameters[]:
                  type: string
                  description: The parameters will vary for each report. To fetch a list of available parameters for each report, see List Available Reports. A few example parameters have been provided below. Note that the example parameters provided below may not be valid for every report.
          application/x-www-form-urlencoded:
            schema: *id160
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: &id161
                    id:
                      type: integer
                    report:
                      type: string
                    file_url:
                      type: string
                    attachment:
                      type: 'null'
                    status:
                      type: string
                    created_at:
                      type: string
                    started_at:
                      type: string
                    ended_at:
                      type: string
                    run_time:
                      type: number
                    parameters:
                      type: object
                      properties:
                        course_id:
                          type: integer
                        start_at:
                          type: string
                        end_at:
                          type: string
                      required:
                      - course_id
                      - end_at
                      - start_at
                    progress:
                      type: integer
                    current_line:
                      type: integer
                  required: &id162
                  - attachment
                  - created_at
                  - current_line
                  - ended_at
                  - file_url
                  - id
                  - parameters
                  - progress
                  - report
                  - run_time
                  - started_at
                  - status
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Reports
      description: "Shows all reports that have been run for the account of a specific type.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/reports/:report"
      operationId: get_reports
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: report
        in: path
        required: true
        description: The report identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id161
                  required: *id162
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/reports/{report}/{id}:
    get:
      summary: Get Accounts Reports
      description: "Returns the status of a report.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/reports/:report/:id"
      operationId: get_reports
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: report
        in: path
        required: true
        description: The report identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id161
                required: *id162
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Reports
      description: "Deletes a generated report instance.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/reports/:report/:id"
      operationId: delete_reports
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: report
        in: path
        required: true
        description: The report identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id161
                required: *id162
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/reports/{report}/{id}/abort:
    put:
      summary: Put Accounts Abort
      description: "Abort a report in progress\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/reports/:report/:id/abort"
      operationId: update_abort
      tags:
      - Account Reports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: report
        in: path
        required: true
        description: The report identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id161
                required: *id162
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/bookmarks:
    get:
      summary: Get Users Bookmarks
      description: "Returns the paginated list of bookmarks.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/bookmarks"
      operationId: list_bookmarks
      tags:
      - Bookmarks
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id163
                  required: *id164
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Bookmarks
      description: "Creates a bookmark.\n\nRequired OAuth scope: url:POST|/api/v1/users/self/bookmarks"
      operationId: create_bookmarks
      tags:
      - Bookmarks
      security:
      - bearerAuth: []
      parameters:
      - name: name
        in: query
        required: false
        description: The name of the bookmark
        schema:
          type: string
      - name: url
        in: query
        required: false
        description: The url of the bookmark
        schema:
          type: string
      - name: position
        in: query
        required: false
        description: The position of the bookmark. Defaults to the bottom.
        schema:
          type: integer
      - name: data
        in: query
        required: false
        description: The data associated with the bookmark
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id163
                required: *id164
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/bookmarks/{id}:
    get:
      summary: Get Users Bookmarks
      description: "Returns the details for a bookmark.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/bookmarks/:id"
      operationId: get_bookmarks
      tags:
      - Bookmarks
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id163
                required: *id164
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Bookmarks
      description: "Updates a bookmark\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/bookmarks/:id"
      operationId: update_bookmarks
      tags:
      - Bookmarks
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the bookmark
        schema:
          type: string
      - name: url
        in: query
        required: false
        description: The url of the bookmark
        schema:
          type: string
      - name: position
        in: query
        required: false
        description: The position of the bookmark. Defaults to the bottom.
        schema:
          type: integer
      - name: data
        in: query
        required: false
        description: The data associated with the bookmark
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Bookmarks
      description: "Deletes a bookmark\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/bookmarks/:id"
      operationId: delete_bookmarks
      tags:
      - Bookmarks
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses:
    get:
      summary: List Courses
      description: "Returns the paginated list of active courses for the current user.\n\nRequired OAuth scope: url:GET|/api/v1/courses"
      operationId: list_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: enrollment_type
        in: query
        required: false
        description: 'When set, only return courses where the user is enrolled as this type. For example, set to “teacher” to return only courses where the user is enrolled as a Teacher. This argument is ignored if enrollment_role is given.Allowed values: teacher, student, ta, observer, designer'
        schema:
          type: string
      - name: enrollment_role
        in: query
        required: false
        description: Deprecated When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a base role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.
        schema:
          type: string
      - name: enrollment_role_id
        in: query
        required: false
        description: When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a built_in role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.
        schema:
          type: integer
      - name: enrollment_state
        in: query
        required: false
        description: 'When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.Allowed values: active, invited_or_pending, completed'
        schema:
          type: string
      - name: exclude_blueprint_courses
        in: query
        required: false
        description: When set, only return courses that are not configured as blueprint courses.
        schema:
          type: boolean
      - name: include[]
        in: query
        required: false
        description: '“needs_grading_count”: Optional information to include with each Course. When needs_grading_count is given, and the current user has grading rights, the total number of submissions needing grading for all assignments is returned.“syllabus_body”: Optional information to include with each Course. When syllabus_body is given the user-generated html for the course syllabus is returned.“public_description”: Optional information to include with each Course. When public_description is given the user-generated text for the course public description is returned.“total_scores”: Optional information to include with each Course. When total_scores is given, any student enrollments will also include the fields ‘computed_current_score’, ‘computed_final_score’, ‘computed_current_grade’, and ‘computed_final_grade’, as well as (if the user has permission) ‘unposted_current_score’, ‘unposted_final_score’, ‘unposted_current_grade’, and ‘unposted_final_grade’ (see Enrollment documentation for more information on these fields). This argument is ignored if the course is configured to hide final grades.“current_grading_period_scores”: Optional information to include with each Course. When current_grading_period_scores is given and total_scores is given, any student enrollments will also include the fields ‘has_grading_periods’, ‘totals_for_all_grading_periods_option’, ‘current_grading_period_title’, ‘current_grading_period_id’, current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, and ‘current_period_computed_final_grade’, as well as (if the user has permission) ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’ (see Enrollment documentation for more information on these fields). In addition, when this argument is passed, the course will have a ‘has_grading_periods’ attribute on it. This argument is ignored if the total_scores argument is not included. If the course is configured to hide final grades, the following fields are not returned: ‘totals_for_all_grading_periods_option’, ‘current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, ‘current_period_computed_final_grade’, ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’“grading_periods”: Optional information to include with each Course. When grading_periods is given, a list of the grading periods associated with each course is returned.“term”: Optional information to include with each Course. When term is given, the information for the enrollment term for each course is returned.“account”: Optional information to include with each Course. When account is given, the account json for each course is returned.“course_progress”: Optional information to include with each Course. When course_progress is given, each course will include a ‘course_progress’ object with the fields: ‘requirement_count’, an integer specifying the total number of requirements in the course, ‘requirement_completed_count’, an integer specifying the total number of requirements in this course that have been completed, and ‘next_requirement_url’, a string url to the next requirement item, and ‘completed_at’, the date the course was completed (null if incomplete). ‘next_requirement_url’ will be null if all requirements have been completed or the current module does not require sequential progress. “course_progress” will return an error message if the course is not module based or the user is not enrolled as a student in the course.“sections”: Section enrollment information to include with each Course. Returns an array of hashes containing the section ID (id), section name (name), start and end dates (start_at, end_at), as well as the enrollment type (enrollment_role, e.g. ‘StudentEnrollment’).“storage_quota_used_mb”: The amount of storage space used by the files
          in this course“total_students”: Optional information to include with each Course. Returns an integer for the total amount of active and invited students.“passback_status”: Include the grade passback_status“favorites”: Optional information to include with each Course. Indicates if the user has marked the course as a favorite course.“teachers”: Teacher information to include with each Course. Returns an array of hashes containing the UserDisplay information for each teacher in the course.“observed_users”: Optional information to include with each Course. Will include data for observed users if the current user has an observer enrollment.“tabs”: Optional information to include with each Course. Will include the list of tabs configured for each course. See the List available tabs API for more information.“course_image”: Optional information to include with each Course. Returns course image url if a course image has been set.“banner_image”: Optional information to include with each Course. Returns course banner image url if the course is a Canvas for Elementary subject and a banner image has been set.“concluded”: Optional information to include with each Course. Indicates whether the course has been concluded, taking course and term dates into account.“post_manually”: Optional information to include with each Course. Returns true if the course post policy is set to Manually post grades. Returns false if the the course post policy is set to Automatically post grades.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, grading_periods, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, course_image, banner_image, concluded, post_manually'
        schema:
          type: string
      - name: state[]
        in: query
        required: false
        description: 'If set, only return courses that are in the given state(s). By default, “available” is returned for students and observers, and anything except “deleted”, for all other enrollment typesAllowed values: unpublished, available, completed, deleted'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id165
                  required: *id166
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/courses:
    get:
      summary: Get Users Courses
      description: "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/courses"
      operationId: get_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“needs_grading_count”: Optional information to include with each Course. When needs_grading_count is given, and the current user has grading rights, the total number of submissions needing grading for all assignments is returned.“syllabus_body”: Optional information to include with each Course. When syllabus_body is given the user-generated html for the course syllabus is returned.“public_description”: Optional information to include with each Course. When public_description is given the user-generated text for the course public description is returned.“total_scores”: Optional information to include with each Course. When total_scores is given, any student enrollments will also include the fields ‘computed_current_score’, ‘computed_final_score’, ‘computed_current_grade’, and ‘computed_final_grade’ (see Enrollment documentation for more information on these fields). This argument is ignored if the course is configured to hide final grades.“current_grading_period_scores”: Optional information to include with each Course. When current_grading_period_scores is given and total_scores is given, any student enrollments will also include the fields ‘has_grading_periods’, ‘totals_for_all_grading_periods_option’, ‘current_grading_period_title’, ‘current_grading_period_id’, current_period_computed_current_score’, ‘current_period_computed_final_score’, ‘current_period_computed_current_grade’, and ‘current_period_computed_final_grade’, as well as (if the user has permission) ‘current_period_unposted_current_score’, ‘current_period_unposted_final_score’, ‘current_period_unposted_current_grade’, and ‘current_period_unposted_final_grade’ (see Enrollment documentation for more information on these fields). In addition, when this argument is passed, the course will have a ‘has_grading_periods’ attribute on it. This argument is ignored if the course is configured to hide final grades or if the total_scores argument is not included.“grading_periods”: Optional information to include with each Course. When grading_periods is given, a list of the grading periods associated with each course is returned.“term”: Optional information to include with each Course. When term is given, the information for the enrollment term for each course is returned.“account”: Optional information to include with each Course. When account is given, the account json for each course is returned.“course_progress”: Optional information to include with each Course. When course_progress is given, each course will include a ‘course_progress’ object with the fields: ‘requirement_count’, an integer specifying the total number of requirements in the course, ‘requirement_completed_count’, an integer specifying the total number of requirements in this course that have been completed, and ‘next_requirement_url’, a string url to the next requirement item, and ‘completed_at’, the date the course was completed (null if incomplete). ‘next_requirement_url’ will be null if all requirements have been completed or the current module does not require sequential progress. “course_progress” will return an error message if the course is not module based or the user is not enrolled as a student in the course.“sections”: Section enrollment information to include with each Course. Returns an array of hashes containing the section ID (id), section name (name), start and end dates (start_at, end_at), as well as the enrollment type (enrollment_role, e.g. ‘StudentEnrollment’).“storage_quota_used_mb”: The amount of storage space used by the files in this course“total_students”: Optional information to include with each Course. Returns an integer for the total amount of active and invited students.“passback_status”: Include the grade passback_status“favorites”: Optional information to include with each Course. Indicates if the user has marked the course as a favorite course.“teachers”: Teacher information to include with each Course. Returns an array of hashes containing the UserDisplay information for each teacher in the course.“observed_users”: Optional information to include
          with each Course. Will include data for observed users if the current user has an observer enrollment.“tabs”: Optional information to include with each Course. Will include the list of tabs configured for each course. See the List available tabs API for more information.“course_image”: Optional information to include with each Course. Returns course image url if a course image has been set.“banner_image”: Optional information to include with each Course. Returns course banner image url if the course is a Canvas for Elementary subject and a banner image has been set.“concluded”: Optional information to include with each Course. Indicates whether the course has been concluded, taking course and term dates into account.“post_manually”: Optional information to include with each Course. Returns true if the course post policy is set to “Manually”. Returns false if the the course post policy is set to “Automatically”.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, grading_periods, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, course_image, banner_image, concluded, post_manually'
        schema:
          type: string
      - name: state[]
        in: query
        required: false
        description: 'If set, only return courses that are in the given state(s). By default, “available” is returned for students and observers, and anything except “deleted”, for all other enrollment typesAllowed values: unpublished, available, completed, deleted'
        schema:
          type: string
      - name: enrollment_state
        in: query
        required: false
        description: 'When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.Allowed values: active, invited_or_pending, completed'
        schema:
          type: string
      - name: homeroom
        in: query
        required: false
        description: If set, only return homeroom courses.
        schema:
          type: boolean
      - name: account_id
        in: query
        required: false
        description: If set, only include courses associated with this account
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id165
                  required: *id166
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/users/{user_id}/progress:
    get:
      summary: Get Courses Progress
      description: "Return progress information for the user and course You can supply `self` as the user\\_id to query your own progress in a course. To query another user’s progress, you must be a teacher in the course, an administrator, or a linked observer of the user. Returns a [CourseProgress](#courseprogress) object. ### [Create a new course](#method.courses.create) <a href=\"#method.courses.create\" id=\"method.courses.create\"></a> [CoursesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/users/:user_id/progress"
      operationId: get_progress
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id167
                required: *id168
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/courses:
    post:
      summary: Post Accounts Courses
      description: "Create a new course\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/courses"
      operationId: create_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: course[name]
        in: query
        required: false
        description: The name of the course. If omitted, the course will be named “Unnamed Course.”
        schema:
          type: string
      - name: course[course_code]
        in: query
        required: false
        description: The course code for the course.
        schema:
          type: string
      - name: course[license]
        in: query
        required: false
        description: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference):‘private’ (Private Copyrighted)‘cc_by_nc_nd’ (CC Attribution Non-Commercial No Derivatives)‘cc_by_nc_sa’ (CC Attribution Non-Commercial Share Alike)‘cc_by_nc’ (CC Attribution Non-Commercial)‘cc_by_nd’ (CC Attribution No Derivatives)‘cc_by_sa’ (CC Attribution Share Alike)‘cc_by’ (CC Attribution)‘public_domain’ (Public Domain).
        schema:
          type: string
      - name: course[is_public]
        in: query
        required: false
        description: Set to true if course is public to both authenticated and unauthenticated users.
        schema:
          type: boolean
      - name: course[is_public_to_auth_users]
        in: query
        required: false
        description: Set to true if course is public only to authenticated users.
        schema:
          type: boolean
      - name: course[public_syllabus]
        in: query
        required: false
        description: Set to true to make the course syllabus public.
        schema:
          type: boolean
      - name: course[public_syllabus_to_auth]
        in: query
        required: false
        description: Set to true to make the course syllabus public for authenticated users.
        schema:
          type: boolean
      - name: course[public_description]
        in: query
        required: false
        description: A publicly visible description of the course.
        schema:
          type: string
      - name: course[allow_student_wiki_edits]
        in: query
        required: false
        description: If true, students will be able to modify the course wiki.
        schema:
          type: boolean
      - name: course[allow_wiki_comments]
        in: query
        required: false
        description: If true, course members will be able to comment on wiki pages.
        schema:
          type: boolean
      - name: course[allow_student_forum_attachments]
        in: query
        required: false
        description: If true, students can attach files to forum posts.
        schema:
          type: boolean
      - name: course[open_enrollment]
        in: query
        required: false
        description: Set to true if the course is open enrollment.
        schema:
          type: boolean
      - name: course[self_enrollment]
        in: query
        required: false
        description: Set to true if the course is self enrollment.
        schema:
          type: boolean
      - name: course[restrict_enrollments_to_course_dates]
        in: query
        required: false
        description: Set to true to restrict user enrollments to the start and end dates of the course. This value must be set to true in order to specify a course start date and/or end date.
        schema:
          type: boolean
      - name: course[term_id]
        in: query
        required: false
        description: The unique ID of the term to create to course in.
        schema:
          type: string
      - name: course[sis_course_id]
        in: query
        required: false
        description: The unique SIS identifier.
        schema:
          type: string
      - name: course[integration_id]
        in: query
        required: false
        description: The unique Integration identifier.
        schema:
          type: string
      - name: course[hide_final_grades]
        in: query
        required: false
        description: If this option is set to true, the totals in student grades summary will be hidden.
        schema:
          type: boolean
      - name: course[apply_assignment_group_weights]
        in: query
        required: false
        description: Set to true to weight final grade based on assignment groups percentages.
        schema:
          type: boolean
      - name: course[time_zone]
        in: query
        required: false
        description: The time zone for the course. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: offer
        in: query
        required: false
        description: If this option is set to true, the course will be available to students immediately.
        schema:
          type: boolean
      - name: enroll_me
        in: query
        required: false
        description: Set to true to enroll the current user as the teacher.
        schema:
          type: boolean
      - name: skip_course_template
        in: query
        required: false
        description: If this option is set to true, the template of the account will not be applied to this course It means copy_from_course_template will not be executed. This option is thought for a course copy.
        schema:
          type: boolean
      - name: course[default_view]
        in: query
        required: false
        description: 'The type of page that users will see when they first visit the course‘feed’ Recent Activity Dashboard‘modules’ Course Modules/Sections Page‘assignments’ Course Assignments List‘syllabus’ Course Syllabus Pageother types may be added in the futureAllowed values: feed, wiki, modules, syllabus, assignments'
        schema:
          type: string
      - name: course[syllabus_body]
        in: query
        required: false
        description: The syllabus body for the course
        schema:
          type: string
      - name: course[grading_standard_id]
        in: query
        required: false
        description: The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.
        schema:
          type: integer
      - name: course[grade_passback_setting]
        in: query
        required: false
        description: Optional. The grade_passback_setting for the course. Only ‘nightly_sync’, ‘disabled’, and ” are allowed
        schema:
          type: string
      - name: course[course_format]
        in: query
        required: false
        description: Optional. Specifies the format of the course. (Should be ‘on_campus’, ‘online’, or ‘blended’)
        schema:
          type: string
      - name: course[post_manually]
        in: query
        required: false
        description: Default is false. When true, all grades in the course must be posted manually, and will not be automatically posted. When false, all grades in the course will be automatically posted.
        schema:
          type: boolean
      - name: enable_sis_reactivation
        in: query
        required: false
        description: When true, will first try to re-activate a deleted course with matching sis_course_id if possible.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id169
              type: object
              properties:
                course[start_at]:
                  type: string
                  description: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.
                course[end_at]:
                  type: string
                  description: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.
          application/x-www-form-urlencoded:
            schema: *id169
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id165
                required: *id166
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Courses
      description: "Update multiple courses in an account. Operates asynchronously; use the [progress endpoint](../progress#method.progress.show) to query the status of an operation.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/courses"
      operationId: update_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id170
              type: object
              properties:
                course_ids[]:
                  type: string
                  description: List of ids of courses to update. At most 500 courses may be updated in one call.
                event:
                  type: string
                  description: 'The action to take on each course. Must be one of ‘offer’, ‘conclude’, ‘delete’, or ‘undelete’.‘offer’ makes a course visible to students. This action is also called “publish” on the web site.‘conclude’ prevents future enrollments and makes a course read-only for all participants. The course still appears in prior-enrollment lists.‘delete’ completely removes the course from the web site (including course menus and prior-enrollment lists). All enrollments are deleted. Course content may be physically deleted at a future date.‘undelete’ attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.Allowed values: offer, conclude, delete, undelete'
          application/x-www-form-urlencoded:
            schema: *id170
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Courses
      description: "Retrieve a paginated list of courses in this account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/courses"
      operationId: get_courses
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: with_enrollments
        in: query
        required: false
        description: If true, include only courses with at least one enrollment. If false, include only courses with no enrollments. If not present, do not filter on course enrollment status.
        schema:
          type: boolean
      - name: enrollment_type[]
        in: query
        required: false
        description: 'If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment types.Allowed values: teacher, student, ta, observer, designer'
        schema:
          type: string
      - name: enrollment_workflow_state[]
        in: query
        required: false
        description: 'If set, only return courses that have at least one user enrolled in in the course with one of the specified enrollment workflow states.Allowed values: active, completed, deleted, invited, pending, creation_pending, rejected, inactive'
        schema:
          type: string
      - name: published
        in: query
        required: false
        description: If true, include only published courses. If false, exclude published courses. If not present, do not filter on published status.
        schema:
          type: boolean
      - name: completed
        in: query
        required: false
        description: If true, include only completed courses (these may be in state ‘completed’, or their enrollment term may have ended). If false, exclude completed courses. If not present, do not filter on completed status.
        schema:
          type: boolean
      - name: blueprint
        in: query
        required: false
        description: If true, include only blueprint courses. If false, exclude them. If not present, do not filter on this basis.
        schema:
          type: boolean
      - name: blueprint_associated
        in: query
        required: false
        description: If true, include only courses that inherit content from a blueprint course. If false, exclude them. If not present, do not filter on this basis.
        schema:
          type: boolean
      - name: public
        in: query
        required: false
        description: If true, include only public courses. If false, exclude them. If not present, do not filter on this basis.
        schema:
          type: boolean
      - name: by_teachers[]
        in: query
        required: false
        description: List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users.
        schema:
          type: integer
      - name: by_subaccounts[]
        in: query
        required: false
        description: List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts.
        schema:
          type: integer
      - name: hide_enrollmentless_courses
        in: query
        required: false
        description: If present, only return courses that have at least one enrollment. Equivalent to ‘with_enrollments=true’; retained for compatibility.
        schema:
          type: boolean
      - name: state[]
        in: query
        required: false
        description: 'If set, only return courses that are in the given state(s). By default, all states but “deleted” are returned.Allowed values: created, claimed, available, completed, deleted, all'
        schema:
          type: string
      - name: enrollment_term_id
        in: query
        required: false
        description: If set, only includes courses from the specified term.
        schema:
          type: integer
      - name: search_term
        in: query
        required: false
        description: The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters.
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'All explanations can be seen in the Course API index documentation“sections”, “needs_grading_count” and “total_scores” are not valid options at the account levelAllowed values: syllabus_body, term, course_progress, storage_quota_used_mb, total_students, teachers, account_name, concluded, post_manually'
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'The column to sort results by.Allowed values: course_status, course_name, sis_course_id, teacher, account_name'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The order to sort the given column by.Allowed values: asc, desc'
        schema:
          type: string
      - name: search_by
        in: query
        required: false
        description: 'The filter to search by. “course” searches for course names, course codes, and SIS IDs. “teacher” searches for teacher namesAllowed values: course, teacher'
        schema:
          type: string
      - name: starts_before
        in: query
        required: false
        description: 'If set, only return courses that start before the value (inclusive) or their enrollment term starts before the value (inclusive) or both the course’s start_at and the enrollment term’s start_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: ends_after
        in: query
        required: false
        description: 'If set, only return courses that end after the value (inclusive) or their enrollment term ends after the value (inclusive) or both the course’s end_at and the enrollment term’s end_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: homeroom
        in: query
        required: false
        description: If set, only return homeroom courses.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/files:
    post:
      summary: Post Courses Files
      description: "Upload a file to the course. This API endpoint is the first step in uploading a file to a course. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a course can upload files to the course. By default, this is Teachers, TAs and Designers. ### [List students](#method.courses.students) <a href=\"#method.courses.students\" id=\"method.courses.students\"></a> [CoursesController#students](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/files"
      operationId: create_files
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Files
      description: "Get Courses Files\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/files"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/students:
    get:
      summary: Get Courses Students
      description: "Returns the paginated list of students enrolled in this course. DEPRECATED: Please use the [course users](#method.courses.users) endpoint and pass “student” as the enrollment\\_type. Returns a list of [User](../users#user) objects. ### [List users in course](#method.courses.users) <a href=\"#method.courses.users\" id=\"method.courses.users\"></a> [CoursesController#users](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/students"
      operationId: get_students
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/users:
    get:
      summary: Get Courses Users
      description: "Get Courses Users\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/users"
      operationId: get_users
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/search_users:
    get:
      summary: Get Courses Search_Users
      description: "Returns the paginated list of users in this course. And optionally the user’s enrollments in the course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/search_users"
      operationId: get_search_users
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name or full ID of the users to match and return in the results list.
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'When set, sort the results of the search based on the given field.Allowed values: username, last_login, email, sis_id'
        schema:
          type: string
      - name: enrollment_type[]
        in: query
        required: false
        description: 'When set, only return users where the user is enrolled as this type. “student_view” implies include[]=test_student. This argument is ignored if enrollment_role is given.Allowed values: teacher, student, student_view, ta, observer, designer'
        schema:
          type: string
      - name: enrollment_role
        in: query
        required: false
        description: Deprecated When set, only return users enrolled with the specified course-level role. This can be a role created with the Add Role API or a base role type of ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.
        schema:
          type: string
      - name: enrollment_role_id
        in: query
        required: false
        description: When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the Add Role API or a built_in role id with type ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘ObserverEnrollment’, or ‘DesignerEnrollment’.
        schema:
          type: integer
      - name: include[]
        in: query
        required: false
        description: '“enrollments”:Optionally include with each Course the user’s current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a ‘grades’ key with ‘current_score’, ‘final_score’, ‘current_grade’ and ‘final_grade’ values.“locked”: Optionally include whether an enrollment is locked.“avatar_url”: Optionally include avatar_url.“bio”: Optionally include each user’s bio.“test_student”: Optionally include the course’s Test Student,if present. Default is to not include Test Student.“custom_links”: Optionally include plugin-supplied custom links for each student,such as analytics information“current_grading_period_scores”: if enrollments is included aswell as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A ‘grading_period_id’ value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score.“uuid”: Optionally include the users uuidAllowed values: enrollments, locked, avatar_url, test_student, bio, custom_links, current_grading_period_scores, uuid'
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: If this parameter is given and it corresponds to a user in the course, the page parameter will be ignored and the page containing the specified user will be returned instead.
        schema:
          type: string
      - name: user_ids[]
        in: query
        required: false
        description: 'If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the “user_id” argument but multiple user_ids can be included.'
        schema:
          type: integer
      - name: enrollment_state[]
        in: query
        required: false
        description: 'When set, only return users where the enrollment workflow state is of one of the given types. “active” and “invited” enrollments are returned by default.Allowed values: active, invited, rejected, completed, inactive'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/recent_students:
    get:
      summary: Get Courses Recent_Students
      description: "Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the ‘last\\_login’ field which contains a timestamp of the last time that user logged into canvas. The querying user must have the ‘View usage reports’ permission.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/recent_students"
      operationId: get_recent_students
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/users/{id}:
    get:
      summary: Get Courses Users
      description: "Return information on a single user. Accepts the same include\\[] parameters as the :users: action, and returns a single user with the same fields as that action. Returns an [User](../users#user) object. ### [Search for content share users](#method.courses.content_share_users) <a href=\"#method.courses.content_share_users\" id=\"method.courses.content_share_users\"></a> [CoursesController#content\\_share\\_users](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/users/:id"
      operationId: get_users
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_share_users:
    get:
      summary: Get Courses Content_Share_Users
      description: "Returns a paginated list of users you can share content with. Requires the content share feature and the user must have the manage content permission for the course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_share_users"
      operationId: get_content_share_users
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: Term used to find users. Will search available share users with the search term in their name.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/preview_html:
    post:
      summary: Post Courses Preview_Html
      description: "Preview html content processed for this course\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/preview_html"
      operationId: create_preview_html
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: html
        in: query
        required: false
        description: The html content to process
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/activity_stream:
    get:
      summary: Get Courses Activity_Stream
      description: "Returns the current user’s course-specific activity stream, paginated. For full documentation, see the API documentation for the user activity stream, in the user api. ### [Course activity stream summary](#method.courses.activity_stream_summary) <a href=\"#method.courses.activity_stream_summary\" id=\"method.courses.activity_stream_summary\"></a> [CoursesController#activity\\_stream\\_summary](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/activity_stream"
      operationId: get_activity_stream
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/activity_stream/summary:
    get:
      summary: Get Courses Summary
      description: "Returns a summary of the current user’s course-specific activity stream. For full documentation, see the API documentation for the user activity stream summary, in the user api. ### [Course TODO items](#method.courses.todo_items) <a href=\"#method.courses.todo_items\" id=\"method.courses.todo_items\"></a> [CoursesController#todo\\_items](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/activity_stream/summary"
      operationId: get_summary
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/todo:
    get:
      summary: Get Courses Todo
      description: "Returns the current user’s course-specific todo items. For full documentation, see the API documentation for the user todo items, in the user api. ### [Delete/Conclude a course](#method.courses.destroy) <a href=\"#method.courses.destroy\" id=\"method.courses.destroy\"></a> [CoursesController#destroy](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/todo"
      operationId: get_todo
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{id}:
    delete:
      summary: Delete Courses
      description: "Delete or conclude an existing course\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:id"
      operationId: delete_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: event
        in: query
        required: false
        description: 'The action to take on the course.Allowed values: delete, conclude'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: List Courses
      description: "List Courses\n\nRequired OAuth scope: url:GET|/api/v1/courses/:id"
      operationId: get_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Courses
      description: "Update an existing course. Arguments are the same as Courses#create, with a few exceptions (enroll\\_me). If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be “syllabus\\_body” If an account has set prevent\\_course\\_availability\\_editing\\_by\\_teachers, a teacher cannot change `course[start_at]`, `course[conclude_at]`, or `course[restrict_enrollments_to_course_dates]` here.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:id"
      operationId: update_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: course[account_id]
        in: query
        required: false
        description: The unique ID of the account to move the course to.
        schema:
          type: integer
      - name: course[name]
        in: query
        required: false
        description: The name of the course. If omitted, the course will be named “Unnamed Course.”
        schema:
          type: string
      - name: course[course_code]
        in: query
        required: false
        description: The course code for the course.
        schema:
          type: string
      - name: course[license]
        in: query
        required: false
        description: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference):‘private’ (Private Copyrighted)‘cc_by_nc_nd’ (CC Attribution Non-Commercial No Derivatives)‘cc_by_nc_sa’ (CC Attribution Non-Commercial Share Alike)‘cc_by_nc’ (CC Attribution Non-Commercial)‘cc_by_nd’ (CC Attribution No Derivatives)‘cc_by_sa’ (CC Attribution Share Alike)‘cc_by’ (CC Attribution)‘public_domain’ (Public Domain).
        schema:
          type: string
      - name: course[is_public]
        in: query
        required: false
        description: Set to true if course is public to both authenticated and unauthenticated users.
        schema:
          type: boolean
      - name: course[is_public_to_auth_users]
        in: query
        required: false
        description: Set to true if course is public only to authenticated users.
        schema:
          type: boolean
      - name: course[public_syllabus]
        in: query
        required: false
        description: Set to true to make the course syllabus public.
        schema:
          type: boolean
      - name: course[public_syllabus_to_auth]
        in: query
        required: false
        description: Set to true to make the course syllabus to public for authenticated users.
        schema:
          type: boolean
      - name: course[public_description]
        in: query
        required: false
        description: A publicly visible description of the course.
        schema:
          type: string
      - name: course[allow_student_wiki_edits]
        in: query
        required: false
        description: If true, students will be able to modify the course wiki.
        schema:
          type: boolean
      - name: course[allow_wiki_comments]
        in: query
        required: false
        description: If true, course members will be able to comment on wiki pages.
        schema:
          type: boolean
      - name: course[allow_student_forum_attachments]
        in: query
        required: false
        description: If true, students can attach files to forum posts.
        schema:
          type: boolean
      - name: course[open_enrollment]
        in: query
        required: false
        description: Set to true if the course is open enrollment.
        schema:
          type: boolean
      - name: course[self_enrollment]
        in: query
        required: false
        description: Set to true if the course is self enrollment.
        schema:
          type: boolean
      - name: course[restrict_enrollments_to_course_dates]
        in: query
        required: false
        description: Set to true to restrict user enrollments to the start and end dates of the course. Setting this value to false will remove the course end date (if it exists), as well as the course start date (if the course is unpublished).
        schema:
          type: boolean
      - name: course[term_id]
        in: query
        required: false
        description: The unique ID of the term to create to course in.
        schema:
          type: integer
      - name: course[sis_course_id]
        in: query
        required: false
        description: The unique SIS identifier.
        schema:
          type: string
      - name: course[integration_id]
        in: query
        required: false
        description: The unique Integration identifier.
        schema:
          type: string
      - name: course[hide_final_grades]
        in: query
        required: false
        description: If this option is set to true, the totals in student grades summary will be hidden.
        schema:
          type: boolean
      - name: course[time_zone]
        in: query
        required: false
        description: The time zone for the course. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: course[apply_assignment_group_weights]
        in: query
        required: false
        description: Set to true to weight final grade based on assignment groups percentages.
        schema:
          type: boolean
      - name: course[storage_quota_mb]
        in: query
        required: false
        description: Set the storage quota for the course, in megabytes. The caller must have the “Manage storage quotas” account permission.
        schema:
          type: integer
      - name: offer
        in: query
        required: false
        description: If this option is set to true, the course will be available to students immediately.
        schema:
          type: boolean
      - name: course[event]
        in: query
        required: false
        description: 'The action to take on each course.‘claim’ makes a course no longer visible to students. This action is also called “unpublish” on the web site. A course cannot be unpublished if students have received graded submissions.‘offer’ makes a course visible to students. This action is also called “publish” on the web site.‘conclude’ prevents future enrollments and makes a course read-only for all participants. The course still appears in prior-enrollment lists.‘delete’ completely removes the course from the web site (including course menus and prior-enrollment lists). All enrollments are deleted. Course content may be physically deleted at a future date.‘undelete’ attempts to recover a course that has been deleted. This action requires account administrative rights. (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.Allowed values: claim, offer, conclude, delete, undelete'
        schema:
          type: string
      - name: course[default_view]
        in: query
        required: false
        description: 'The type of page that users will see when they first visit the course‘feed’ Recent Activity Dashboard‘wiki’ Wiki Front Page‘modules’ Course Modules/Sections Page‘assignments’ Course Assignments List‘syllabus’ Course Syllabus Pageother types may be added in the futureAllowed values: feed, wiki, modules, syllabus, assignments'
        schema:
          type: string
      - name: course[syllabus_body]
        in: query
        required: false
        description: The syllabus body for the course
        schema:
          type: string
      - name: course[syllabus_course_summary]
        in: query
        required: false
        description: Optional. Indicates whether the Course Summary (consisting of the course’s assignments and calendar events) is displayed on the syllabus page. Defaults to true.
        schema:
          type: boolean
      - name: course[grading_standard_id]
        in: query
        required: false
        description: The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.
        schema:
          type: integer
      - name: course[grade_passback_setting]
        in: query
        required: false
        description: Optional. The grade_passback_setting for the course. Only ‘nightly_sync’ and ” are allowed
        schema:
          type: string
      - name: course[course_format]
        in: query
        required: false
        description: Optional. Specifies the format of the course. (Should be either ‘on_campus’ or ‘online’)
        schema:
          type: string
      - name: course[image_id]
        in: query
        required: false
        description: This is a file ID corresponding to an image file in the course that will be used as the course image. This will clear the course’s image_url setting if set. If you attempt to provide image_url and image_id in a request it will fail.
        schema:
          type: integer
      - name: course[image_url]
        in: query
        required: false
        description: This is a URL to an image to be used as the course image. This will clear the course’s image_id setting if set. If you attempt to provide image_url and image_id in a request it will fail.
        schema:
          type: string
      - name: course[remove_image]
        in: query
        required: false
        description: If this option is set to true, the course image url and course image ID are both set to nil
        schema:
          type: boolean
      - name: course[remove_banner_image]
        in: query
        required: false
        description: If this option is set to true, the course banner image url and course banner image ID are both set to nil
        schema:
          type: boolean
      - name: course[blueprint]
        in: query
        required: false
        description: Sets the course as a blueprint course.
        schema:
          type: boolean
      - name: course[use_blueprint_restrictions_by_object_type]
        in: query
        required: false
        description: When enabled, the blueprint_restrictions parameter will be ignored in favor of the blueprint_restrictions_by_object_type parameter
        schema:
          type: boolean
      - name: course[homeroom_course]
        in: query
        required: false
        description: Sets the course as a homeroom course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        schema:
          type: boolean
      - name: course[sync_enrollments_from_homeroom]
        in: query
        required: false
        description: Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        schema:
          type: string
      - name: course[homeroom_course_id]
        in: query
        required: false
        description: Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        schema:
          type: string
      - name: course[template]
        in: query
        required: false
        description: Enable or disable the course as a template that can be selected by an account
        schema:
          type: boolean
      - name: course[course_color]
        in: query
        required: false
        description: Sets a color in hex code format to be associated with the course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        schema:
          type: string
      - name: course[friendly_name]
        in: query
        required: false
        description: Set a friendly name for the course. If this is provided and the course is associated with a Canvas for Elementary account, it will be shown instead of the course name. This setting takes priority over course nicknames defined by individual users.
        schema:
          type: string
      - name: course[enable_course_paces]
        in: query
        required: false
        description: Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is enabled for the sub-account. Otherwise, Course Pacing are always disabled.
        schema:
          type: boolean
      - name: course[conditional_release]
        in: query
        required: false
        description: Enable or disable individual learning paths for students based on assessment
        schema:
          type: boolean
      - name: course[post_manually]
        in: query
        required: false
        description: When true, all grades in the course will be posted manually. When false, all grades in the course will be automatically posted. Use with caution as this setting will override any assignment level post policy.
        schema:
          type: boolean
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id171
              type: object
              properties:
                course[start_at]:
                  type: string
                  description: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true, or the course is already published.
                course[end_at]:
                  type: string
                  description: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless ‘restrict_enrollments_to_course_dates’ is set to true.
                course[blueprint_restrictions]:
                  type: string
                  description: Sets a default set to apply to blueprint course objects when restricted, unless use_blueprint_restrictions_by_object_type is enabled. See the Blueprint Restriction documentation
                course[blueprint_restrictions_by_object_type]:
                  type: string
                  description: Allows setting multiple Blueprint Restriction to apply to blueprint course objects of the matching type when restricted. The possible object types are “assignment”, “attachment”, “discussion_topic”, “quiz” and “wiki_page”. Example usage:course[blueprint_restrictions_by_object_type][assignment][content]=1
          application/x-www-form-urlencoded:
            schema: *id171
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/settings:
    get:
      summary: Get Courses Settings
      description: "Returns some of a course’s settings.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/settings"
      operationId: get_settings
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Settings
      description: "Can update the following course settings:\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/settings"
      operationId: update_settings
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: allow_final_grade_override
        in: query
        required: false
        description: Let student final grades for a grading period or the total grades for the course be overridden
        schema:
          type: boolean
      - name: allow_student_discussion_topics
        in: query
        required: false
        description: Let students create discussion topics
        schema:
          type: boolean
      - name: allow_student_forum_attachments
        in: query
        required: false
        description: Let students attach files to discussions
        schema:
          type: boolean
      - name: allow_student_discussion_editing
        in: query
        required: false
        description: Let students edit or delete their own discussion replies
        schema:
          type: boolean
      - name: allow_student_organized_groups
        in: query
        required: false
        description: Let students organize their own groups
        schema:
          type: boolean
      - name: allow_student_discussion_reporting
        in: query
        required: false
        description: Let students report offensive discussion content
        schema:
          type: boolean
      - name: allow_student_anonymous_discussion_topics
        in: query
        required: false
        description: Let students create anonymous discussion topics
        schema:
          type: boolean
      - name: filter_speed_grader_by_student_group
        in: query
        required: false
        description: Filter SpeedGrader to only the selected student group
        schema:
          type: boolean
      - name: hide_final_grades
        in: query
        required: false
        description: Hide totals in student grades summary
        schema:
          type: boolean
      - name: hide_distribution_graphs
        in: query
        required: false
        description: Hide grade distribution graphs from students
        schema:
          type: boolean
      - name: hide_sections_on_course_users_page
        in: query
        required: false
        description: Disallow students from viewing students in sections they do not belong to
        schema:
          type: boolean
      - name: lock_all_announcements
        in: query
        required: false
        description: Disable comments on announcements
        schema:
          type: boolean
      - name: usage_rights_required
        in: query
        required: false
        description: Copyright and license information must be provided for files before they are published.
        schema:
          type: boolean
      - name: restrict_student_past_view
        in: query
        required: false
        description: Restrict students from viewing courses after end date
        schema:
          type: boolean
      - name: restrict_student_future_view
        in: query
        required: false
        description: Restrict students from viewing courses before start date
        schema:
          type: boolean
      - name: show_announcements_on_home_page
        in: query
        required: false
        description: Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit). Canvas for Elementary subjects ignore this setting.
        schema:
          type: boolean
      - name: home_page_announcement_limit
        in: query
        required: false
        description: Limit the number of announcements on the home page if enabled via show_announcements_on_home_page
        schema:
          type: integer
      - name: syllabus_course_summary
        in: query
        required: false
        description: Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.
        schema:
          type: boolean
      - name: default_due_time
        in: query
        required: false
        description: Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface when setting a due date for an assignment. It does not change when any existing assignment is due. It should be given in 24-hour HH:MM:SS format. The default is “23:59:59”. Use “inherit” to inherit the account setting.
        schema:
          type: string
      - name: conditional_release
        in: query
        required: false
        description: Enable or disable individual learning paths for students based on assessment
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/student_view_student:
    get:
      summary: Get Courses Student_View_Student
      description: "Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course’s student view.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/student_view_student"
      operationId: get_student_view_student
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/courses/{id}:
    get:
      summary: Get Accounts Courses
      description: "Return information on a single course. Accepts the same include\\[] parameters as the list action plus:\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/courses/:id"
      operationId: get_courses
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“all_courses”: Also search recently deleted courses.“permissions”: Include permissions the current user has for the course.“observed_users”: Include observed users in the enrollments“course_image”: Include course image url if a course image has been set“banner_image”: Include course banner image url if the course is a Canvas for Elementary subject and a banner image has been set“concluded”: Optional information to include with Course. Indicates whether the course has been concluded, taking course and term dates into account.“lti_context_id”: Include course LTI tool id.“post_manually”: Include course post policy. If the post policy is manually post grades, the value will be true. If the post policy is automatically post grades, the value will be false.Allowed values: needs_grading_count, syllabus_body, public_description, total_scores, current_grading_period_scores, term, account, course_progress, sections, storage_quota_used_mb, total_students, passback_status, favorites, teachers, observed_users, all_courses, permissions, course_image, banner_image, concluded, lti_context_id, post_manually'
        schema:
          type: string
      - name: teacher_limit
        in: query
        required: false
        description: The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a teacher_count key.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id165
                required: *id166
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/reset_content:
    post:
      summary: Post Courses Reset_Content
      description: "Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over. Returns a [Course](#course) object. ### [Get effective due dates](#method.courses.effective_due_dates) <a href=\"#method.courses.effective_due_dates\" id=\"method.courses.effective_due_dates\"></a> [CoursesController#effective\\_due\\_dates](https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/reset_content"
      operationId: create_reset_content
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id165
                required: *id166
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/effective_due_dates:
    get:
      summary: Get Courses Effective_Due_Dates
      description: "For each assignment in the course, returns each assigned student’s ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student’s effective due\\_at, the grading\\_period\\_id of which the due\\_at falls in, and whether or not the grading period is closed (in\\_closed\\_grading\\_period) The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/effective_due_dates"
      operationId: get_effective_due_dates
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_ids[]
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/permissions:
    get:
      summary: Get Courses Permissions
      description: "Returns permission information for the calling user in the given course. See also the [Account](../accounts#method.accounts.permissions) and [Group](../groups#method.groups.permissions) counterparts.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/permissions"
      operationId: get_permissions
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: permissions[]
        in: query
        required: false
        description: List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/bulk_user_progress:
    get:
      summary: Get Courses Bulk_User_Progress
      description: "Returns progress information for all users enrolled in the given course. You must be a user who has permission to view all grades in the course (such as a teacher or administrator).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/bulk_user_progress"
      operationId: get_bulk_user_progress
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{id}/dismiss_migration_limitation_message:
    post:
      summary: Post Courses Dismiss_Migration_Limitation_Message
      description: "Remove alert about the limitations of quiz migrations that is displayed to a user in a course you must be logged in to use this endpoint\n\nRequired OAuth scope: url:POST|/api/v1/courses/:id/dismiss_migration_limitation_message"
      operationId: create_dismiss_migration_limitation_message
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/course_copy/{id}:
    get:
      summary: Get Courses Course_Copy
      description: "DEPRECATED: Please use the [Content Migrations API](../content_migrations#method.content_migrations.create) Retrieve the status of a course copy\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/course_copy/:id"
      operationId: get_course_copy
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/course_copy:
    post:
      summary: Post Courses Course_Copy
      description: "DEPRECATED: Please use the [Content Migrations API](../content_migrations#method.content_migrations.create) Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the ‘except’ option or the ‘only’ option. The response is the same as the course copy status endpoint\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/course_copy"
      operationId: create_course_copy
      tags:
      - Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: source_course
        in: query
        required: false
        description: ID or SIS-ID of the course to copy the content from
        schema:
          type: string
      - name: except[]
        in: query
        required: false
        description: 'A list of the course content types to exclude, all areas not listed will be copied.Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes'
        schema:
          type: string
      - name: only[]
        in: query
        required: false
        description: 'A list of the course content types to copy, all areas not listed will not be copied.Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_exports:
    get:
      summary: Get Courses Content_Exports
      description: "Get Courses Content_Exports\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_exports"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Content_Exports
      description: "Post Courses Content_Exports\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/content_exports"
      operationId: create_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_exports:
    get:
      summary: Get Groups Content_Exports
      description: "Get Groups Content_Exports\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_exports"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Content_Exports
      description: "Post Groups Content_Exports\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/content_exports"
      operationId: create_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_exports:
    get:
      summary: Get Users Content_Exports
      description: "A paginated list of the past and pending content export jobs for a course, group, or user. Exports are returned newest first. Returns a list of [ContentExport](#contentexport) objects. ### [Show content export](#method.content_exports_api.show) <a href=\"#method.content_exports_api.show\" id=\"method.content_exports_api.show\"></a> [ContentExportsApiController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_exports"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id172
                  required: *id173
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Content_Exports
      description: "Begin a content export job for a course, group, or user. You can use the [Progress API](../progress#method.progress.show) to track the progress of the export. The migration’s progress is linked to with the _progress\\_url_ value. When the export completes, use the [Show content export](#method.content_exports_api.show) endpoint to retrieve a download URL for the exported content.\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/content_exports"
      operationId: create_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: skip_notifications
        in: query
        required: false
        description: 'Don’t send the notifications about the export to the user. Default: false'
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id174
              type: object
              properties:
                export_type:
                  type: string
                  description: '“common_cartridge”Export the contents of the course in the Common Cartridge (.imscc) format“qti”Export quizzes from a course in the QTI format“zip”Export files from a course, group, or user in a zip fileAllowed values: common_cartridge, qti, zip'
                select:
                  type: string
                  description: 'The select parameter allows exporting specific data. The keys are object types like ‘files’, ‘folders’, ‘pages’, etc. The value for each key is a list of object ids. An id can be an integer or a string.Multiple object types can be selected in the same call. However, not all object types are valid for every export_type. Common Cartridge supports all object types. Zip and QTI only support the object types as described below.“folders”Also supported for zip export_type.“files”Also supported for zip export_type.“quizzes”Also supported for qti export_type.Allowed values: folders, files, attachments, quizzes, assignments, announcements, calendar_events, discussion_topics, modules, module_items, pages, rubrics'
          application/x-www-form-urlencoded:
            schema: *id174
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id172
                  required: *id173
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_exports/{id}:
    get:
      summary: Get Courses Content_Exports
      description: "Get Courses Content_Exports\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_exports/:id"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_exports/{id}:
    get:
      summary: Get Groups Content_Exports
      description: "Get Groups Content_Exports\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_exports/:id"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_exports/{id}:
    get:
      summary: Get Users Content_Exports
      description: "Get information about a single content export. Returns a [ContentExport](#contentexport) object. ### [Export content](#method.content_exports_api.create) <a href=\"#method.content_exports_api.create\" id=\"method.content_exports_api.create\"></a> [ContentExportsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_exports/:id"
      operationId: get_content_exports
      tags:
      - Content Exports
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id172
                required: *id173
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions:
    post:
      summary: Post Courses Submissions
      description: "Post Courses Submissions\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions"
      operationId: create_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Submissions
      description: "Get Courses Submissions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions:
    post:
      summary: Post Sections Submissions
      description: "Make a submission for an assignment. You must be actively enrolled as a student in the course/section to do this. Concluded and pending enrollments are not permitted. All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported: * Files can be submitted based on a file ID of a user or group file or through the [file upload API](#method.submissions_api.create_file). However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions"
      operationId: create_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: comment[text_comment]
        in: query
        required: false
        description: Include a textual comment with the submission.
        schema:
          type: string
      - name: submission[group_comment]
        in: query
        required: false
        description: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        schema:
          type: boolean
      - name: submission[body]
        in: query
        required: false
        description: Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of “online_text_entry”.
        schema:
          type: string
      - name: submission[url]
        in: query
        required: false
        description: Submit the assignment as a URL. The URL scheme must be “http” or “https”, no “ftp” or other URL schemes are allowed. If no scheme is given (e.g. “www.example.com”) then “http” will be assumed. Requires a submission_type of “online_url” or “basic_lti_launch”.
        schema:
          type: string
      - name: submission[file_ids][]
        in: query
        required: false
        description: Submit the assignment as a set of one or more previously uploaded files residing in the submitting user’s files section (or the group’s files section, for group assignments).To upload a new file to submit, see the submissions Upload a file API.Requires a submission_type of “online_upload”.
        schema:
          type: integer
      - name: submission[media_comment_id]
        in: query
        required: false
        description: The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.Requires a submission_type of “media_recording”.
        schema:
          type: string
      - name: submission[media_comment_type]
        in: query
        required: false
        description: 'The type of media comment being submitted.Allowed values: audio, video'
        schema:
          type: string
      - name: submission[user_id]
        in: query
        required: false
        description: Submit on behalf of the given user. Requires grading permission.
        schema:
          type: integer
      - name: submission[annotatable_attachment_id]
        in: query
        required: false
        description: The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.Requires a submission_type of “student_annotation”.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id175
              type: object
              properties:
                submission[submission_type]:
                  type: string
                  description: 'The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission[submission_type] must be set to “online_url”, otherwise the submission[url] parameter will be ignored.“basic_lti_launch” requires the assignment submission_type “online” or “external_tool”Allowed values: online_text_entry, online_url, online_upload, media_recording, basic_lti_launch, student_annotation'
                submission[submitted_at]:
                  type: string
                  description: Choose the time the submission is listed as submitted at. Requires grading permission.
          application/x-www-form-urlencoded:
            schema: *id175
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Sections Submissions
      description: "A paginated list of all existing submissions for an assignment.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the group. “group” will add group_id and group_name.Allowed values: submission_history, submission_comments, submission_html_comments, rubric_assessment, assignment, visibility, course, user, group, read_status, student_entered_score'
        schema:
          type: string
      - name: grouped
        in: query
        required: false
        description: If this argument is true, the response will be grouped by student groups.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties:
                    assignment_id:
                      type: integer
                    assignment:
                      type: 'null'
                    course:
                      type: 'null'
                    attempt:
                      type: integer
                    body:
                      type: string
                    grade:
                      type: string
                    grade_matches_current_submission:
                      type: boolean
                    html_url:
                      type: string
                    preview_url:
                      type: string
                    score:
                      type: number
                    submission_comments:
                      type: 'null'
                    submission_type:
                      type: string
                    submitted_at:
                      type: string
                    url:
                      type: 'null'
                    user_id:
                      type: integer
                    grader_id:
                      type: integer
                    graded_at:
                      type: string
                    user:
                      type: 'null'
                    late:
                      type: boolean
                    assignment_visible:
                      type: boolean
                    excused:
                      type: boolean
                    missing:
                      type: boolean
                    late_policy_status:
                      type: string
                    points_deducted:
                      type: number
                    seconds_late:
                      type: integer
                    workflow_state:
                      type: string
                    extra_attempts:
                      type: integer
                    anonymous_id:
                      type: string
                    posted_at:
                      type: string
                    read_status:
                      type: string
                    redo_request:
                      type: boolean
                  required:
                  - anonymous_id
                  - assignment
                  - assignment_id
                  - assignment_visible
                  - attempt
                  - body
                  - course
                  - excused
                  - extra_attempts
                  - grade
                  - grade_matches_current_submission
                  - graded_at
                  - grader_id
                  - html_url
                  - late
                  - late_policy_status
                  - missing
                  - points_deducted
                  - posted_at
                  - preview_url
                  - read_status
                  - redo_request
                  - score
                  - seconds_late
                  - submission_comments
                  - submission_type
                  - submitted_at
                  - url
                  - user
                  - user_id
                  - workflow_state
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/students/submissions:
    get:
      summary: Get Courses Submissions
      description: "Get Courses Submissions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/students/submissions"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/students/submissions:
    get:
      summary: Get Sections Submissions
      description: "A paginated list of all existing submissions for a given set of students and assignments.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/students/submissions"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: student_ids[]
        in: query
        required: false
        description: List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id “all” will return submissions for all students in the course/section as appropriate.
        schema:
          type: string
      - name: assignment_ids[]
        in: query
        required: false
        description: List of assignments to return submissions for. If none are given, submissions for all assignments are returned.
        schema:
          type: string
      - name: grouped
        in: query
        required: false
        description: If this argument is present, the response will be grouped by student, rather than a flat array of submissions.
        schema:
          type: boolean
      - name: post_to_sis
        in: query
        required: false
        description: If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.
        schema:
          type: boolean
      - name: submitted_since
        in: query
        required: false
        description: If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        schema:
          type: string
      - name: graded_since
        in: query
        required: false
        description: If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        schema:
          type: string
      - name: grading_period_id
        in: query
        required: false
        description: The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)
        schema:
          type: integer
      - name: workflow_state
        in: query
        required: false
        description: 'The current status of the submissionAllowed values: submitted, unsubmitted, graded, pending_review'
        schema:
          type: string
      - name: enrollment_state
        in: query
        required: false
        description: 'The current state of the enrollments. If omitted will include all enrollments that are not deleted.Allowed values: active, concluded'
        schema:
          type: string
      - name: state_based_on_date
        in: query
        required: false
        description: If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.
        schema:
          type: boolean
      - name: order
        in: query
        required: false
        description: 'The order submissions will be returned in. Defaults to “id”. Doesn’t affect results for “grouped” mode.Allowed values: id, graded_at'
        schema:
          type: string
      - name: order_direction
        in: query
        required: false
        description: 'Determines whether ordered results are returned in ascending or descending order. Defaults to “ascending”. Doesn’t affect results for “grouped” mode.Allowed values: ascending, descending'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: Associations to include with the group. ‘total_scoresrequires thegroupedargument.</p> Allowed values:submission_history, submission_comments, submission_html_comments, rubric_assessment, assignment, total_scores, visibility, course, user, sub_assignment_submissions, student_entered_score`
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}:
    get:
      summary: Get Courses Submissions
      description: "Get Courses Submissions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Submissions
      description: "Put Courses Submissions\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id"
      operationId: update_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}:
    get:
      summary: Get Sections Submissions
      description: "Get a single submission, based on user id.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id"
      operationId: get_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the group.Allowed values: submission_history, submission_comments, submission_html_comments, rubric_assessment, full_rubric_assessment, visibility, course, user, read_status, student_entered_score'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Sections Submissions
      description: "Comment on and/or update the grading for a student’s assignment submission. If any submission or rubric\\_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id"
      operationId: update_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: comment[text_comment]
        in: query
        required: false
        description: Add a textual comment to the submission.
        schema:
          type: string
      - name: comment[attempt]
        in: query
        required: false
        description: The attempt number (starts at 1) to associate the comment with.
        schema:
          type: integer
      - name: comment[group_comment]
        in: query
        required: false
        description: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        schema:
          type: boolean
      - name: comment[media_comment_id]
        in: query
        required: false
        description: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        schema:
          type: string
      - name: comment[media_comment_type]
        in: query
        required: false
        description: 'The type of media comment being added.Allowed values: audio, video'
        schema:
          type: string
      - name: comment[file_ids][]
        in: query
        required: false
        description: Attach files to this comment that were previously uploaded using the Submission Comment API’s files action
        schema:
          type: integer
      - name: include[visibility]
        in: query
        required: false
        description: Whether this assignment is visible to the owner of the submission
        schema:
          type: string
      - name: prefer_points_over_scheme
        in: query
        required: false
        description: Treat posted_grade as points if the value matches a grading scheme value
        schema:
          type: boolean
      - name: submission[posted_grade]
        in: query
        required: false
        description: "Assign a score to the submission, updating both the “score” and “grade” fields on the submission record. This parameter can be passed in a few different formats:pointsA floating point or integral value, such as “13.5”. The gradewill be interpreted directly as the score of the assignment.\nValues above assignment.points_possible are allowed, for awarding\nextra credit.\npercentageA floating point value appended with a percent sign, such as\"40%\". The grade will be interpreted as a percentage score on the\nassignment, where 100% == assignment.points_possible. Values above 100%\nare allowed, for awarding extra credit.\nletter gradeA letter grade, following the assignment’s defined lettergrading scheme. For example, \"A-\". The resulting score will be the high\nend of the defined range for the letter grade. For instance, if \"B\" is\ndefined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\nletter grade will be rejected if the assignment does not have a defined\nletter grading scheme. For more fine-grained control of scores, pass in\npoints or percentage rather than the letter grade.\n“pass/complete/fail/incomplete”A string value of “pass” or “complete”will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n0.\nNote that assignments with grading_type of “pass_fail” can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the “points” or “percentage” format is sent, the grade will only be accepted if the grade equals one of those two values."
        schema:
          type: string
      - name: submission[excuse]
        in: query
        required: false
        description: Sets the “excused” status of an assignment.
        schema:
          type: boolean
      - name: submission[late_policy_status]
        in: query
        required: false
        description: "Sets the late policy status to either “late”, “missing”, “extended”, “none”, or null.NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on"
        schema:
          type: string
      - name: submission[sticker]
        in: query
        required: false
        description: 'Sets the sticker for the submission.Allowed values: apple, basketball, bell, book, bookbag, briefcase, bus, calendar, chem, design, pencil, beaker, paintbrush, computer, column, pen, tablet, telescope, calculator, paperclip, composite_notebook, scissors, ruler, clock, globe, grad, gym, mail, microscope, mouse, music, notebook, page, panda1, panda2, panda3, panda4, panda5, panda6, panda7, panda8, panda9, presentation, science, science2, star, tag, tape, target, trophy'
        schema:
          type: string
      - name: submission[seconds_late_override]
        in: query
        required: false
        description: Sets the seconds late if late policy status is “late”
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id176
              type: object
              properties:
                rubric_assessment:
                  type: string
                  description: "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:The points awarded for this row.rubric_assessment[criterion_id][points]\nThe rating id for the row.rubric_assessment[criterion_id][rating_id]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor example, if the assignment rubric is (in JSON format):[\n  {\n    'id': 'crit1',\n    'points': 10,\n    'description': 'Criterion 1',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n      { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n    ]\n  },\n  {\n    'id': 'crit2',\n    'points': 5,\n    'description': 'Criterion 2',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n      { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n      { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n    ]\n  }\n]\nThen a possible set of values for rubric_assessment would be:rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done."
          application/x-www-form-urlencoded:
            schema: *id176
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}:
    get:
      summary: Get Courses Anonymous_Submissions
      description: "Get Courses Anonymous_Submissions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id"
      operationId: get_anonymous_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: anonymous_id
        in: path
        required: true
        description: The anonymous_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Anonymous_Submissions
      description: "Put Courses Anonymous_Submissions\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id"
      operationId: update_anonymous_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: anonymous_id
        in: path
        required: true
        description: The anonymous_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}:
    get:
      summary: Get Sections Anonymous_Submissions
      description: "Get a single submission, based on the submission’s anonymous id.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id"
      operationId: get_anonymous_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: anonymous_id
        in: path
        required: true
        description: The anonymous_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the group.Allowed values: submission_history, submission_comments, rubric_assessment, full_rubric_assessment, visibility, course, user, read_status'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Sections Anonymous_Submissions
      description: "Comment on and/or update the grading for a student’s assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric\\_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/anonymous_submissions/:anonymous_id"
      operationId: update_anonymous_submissions
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: anonymous_id
        in: path
        required: true
        description: The anonymous_id identifier
        schema:
          type: string
      - name: comment[text_comment]
        in: query
        required: false
        description: Add a textual comment to the submission.
        schema:
          type: string
      - name: comment[group_comment]
        in: query
        required: false
        description: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        schema:
          type: boolean
      - name: comment[media_comment_id]
        in: query
        required: false
        description: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        schema:
          type: string
      - name: comment[media_comment_type]
        in: query
        required: false
        description: 'The type of media comment being added.Allowed values: audio, video'
        schema:
          type: string
      - name: comment[file_ids][]
        in: query
        required: false
        description: Attach files to this comment that were previously uploaded using the Submission Comment API’s files action
        schema:
          type: integer
      - name: include[visibility]
        in: query
        required: false
        description: Whether this assignment is visible to the owner of the submission
        schema:
          type: string
      - name: submission[posted_grade]
        in: query
        required: false
        description: "Assign a score to the submission, updating both the “score” and “grade” fields on the submission record. This parameter can be passed in a few different formats:pointsA floating point or integral value, such as “13.5”. The gradewill be interpreted directly as the score of the assignment.\nValues above assignment.points_possible are allowed, for awarding\nextra credit.\npercentageA floating point value appended with a percent sign, such as\"40%\". The grade will be interpreted as a percentage score on the\nassignment, where 100% == assignment.points_possible. Values above 100%\nare allowed, for awarding extra credit.\nletter gradeA letter grade, following the assignment’s defined lettergrading scheme. For example, \"A-\". The resulting score will be the high\nend of the defined range for the letter grade. For instance, if \"B\" is\ndefined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\nletter grade will be rejected if the assignment does not have a defined\nletter grading scheme. For more fine-grained control of scores, pass in\npoints or percentage rather than the letter grade.\n“pass/complete/fail/incomplete”A string value of “pass” or “complete”will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n0.\nNote that assignments with grading_type of “pass_fail” can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the “points” or “percentage” format is sent, the grade will only be accepted if the grade equals one of those two values."
        schema:
          type: string
      - name: submission[excuse]
        in: query
        required: false
        description: Sets the “excused” status of an assignment.
        schema:
          type: boolean
      - name: submission[late_policy_status]
        in: query
        required: false
        description: "Sets the late policy status to either “late”, “missing”, “extended”, “none”, or null.NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on"
        schema:
          type: string
      - name: submission[seconds_late_override]
        in: query
        required: false
        description: Sets the seconds late if late policy status is “late”
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id177
              type: object
              properties:
                rubric_assessment:
                  type: string
                  description: "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:The points awarded for this row.rubric_assessment[criterion_id][points]\nThe rating id for the row.rubric_assessment[criterion_id][rating_id]\nComments to add for this row.rubric_assessment[criterion_id][comments]\nFor example, if the assignment rubric is (in JSON format):[\n  {\n    'id': 'crit1',\n    'points': 10,\n    'description': 'Criterion 1',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Good', 'points': 10 },\n      { 'id': 'rat2', 'description': 'Poor', 'points': 3 }\n    ]\n  },\n  {\n    'id': 'crit2',\n    'points': 5,\n    'description': 'Criterion 2',\n    'ratings':\n    [\n      { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },\n      { 'id': 'rat2', 'description': 'Complete', 'points': 5 },\n      { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }\n    ]\n  }\n]\nThen a possible set of values for rubric_assessment would be:rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done."
          application/x-www-form-urlencoded:
            schema: *id177
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files:
    post:
      summary: Post Courses Files
      description: "Post Courses Files\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/files"
      operationId: create_files
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files:
    post:
      summary: Post Sections Files
      description: "Upload a file to a submission. This API endpoint is the first step in uploading a file to a submission as a student. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the `online_upload` assignment with these file ids. ### [Grade or comment on a submission](#method.submissions_api.update) <a href=\"#method.submissions_api.update\" id=\"method.submissions_api.update\"></a> [SubmissionsApiController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/files"
      operationId: create_files
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students:
    get:
      summary: Get Courses Gradeable_Students
      description: "A paginated list of gradeable students for the assignment. The caller must have permission to view grades. If anonymous grading is enabled for the current assignment and the allow\\_new\\_anonymous\\_id parameter is passed, the returned data will not include any values identifying the student, but will instead include an assignment-specific anonymous ID for each student. Section-limited instructors will only see students in their own sections.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/gradeable_students"
      operationId: get_gradeable_students
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'Sort results by this field.Allowed values: name'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The sorting order. Defaults to ‘asc’.Allowed values: asc, desc'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/gradeable_students:
    get:
      summary: Get Courses Gradeable_Students
      description: "A paginated list of students eligible to submit a list of assignments. The caller must have permission to view grades for the requested course. Section-limited instructors will only see students in their own sections.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/gradeable_students"
      operationId: get_gradeable_students
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_ids[]
        in: query
        required: false
        description: Assignments being requested
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/submissions/update_grades:
    post:
      summary: Post Courses Update_Grades
      description: "Post Courses Update_Grades\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/submissions/update_grades"
      operationId: create_update_grades
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades:
    post:
      summary: Post Courses Update_Grades
      description: "Post Courses Update_Grades\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/update_grades"
      operationId: create_update_grades
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/submissions/update_grades:
    post:
      summary: Post Sections Update_Grades
      description: "Post Sections Update_Grades\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/submissions/update_grades"
      operationId: create_update_grades
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades:
    post:
      summary: Post Sections Update_Grades
      description: "Update the grading and comments on multiple student’s assignment submissions in an asynchronous job. The user must have permission to manage grades in the appropriate context (course or section).\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/update_grades"
      operationId: create_update_grades
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: grade_data[<student_id>][posted_grade]
        in: query
        required: false
        description: See documentation for the posted_grade argument in the Submissions Update documentation
        schema:
          type: string
      - name: grade_data[<student_id>][excuse]
        in: query
        required: false
        description: See documentation for the excuse argument in the Submissions Update documentation
        schema:
          type: boolean
      - name: grade_data[<student_id>][text_comment]
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: grade_data[<student_id>][group_comment]
        in: query
        required: false
        description: no description
        schema:
          type: boolean
      - name: grade_data[<student_id>][media_comment_id]
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: grade_data[<student_id>][media_comment_type]
        in: query
        required: false
        description: 'no descriptionAllowed values: audio, video'
        schema:
          type: string
      - name: grade_data[<student_id>][file_ids][]
        in: query
        required: false
        description: See documentation for the comment[] arguments in the Submissions Update documentation
        schema:
          type: integer
      - name: grade_data[<assignment_id>][<student_id>]
        in: query
        required: false
        description: Specifies which assignment to grade. This argument is not necessary when using the assignment-specific endpoints.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id178
              type: object
              properties:
                grade_data[<student_id>][rubric_assessment]:
                  type: string
                  description: See documentation for the rubric_assessment argument in the Submissions Update documentation
          application/x-www-form-urlencoded:
            schema: *id178
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read:
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Read
      description: "Delete Courses Read\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read"
      operationId: delete_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read:
    put:
      summary: Put Sections Read
      description: "No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Sections Read
      description: "No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:DELETE|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read"
      operationId: delete_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/submissions/bulk_mark_read:
    put:
      summary: Put Courses Bulk_Mark_Read
      description: "Put Courses Bulk_Mark_Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/submissions/bulk_mark_read"
      operationId: update_bulk_mark_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/submissions/bulk_mark_read:
    put:
      summary: Put Sections Bulk_Mark_Read
      description: "Accepts a string array of submission ids. Loops through and marks each submission as read On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/submissions/bulk_mark_read"
      operationId: update_bulk_mark_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: submissionIds[]
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read/{item}:
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/read/:item"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: item
        in: path
        required: true
        description: The item identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read/{item}:
    put:
      summary: Put Sections Read
      description: "No request fields are necessary. A submission item can be “grade”, “comment” or “rubric” On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/read/:item"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: item
        in: path
        required: true
        description: The item identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/submissions/{user_id}/clear_unread:
    put:
      summary: Put Courses Clear_Unread
      description: "Put Courses Clear_Unread\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/submissions/:user_id/clear_unread"
      operationId: update_clear_unread
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/submissions/{user_id}/clear_unread:
    put:
      summary: Put Sections Clear_Unread
      description: "Site-admin-only endpoint. No request fields are necessary. On success, the response will be 204 No Content with an empty body.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/submissions/:user_id/clear_unread"
      operationId: update_clear_unread
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read:
    get:
      summary: Get Courses Read
      description: "Get Courses Read\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read:
    get:
      summary: Get Courses Read
      description: "Get Courses Read\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read:
    get:
      summary: Get Sections Read
      description: "Get Sections Read\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Sections Read
      description: "Put Sections Read\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_comments/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read:
    get:
      summary: Get Sections Read
      description: "Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Sections Read
      description: "Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint. NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/rubric_assessments/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read:
    get:
      summary: Get Courses Read
      description: "Get Courses Read\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Read
      description: "Put Courses Read\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read:
    get:
      summary: Get Sections Read
      description: "Return whether annotations made on a submitted document have been read by the student\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read"
      operationId: get_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Sections Read
      description: "Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint. NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:section_id/assignments/:assignment_id/submissions/:user_id/document_annotations/read"
      operationId: update_read
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary:
    get:
      summary: Get Courses Submission_Summary
      description: "Get Courses Submission_Summary\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submission_summary"
      operationId: get_submission_summary
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary:
    get:
      summary: Get Sections Submission_Summary
      description: "Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/assignments/:assignment_id/submission_summary"
      operationId: get_submission_summary
      tags:
      - Submissions
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: grouped
        in: query
        required: false
        description: If this argument is true, the response will take into account student groups.
        schema:
          type: boolean
      - name: include_deactivated
        in: query
        required: false
        description: If this argument is true, the response will include deactivated students in the summary (defaults to false).
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/developer_keys:
    get:
      summary: Get Accounts Developer_Keys
      description: "List all developer keys created in the current account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/developer_keys"
      operationId: get_developer_keys
      tags:
      - Developer Keys
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: inherited
        in: query
        required: false
        description: Defaults to false. If true, lists keys inherited from Site Admin (and consortium parent account, if applicable).
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id179
                  required: *id180
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Developer_Keys
      description: "Create a new Canvas API key. Creating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/developer_keys"
      operationId: create_developer_keys
      tags:
      - Developer Keys
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: developer_key[auto_expire_tokens]
        in: query
        required: false
        description: Defaults to false. If true, access tokens generated by this key will expire after 1 hour.
        schema:
          type: boolean
      - name: developer_key[email]
        in: query
        required: false
        description: Contact email for the key.
        schema:
          type: string
      - name: developer_key[icon_url]
        in: query
        required: false
        description: URL for a small icon to display in key list.
        schema:
          type: string
      - name: developer_key[name]
        in: query
        required: false
        description: The display name.
        schema:
          type: string
      - name: developer_key[notes]
        in: query
        required: false
        description: User-provided notes about the key.
        schema:
          type: string
      - name: developer_key[redirect_uri]
        in: query
        required: false
        description: Deprecated in favor of redirect_uris. Do not use.
        schema:
          type: string
      - name: developer_key[vendor_code]
        in: query
        required: false
        description: User-specified code representing the vendor that uses the key.
        schema:
          type: string
      - name: developer_key[visible]
        in: query
        required: false
        description: Defaults to true. If false, key will not be visible in the UI.
        schema:
          type: boolean
      - name: developer_key[test_cluster_only]
        in: query
        required: false
        description: Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.
        schema:
          type: boolean
      - name: developer_key[client_credentials_audience]
        in: query
        required: false
        description: Used in OAuth2 client credentials flow to specify the audience for the access token.
        schema:
          type: string
      - name: developer_key[require_scopes]
        in: query
        required: false
        description: If true, then token requests with this key must include scopes.
        schema:
          type: boolean
      - name: developer_key[allow_includes]
        in: query
        required: false
        description: If true, allows ‘includes` parameters in API requests that match the scopes of this key.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id181
              type: object
              properties:
                developer_key:
                  type: string
                  description: no description
                developer_key[redirect_uris]:
                  type: string
                  description: List of URLs used during OAuth2 flow to validate given redirect URI.
                developer_key[scopes]:
                  type: string
                  description: List of API endpoints key is allowed to access.
          application/x-www-form-urlencoded:
            schema: *id181
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id179
                  required: *id180
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/developer_keys/{id}:
    put:
      summary: Update Developer_Keys
      description: "Update an existing Canvas API key. Updating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.\n\nRequired OAuth scope: url:PUT|/api/v1/developer_keys/:id"
      operationId: update_developer_keys
      tags:
      - Developer Keys
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: developer_key[auto_expire_tokens]
        in: query
        required: false
        description: Defaults to false. If true, access tokens generated by this key will expire after 1 hour.
        schema:
          type: boolean
      - name: developer_key[email]
        in: query
        required: false
        description: Contact email for the key.
        schema:
          type: string
      - name: developer_key[icon_url]
        in: query
        required: false
        description: URL for a small icon to display in key list.
        schema:
          type: string
      - name: developer_key[name]
        in: query
        required: false
        description: The display name.
        schema:
          type: string
      - name: developer_key[notes]
        in: query
        required: false
        description: User-provided notes about the key.
        schema:
          type: string
      - name: developer_key[redirect_uri]
        in: query
        required: false
        description: Deprecated in favor of redirect_uris. Do not use.
        schema:
          type: string
      - name: developer_key[vendor_code]
        in: query
        required: false
        description: User-specified code representing the vendor that uses the key.
        schema:
          type: string
      - name: developer_key[visible]
        in: query
        required: false
        description: Defaults to true. If false, key will not be visible in the UI.
        schema:
          type: boolean
      - name: developer_key[test_cluster_only]
        in: query
        required: false
        description: Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.
        schema:
          type: boolean
      - name: developer_key[client_credentials_audience]
        in: query
        required: false
        description: Used in OAuth2 client credentials flow to specify the audience for the access token.
        schema:
          type: string
      - name: developer_key[require_scopes]
        in: query
        required: false
        description: If true, then token requests with this key must include scopes.
        schema:
          type: boolean
      - name: developer_key[allow_includes]
        in: query
        required: false
        description: If true, allows ‘includes` parameters in API requests that match the scopes of this key.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id182
              type: object
              properties:
                developer_key:
                  type: string
                  description: no description
                developer_key[redirect_uris]:
                  type: string
                  description: List of URLs used during OAuth2 flow to validate given redirect URI.
                developer_key[scopes]:
                  type: string
                  description: List of API endpoints key is allowed to access.
          application/x-www-form-urlencoded:
            schema: *id182
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id179
                  required: *id180
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Developer_Keys
      description: "Delete an existing Canvas API key. Deleting an LTI 1.3 registration should be done via the LTI Registration API. Returns a [DeveloperKey](#developerkey) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/developer_keys/:id"
      operationId: delete_developer_keys
      tags:
      - Developer Keys
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id179
                required: *id180
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/{id}:
    put:
      summary: Put Courses Comments
      description: "Edit the given submission comment.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id"
      operationId: update_comments
      tags:
      - Submission Comments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: comment
        in: query
        required: false
        description: If this argument is present, edit the text of a comment.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Comments
      description: "Delete the given submission comment.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id"
      operationId: delete_comments
      tags:
      - Submission Comments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files:
    post:
      summary: Post Courses Files
      description: "Upload a file to attach to a submission comment See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then PUT the file\\_id to the submission API to attach it to a comment\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/files"
      operationId: create_files
      tags:
      - Submission Comments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/account_calendars:
    get:
      summary: List Account_Calendars
      description: "Returns a paginated list of account calendars available to the current user. Includes visible account calendars where the user has an account association.\n\nRequired OAuth scope: url:GET|/api/v1/account_calendars"
      operationId: list_account_calendars
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: search_term
        in: query
        required: false
        description: When included, searches available account calendars for the term. Returns matching results. Term must be at least 2 characters.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id183
                  required: *id184
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/account_calendars/{account_id}:
    get:
      summary: List Account_Calendars
      description: "Get details about a specific account calendar.\n\nRequired OAuth scope: url:GET|/api/v1/account_calendars/:account_id"
      operationId: get_account_calendars
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id183
                required: *id184
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Account_Calendars
      description: "Set an account calendar’s visibility and auto\\_subscribe values. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission on the account.\n\nRequired OAuth scope: url:PUT|/api/v1/account_calendars/:account_id"
      operationId: update_account_calendars
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: visible
        in: query
        required: false
        description: Allow administrators with ‘manage_account_calendar_events` permission to create events on this calendar, and allow users to view this calendar and its events.
        schema:
          type: boolean
      - name: auto_subscribe
        in: query
        required: false
        description: When true, users will automatically see events from this account in their calendar, even if they haven’t manually added that calendar.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id183
                required: *id184
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/account_calendars:
    put:
      summary: Put Accounts Account_Calendars
      description: "Set visibility and/or auto\\_subscribe on many calendars simultaneously. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission on the account. Accepts a JSON array of objects containing 2-3 keys each: ‘id\\` (the account’s id, required), ‘visible\\` (a boolean indicating whether the account calendar is visible), and \\`auto\\_subscribe\\` (a boolean indicating whether users should see these events in their calendar without manually subscribing). Returns the count of updated accounts.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/account_calendars"
      operationId: update_account_calendars
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Account_Calendars
      description: "Returns a paginated list of account calendars for the provided account and its first level of sub-accounts. Includes hidden calendars in the response. Requires the ‘manage\\_account\\_calendar\\_visibility\\` permission.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/account_calendars"
      operationId: get_account_calendars
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: When included, searches all descendent accounts of provided account for the term. Returns matching results. Term must be at least 2 characters. Can be combined with a filter value.
        schema:
          type: string
      - name: filter
        in: query
        required: false
        description: 'When included, only returns calendars that are either visible or hidden. Can be combined with a search term.Allowed values: visible, hidden'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id183
                  required: *id184
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/visible_calendars_count:
    get:
      summary: Get Accounts Visible_Calendars_Count
      description: "Returns the number of visible account calendars.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/visible_calendars_count"
      operationId: get_visible_calendars_count
      tags:
      - Account Calendars
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}:
    get:
      summary: Get V1 Quizzes
      description: "Get details about a single new quiz.\n\nRequired OAuth scope: url:GET|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id"
      operationId: get_quizzes
      tags:
      - New Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The id of the assignment associated with the quiz.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id185
                required: *id186
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Patch V1 Quizzes
      description: "Update a single quiz for the course.\n\nRequired OAuth scope: url:PATCH|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id"
      operationId: update_quizzes
      tags:
      - New Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: quiz[title]
        in: query
        required: false
        description: The title of the quiz.
        schema:
          type: string
      - name: quiz[assignment_group_id]
        in: query
        required: false
        description: The ID of the quiz’s assignment group.
        schema:
          type: integer
      - name: quiz[grading_type]
        in: query
        required: false
        description: 'The type of grading the assignment receives.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points'
        schema:
          type: string
      - name: quiz[instructions]
        in: query
        required: false
        description: Instructions for the quiz.
        schema:
          type: string
      - name: quiz[quiz_settings][calculator_type]
        in: query
        required: false
        description: 'Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.Allowed values: none, basic, scientific'
        schema:
          type: string
      - name: quiz[quiz_settings][filter_ip_address]
        in: query
        required: false
        description: Whether IP filtering is needed. Must be true for filters to take effect.
        schema:
          type: boolean
      - name: quiz[quiz_settings][filters][ips][]
        in: query
        required: false
        description: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there’s no restriction. Specifies the range of IP addresses where the quiz can be taken from. Should be null if there’s no restriction.
        schema:
          type: string
      - name: quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]
        in: query
        required: false
        description: Whether multiple attempts for this quiz is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][multiple_attempts][attempt_limit]
        in: query
        required: false
        description: Whether there is an attempt limit. Only set if multiple_attempts_enabled is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][multiple_attempts][score_to_keep]
        in: query
        required: false
        description: 'Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.Allowed values: average, first, highest, latest'
        schema:
          type: string
      - name: quiz[quiz_settings][multiple_attempts][cooling_period]
        in: query
        required: false
        description: Whether there is a cooling period. Only used if multiple_attempts_enabled is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][one_at_a_time_type]
        in: query
        required: false
        description: 'Specifies the settings for questions to display when quiz taking.Allowed values: none, question'
        schema:
          type: string
      - name: quiz[quiz_settings][allow_backtracking]
        in: query
        required: false
        description: Whether to allow user to return to previous questions when ‘one_at_a_time_type’ is set to ‘question’.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][result_view_restricted]
        in: query
        required: false
        description: Whether the results view is restricted for students. Must be true for any student restrictions to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_points_awarded]
        in: query
        required: false
        description: Whether points are shown. Must set result_view_restricted to true to use this parameter.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_points_possible]
        in: query
        required: false
        description: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_items]
        in: query
        required: false
        description: Whether to show items in the results view. Must be true for any items restrictions to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response]
        in: query
        required: false
        description: Whether item response is shown. Only set if display_items is true. Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response_qualifier]
        in: query
        required: false
        description: 'Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.Allowed values: always, once_per_attempt, after_last_attempt, once_after_last_attempt'
        schema:
          type: string
      - name: quiz[quiz_settings][result_view_settings][display_item_response_correctness]
        in: query
        required: false
        description: Whether item correctness is shown. Only set if display_item_response is true. Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]
        in: query
        required: false
        description: 'Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.Allowed values: always, after_last_attempt'
        schema:
          type: string
      - name: quiz[quiz_settings][result_view_settings][display_item_correct_answer]
        in: query
        required: false
        description: Whether correct answer is shown. Only set if display_item_response_correctness is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_feedback]
        in: query
        required: false
        description: Whether Item feedback is shown. Only set if display_items is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][shuffle_answers]
        in: query
        required: false
        description: Whether answers should be shuffled for students.
        schema:
          type: boolean
      - name: quiz[quiz_settings][shuffle_questions]
        in: query
        required: false
        description: Whether questions should be shuffled for students.
        schema:
          type: boolean
      - name: quiz[quiz_settings][require_student_access_code]
        in: query
        required: false
        description: Whether an access code is needed to take the quiz.
        schema:
          type: boolean
      - name: quiz[quiz_settings][student_access_code]
        in: query
        required: false
        description: Access code to restrict quiz access. Should be null if no restriction.
        schema:
          type: string
      - name: quiz[quiz_settings][has_time_limit]
        in: query
        required: false
        description: Whether there is a time limit for the quiz.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id187
              type: object
              properties:
                course_id:
                  type: string
                  description: no description
                assignment_id:
                  type: string
                  description: The id of the assignment associated with the quiz.
                quiz[points_possible]:
                  type: string
                  description: The total point value given to the quiz. Must be positive.
                quiz[due_at]:
                  type: string
                  description: When the quiz is due.
                quiz[lock_at]:
                  type: string
                  description: When to lock the quiz.
                quiz[unlock_at]:
                  type: string
                  description: When to unlock the quiz.
                quiz[quiz_settings][multiple_attempts][max_attempts]:
                  type: string
                  description: The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.
                quiz[quiz_settings][multiple_attempts][cooling_period_seconds]:
                  type: string
                  description: Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true.
                quiz[quiz_settings][result_view_settings][show_item_responses_at]:
                  type: string
                  description: When student responses should be shown to them. Only used if display_item_response is true.
                quiz[quiz_settings][result_view_settings][hide_item_responses_at]:
                  type: string
                  description: When student responses should be hidden from them. Only used if display_item_response is true.
                quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]:
                  type: string
                  description: When student response correctness should be shown to them. Only used if display_item_response_correctness is true.
                quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]:
                  type: string
                  description: When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.
                quiz[quiz_settings][session_time_limit_in_seconds]:
                  type: string
                  description: Limit the time a student can work on the quiz. Should be null if no restriction.
              required:
              - quiz[quiz_settings][multiple_attempts][cooling_period_seconds]
          application/x-www-form-urlencoded:
            schema: *id187
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id185
                required: *id186
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete V1 Quizzes
      description: "Delete a single new quiz.\n\nRequired OAuth scope: url:DELETE|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id"
      operationId: delete_quizzes
      tags:
      - New Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The id of the assignment associated with the quiz.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id185
                required: *id186
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes:
    get:
      summary: Get V1 Quizzes
      description: "Get a list of new quizzes.\n\nRequired OAuth scope: url:GET|/api/quiz/v1/courses/:course_id/quizzes"
      operationId: get_quizzes
      tags:
      - New Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id185
                  required: *id186
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post V1 Quizzes
      description: "Create a new quiz for the course.\n\nRequired OAuth scope: url:POST|/api/quiz/v1/courses/:course_id/quizzes"
      operationId: create_quizzes
      tags:
      - New Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz[title]
        in: query
        required: false
        description: The title of the quiz.
        schema:
          type: string
      - name: quiz[assignment_group_id]
        in: query
        required: false
        description: The ID of the quiz’s assignment group.
        schema:
          type: integer
      - name: quiz[grading_type]
        in: query
        required: false
        description: 'The type of grading the assignment receives.Allowed values: pass_fail, percent, letter_grade, gpa_scale, points'
        schema:
          type: string
      - name: quiz[instructions]
        in: query
        required: false
        description: Instructions for the quiz.
        schema:
          type: string
      - name: quiz[quiz_settings][calculator_type]
        in: query
        required: false
        description: 'Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.Allowed values: none, basic, scientific'
        schema:
          type: string
      - name: quiz[quiz_settings][filter_ip_address]
        in: query
        required: false
        description: Whether IP filtering is needed. Must be true for filters to take effect.
        schema:
          type: boolean
      - name: quiz[quiz_settings][filters][ips][]
        in: query
        required: false
        description: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there’s no restriction.
        schema:
          type: string
      - name: quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]
        in: query
        required: false
        description: Whether multiple attempts for this quiz is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][multiple_attempts][attempt_limit]
        in: query
        required: false
        description: Whether there is an attempt limit. Only set if multiple_attempts_enabled is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][multiple_attempts][score_to_keep]
        in: query
        required: false
        description: 'Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.Allowed values: average, first, highest, latest'
        schema:
          type: string
      - name: quiz[quiz_settings][multiple_attempts][cooling_period]
        in: query
        required: false
        description: Whether there is a cooling (waiting) period. Only used if multiple_attempts_enabled is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][one_at_a_time_type]
        in: query
        required: false
        description: 'Specifies the settings for questions to display when quiz taking.Allowed values: none, question'
        schema:
          type: string
      - name: quiz[quiz_settings][allow_backtracking]
        in: query
        required: false
        description: Whether to allow user to return to previous questions when ‘one_at_a_time_type’ is set to ‘question’.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][result_view_restricted]
        in: query
        required: false
        description: Whether the results view is restricted for students. Must be true for any student restrictions to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_points_awarded]
        in: query
        required: false
        description: Whether points are shown. Must set result_view_restricted to true to use this parameter.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_points_possible]
        in: query
        required: false
        description: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_items]
        in: query
        required: false
        description: Whether to show items in the results view. Must be true for any items restrictions to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response]
        in: query
        required: false
        description: Whether item response is shown. Only set if display_items is true. Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response_qualifier]
        in: query
        required: false
        description: 'Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.Allowed values: always, once_per_attempt, after_last_attempt, once_after_last_attempt'
        schema:
          type: string
      - name: quiz[quiz_settings][result_view_settings][display_item_response_correctness]
        in: query
        required: false
        description: Whether item correctness is shown. Only set if display_item_response is true. Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]
        in: query
        required: false
        description: 'Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.Allowed values: always, after_last_attempt'
        schema:
          type: string
      - name: quiz[quiz_settings][result_view_settings][display_item_correct_answer]
        in: query
        required: false
        description: Whether correct answer is shown. Only set if display_item_response_correctness is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][result_view_settings][display_item_feedback]
        in: query
        required: false
        description: Whether Item feedback is shown. Only set if display_items is true.
        schema:
          type: boolean
      - name: quiz[quiz_settings][shuffle_answers]
        in: query
        required: false
        description: Whether answers should be shuffled for students.
        schema:
          type: boolean
      - name: quiz[quiz_settings][shuffle_questions]
        in: query
        required: false
        description: Whether questions should be shuffled for students.
        schema:
          type: boolean
      - name: quiz[quiz_settings][require_student_access_code]
        in: query
        required: false
        description: Whether an access code is needed to take the quiz.
        schema:
          type: boolean
      - name: quiz[quiz_settings][student_access_code]
        in: query
        required: false
        description: Access code to restrict quiz access. Should be null if no restriction.
        schema:
          type: string
      - name: quiz[quiz_settings][has_time_limit]
        in: query
        required: false
        description: Whether there is a time limit for the quiz.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id188
              type: object
              properties:
                course_id:
                  type: string
                  description: no description
                quiz[points_possible]:
                  type: string
                  description: The total point value given to the quiz. Must be positive.
                quiz[due_at]:
                  type: string
                  description: When the quiz is due.
                quiz[lock_at]:
                  type: string
                  description: When to lock the quiz.
                quiz[unlock_at]:
                  type: string
                  description: When to unlock the quiz.
                quiz[quiz_settings][multiple_attempts][max_attempts]:
                  type: string
                  description: The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.
                quiz[quiz_settings][multiple_attempts][cooling_period_seconds]:
                  type: string
                  description: Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true
                quiz[quiz_settings][result_view_settings][show_item_responses_at]:
                  type: string
                  description: When student responses should be shown to them. Only used if display_item_response is true.
                quiz[quiz_settings][result_view_settings][hide_item_responses_at]:
                  type: string
                  description: When student responses should be hidden from them. Only used if display_item_response is true.
                quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]:
                  type: string
                  description: When student response correctness should be shown to them. Only used if display_item_response_correctness is true.
                quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]:
                  type: string
                  description: When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.
                quiz[quiz_settings][session_time_limit_in_seconds]:
                  type: string
                  description: Limit the time a student can work on the quiz. Should be null if no restriction.
              required:
              - quiz[quiz_settings][multiple_attempts][cooling_period_seconds]
          application/x-www-form-urlencoded:
            schema: *id188
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id185
                required: *id186
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blackout_dates:
    get:
      summary: Get Courses Blackout_Dates
      description: "Get Courses Blackout_Dates\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blackout_dates"
      operationId: get_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Blackout_Dates
      description: "Post Courses Blackout_Dates\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/blackout_dates"
      operationId: create_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Blackout_Dates
      description: "Create, update, and delete blackout dates to sync the db with the incoming data.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/blackout_dates"
      operationId: update_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: 'blackout_dates:'
        in: query
        required: false
        description: blackout_date, …An object containing the array of BlackoutDates we want to exist after this operation. For array entries, if it has an id it will be updated, if not created, and if an existing BlackoutDate id is missing from the array, it will be deleted.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/blackout_dates:
    get:
      summary: Get Accounts Blackout_Dates
      description: "Returns the list of blackout dates for the current context. Returns a list of [BlackoutDate](#blackoutdate) objects. ### [Get a single blackout date](#method.blackout_dates.show) <a href=\"#method.blackout_dates.show\" id=\"method.blackout_dates.show\"></a> [BlackoutDatesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/blackout_dates"
      operationId: get_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id189
                  required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Blackout_Dates
      description: "Create a blackout date for the given context.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/blackout_dates"
      operationId: create_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: event_title
        in: query
        required: false
        description: The title of the blackout date.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id191
              type: object
              properties:
                start_date:
                  type: string
                  description: The start date of the blackout date.
                end_date:
                  type: string
                  description: The end date of the blackout date.
          application/x-www-form-urlencoded:
            schema: *id191
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id189
                required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blackout_dates/{id}:
    get:
      summary: Get Courses Blackout_Dates
      description: "Get Courses Blackout_Dates\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blackout_dates/:id"
      operationId: get_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Blackout_Dates
      description: "Put Courses Blackout_Dates\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/blackout_dates/:id"
      operationId: update_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Blackout_Dates
      description: "Delete Courses Blackout_Dates\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/blackout_dates/:id"
      operationId: delete_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/blackout_dates/{id}:
    get:
      summary: Get Accounts Blackout_Dates
      description: "Returns the blackout date with the given id. Returns a [BlackoutDate](#blackoutdate) object. ### [New Blackout Date](#method.blackout_dates.new) <a href=\"#method.blackout_dates.new\" id=\"method.blackout_dates.new\"></a> [BlackoutDatesController#new](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/blackout_dates/:id"
      operationId: get_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id189
                required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Blackout_Dates
      description: "Update a blackout date for the given context.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/blackout_dates/:id"
      operationId: update_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: event_title
        in: query
        required: false
        description: The title of the blackout date.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id192
              type: object
              properties:
                start_date:
                  type: string
                  description: The start date of the blackout date.
                end_date:
                  type: string
                  description: The end date of the blackout date.
          application/x-www-form-urlencoded:
            schema: *id192
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id189
                required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Blackout_Dates
      description: "Delete a blackout date for the given context. Returns a [BlackoutDate](#blackoutdate) object. ### [Update a list of Blackout Dates](#method.blackout_dates.bulk_update) <a href=\"#method.blackout_dates.bulk_update\" id=\"method.blackout_dates.bulk_update\"></a> [BlackoutDatesController#bulk\\_update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/blackout_dates/:id"
      operationId: delete_blackout_dates
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id189
                  required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blackout_dates/new:
    get:
      summary: Get Courses New
      description: "Get Courses New\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blackout_dates/new"
      operationId: get_new
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/blackout_dates/new:
    get:
      summary: Get Accounts New
      description: "Initialize an unsaved Blackout Date for the given context. Returns a [BlackoutDate](#blackoutdate) object. ### [Create Blackout Date](#method.blackout_dates.create) <a href=\"#method.blackout_dates.create\" id=\"method.blackout_dates.create\"></a> [BlackoutDatesController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/blackout_dates_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/blackout_dates/new"
      operationId: get_new
      tags:
      - Blackout Dates
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id189
                required: *id190
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_periods:
    get:
      summary: Get Accounts Grading_Periods
      description: "Get Accounts Grading_Periods\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/grading_periods"
      operationId: get_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/grading_periods:
    get:
      summary: Get Courses Grading_Periods
      description: "Returns the paginated list of grading periods for the current course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/grading_periods"
      operationId: get_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/grading_periods/{id}:
    get:
      summary: Get Courses Grading_Periods
      description: "Returns the grading period with the given id\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/grading_periods/:id"
      operationId: get_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Grading_Periods
      description: "Update an existing grading period.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/grading_periods/:id"
      operationId: update_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id193
              type: object
              properties:
                grading_periods[][start_date]:
                  type: string
                  description: The date the grading period starts.
                grading_periods[][end_date]:
                  type: string
                  description: no description
                grading_periods[][weight]:
                  type: string
                  description: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
          application/x-www-form-urlencoded:
            schema: *id193
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Grading_Periods
      description: "Delete Courses Grading_Periods\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/grading_periods/:id"
      operationId: delete_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_periods/{id}:
    delete:
      summary: Delete Accounts Grading_Periods
      description: "Delete Accounts Grading_Periods\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/grading_periods/:id"
      operationId: delete_grading_periods
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/grading_periods/batch_update:
    patch:
      summary: Patch Courses Batch_Update
      description: "Patch Courses Batch_Update\n\nRequired OAuth scope: url:PATCH|/api/v1/courses/:course_id/grading_periods/batch_update"
      operationId: update_batch_update
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/grading_period_sets/{set_id}/grading_periods/batch_update:
    patch:
      summary: Patch Grading_Period_Sets Batch_Update
      description: "Update multiple grading periods\n\nRequired OAuth scope: url:PATCH|/api/v1/grading_period_sets/:set_id/grading_periods/batch_update"
      operationId: update_batch_update
      tags:
      - Grading Periods
      security:
      - bearerAuth: []
      parameters:
      - name: set_id
        in: path
        required: true
        description: The set_id identifier
        schema:
          type: string
      - name: grading_periods[][id]
        in: query
        required: false
        description: The id of the grading period. If the id parameter does not exist, a new grading period will be created.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id194
              type: object
              properties:
                set_id:
                  type: string
                  description: The id of the grading period set.
                grading_periods[][title]:
                  type: string
                  description: The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period.
                grading_periods[][start_date]:
                  type: string
                  description: The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period.
                grading_periods[][end_date]:
                  type: string
                  description: The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period.
                grading_periods[][close_date]:
                  type: string
                  description: The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period.
                grading_periods[][weight]:
                  type: string
                  description: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
              required:
              - grading_periods[][title]
              - grading_periods[][start_date]
              - grading_periods[][end_date]
              - grading_periods[][close_date]
          application/x-www-form-urlencoded:
            schema: *id194
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/terms:
    post:
      summary: Post Accounts Terms
      description: "Create a new enrollment term for the specified account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/terms"
      operationId: create_terms
      tags:
      - Enrollment Terms
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: enrollment_term[name]
        in: query
        required: false
        description: The name of the term.
        schema:
          type: string
      - name: enrollment_term[sis_term_id]
        in: query
        required: false
        description: The unique SIS identifier for the term.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id195
              type: object
              properties:
                enrollment_term[start_at]:
                  type: string
                  description: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
                enrollment_term[end_at]:
                  type: string
                  description: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
                enrollment_term[overrides][enrollment_type][start_at]:
                  type: string
                  description: The day/time the term starts, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
                enrollment_term[overrides][enrollment_type][end_at]:
                  type: string
                  description: The day/time the term ends, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
          application/x-www-form-urlencoded:
            schema: *id195
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id196
                required: *id197
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Terms
      description: "An object with a paginated list of all of the terms in the account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/terms"
      operationId: get_terms
      tags:
      - Enrollment Terms
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: workflow_state[]
        in: query
        required: false
        description: 'If set, only returns terms that are in the given state. Defaults to ‘active’.Allowed values: active, deleted, all'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“overrides”term start/end dates overridden for different enrollment types“course_count”the number of courses in each termAllowed values: overrides'
        schema:
          type: string
      - name: term_name
        in: query
        required: false
        description: If set, only returns terms that match the given search keyword. Search keyword is matched against term name.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id198
                  required: *id199
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/terms/{id}:
    put:
      summary: Put Accounts Terms
      description: "Update an existing enrollment term for the specified account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/terms/:id"
      operationId: update_terms
      tags:
      - Enrollment Terms
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: enrollment_term[name]
        in: query
        required: false
        description: The name of the term.
        schema:
          type: string
      - name: enrollment_term[sis_term_id]
        in: query
        required: false
        description: The unique SIS identifier for the term.
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id200
              type: object
              properties:
                enrollment_term[start_at]:
                  type: string
                  description: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
                enrollment_term[end_at]:
                  type: string
                  description: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
                enrollment_term[overrides][enrollment_type][start_at]:
                  type: string
                  description: The day/time the term starts, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
                enrollment_term[overrides][enrollment_type][end_at]:
                  type: string
                  description: The day/time the term ends, overridden for the given enrollment type. enrollment_type can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
          application/x-www-form-urlencoded:
            schema: *id200
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id196
                required: *id197
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Terms
      description: "Delete the specified enrollment term. Returns an [EnrollmentTerm](#enrollmentterm) object. ### [List enrollment terms](#method.terms_api.index) <a href=\"#method.terms_api.index\" id=\"method.terms_api.index\"></a> [TermsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_api_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/terms/:id"
      operationId: delete_terms
      tags:
      - Enrollment Terms
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id196
                required: *id197
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Terms
      description: "Retrieves the details for an enrollment term in the account. Includes overrides by default.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/terms/:id"
      operationId: get_terms
      tags:
      - Enrollment Terms
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id196
                required: *id197
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/scopes:
    get:
      summary: Get Accounts Scopes
      description: "A list of scopes that can be applied to developer keys and access tokens.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/scopes"
      operationId: get_scopes
      tags:
      - API Token Scopes
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: group_by
        in: query
        required: false
        description: 'The attribute to group the scopes by. By default no grouping is done.Allowed values: resource_name'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id201
                  required: *id202
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignment_groups:
    get:
      summary: Get Courses Assignment_Groups
      description: "Returns the paginated list of assignment groups for the current context. The returned groups are sorted by their position field.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignment_groups"
      operationId: get_assignment_groups
      tags:
      - Assignment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the group. “discussion_topic”, “all_dates”, “can_edit”, “assignment_visibility” & “submission” are only valid if “assignments” is also included. “score_statistics” requires that the “assignments” and “submission” options are included. The “assignment_visibility” option additionally requires that the Differentiated Assignments course feature be turned on. If “observed_users” is passed along with “assignments” and “submission”, submissions for observed users will also be included as an array.Allowed values: assignments, discussion_topic, all_dates, assignment_visibility, overrides, submission, observed_users, can_edit, score_statistics'
        schema:
          type: string
      - name: assignment_ids[]
        in: query
        required: false
        description: If “assignments” are included, optionally return only assignments having their ID in this array. This argument may also be passed as a comma separated string.
        schema:
          type: string
      - name: exclude_assignment_submission_types[]
        in: query
        required: false
        description: 'If “assignments” are included, those with the specified submission types will be excluded from the assignment groups.Allowed values: online_quiz, discussion_topic, wiki_page, external_tool'
        schema:
          type: string
      - name: override_assignment_dates
        in: query
        required: false
        description: Apply assignment overrides for each assignment, defaults to true.
        schema:
          type: boolean
      - name: grading_period_id
        in: query
        required: false
        description: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist.)
        schema:
          type: integer
      - name: scope_assignments_to_student
        in: query
        required: false
        description: If true, all assignments returned will apply to the current user in the specified grading period. If assignments apply to other students in the specified grading period, but not the current user, they will not be returned. (Requires the grading_period_id argument and grading periods to exist. In addition, the current user must be a student.)
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id203
                  required: *id204
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Assignment_Groups
      description: "Create a new assignment group for this course.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignment_groups"
      operationId: create_assignment_groups
      tags:
      - Assignment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The assignment group’s name
        schema:
          type: string
      - name: position
        in: query
        required: false
        description: The position of this assignment group in relation to the other assignment groups
        schema:
          type: integer
      - name: sis_source_id
        in: query
        required: false
        description: The sis source id of the Assignment Group
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id205
              type: object
              properties:
                group_weight:
                  type: string
                  description: The percent of the total grade that this assignment group represents
                integration_data:
                  type: string
                  description: The integration data of the Assignment Group
          application/x-www-form-urlencoded:
            schema: *id205
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id203
                required: *id204
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}:
    get:
      summary: Get Courses Assignment_Groups
      description: "Returns the assignment group with the given id.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
      operationId: get_assignment_groups
      tags:
      - Assignment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_group_id
        in: path
        required: true
        description: The assignment_group_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the group. “discussion_topic” and “assignment_visibility” and “submission” are only valid if “assignments” is also included. “score_statistics” is only valid if “submission” and “assignments” are also included. The “assignment_visibility” option additionally requires that the Differentiated Assignments course feature be turned on.Allowed values: assignments, discussion_topic, assignment_visibility, submission, score_statistics'
        schema:
          type: string
      - name: override_assignment_dates
        in: query
        required: false
        description: Apply assignment overrides for each assignment, defaults to true.
        schema:
          type: boolean
      - name: grading_period_id
        in: query
        required: false
        description: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist on the account)
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id203
                required: *id204
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Assignment_Groups
      description: "Modify an existing Assignment Group.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
      operationId: update_assignment_groups
      tags:
      - Assignment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_group_id
        in: path
        required: true
        description: The assignment_group_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The assignment group’s name
        schema:
          type: string
      - name: position
        in: query
        required: false
        description: The position of this assignment group in relation to the other assignment groups
        schema:
          type: integer
      - name: sis_source_id
        in: query
        required: false
        description: The sis source id of the Assignment Group
        schema:
          type: string
      - name: rules
        in: query
        required: false
        description: The grading rules that are applied within this assignment group See the Assignment Group object definition for format
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id206
              type: object
              properties:
                group_weight:
                  type: string
                  description: The percent of the total grade that this assignment group represents
                integration_data:
                  type: string
                  description: The integration data of the Assignment Group
          application/x-www-form-urlencoded:
            schema: *id206
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id203
                required: *id204
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Assignment_Groups
      description: "Deletes the assignment group with the given id.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
      operationId: delete_assignment_groups
      tags:
      - Assignment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_group_id
        in: path
        required: true
        description: The assignment_group_id identifier
        schema:
          type: string
      - name: move_assignments_to
        in: query
        required: false
        description: 'The ID of an active Assignment Group to which the assignments that are currently assigned to the destroyed Assignment Group will be assigned. NOTE: If this argument is not provided, any assignments in this Assignment Group will be deleted.'
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id203
                required: *id204
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/accounts/{account_id}:
    get:
      summary: List Accounts
      description: "Retrieve information on an individual account, given by local or global ID. Returns an [Account](#account) object.\n\nRequired OAuth scope: url:GET|/api/lti/accounts/:account_id"
      operationId: get_accounts
      tags:
      - Accounts (LTI)
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  uuid:
                    type: string
                  parent_account_id:
                    type: integer
                  root_account_id:
                    type: integer
                  workflow_state:
                    type: string
                required:
                - id
                - name
                - parent_account_id
                - root_account_id
                - uuid
                - workflow_state
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/reports/{report_type}/{id}:
    get:
      summary: Get Courses Reports
      description: "Returns the status of a report.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/reports/:report_type/:id"
      operationId: get_reports
      tags:
      - Course Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: report_type
        in: path
        required: true
        description: The report_type identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id207
                required: *id208
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/reports/{report_type}:
    post:
      summary: Post Courses Reports
      description: "Generates a report instance for the account. Note that “report” in the request must match one of the available report names.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/reports/:report_type"
      operationId: create_reports
      tags:
      - Course Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: report_type
        in: path
        required: true
        description: The report_type identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the course to report on.
        schema:
          type: integer
      - name: report_type
        in: query
        required: false
        description: The type of report to generate.
        schema:
          type: string
      - name: parameters[section_ids[]]
        in: query
        required: false
        description: 'The sections of the course to report on. Note: this parameter has been listed to serve as an example and may not be valid for every report.'
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id209
              type: object
              properties:
                parameters[]:
                  type: string
                  description: 'The parameters will vary for each report. A few example parameters have been provided below. Note: the example parameters provided below may not be valid for every report.'
          application/x-www-form-urlencoded:
            schema: *id209
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id207
                required: *id208
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Reports
      description: "Returns the status of the last report initiated by the current user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/reports/:report_type"
      operationId: get_reports
      tags:
      - Course Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: report_type
        in: path
        required: true
        description: The report_type identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id207
                required: *id208
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/sections:
    get:
      summary: Get Courses Sections
      description: "A paginated list of the list of sections for this course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/sections"
      operationId: get_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“students”: Associations to include with the group. Note: this is only available if you have permission to view users or grades in the course“avatar_url”: Include the avatar URLs for students returned.“enrollments”: If ‘students’ is also included, return the section enrollment for each student“total_students”: Returns the total amount of active and invited students for the course section“passback_status”: Include the grade passback status.“permissions”: Include whether section grants :manage_calendar permission to the callerAllowed values: students, avatar_url, enrollments, total_students, passback_status, permissions'
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: When included, searches course sections for the term. Returns only matching results. Term must be at least 2 characters.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id210
                  required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Sections
      description: "Creates a new section for this course.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/sections"
      operationId: create_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_section[name]
        in: query
        required: false
        description: The name of the section
        schema:
          type: string
      - name: course_section[sis_section_id]
        in: query
        required: false
        description: The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        schema:
          type: string
      - name: course_section[integration_id]
        in: query
        required: false
        description: The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        schema:
          type: string
      - name: course_section[restrict_enrollments_to_section_dates]
        in: query
        required: false
        description: Set to true to restrict user enrollments to the start and end dates of the section.
        schema:
          type: boolean
      - name: enable_sis_reactivation
        in: query
        required: false
        description: When true, will first try to re-activate a deleted section with matching sis_section_id if possible.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id212
              type: object
              properties:
                course_section[start_at]:
                  type: string
                  description: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
                course_section[end_at]:
                  type: string
                  description: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
          application/x-www-form-urlencoded:
            schema: *id212
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{id}/crosslist/{new_course_id}:
    post:
      summary: Post Sections Crosslist
      description: "Move the Section to another course. The new course may be in a different account (department), but must belong to the same root account (institution).\n\nRequired OAuth scope: url:POST|/api/v1/sections/:id/crosslist/:new_course_id"
      operationId: create_crosslist
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: new_course_id
        in: path
        required: true
        description: The new_course_id identifier
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{id}/crosslist:
    delete:
      summary: Delete Sections Crosslist
      description: "Undo cross-listing of a Section, returning it to its original course.\n\nRequired OAuth scope: url:DELETE|/api/v1/sections/:id/crosslist"
      operationId: delete_crosslist
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{id}:
    put:
      summary: Update Sections
      description: "Modify an existing section.\n\nRequired OAuth scope: url:PUT|/api/v1/sections/:id"
      operationId: update_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: course_section[name]
        in: query
        required: false
        description: The name of the section
        schema:
          type: string
      - name: course_section[sis_section_id]
        in: query
        required: false
        description: The sis ID of the section. Must have manage_sis permission to set.
        schema:
          type: string
      - name: course_section[integration_id]
        in: query
        required: false
        description: The integration_id of the section. Must have manage_sis permission to set.
        schema:
          type: string
      - name: course_section[restrict_enrollments_to_section_dates]
        in: query
        required: false
        description: Set to true to restrict user enrollments to the start and end dates of the section.
        schema:
          type: boolean
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id213
              type: object
              properties:
                course_section[start_at]:
                  type: string
                  description: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
                course_section[end_at]:
                  type: string
                  description: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
          application/x-www-form-urlencoded:
            schema: *id213
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: List Sections
      description: "Gets details about a specific section\n\nRequired OAuth scope: url:GET|/api/v1/sections/:id"
      operationId: get_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“students”: Associations to include with the group. Note: this is only available if you have permission to view users or grades in the course“avatar_url”: Include the avatar URLs for students returned.“enrollments”: If ‘students’ is also included, return the section enrollment for each student“total_students”: Returns the total amount of active and invited students for the course section“passback_status”: Include the grade passback status.“permissions”: Include whether section grants :manage_calendar permission to the callerAllowed values: students, avatar_url, enrollments, total_students, passback_status, permissions'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Sections
      description: "Delete an existing section. Returns the former Section. Returns a [Section](#section) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/sections/:id"
      operationId: delete_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id210
                required: *id211
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/sections/{id}:
    get:
      summary: Get Courses Sections
      description: "Get Courses Sections\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/sections/:id"
      operationId: get_sections
      tags:
      - Sections
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/conferences:
    get:
      summary: Get Courses Conferences
      description: "Get Courses Conferences\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/conferences"
      operationId: get_conferences
      tags:
      - Conferences
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/conferences:
    get:
      summary: Get Groups Conferences
      description: "Retrieve the paginated list of conferences for this context This API returns a JSON object containing the list of conferences, the key for the list of conferences is “conferences”\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/conferences"
      operationId: get_conferences
      tags:
      - Conferences
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id214
                  required: *id215
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/conferences:
    get:
      summary: List Conferences
      description: "Retrieve the paginated list of conferences for all courses and groups the current user belongs to This API returns a JSON object containing the list of conferences. The key for the list of conferences is “conferences”.\n\nRequired OAuth scope: url:GET|/api/v1/conferences"
      operationId: list_conferences
      tags:
      - Conferences
      security:
      - bearerAuth: []
      parameters:
      - name: state
        in: query
        required: false
        description: If set to “live”, returns only conferences that are live (i.e., have started and not finished yet). If omitted, returns all conferences for this user’s groups and courses.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id214
                  required: *id215
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes:
    get:
      summary: Get Courses Quizzes
      description: "Returns the paginated list of Quizzes in this course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes"
      operationId: get_quizzes
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial title of the quizzes to match and return.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id216
                  required: *id217
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Quizzes
      description: "Create a new quiz for this course.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes"
      operationId: create_quizzes
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz[description]
        in: query
        required: false
        description: A description of the quiz.
        schema:
          type: string
      - name: quiz[quiz_type]
        in: query
        required: false
        description: 'The type of quiz.Allowed values: practice_quiz, assignment, graded_survey, survey'
        schema:
          type: string
      - name: quiz[assignment_group_id]
        in: query
        required: false
        description: The assignment group id to put the assignment in. Defaults to the top assignment group in the course. Only valid if the quiz is graded, i.e. if quiz_type is “assignment” or “graded_survey”.
        schema:
          type: integer
      - name: quiz[time_limit]
        in: query
        required: false
        description: Time limit to take this quiz, in minutes. Set to null for no time limit. Defaults to null.
        schema:
          type: integer
      - name: quiz[shuffle_answers]
        in: query
        required: false
        description: If true, quiz answers for multiple choice questions will be randomized for each student. Defaults to false.
        schema:
          type: boolean
      - name: quiz[hide_results]
        in: query
        required: false
        description: 'Dictates whether or not quiz results are hidden from students. If null, students can see their results after any attempt. If “always”, students can never see their results. If “until_after_last_attempt”, students can only see results after their last attempt. (Only valid if allowed_attempts > 1). Defaults to null.Allowed values: always, until_after_last_attempt'
        schema:
          type: string
      - name: quiz[show_correct_answers]
        in: query
        required: false
        description: Only valid if hide_results=null If false, hides correct answers from students when quiz results are viewed. Defaults to true.
        schema:
          type: boolean
      - name: quiz[show_correct_answers_last_attempt]
        in: query
        required: false
        description: Only valid if show_correct_answers=true and allowed_attempts > 1 If true, hides correct answers from students when quiz results are viewed until they submit the last attempt for the quiz. Defaults to false.
        schema:
          type: boolean
      - name: quiz[allowed_attempts]
        in: query
        required: false
        description: Number of times a student is allowed to take a quiz. Set to -1 for unlimited attempts. Defaults to 1.
        schema:
          type: integer
      - name: quiz[scoring_policy]
        in: query
        required: true
        description: 'Required and only valid if allowed_attempts > 1. Scoring policy for a quiz that students can take multiple times. Defaults to “keep_highest”.Allowed values: keep_highest, keep_latest'
        schema:
          type: string
      - name: quiz[one_question_at_a_time]
        in: query
        required: false
        description: If true, shows quiz to student one question at a time. Defaults to false.
        schema:
          type: boolean
      - name: quiz[cant_go_back]
        in: query
        required: false
        description: Only valid if one_question_at_a_time=true If true, questions are locked after answering. Defaults to false.
        schema:
          type: boolean
      - name: quiz[access_code]
        in: query
        required: false
        description: Restricts access to the quiz with a password. For no access code restriction, set to null. Defaults to null.
        schema:
          type: string
      - name: quiz[ip_filter]
        in: query
        required: false
        description: "Restricts access to the quiz to computers in a specified IP range. Filters can be a comma-separated list of addresses, or an address followed by a maskExamples:\"192.168.217.1\"\n\"192.168.217.1/24\"\n\"192.168.217.1/255.255.255.0\"\nFor no IP filter restriction, set to null. Defaults to null."
        schema:
          type: string
      - name: quiz[published]
        in: query
        required: false
        description: 'Whether the quiz should have a draft state of published or unpublished. NOTE: If students have started taking the quiz, or there are any submissions for the quiz, you may not unpublish a quiz and will recieve an error.'
        schema:
          type: boolean
      - name: quiz[one_time_results]
        in: query
        required: false
        description: Whether students should be prevented from viewing their quiz results past the first time (right after they turn the quiz in.) Only valid if “hide_results” is not set to “always”. Defaults to false.
        schema:
          type: boolean
      - name: quiz[only_visible_to_overrides]
        in: query
        required: false
        description: Whether this quiz is only visible to overrides (Only useful if ‘differentiated assignments’ account setting is on) Defaults to false.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id218
              type: object
              properties:
                quiz[title]:
                  type: string
                  description: The quiz title.
                quiz[show_correct_answers_at]:
                  type: string
                  description: Only valid if show_correct_answers=true If set, the correct answers will be visible by students only after this date, otherwise the correct answers are visible once the student hands in their quiz submission.
                quiz[hide_correct_answers_at]:
                  type: string
                  description: Only valid if show_correct_answers=true If set, the correct answers will stop being visible once this date has passed. Otherwise, the correct answers will be visible indefinitely.
                quiz[due_at]:
                  type: string
                  description: The day/time the quiz is due. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
                quiz[lock_at]:
                  type: string
                  description: The day/time the quiz is locked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
                quiz[unlock_at]:
                  type: string
                  description: The day/time the quiz is unlocked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
          application/x-www-form-urlencoded:
            schema: *id218
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id216
                  required: *id217
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{id}:
    get:
      summary: Get Courses Quizzes
      description: "Returns the quiz with the given id. Returns a [Quiz](#quiz) object. ### [Create a quiz](#method.quizzes/quizzes_api.create) <a href=\"#method.quizzes-quizzes_api.create\" id=\"method.quizzes-quizzes_api.create\"></a> [Quizzes::QuizzesApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:id"
      operationId: get_quizzes
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id216
                required: *id217
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Quizzes
      description: "Modify an existing quiz. See the documentation for quiz creation. Additional arguments:\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/quizzes/:id"
      operationId: update_quizzes
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: quiz[notify_of_update]
        in: query
        required: false
        description: If true, notifies users that the quiz has changed. Defaults to true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id216
                required: *id217
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Quizzes
      description: "Deletes a quiz and returns the deleted quiz object. Returns a [Quiz](#quiz) object. ### [Reorder quiz items](#method.quizzes/quizzes_api.reorder) <a href=\"#method.quizzes-quizzes_api.reorder\" id=\"method.quizzes-quizzes_api.reorder\"></a> [Quizzes::QuizzesApiController#reorder](https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/quizzes/:id"
      operationId: delete_quizzes
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id216
                required: *id217
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{id}/reorder:
    post:
      summary: Post Courses Reorder
      description: "Change order of the quiz questions or groups within the quiz\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:id/reorder"
      operationId: create_reorder
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: order[][type]
        in: query
        required: false
        description: 'The type of item is either ‘question’ or ‘group’Allowed values: question, group'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id219
              type: object
              properties:
                order[][id]:
                  type: string
                  description: The associated item’s unique identifier
          application/x-www-form-urlencoded:
            schema: *id219
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{id}/validate_access_code:
    post:
      summary: Post Courses Validate_Access_Code
      description: "Accepts an access code and returns a boolean indicating whether that access code is correct\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:id/validate_access_code"
      operationId: create_validate_access_code
      tags:
      - Quizzes
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id220
              type: object
              properties:
                access_code:
                  type: string
                  description: The access code being validated
          application/x-www-form-urlencoded:
            schema: *id220
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations:
    get:
      summary: Get Accounts Lti_Registrations
      description: "Returns all LTI registrations in the specified account. Includes registrations created in this account, those set to ‘allow’ from a parent root account (like Site Admin) and ‘on’ for this account, and those enabled ‘on’ at the parent root account level.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_registrations"
      operationId: get_lti_registrations
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: per_page
        in: query
        required: false
        description: The number of registrations to return per page. Defaults to 15.
        schema:
          type: integer
      - name: page
        in: query
        required: false
        description: The page number to return. Defaults to 1.
        schema:
          type: integer
      - name: sort
        in: query
        required: false
        description: 'The field to sort by. Choices are: name, nickname, lti_version, installed, installed_by, updated_by, updated, and on. Defaults to installed.'
        schema:
          type: string
      - name: dir
        in: query
        required: false
        description: 'The order to sort the given column by. Defaults to desc.Allowed values: asc, desc'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: Array of additional data to include. Always includes [account_binding].“account_binding”the registration’s binding to the given account“configuration”the registration’s Canvas-style tool configuration, without any overlays applied.“overlaid_configuration”the registration’s Canvas-style tool configuration, with all overlays applied.“overlay”the registration’s admin-defined configuration overlay
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id221
                required: *id222
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Lti_Registrations
      description: "Create a new LTI Registration, as well as an associated Tool Configuration, Developer Key, and Registration Account binding. To install/create using Dynamic Registration, please use the [Dynamic Registration API](../external-tools/lti/file.registration).\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/lti_registrations"
      operationId: create_lti_registrations
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the tool. If one isn’t provided, it will be inferred from the configuration’s title.
        schema:
          type: string
      - name: admin_nickname
        in: query
        required: false
        description: A friendly nickname set by admins to override the tool name
        schema:
          type: string
      - name: vendor
        in: query
        required: false
        description: The vendor of the tool
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: A description of the tool. Cannot exceed 2048 bytes.
        schema:
          type: string
      - name: configuration
        in: query
        required: true
        description: Required, Lti::ToolConfiguration
        schema:
          type: string
      - name: overlay
        in: query
        required: false
        description: Lti::OverlayThe overlay configuration for the tool. Overrides values in the base configuration.
        schema:
          type: string
      - name: unified_tool_id
        in: query
        required: false
        description: The unique identifier for the tool, used for analytics. If not provided, one will be generated.
        schema:
          type: string
      - name: workflow_state
        in: query
        required: false
        description: 'The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations. Defaults to “off”.Allowed values: on, off, allow'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations/{id}:
    get:
      summary: Get Accounts Lti_Registrations
      description: "Return details about the specified LTI registration, including the configuration and account binding.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_registrations/:id"
      operationId: get_lti_registrations
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: Array of additional data to include. Always includes [account_binding configuration].“account_binding”the registration’s binding to the given account“configuration”the registration’s Canvas-style tool configuration, without any overlays applied.“overlaid_configuration”the registration’s Canvas-style tool configuration, with all overlays applied.“overlaid_legacy_configuration”the registration’s legacy-style configuration, with all overlays applied.“overlay”the registration’s admin-defined configuration overlay“overlay_versions”the registration’s overlay’s edit history
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Lti_Registrations
      description: "Update the specified LTI registration with the provided parameters. Note that updating the base tool configuration of a registration that is associated with a Dynamic Registration will return a 422. All other fields can be updated freely.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/lti_registrations/:id"
      operationId: update_lti_registrations
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the tool
        schema:
          type: string
      - name: admin_nickname
        in: query
        required: false
        description: The admin-configured friendly display name for the registration
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: A description of the tool. Cannot exceed 2048 bytes.
        schema:
          type: string
      - name: configuration
        in: query
        required: false
        description: Lti::ToolConfiguration
        schema:
          type: string
      - name: overlay
        in: query
        required: false
        description: Lti::OverlayThe overlay configuration for the tool. Overrides values in the base configuration. Note that updating the overlay of a registration associated with a Dynamic Registration IS allowed.
        schema:
          type: string
      - name: workflow_state
        in: query
        required: false
        description: 'The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations.Allowed values: on, off, allow'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Lti_Registrations
      description: "Remove the specified LTI registration\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/lti_registrations/:id"
      operationId: delete_lti_registrations
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registration_by_client_id/{client_id}:
    get:
      summary: Get Accounts Lti_Registration_By_Client_Id
      description: "Returns details about the specified LTI registration, including the configuration and account binding.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_registration_by_client_id/:client_id"
      operationId: get_lti_registration_by_client_id
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        description: The client_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations/{id}/reset:
    put:
      summary: Put Accounts Reset
      description: "Reset the specified LTI registration to its default settings in this context. This removes all customizations that were present in the overlay associated with this context.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/lti_registrations/:id/reset"
      operationId: update_reset
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations/{id}/bind:
    post:
      summary: Post Accounts Bind
      description: "Enable or disable the specified LTI registration for the specified account. To enable an inherited registration (eg from Site Admin), pass the registration’s global ID. Only allowed for root accounts.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/lti_registrations/:id/bind"
      operationId: create_bind
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id223
              type: object
              properties:
                workflow_state:
                  type: string
                  description: 'The desired state for this registration/account binding. “allow” is only valid for Site Admin registrations.Allowed values: on, off, allow'
          application/x-www-form-urlencoded:
            schema: *id223
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations/{registration_id}/deployments/{deployment_id}/context_search:
    get:
      summary: Get Accounts Context_Search
      description: "This is a utility endpoint used by the Canvas Apps UI and may not serve general use cases. Search for accounts and courses that match the search term on name, SIS id, or course code. Returns all matching accounts and courses, including those nested in sub-accounts. Returns bare-bones data about each account and course, and only up to 20 of each. Used to populate the search dropdowns when managing LTI registration availability.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_registrations/:registration_id/deployments/:deployment_id/context_search"
      operationId: get_context_search
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: registration_id
        in: path
        required: true
        description: The registration_id identifier
        schema:
          type: string
      - name: deployment_id
        in: path
        required: true
        description: The deployment_id identifier
        schema:
          type: string
      - name: only_children_of
        in: query
        required: false
        description: Account ID. If provided, only searches within this account and only returns direct children of this account.
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: String to search for in account names, SIS ids, or course codes.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id224
                required: *id225
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_registrations/{id}/overlay_history:
    get:
      summary: Get Accounts Overlay_History
      description: "Returns the overlay history items for the specified LTI registration.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_registrations/:id/overlay_history"
      operationId: get_overlay_history
      tags:
      - LTI Registrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: The maximum number of history items to return. Defaults to 101. Maximum allowed is 500.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/root_outcome_group:
    get:
      summary: Get Global Root_Outcome_Group
      description: "Get Global Root_Outcome_Group\n\nRequired OAuth scope: url:GET|/api/v1/global/root_outcome_group"
      operationId: list_root_outcome_group
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/root_outcome_group:
    get:
      summary: Get Accounts Root_Outcome_Group
      description: "Get Accounts Root_Outcome_Group\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/root_outcome_group"
      operationId: get_root_outcome_group
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/root_outcome_group:
    get:
      summary: Get Courses Root_Outcome_Group
      description: "Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group’s URL. ### [Get all outcome groups for context](#method.outcome_groups_api.index) <a href=\"#method.outcome_groups_api.index\" id=\"method.outcome_groups_api.index\"></a> [OutcomeGroupsApiController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/root_outcome_group"
      operationId: get_root_outcome_group
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups:
    get:
      summary: Get Accounts Outcome_Groups
      description: "Get Accounts Outcome_Groups\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_groups"
      operationId: get_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups:
    get:
      summary: Get Courses Outcome_Groups
      description: "Returns a list of all outcome groups in the specified context. Returns a list of [OutcomeGroup](#outcomegroup) objects. ### [Get all outcome links for context](#method.outcome_groups_api.link_index) <a href=\"#method.outcome_groups_api.link_index\" id=\"method.outcome_groups_api.link_index\"></a> [OutcomeGroupsApiController#link\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_groups"
      operationId: get_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id226
                  required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_group_links:
    get:
      summary: Get Accounts Outcome_Group_Links
      description: "Get Accounts Outcome_Group_Links\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_group_links"
      operationId: get_outcome_group_links
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_group_links:
    get:
      summary: Get Courses Outcome_Group_Links
      description: "Returns a list of all outcome links in the specified context.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_group_links"
      operationId: get_outcome_group_links
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: outcome_style
        in: query
        required: false
        description: The detail level of the outcomes. Defaults to “abbrev”. Specify “full” for more information.
        schema:
          type: string
      - name: outcome_group_style
        in: query
        required: false
        description: The detail level of the outcome groups. Defaults to “abbrev”. Specify “full” for more information.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id228
                  required: *id229
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/outcome_groups/{id}:
    get:
      summary: Get Global Outcome_Groups
      description: "Get Global Outcome_Groups\n\nRequired OAuth scope: url:GET|/api/v1/global/outcome_groups/:id"
      operationId: get_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Global Outcome_Groups
      description: "Put Global Outcome_Groups\n\nRequired OAuth scope: url:PUT|/api/v1/global/outcome_groups/:id"
      operationId: update_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Global Outcome_Groups
      description: "Delete Global Outcome_Groups\n\nRequired OAuth scope: url:DELETE|/api/v1/global/outcome_groups/:id"
      operationId: delete_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups/{id}:
    get:
      summary: Get Accounts Outcome_Groups
      description: "Get Accounts Outcome_Groups\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_groups/:id"
      operationId: get_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Outcome_Groups
      description: "Put Accounts Outcome_Groups\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/outcome_groups/:id"
      operationId: update_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Outcome_Groups
      description: "Delete Accounts Outcome_Groups\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/outcome_groups/:id"
      operationId: delete_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups/{id}:
    get:
      summary: Get Courses Outcome_Groups
      description: "Returns detailed information about a specific outcome group. Returns an [OutcomeGroup](#outcomegroup) object. ### [Update an outcome group](#method.outcome_groups_api.update) <a href=\"#method.outcome_groups_api.update\" id=\"method.outcome_groups_api.update\"></a> [OutcomeGroupsApiController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_groups/:id"
      operationId: get_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id226
                required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Outcome_Groups
      description: "Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored. When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/outcome_groups/:id"
      operationId: update_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: The new outcome group title.
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: The new outcome group description.
        schema:
          type: string
      - name: vendor_guid
        in: query
        required: false
        description: A custom GUID for the learning standard.
        schema:
          type: string
      - name: parent_outcome_group_id
        in: query
        required: false
        description: The id of the new parent outcome group.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id226
                required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Outcome_Groups
      description: "Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted. Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group’s descendants, the group deletion will fail.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/outcome_groups/:id"
      operationId: delete_outcome_groups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id226
                required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/outcome_groups/{id}/outcomes:
    get:
      summary: Get Global Outcomes
      description: "Get Global Outcomes\n\nRequired OAuth scope: url:GET|/api/v1/global/outcome_groups/:id/outcomes"
      operationId: get_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Global Outcomes
      description: "Post Global Outcomes\n\nRequired OAuth scope: url:POST|/api/v1/global/outcome_groups/:id/outcomes"
      operationId: create_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes:
    get:
      summary: Get Accounts Outcomes
      description: "Get Accounts Outcomes\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes"
      operationId: get_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Outcomes
      description: "Post Accounts Outcomes\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes"
      operationId: create_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups/{id}/outcomes:
    get:
      summary: Get Courses Outcomes
      description: "A paginated list of the immediate OutcomeLink children of the outcome group.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_groups/:id/outcomes"
      operationId: get_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_style
        in: query
        required: false
        description: The detail level of the outcomes. Defaults to “abbrev”. Specify “full” for more information.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id228
                  required: *id229
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Outcomes
      description: "Post Courses Outcomes\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/outcome_groups/:id/outcomes"
      operationId: create_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/outcome_groups/{id}/outcomes/{outcome_id}:
    put:
      summary: Put Global Outcomes
      description: "Put Global Outcomes\n\nRequired OAuth scope: url:PUT|/api/v1/global/outcome_groups/:id/outcomes/:outcome_id"
      operationId: update_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Global Outcomes
      description: "Delete Global Outcomes\n\nRequired OAuth scope: url:DELETE|/api/v1/global/outcome_groups/:id/outcomes/:outcome_id"
      operationId: delete_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}:
    put:
      summary: Put Accounts Outcomes
      description: "Put Accounts Outcomes\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id"
      operationId: update_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Outcomes
      description: "Delete Accounts Outcomes\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/outcome_groups/:id/outcomes/:outcome_id"
      operationId: delete_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}:
    put:
      summary: Put Courses Outcomes
      description: "Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome\\_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery\\_points) in a POST to the collection. If linking an existing outcome, the outcome\\_id must identify an outcome available to this context; i.e. an outcome owned by this group’s context, an outcome owned by an associated account, or a global outcome. With outcome\\_id present, any other parameters (except move\\_from) are ignored. If defining a new outcome, the outcome is created in the outcome group’s context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group. If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion’s mastery\\_points default to the maximum points in the highest rating if not specified in the mastery\\_points parameter. Any ratings lacking a description are given a default of “No description”. Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery\\_points parameter is ignored.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id"
      operationId: update_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      - name: outcome_id
        in: query
        required: false
        description: The ID of the existing outcome to link.
        schema:
          type: integer
      - name: move_from
        in: query
        required: false
        description: The ID of the old outcome group. Only used if outcome_id is present.
        schema:
          type: integer
      - name: title
        in: query
        required: true
        description: The title of the new outcome. Required if outcome_id is absent.
        schema:
          type: string
      - name: display_name
        in: query
        required: false
        description: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: The description of the new outcome.
        schema:
          type: string
      - name: vendor_guid
        in: query
        required: false
        description: A custom GUID for the learning standard.
        schema:
          type: string
      - name: mastery_points
        in: query
        required: false
        description: The mastery threshold for the embedded rubric criterion.
        schema:
          type: integer
      - name: ratings[][description]
        in: query
        required: false
        description: The description of a rating level for the embedded rubric criterion.
        schema:
          type: string
      - name: ratings[][points]
        in: query
        required: false
        description: The points corresponding to a rating level for the embedded rubric criterion.
        schema:
          type: integer
      - name: calculation_method
        in: query
        required: false
        description: 'The new calculation method. Defaults to “decaying_average” if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to “weighted_average”Allowed values: weighted_average, decaying_average, n_mastery, latest, highest, average'
        schema:
          type: string
      - name: calculation_int
        in: query
        required: false
        description: The new calculation int. Only applies if the calculation_method is “weighted_average”, “decaying_average” or “n_mastery”. Defaults to 65
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id228
                required: *id229
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Outcomes
      description: "Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/outcome_groups/:id/outcomes/:outcome_id"
      operationId: delete_outcomes
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: outcome_id
        in: path
        required: true
        description: The outcome_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id228
                required: *id229
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/outcome_groups/{id}/subgroups:
    get:
      summary: Get Global Subgroups
      description: "Get Global Subgroups\n\nRequired OAuth scope: url:GET|/api/v1/global/outcome_groups/:id/subgroups"
      operationId: get_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Global Subgroups
      description: "Post Global Subgroups\n\nRequired OAuth scope: url:POST|/api/v1/global/outcome_groups/:id/subgroups"
      operationId: create_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups/{id}/subgroups:
    get:
      summary: Get Accounts Subgroups
      description: "Get Accounts Subgroups\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_groups/:id/subgroups"
      operationId: get_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Subgroups
      description: "Post Accounts Subgroups\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/subgroups"
      operationId: create_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups/{id}/subgroups:
    get:
      summary: Get Courses Subgroups
      description: "A paginated list of the immediate OutcomeGroup children of the outcome group. Returns a list of [OutcomeGroup](#outcomegroup) objects. ### [Create a subgroup](#method.outcome_groups_api.create) <a href=\"#method.outcome_groups_api.create\" id=\"method.outcome_groups_api.create\"></a> [OutcomeGroupsApiController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_groups/:id/subgroups"
      operationId: get_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id226
                  required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Subgroups
      description: "Creates a new empty subgroup under the outcome group with the given title and description.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/outcome_groups/:id/subgroups"
      operationId: create_subgroups
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: The description of the new outcome group.
        schema:
          type: string
      - name: vendor_guid
        in: query
        required: false
        description: A custom GUID for the learning standard
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id230
              type: object
              properties:
                title:
                  type: string
                  description: The title of the new outcome group.
          application/x-www-form-urlencoded:
            schema: *id230
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id226
                required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/global/outcome_groups/{id}/import:
    post:
      summary: Post Global Import
      description: "Post Global Import\n\nRequired OAuth scope: url:POST|/api/v1/global/outcome_groups/:id/import"
      operationId: create_import
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_groups/{id}/import:
    post:
      summary: Post Accounts Import
      description: "Post Accounts Import\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/outcome_groups/:id/import"
      operationId: create_import
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_groups/{id}/import:
    post:
      summary: Post Courses Import
      description: "Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup. Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links. The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/outcome_groups/:id/import"
      operationId: create_import
      tags:
      - Outcome Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: async
        in: query
        required: false
        description: If true, perform action asynchronously. In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the progress endpoint to query the status of the operation. The imported outcome group id and url will be returned in the results of the Progress object as “outcome_group_id” and “outcome_group_url”
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id231
              type: object
              properties:
                source_outcome_group_id:
                  type: string
                  description: The ID of the source outcome group.
          application/x-www-form-urlencoded:
            schema: *id231
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id226
                required: *id227
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/line_items:
    post:
      summary: Post Courses Line_Items
      description: "Create a new Line Item\n\nRequired OAuth scope: url:POST|/api/lti/courses/:course_id/line_items"
      operationId: create_line_items
      tags:
      - Line Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        description: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        schema:
          type: string
      - name: tag
        in: query
        required: false
        description: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        schema:
          type: string
      - name: resourceLinkId
        in: query
        required: false
        description: The resource link id the Line Item should be attached to. This value should match the LTI id of the Canvas assignment associated with the tool.
        schema:
          type: string
      - name: startDateTime
        in: query
        required: false
        description: The ISO8601 date and time when the line item is made available. Corresponds to the assignment’s unlock_at date.
        schema:
          type: string
      - name: endDateTime
        in: query
        required: false
        description: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment’s due_at date.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id232
              type: object
              properties:
                scoreMaximum:
                  type: string
                  description: The maximum score for the line item. Scores created for the Line Item may exceed this value.
                label:
                  type: string
                  description: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
                https://canvas.instructure.com/lti/submission_type:
                  type: string
                  description: '(EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created.type - ‘none’ or ‘external_tool’external_tool_url - Submission URL only used when type: ‘external_tool’'
          application/x-www-form-urlencoded:
            schema: *id232
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Line_Items
      description: "List all Line Items for a course\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/line_items"
      operationId: get_line_items
      tags:
      - Line Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: tag
        in: query
        required: false
        description: If specified only Line Items with this tag will be included.
        schema:
          type: string
      - name: resource_id
        in: query
        required: false
        description: If specified only Line Items with this resource_id will be included.
        schema:
          type: string
      - name: resource_link_id
        in: query
        required: false
        description: If specified only Line Items attached to the specified resource_link_id will be included.
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: May be used to limit the number of Line Items returned in a page
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“launch_url”includes the launch URL for each line item using the “https://canvas.instructure.com/lti/launch_url” extensionAllowed values: launch_url'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/line_items/{id}:
    put:
      summary: Put Courses Line_Items
      description: "Update new Line Item\n\nRequired OAuth scope: url:PUT|/api/lti/courses/:course_id/line_items/:id"
      operationId: update_line_items
      tags:
      - Line Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: label
        in: query
        required: false
        description: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        description: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        schema:
          type: string
      - name: tag
        in: query
        required: false
        description: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        schema:
          type: string
      - name: startDateTime
        in: query
        required: false
        description: The ISO8601 date and time when the line item is made available. Corresponds to the assignment’s unlock_at date.
        schema:
          type: string
      - name: endDateTime
        in: query
        required: false
        description: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment’s due_at date.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id233
              type: object
              properties:
                scoreMaximum:
                  type: string
                  description: The maximum score for the line item. Scores created for the Line Item may exceed this value.
          application/x-www-form-urlencoded:
            schema: *id233
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Line_Items
      description: "Show existing Line Item\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/line_items/:id"
      operationId: get_line_items
      tags:
      - Line Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“launch_url”includes the launch URL for this line item using the “https://canvas.instructure.com/lti/launch_url” extensionAllowed values: launch_url'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Line_Items
      description: "Delete an existing Line Item Returns a [LineItem](#lineitem) object.\n\nRequired OAuth scope: url:DELETE|/api/lti/courses/:course_id/line_items/:id"
      operationId: delete_line_items
      tags:
      - Line Items
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/authentication/logins/{login_id}:
    get:
      summary: Get Audit Logins
      description: "List authentication events for a given login.\n\nRequired OAuth scope: url:GET|/api/v1/audit/authentication/logins/:login_id"
      operationId: get_logins
      tags:
      - Authentications Log
      security:
      - bearerAuth: []
      parameters:
      - name: login_id
        in: path
        required: true
        description: The login_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events. Events are stored for one year.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/authentication/accounts/{account_id}:
    get:
      summary: Get Audit Accounts
      description: "List authentication events for a given account.\n\nRequired OAuth scope: url:GET|/api/v1/audit/authentication/accounts/:account_id"
      operationId: get_accounts
      tags:
      - Authentications Log
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events. Events are stored for one year.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/authentication/users/{user_id}:
    get:
      summary: Get Audit Users
      description: "List authentication events for a given user.\n\nRequired OAuth scope: url:GET|/api/v1/audit/authentication/users/:user_id"
      operationId: get_users
      tags:
      - Authentications Log
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events. Events are stored for one year.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/roles:
    get:
      summary: Get Accounts Roles
      description: "A paginated list of the roles available to an account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/roles"
      operationId: get_roles
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: account_id
        in: query
        required: false
        description: The id of the account to retrieve roles for.
        schema:
          type: string
      - name: state[]
        in: query
        required: false
        description: 'Filter by role state. If this argument is omitted, only ‘active’ roles are returned.Allowed values: active, inactive'
        schema:
          type: string
      - name: show_inherited
        in: query
        required: false
        description: If this argument is true, all roles inherited from parent accounts will be included.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id234
                  required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Roles
      description: "Create a new course-level or account-level role.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/roles"
      operationId: create_roles
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: Deprecated alias for label.
        schema:
          type: string
      - name: base_role_type
        in: query
        required: false
        description: 'Specifies the role type that will be used as a base for the permissions granted to this role.Defaults to ‘AccountMembership’ if absentAllowed values: AccountMembership, StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment'
        schema:
          type: string
      - name: permissions[<X>][explicit]
        in: query
        required: false
        description: no description
        schema:
          type: boolean
      - name: permissions[<X>][enabled]
        in: query
        required: false
        description: 'If explicit is 1 and enabled is 1, permission <X> will be explicitly granted to this role. If explicit is 1 and enabled has any other value (typically 0), permission <X> will be explicitly denied to this role. If explicit is any other value (typically 0) or absent, or if enabled is absent, the value for permission <X> will be inherited from upstream. Ignored if permission <X> is locked upstream (in an ancestor account).May occur multiple times with unique values for <X>. Recognized permission names for <X> can be found on the Permissions list page.Some of these permissions are applicable only for roles on the site admin account, on a root account, or for course-level roles with a particular base role type; if a specified permission is inapplicable, it will be ignored.Additional permissions may exist based on installed plugins.A comprehensive list of all permissions are available:Course Permissions PDF: bit.ly/cnvs-course-permissionsAccount Permissions PDF: bit.ly/cnvs-acct-permissions'
        schema:
          type: boolean
      - name: permissions[<X>][locked]
        in: query
        required: false
        description: If the value is 1, permission \ will be locked downstream (new roles in subaccounts cannot override the setting). For any other value, permission \ is left unlocked. Ignored if permission \ is already locked upstream. May occur multiple times with unique values for \.
        schema:
          type: boolean
      - name: permissions[<X>][applies_to_self]
        in: query
        required: false
        description: If the value is 1, permission \ applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        schema:
          type: boolean
      - name: permissions[<X>][applies_to_descendants]
        in: query
        required: false
        description: If the value is 1, permission \ cascades down to sub accounts of the account this role is in. The default value is 1. Must be true if applies_to_self is false.This value is only returned if enabled is true.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id236
              type: object
              properties:
                label:
                  type: string
                  description: Label for the role.
          application/x-www-form-urlencoded:
            schema: *id236
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id234
                  required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/roles/{id}:
    get:
      summary: Get Accounts Roles
      description: "Retrieve information about a single role\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/roles/:id"
      operationId: get_roles
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: account_id
        in: query
        required: false
        description: The id of the account containing the role
        schema:
          type: string
      - name: role_id
        in: query
        required: false
        description: The unique identifier for the role
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: The name for the role
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id234
                required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Roles
      description: "Deactivates a custom role. This hides it in the user interface and prevents it from being assigned to new users. Existing users assigned to the role will continue to function with the same permissions they had previously. Built-in roles cannot be deactivated.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/roles/:id"
      operationId: delete_roles
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: role_id
        in: query
        required: false
        description: The unique identifier for the role
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: The name for the role
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id234
                required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Roles
      description: "Update permissions for an existing role. Recognized roles are: * TeacherEnrollment * StudentEnrollment * TaEnrollment * ObserverEnrollment * DesignerEnrollment * AccountAdmin * Any previously created custom role\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/roles/:id"
      operationId: update_roles
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: label
        in: query
        required: false
        description: The label for the role. Can only change the label of a custom role that belongs directly to the account.
        schema:
          type: string
      - name: permissions[<X>][explicit]
        in: query
        required: false
        description: no description
        schema:
          type: boolean
      - name: permissions[<X>][enabled]
        in: query
        required: false
        description: These arguments are described in the documentation for the add_role method. The list of available permissions can be found on the Permissions list page.
        schema:
          type: boolean
      - name: permissions[<X>][applies_to_self]
        in: query
        required: false
        description: If the value is 1, permission \ applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        schema:
          type: boolean
      - name: permissions[<X>][applies_to_descendants]
        in: query
        required: false
        description: If the value is 1, permission \ cascades down to sub accounts of the account this role is in. The default value is 1. Must be true if applies_to_self is false.This value is only returned if enabled is true.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id234
                  required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/roles/{id}/activate:
    post:
      summary: Post Accounts Activate
      description: "Re-activates an inactive role (allowing it to be assigned to new users)\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/roles/:id/activate"
      operationId: create_activate
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id237
              type: object
              properties:
                role_id:
                  type: string
                  description: The unique identifier for the role
                role:
                  type: string
                  description: The name for the role
          application/x-www-form-urlencoded:
            schema: *id237
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id234
                required: *id235
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/roles/permissions:
    get:
      summary: Get Accounts Permissions
      description: "List all permissions that can be granted to roles in the given account. This returns largely the same information documented on the [Permissions list page](../basics/file.permissions), with a few caveats: * Permission labels and group labels returned by this API are localized (the same text visible in the web UI). * This API includes permissions added by plugins. * This API excludes permissions that are disabled in or otherwise do not apply to the given account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/roles/permissions"
      operationId: get_permissions
      tags:
      - Roles
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: If provided, return only permissions whose key, label, group, or group_label match the search string.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id238
                  required: *id239
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts:
    get:
      summary: List Accounts
      description: "A paginated list of accounts that the current user can view or manage. Typically, students and even teachers will get an empty list in response, only account admins can view the accounts that they are in.\n\nRequired OAuth scope: url:GET|/api/v1/accounts"
      operationId: list_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“lti_guid”the ‘tool_consumer_instance_guid’ that will be sent for this account on LTI launches“registration_settings”returns info about the privacy policy and terms of use“services”returns services and whether they are enabled (requires account management permissions)“course_count”returns the number of courses directly under each account“sub_account_count”returns the number of sub-accounts directly under each accountAllowed values: lti_guid, registration_settings, services, course_count, sub_account_count'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id240
                  required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/manageable_accounts:
    get:
      summary: List Manageable_Accounts
      description: "A paginated list of accounts where the current user has permission to create or manage courses. List will be empty for students and teachers as only admins can view which accounts they are in. Returns a list of [Account](../accounts_-lti#account) objects. ### [Get accounts that users can create courses in](#method.accounts.course_creation_accounts) <a href=\"#method.accounts.course_creation_accounts\" id=\"method.accounts.course_creation_accounts\"></a> [AccountsController#course\\_creation\\_accounts](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/manageable_accounts"
      operationId: list_manageable_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id240
                  required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/course_creation_accounts:
    get:
      summary: List Course_Creation_Accounts
      description: "A paginated list of accounts where the current user has permission to create courses. Returns a list of [Account](../accounts_-lti#account) objects. ### [List accounts for course admins](#method.accounts.course_accounts) <a href=\"#method.accounts.course_accounts\" id=\"method.accounts.course_accounts\"></a> [AccountsController#course\\_accounts](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/course_creation_accounts"
      operationId: list_course_creation_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id240
                  required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/course_accounts:
    get:
      summary: List Course_Accounts
      description: "A paginated list of accounts that the current user can view through their admin course enrollments. (Teacher, TA, or designer enrollments). Only returns “id”, “name”, “workflow\\_state”, “root\\_account\\_id” and “parent\\_account\\_id” Returns a list of [Account](../accounts_-lti#account) objects. ### [Get a single account](#method.accounts.show) <a href=\"#method.accounts.show\" id=\"method.accounts.show\"></a> [AccountsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/course_accounts"
      operationId: list_course_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id240
                  required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{id}:
    get:
      summary: List Accounts
      description: "Retrieve information on an individual account, given by id or sis sis\\_account\\_id. Returns an [Account](../accounts_-lti#account) object. ### [Settings](#method.accounts.show_settings) <a href=\"#method.accounts.show_settings\" id=\"method.accounts.show_settings\"></a> [AccountsController#show\\_settings](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:id"
      operationId: get_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id240
                required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Accounts
      description: "Update an existing account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:id"
      operationId: update_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: account[name]
        in: query
        required: false
        description: Updates the account name
        schema:
          type: string
      - name: account[sis_account_id]
        in: query
        required: false
        description: Updates the account sis_account_id Must have manage_sis permission and must not be a root_account.
        schema:
          type: string
      - name: account[default_time_zone]
        in: query
        required: false
        description: The default time zone of the account. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: account[default_storage_quota_mb]
        in: query
        required: false
        description: The default course storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      - name: account[default_user_storage_quota_mb]
        in: query
        required: false
        description: The default user storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      - name: account[default_group_storage_quota_mb]
        in: query
        required: false
        description: The default group storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      - name: account[course_template_id]
        in: query
        required: false
        description: The ID of a course to be used as a template for all newly created courses. Empty means to inherit the setting from parent account, 0 means to not use a template even if a parent account has one set. The course must be marked as a template.
        schema:
          type: integer
      - name: account[parent_account_id]
        in: query
        required: false
        description: The ID of a parent account to move the account to. The new parent account must be in the same root account as the original. The hierarchy of sub-accounts will be preserved in the new parent account. The caller must be an administrator in both the original parent account and the new parent account.
        schema:
          type: integer
      - name: account[settings][restrict_student_past_view][value]
        in: query
        required: false
        description: Restrict students from viewing courses after end date
        schema:
          type: boolean
      - name: account[settings][restrict_student_past_view][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][restrict_student_future_view][value]
        in: query
        required: false
        description: Restrict students from viewing courses before start date
        schema:
          type: boolean
      - name: account[settings][microsoft_sync_enabled]
        in: query
        required: false
        description: Determines whether this account has Microsoft Teams Sync enabled or not.Note that if you are altering Microsoft Teams sync settings you must enable the Microsoft Group enrollment syncing feature flag. In addition, if you are enabling Microsoft Teams sync, you must also specify a tenant, login attribute, and a remote attribute. Specifying a suffix to use is optional.
        schema:
          type: boolean
      - name: account[settings][microsoft_sync_tenant]
        in: query
        required: false
        description: The tenant this account should use when using Microsoft Teams Sync. This should be an Azure Active Directory domain name.
        schema:
          type: string
      - name: account[settings][microsoft_sync_login_attribute]
        in: query
        required: false
        description: The attribute this account should use to lookup users when using Microsoft Teams Sync. Must be one of “sub”, “email”, “oid”, “preferred_username”, or “integration_id”.
        schema:
          type: string
      - name: account[settings][microsoft_sync_login_attribute_suffix]
        in: query
        required: false
        description: A suffix that will be appended to the result of the login attribute when associating Canvas users with Microsoft users. Must be under 255 characters and contain no whitespace. This field is optional.
        schema:
          type: string
      - name: account[settings][microsoft_sync_remote_attribute]
        in: query
        required: false
        description: The Active Directory attribute to use when associating Canvas users with Microsoft users. Must be one of “mail”, “mailNickname”, or “userPrincipalName”.
        schema:
          type: string
      - name: account[settings][restrict_student_future_view][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][lock_all_announcements][value]
        in: query
        required: false
        description: Disable comments on announcements
        schema:
          type: boolean
      - name: account[settings][lock_all_announcements][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][usage_rights_required][value]
        in: query
        required: false
        description: Copyright and license information must be provided for files before they are published.
        schema:
          type: boolean
      - name: account[settings][usage_rights_required][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][restrict_student_future_listing][value]
        in: query
        required: false
        description: Restrict students from viewing future enrollments in course list
        schema:
          type: boolean
      - name: account[settings][restrict_student_future_listing][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][conditional_release][value]
        in: query
        required: false
        description: Enable or disable individual learning paths for students based on assessment
        schema:
          type: boolean
      - name: account[settings][conditional_release][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][enable_course_paces][value]
        in: query
        required: false
        description: Enable or disable course pacing
        schema:
          type: boolean
      - name: account[settings][enable_course_paces][locked]
        in: query
        required: false
        description: Lock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][enable_as_k5_account][value]
        in: query
        required: false
        description: Enable or disable Canvas for Elementary for this account
        schema:
          type: boolean
      - name: account[settings][use_classic_font_in_k5][value]
        in: query
        required: false
        description: Whether or not the classic font is used on the dashboard. Only applies if enable_as_k5_account is true.
        schema:
          type: boolean
      - name: account[settings][horizon_account][value]
        in: query
        required: false
        description: Enable or disable Canvas Career for this account
        schema:
          type: boolean
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      - name: account[settings][lock_outcome_proficiency][value]
        in: query
        required: false
        description: DEPRECATEDRestrict instructors from changing mastery scale
        schema:
          type: boolean
      - name: account[lock_outcome_proficiency][locked]
        in: query
        required: false
        description: DEPRECATEDLock this setting for sub-accounts and courses
        schema:
          type: boolean
      - name: account[settings][lock_proficiency_calculation][value]
        in: query
        required: false
        description: DEPRECATEDRestrict instructors from changing proficiency calculation method
        schema:
          type: boolean
      - name: account[lock_proficiency_calculation][locked]
        in: query
        required: false
        description: DEPRECATEDLock this setting for sub-accounts and courses
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id242
              type: object
              properties:
                account[settings][password_policy]:
                  type: string
                  description: Hash of optional password policy configuration parameters for a root accountallow_login_suspension booleanAllow suspension of user logins upon reaching maximum_login_attemptsrequire_number_characters booleanRequire the use of number characters when setting up a new passwordrequire_symbol_characters booleanRequire the use of symbol characters when setting up a new passwordminimum_character_length integerMinimum number of characters required for a new passwordmaximum_login_attempts integerMaximum number of login attempts before a user is locked outRequired feature option:Enhance password options
                account[services]:
                  type: string
                  description: Give this a set of keys and boolean values to enable or disable services matching the keys
              required:
              - account[settings][password_policy]
          application/x-www-form-urlencoded:
            schema: *id242
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id240
                required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/settings:
    get:
      summary: Get Accounts Settings
      description: "Returns a JSON object containing a subset of settings for the specified account. It’s possible an empty set will be returned if no settings are applicable. The caller must be an Account admin with the manage\\_account\\_settings permission.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/settings"
      operationId: get_settings
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/settings/environment:
    get:
      summary: Get Settings Environment
      description: "Return a hash of global settings for the root account This is the same information supplied to the web interface as `ENV.SETTINGS`.\n\nRequired OAuth scope: url:GET|/api/v1/settings/environment"
      operationId: list_environment
      tags:
      - Accounts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/permissions:
    get:
      summary: Get Accounts Permissions
      description: "Returns permission information for the calling user and the given account. You may use ‘self\\` as the account id to check permissions against the domain root account. The caller must have an account role or admin (teacher/TA/designer) enrollment in a course in the account. See also the [Course](../courses#method.courses.permissions) and [Group](../groups#method.groups.permissions) counterparts.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/permissions"
      operationId: get_permissions
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: permissions[]
        in: query
        required: false
        description: List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sub_accounts:
    get:
      summary: Get Accounts Sub_Accounts
      description: "List accounts that are sub-accounts of the given account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sub_accounts"
      operationId: get_sub_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: recursive
        in: query
        required: false
        description: If true, the entire account tree underneath this account will be returned (though still paginated). If false, only direct sub-accounts of this account will be returned. Defaults to false.
        schema:
          type: boolean
      - name: order
        in: query
        required: false
        description: 'Sorts the accounts by id or name. Only applies when recursive is false. Defaults to id.Allowed values: id, name'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“course_count”returns the number of courses directly under each account“sub_account_count”returns the number of sub-accounts directly under each accountAllowed values: course_count, sub_account_count'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id240
                  required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Sub_Accounts
      description: "Add a new sub-account to a given account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/sub_accounts"
      operationId: create_sub_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: account[sis_account_id]
        in: query
        required: false
        description: The account’s identifier in the Student Information System.
        schema:
          type: string
      - name: account[default_storage_quota_mb]
        in: query
        required: false
        description: The default course storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      - name: account[default_user_storage_quota_mb]
        in: query
        required: false
        description: The default user storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      - name: account[default_group_storage_quota_mb]
        in: query
        required: false
        description: The default group storage quota to be used, if not otherwise specified.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id243
              type: object
              properties:
                account[name]:
                  type: string
                  description: The name of the new sub-account.
          application/x-www-form-urlencoded:
            schema: *id243
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id240
                required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/terms_of_service:
    get:
      summary: Get Accounts Terms_Of_Service
      description: "Returns the terms of service for that account Returns a [TermsOfService](#termsofservice) object. ### [Get help links](#method.accounts.help_links) <a href=\"#method.accounts.help_links\" id=\"method.accounts.help_links\"></a> [AccountsController#help\\_links](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/terms_of_service"
      operationId: get_terms_of_service
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/help_links:
    get:
      summary: Get Accounts Help_Links
      description: "Returns the help links for that account Returns a [HelpLinks](#helplinks) object. ### [Get the manually-created courses sub-account for the domain root account](#method.accounts.manually_created_courses_account) <a href=\"#method.accounts.manually_created_courses_account\" id=\"method.accounts.manually_created_courses_account\"></a> [AccountsController#manually\\_created\\_courses\\_account](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/help_links"
      operationId: get_help_links
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id244
                required: *id245
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/manually_created_courses_account:
    get:
      summary: List Manually_Created_Courses_Account
      description: "Returns the sub-account that contains manually created courses for the domain root account. Returns an [Account](../accounts_-lti#account) object. ### [List active courses in an account](#method.accounts.courses_api) <a href=\"#method.accounts.courses_api\" id=\"method.accounts.courses_api\"></a> [AccountsController#courses\\_api](https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/manually_created_courses_account"
      operationId: list_manually_created_courses_account
      tags:
      - Accounts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id240
                required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/users/{user_id}:
    delete:
      summary: Delete Accounts Users
      description: "Delete a user record from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts. WARNING: This API will allow a user to remove themselves from the account. If they do this, they won’t be able to make API calls or log into Canvas at that account.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/users/:user_id"
      operationId: delete_users
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/users:
    delete:
      summary: Delete Accounts Users
      description: "Delete multiple users from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts. WARNING: This API will allow a user to remove themselves from the account. If they do this, they won’t be able to make API calls or log into Canvas at that account.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/users"
      operationId: delete_users
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Users
      description: "A paginated list of users associated with this account. ``` @example_request curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \\ -X GET \\ -H 'Authorization: Bearer <token>' ```\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/users"
      operationId: get_users
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.Note that the API will prefer matching on canonical user ID if the ID has a numeric form. It will only search against other fields if non-numeric in form, or if the numeric value doesn’t yield any matches. Queries by administrative users will search on SIS ID, Integration ID, login ID, name, or email address
        schema:
          type: string
      - name: enrollment_type
        in: query
        required: false
        description: When set, only return users enrolled with the specified course-level base role. This can be a base role type of ‘student’, ‘teacher’, ‘ta’, ‘observer’, or ‘designer’.
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'The column to sort results by. For efficiency, use id if you intend to retrieve many pages of results. In the future, other sort options may be rate-limited after 50 pages.Allowed values: username, email, sis_id, integration_id, last_login, id'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The order to sort the given column by.Allowed values: asc, desc'
        schema:
          type: string
      - name: include_deleted_users
        in: query
        required: false
        description: When set to true and used with an account context, returns users who have deleted pseudonyms for the context
        schema:
          type: boolean
      - name: uuids
        in: query
        required: false
        description: When set, only return users with the specified UUIDs. UUIDs after the first 100 are ignored.
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Users
      description: "Create and return a new user and pseudonym for an account. *   DEPRECATED (for self-registration only) If you don’t have the “Modify login details for users“ permission, but self-registration is enabled on the account, you can still use this endpoint to register new users. Certain fields will be required, and others will be ignored (see below).\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/users"
      operationId: create_users
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user[name]
        in: query
        required: true
        description: The full name of the user. This name will be used by teacher for grading. Required if this is a self-registration.
        schema:
          type: string
      - name: user[short_name]
        in: query
        required: false
        description: User’s name as it will be displayed in discussions, messages, and comments.
        schema:
          type: string
      - name: user[sortable_name]
        in: query
        required: false
        description: User’s name as used to sort alphabetically in lists.
        schema:
          type: string
      - name: user[time_zone]
        in: query
        required: false
        description: The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: user[locale]
        in: query
        required: false
        description: The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.
        schema:
          type: string
      - name: user[terms_of_use]
        in: query
        required: true
        description: Whether the user accepts the terms of use. Required if this is a self-registration and this canvas instance requires users to accept the terms (on by default).If this is true, it will mark the user as having accepted the terms of use.
        schema:
          type: boolean
      - name: user[skip_registration]
        in: query
        required: false
        description: Automatically mark the user as registered.If this is true, it is recommended to set "pseudonym[send_confirmation]" to true as well. Otherwise, the user will not receive any messages about their account creation.The users communication channel confirmation can be skipped by setting "communication_channel[skip_confirmation]" to true as well.
        schema:
          type: boolean
      - name: pseudonym[password]
        in: query
        required: false
        description: User’s password. Cannot be set during self-registration.
        schema:
          type: string
      - name: pseudonym[sis_user_id]
        in: query
        required: false
        description: SIS ID for the user’s account. To set this parameter, the caller must be able to manage SIS permissions.
        schema:
          type: string
      - name: pseudonym[integration_id]
        in: query
        required: false
        description: Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions. The Integration ID is a secondary identifier useful for more complex SIS integrations.
        schema:
          type: string
      - name: pseudonym[send_confirmation]
        in: query
        required: false
        description: Send user notification of account creation if true. Automatically set to true during self-registration.
        schema:
          type: boolean
      - name: pseudonym[force_self_registration]
        in: query
        required: false
        description: Send user a self-registration style email if true. Setting it means the users will get a notification asking them to “complete the registration process” by clicking it, setting a password, and letting them in. Will only be executed on if the user does not need admin approval. Defaults to false unless explicitly provided.
        schema:
          type: boolean
      - name: pseudonym[authentication_provider_id]
        in: query
        required: false
        description: The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider).
        schema:
          type: string
      - name: communication_channel[type]
        in: query
        required: false
        description: The communication channel type, e.g. ‘email’ or ‘sms’.
        schema:
          type: string
      - name: communication_channel[address]
        in: query
        required: false
        description: The communication channel address, e.g. the user’s email address.
        schema:
          type: string
      - name: communication_channel[confirmation_url]
        in: query
        required: false
        description: Only valid for account admins. If true, returns the new user account confirmation URL in the response.
        schema:
          type: boolean
      - name: communication_channel[skip_confirmation]
        in: query
        required: false
        description: Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.If this is true, it is recommended to set "pseudonym[send_confirmation]" to true as well. Otherwise, the user will not receive any messages about their account creation.
        schema:
          type: boolean
      - name: force_validations
        in: query
        required: false
        description: If true, validations are performed on the newly created user (and their associated pseudonym) even if the request is made by a privileged user like an admin. When set to false, or not included in the request parameters, any newly created users are subject to validations unless the request is made by a user with a ‘manage_user_logins’ right. In which case, certain validations such as ‘require_acceptance_of_terms’ and ‘require_presence_of_name’ are not enforced. Use this parameter to return helpful json errors while building users with an admin request.
        schema:
          type: boolean
      - name: enable_sis_reactivation
        in: query
        required: false
        description: When true, will first try to re-activate a deleted user with matching sis_user_id if possible. This is commonly done with user[skip_registration] and communication_channel[skip_confirmation] so that the default communication_channel is also restored.
        schema:
          type: boolean
      - name: initial_enrollment_type
        in: query
        required: false
        description: ‘observer` if doing a self-registration with a pairing code. This allows setting the password during user creation.
        schema:
          type: string
      - name: pairing_code[code]
        in: query
        required: false
        description: If provided and valid, will link the new user as an observer to the student’s whose pairing code is given.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id248
              type: object
              properties:
                pseudonym[unique_id]:
                  type: string
                  description: User’s login ID. If this is a self-registration, it must be a valid email address.
                destination:
                  type: string
                  description: If you’re setting the password for the newly created user, you can provide this param with a valid URL pointing into this Canvas installation, and the response will include a destination field that’s a URL that you can redirect a browser to and have the newly created user automatically logged in. The URL is only valid for a short time, and must match the domain this request is directed to, and be for a well-formed path that Canvas can recognize.
          application/x-www-form-urlencoded:
            schema: *id248
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/users/bulk_update:
    put:
      summary: Put Accounts Bulk_Update
      description: "Updates multiple users in bulk.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/users/bulk_update"
      operationId: update_bulk_update
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user_ids
        in: query
        required: false
        description: ArrayThe IDs of the users to update.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id249
              type: object
              properties:
                user:
                  type: string
                  description: The attributes to update for each user.
          application/x-www-form-urlencoded:
            schema: *id249
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/users/{user_id}/restore:
    put:
      summary: Put Accounts Restore
      description: "Restore a user record along with the most recently deleted pseudonym from a Canvas root account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/users/:user_id/restore"
      operationId: update_restore
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sub_accounts/{id}:
    delete:
      summary: Delete Accounts Sub_Accounts
      description: "Cannot delete an account with active courses or active sub\\_accounts. Cannot delete a root\\_account Returns an [Account](../accounts_-lti#account) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/sub_accounts/:id"
      operationId: delete_sub_accounts
      tags:
      - Accounts
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id240
                required: *id241
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/activity_stream:
    get:
      summary: Get Users Activity_Stream
      description: "Get Users Activity_Stream\n\nRequired OAuth scope: url:GET|/api/v1/users/self/activity_stream"
      operationId: list_activity_stream
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Activity_Stream
      description: "Hide all stream items for the user\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/activity_stream"
      operationId: delete_activity_stream
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/activity_stream:
    get:
      summary: Get Users Activity_Stream
      description: "Returns the current user’s global activity stream, paginated. There are many types of objects that can be returned in the activity stream. All object types have the same basic set of shared attributes: ``` { 'created_at': '2011-07-13T09:12:00Z', 'updated_at': '2011-07-25T08:52:41Z', 'id': 1234, 'title': 'Stream Item Subject', 'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.', 'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...', 'read_state': false, 'context_type': 'course', // course|group 'course_id': 1, 'group_id': null, 'html_url': \"http://...\" // URL to the Canvas web UI for this stream item } ``` In addition, each item type has its own set of attributes available. DiscussionTopic: ``` { 'type': 'DiscussionTopic', 'discussion_topic_id': 1234, 'total_root_discussion_entries': 5, 'require_initial_post': true, 'user_has_posted': true, 'root_discussion_entries': { ... } } ``` For DiscussionTopic, the message is truncated at 4kb. Announcement: ``` { 'type': 'Announcement', 'announcement_id': 1234, 'total_root_discussion_entries': 5, 'require_initial_post': true, 'user_has_posted': null, 'root_discussion_entries': { ... } } ``` For Announcement, the message is truncated at 4kb. Conversation: ``` { 'type': 'Conversation', 'conversation_id': 1234, 'private': false, 'participant_count': 3, } ``` Message: ``` { 'type': 'Message', 'message_id': 1234, 'notification_category': 'Assignment Graded' } ``` Submission: Returns an [Submission](../submissions#Submission) with its Course and Assignment data. Conference: ``` { 'type': 'Conference', 'web_conference_id': 1234 } ``` Collaboration: ``` { 'type': 'Collaboration', 'collaboration_id': 1234 } ``` AssessmentRequest: ``` { 'type': 'AssessmentRequest', 'assessment_request_id': 1234 } ```\n\nRequired OAuth scope: url:GET|/api/v1/users/activity_stream"
      operationId: list_activity_stream
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: only_active_courses
        in: query
        required: false
        description: If true, will only return objects for courses the user is actively participating in
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/activity_stream/summary:
    get:
      summary: Get Users Summary
      description: "Returns a summary of the current user’s global activity stream.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/activity_stream/summary"
      operationId: list_summary
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: only_active_courses
        in: query
        required: false
        description: If true, will only return objects for courses the user is actively participating in
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/todo:
    get:
      summary: Get Users Todo
      description: "A paginated list of the current user’s list of todo items. There is a limit to the number of items returned. The ‘ignore\\` and \\`ignore\\_permanently\\` URLs can be used to update the user’s preferences on what items will be displayed. Performing a DELETE request against the ‘ignore\\` URL will hide that item from future todo item requests, until the item changes. Performing a DELETE request against the \\`ignore\\_permanently\\` URL will hide that item forever.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/todo"
      operationId: list_todo
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: include[]
        in: query
        required: false
        description: '“ungraded_quizzes”Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list. These will be returned under a quiz key instead of an assignment key in response elements.Allowed values: ungraded_quizzes'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/todo_item_count:
    get:
      summary: Get Users Todo_Item_Count
      description: "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting. There is a limit to the number of todo items this endpoint will count. It will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable. The largest reliable number for both counts is 100.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/todo_item_count"
      operationId: list_todo_item_count
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: include[]
        in: query
        required: false
        description: '“ungraded_quizzes”Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list. These will be returned under a quiz key instead of an assignment key in response elements.Allowed values: ungraded_quizzes'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/upcoming_events:
    get:
      summary: Get Users Upcoming_Events
      description: "A paginated list of the current user’s upcoming events.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/upcoming_events"
      operationId: list_upcoming_events
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/missing_submissions:
    get:
      summary: Get Users Missing_Submissions
      description: "A paginated list of past-due assignments for which the student does not have a submission. The user sending the request must either be the student, an admin or a parent observer using the parent app\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/missing_submissions"
      operationId: get_missing_submissions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: the student’s ID
        schema:
          type: string
      - name: observed_user_id
        in: query
        required: false
        description: Return missing submissions for the given observed user. Must be accompanied by course_ids[]. The user making the request must be observing the observed user in all the courses specified by course_ids[].
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“planner_overrides”Optionally include the assignment’s associated planner override, if it exists, for the current user. These will be returned under a planner_override key“course”Optionally include the assignments’ coursesAllowed values: planner_overrides, course'
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: '“submittable”Only return assignments that the current user can submit (i.e. filter out locked assignments)“current_grading_period”Only return missing assignments that are in the current grading periodAllowed values: submittable, current_grading_period'
        schema:
          type: string
      - name: course_ids[]
        in: query
        required: true
        description: Optionally restricts the list of past-due assignments to only those associated with the specified course IDs. Required if observed_user_id is passed.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/activity_stream/{id}:
    delete:
      summary: Delete Users Activity_Stream
      description: "Hide the given stream item.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/activity_stream/:id"
      operationId: delete_activity_stream
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/files:
    post:
      summary: Post Users Files
      description: "Upload a file to the user’s personal files section. This API endpoint is the first step in uploading a file to a user’s files. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Note that typically users will only be able to upload files to their own files section. Passing a user\\_id of `self` is an easy shortcut to specify the current user. ### [Show user details](#method.users.api_show) <a href=\"#method.users.api_show\" id=\"method.users.api_show\"></a> [UsersController#api\\_show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/files"
      operationId: create_files
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Users Files
      description: "Get Users Files\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/files"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}:
    get:
      summary: List Users
      description: "Shows details for user. Also includes an attribute “permissions”, a non-comprehensive list of permissions for the user. Example: ``` \"permissions\": { \"can_update_name\": true, // Whether the user can update their name. \"can_update_avatar\": false, // Whether the user can update their avatar. \"limit_parent_app_web_access\": false // Whether the user can interact with Canvas web from the Canvas Parent app. } ```\n\nRequired OAuth scope: url:GET|/api/v1/users/:id"
      operationId: get_users
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include on the user record. “locale”, “avatar_url”, “permissions”, “email”, and “effective_locale” will always be returnedAllowed values: uuid, last_login'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Users
      description: "Modify an existing user. To modify a user’s login, see the documentation for logins.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id"
      operationId: update_users
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: user[name]
        in: query
        required: false
        description: The full name of the user. This name will be used by teacher for grading.
        schema:
          type: string
      - name: user[short_name]
        in: query
        required: false
        description: User’s name as it will be displayed in discussions, messages, and comments.
        schema:
          type: string
      - name: user[sortable_name]
        in: query
        required: false
        description: User’s name as used to sort alphabetically in lists.
        schema:
          type: string
      - name: user[time_zone]
        in: query
        required: false
        description: The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: user[email]
        in: query
        required: false
        description: The default email address of the user.
        schema:
          type: string
      - name: user[locale]
        in: query
        required: false
        description: The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.
        schema:
          type: string
      - name: user[avatar][token]
        in: query
        required: false
        description: 'A unique representation of the avatar record to assign as the user’s current avatar. This token can be obtained from the user avatars endpoint. This supersedes the user[avatar][url] argument, and if both are included the url will be ignored. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.'
        schema:
          type: string
      - name: user[avatar][url]
        in: query
        required: false
        description: 'To set the user’s avatar to point to an external url, do not include a token and instead pass the url here. Warning: For maximum compatibility, please use 128 px square images.'
        schema:
          type: string
      - name: user[avatar][state]
        in: query
        required: false
        description: 'To set the state of user’s avatar. Only valid for account administrator.Allowed values: none, submitted, approved, locked, reported, re_reported'
        schema:
          type: string
      - name: user[title]
        in: query
        required: false
        description: Sets a title on the user profile. (See Get user profile.) Profiles must be enabled on the root account.
        schema:
          type: string
      - name: user[bio]
        in: query
        required: false
        description: Sets a bio on the user profile. (See Get user profile.) Profiles must be enabled on the root account.
        schema:
          type: string
      - name: user[pronunciation]
        in: query
        required: false
        description: Sets name pronunciation on the user profile. (See Get user profile.) Profiles and name pronunciation must be enabled on the root account.
        schema:
          type: string
      - name: user[pronouns]
        in: query
        required: false
        description: Sets pronouns on the user profile. Passing an empty string will empty the user’s pronouns Only Available Pronouns set on the root account are allowed Adding and changing pronouns must be enabled on the root account.
        schema:
          type: string
      - name: user[event]
        in: query
        required: false
        description: 'Suspends or unsuspends all logins for this user that the calling user has permission toAllowed values: suspend, unsuspend'
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/self_registration:
    post:
      summary: Post Accounts Self_Registration
      description: "Self register and return a new user and pseudonym for an account. If self-registration is enabled on the account, you can use this endpoint to self register new users.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/self_registration"
      operationId: create_self_registration
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: user[short_name]
        in: query
        required: false
        description: User’s name as it will be displayed in discussions, messages, and comments.
        schema:
          type: string
      - name: user[sortable_name]
        in: query
        required: false
        description: User’s name as used to sort alphabetically in lists.
        schema:
          type: string
      - name: user[time_zone]
        in: query
        required: false
        description: The time zone for the user. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: user[locale]
        in: query
        required: false
        description: The user’s preferred language, from the list of languages Canvas supports. This is in RFC-5646 format.
        schema:
          type: string
      - name: communication_channel[type]
        in: query
        required: false
        description: The communication channel type, e.g. ‘email’ or ‘sms’.
        schema:
          type: string
      - name: communication_channel[address]
        in: query
        required: false
        description: The communication channel address, e.g. the user’s email address.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id250
              type: object
              properties:
                user[name]:
                  type: string
                  description: The full name of the user. This name will be used by teacher for grading.
                user[terms_of_use]:
                  type: string
                  description: Whether the user accepts the terms of use.
                pseudonym[unique_id]:
                  type: string
                  description: User’s login ID. Must be a valid email address.
          application/x-www-form-urlencoded:
            schema: *id250
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/settings:
    get:
      summary: Get Users Settings
      description: "Get Users Settings\n\nRequired OAuth scope: url:GET|/api/v1/users/:id/settings"
      operationId: get_settings
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Settings
      description: "Update an existing user’s settings.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/settings"
      operationId: update_settings
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: manual_mark_as_read
        in: query
        required: false
        description: If true, require user to manually mark discussion posts as read (don’t auto-mark as read).
        schema:
          type: boolean
      - name: release_notes_badge_disabled
        in: query
        required: false
        description: If true, hide the badge for new release notes.
        schema:
          type: boolean
      - name: collapse_global_nav
        in: query
        required: false
        description: If true, the user’s page loads with the global navigation collapsed
        schema:
          type: boolean
      - name: collapse_course_nav
        in: query
        required: false
        description: If true, the user’s course pages will load with the course navigation collapsed.
        schema:
          type: boolean
      - name: hide_dashcard_color_overlays
        in: query
        required: false
        description: If true, images on course cards will be presented without being tinted to match the course color.
        schema:
          type: boolean
      - name: comment_library_suggestions_enabled
        in: query
        required: false
        description: If true, suggestions within the comment library will be shown.
        schema:
          type: boolean
      - name: elementary_dashboard_disabled
        in: query
        required: false
        description: If true, will display the user’s preferred class Canvas dashboard view instead of the canvas for elementary view.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/colors:
    get:
      summary: Get Users Colors
      description: "Returns all custom colors that have been saved for a user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:id/colors"
      operationId: get_colors
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/colors/{asset_string}:
    get:
      summary: Get Users Colors
      description: "Returns the custom colors that have been saved for a user for a given context. The asset\\_string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’.\n\nRequired OAuth scope: url:GET|/api/v1/users/:id/colors/:asset_string"
      operationId: get_colors
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: asset_string
        in: path
        required: true
        description: The asset_string identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Colors
      description: "Updates a custom color for a user for a given context. This allows colors for the calendar and elsewhere to be customized on a user basis. The asset string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/colors/:asset_string"
      operationId: update_colors
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: asset_string
        in: path
        required: true
        description: The asset_string identifier
        schema:
          type: string
      - name: hexcode
        in: query
        required: false
        description: The hexcode of the color to set for the context, if you choose to pass the hexcode as a query parameter rather than in the request body you should NOT include the ‘#’ unless you escape it first.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/text_editor_preference:
    put:
      summary: Put Users Text_Editor_Preference
      description: "Updates a user’s default choice for text editor. This allows the Choose an Editor propmts to preload the user’s preference.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/text_editor_preference"
      operationId: update_text_editor_preference
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: text_editor_preference
        in: query
        required: false
        description: 'The identifier for the editor.Allowed values: block_editor, rce, ``'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/files_ui_version_preference:
    put:
      summary: Put Users Files_Ui_Version_Preference
      description: "Updates a user’s default choice for files UI version. This allows the files UI to preload the user’s preference.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/files_ui_version_preference"
      operationId: update_files_ui_version_preference
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: files_ui_version
        in: query
        required: false
        description: 'The identifier for the files UI version.Allowed values: v1, v2'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/dashboard_positions:
    get:
      summary: Get Users Dashboard_Positions
      description: "Returns all dashboard positions that have been saved for a user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:id/dashboard_positions"
      operationId: get_dashboard_positions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Dashboard_Positions
      description: "Updates the dashboard positions for a user for a given context. This allows positions for the dashboard cards and elsewhere to be customized on a per user basis. The asset string parameter should be in the format ‘context\\_id’, for example ‘course\\_42’\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/dashboard_positions"
      operationId: update_dashboard_positions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/sessions:
    delete:
      summary: Delete Users Sessions
      description: "Terminates all sessions for a user. This includes all browser-based sessions and all access tokens, including manually generated ones. The user can immediately re-authenticate to access Canvas again if they have the current credentials. All integrations will need to be re-authorized. ### [Log users out of all mobile apps](#method.users.expire_mobile_sessions) <a href=\"#method.users.expire_mobile_sessions\" id=\"method.users.expire_mobile_sessions\"></a> [UsersController#expire\\_mobile\\_sessions](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:id/sessions"
      operationId: delete_sessions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/mobile_sessions:
    delete:
      summary: Delete Users Mobile_Sessions
      description: "Delete Users Mobile_Sessions\n\nRequired OAuth scope: url:DELETE|/api/v1/users/mobile_sessions"
      operationId: delete_mobile_sessions
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/mobile_sessions:
    delete:
      summary: Delete Users Mobile_Sessions
      description: "Permanently expires any active mobile sessions, forcing them to re-authorize. The route that takes a user id will expire mobile sessions for that user. The route that doesn’t take a user id will expire mobile sessions for **all** users in the institution. ### [Merge user into another user](#method.users.merge_into) <a href=\"#method.users.merge_into\" id=\"method.users.merge_into\"></a> [UsersController#merge\\_into](https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:id/mobile_sessions"
      operationId: delete_mobile_sessions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/merge_into/{destination_user_id}:
    put:
      summary: Put Users Merge_Into
      description: "Put Users Merge_Into\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/merge_into/:destination_user_id"
      operationId: update_merge_into
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: destination_user_id
        in: path
        required: true
        description: The destination_user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}:
    put:
      summary: Put Users Users
      description: "Merge a user into another user. To merge users, the caller must have permissions to manage both users. This should be considered irreversible. This will delete the user and move all the data into the destination user. User merge details and caveats: The from\\_user is the user that was deleted in the user\\_merge process. The destination\\_user is the user that remains, that is being split. Avatars: When both users have avatars, only the destination\\_users avatar will remain. When one user has an avatar, it will end up on the destination\\_user. Terms of Use: If either user has accepted terms of use, it will be be left as accepted. Communication Channels: All unique communication channels moved to the destination\\_user. All notification preferences are moved to the destination\\_user. Enrollments: All unique enrollments are moved to the destination\\_user. When there is an enrollment that would end up making it so that a user would be observing themselves, the enrollment is not moved over. Everything that is tied to the from\\_user at the course level relating to the enrollment is also moved to the destination\\_user. Submissions: All submissions are moved to the destination\\_user. If there are enrollments for both users in the same course, we prefer submissions that have grades then submissions that have work in them, and if there are no grades or no work, they are not moved. Other notes: Access Tokens are moved on merge. Conversations are moved on merge. Favorites are moved on merge. Courses will commonly use LTI tools. LTI tools reference the user with IDs that are stored on a user object. Merging users deletes one user and moves all records from the deleted user to the destination\\_user. These IDs are kept for all enrollments, group\\_membership, and account\\_users for the from\\_user at the time of the merge. When the destination\\_user launches an LTI tool from a course that used to be the from\\_user’s, it doesn’t appear as a new user to the tool provider. Instead it will send the stored ids. The destination\\_user’s LTI IDs remain as they were for the courses that they originally had. Future enrollments for the destination\\_user will use the IDs that are on the destination\\_user object. LTI IDs that are kept and tracked per context include lti\\_context\\_id, lti\\_id and uuid. APIs that return the LTI ids will return the one for the context that it is called for, except for the user uuid. The user UUID will display the destination\\_users uuid, and when getting the uuid from an api that is in a context that was recorded from a merge event, an additional attribute is added as past\\_uuid. When finding users by SIS ids in different accounts the destination\\_account\\_id is required. The account can also be identified by passing the domain in destination\\_account\\_id.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:id/merge_into/accounts/:destination_account_id/users/:destination_user_id"
      operationId: update_users
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: destination_account_id
        in: path
        required: true
        description: The destination_account_id identifier
        schema:
          type: string
      - name: destination_user_id
        in: path
        required: true
        description: The destination_user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id246
                required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/split:
    post:
      summary: Post Users Split
      description: "Merged users cannot be fully restored to their previous state, but this will attempt to split as much as possible to the previous state. To split a merged user, the caller must have permissions to manage all of the users logins. If there are multiple users that have been merged into one user it will split each merge into a separate user. A split can only happen within 180 days of a user merge. A user merge deletes the previous user and may be permanently deleted. In this scenario we create a new user object and proceed to move as much as possible to the new user. The user object will not have preserved the name or settings from the previous user. Some items may have been deleted during a user\\_merge that cannot be restored, and/or the data has become stale because of other changes to the objects since the time of the user\\_merge. Split users details and caveats: The from\\_user is the user that was deleted in the user\\_merge process. The destination\\_user is the user that remains, that is being split. Avatars: When both users had avatars, both will be remain. When from\\_user had an avatar and destination\\_user did not have an avatar, the destination\\_user’s avatar will be deleted if it still matches what was there are the time of the merge. If the destination\\_user’s avatar was changed at anytime after the merge, it will remain on the destination user. If the from\\_user had an avatar it will be there after split. Terms of Use: If from\\_user had not accepted terms of use, they will be prompted again to accept terms of use after the split. If the destination\\_user had not accepted terms of use, hey will be prompted again to accept terms of use after the split. If neither user had accepted the terms of use, but since the time of the merge had accepted, both will be prompted to accept terms of use. If both had accepted terms of use, this will remain. Communication Channels: All communication channels are restored to what they were prior to the merge. If a communication channel was added after the merge, it will remain on the destination\\_user. Notification preferences remain with the communication channels. Enrollments: All enrollments from the time of the merge will be moved back to where they were. Enrollments created since the time of the merge that were created by sis\\_import will go to the user that owns that sis\\_id used for the import. Other new enrollments will remain on the destination\\_user. Everything that is tied to the destination\\_user at the course level relating to an enrollment is moved to the from\\_user. When both users are in the same course prior to merge this can cause some unexpected items to move. Submissions: Unlike other items tied to a course, submissions are explicitly recorded to avoid problems with grades. All submissions were moved are restored to the spot prior to merge. All submission that were created in a course that was moved in enrollments are moved over to the from\\_user. Other notes: Access Tokens are moved back on split. Conversations are moved back on split. Favorites that existing at the time of merge are moved back on split. LTI ids are restored to how they were prior to merge.\n\nRequired OAuth scope: url:POST|/api/v1/users/:id/split"
      operationId: create_split
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id246
                  required: *id247
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/pandata_events_token:
    post:
      summary: Post Users Pandata_Events_Token
      description: "Returns a jwt auth and props token that can be used to send events to Pandata. NOTE: This is currently only available to the mobile developer keys.\n\nRequired OAuth scope: url:POST|/api/v1/users/self/pandata_events_token"
      operationId: create_pandata_events_token
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: app_key
        in: query
        required: false
        description: The pandata events appKey for this mobile app
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{id}/graded_submissions:
    get:
      summary: Get Users Graded_Submissions
      description: "Returns a list of the user’s most recently graded submissions.\n\nRequired OAuth scope: url:GET|/api/v1/users/:id/graded_submissions"
      operationId: get_graded_submissions
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Associations to include with the groupAllowed values: assignment'
        schema:
          type: string
      - name: only_current_enrollments
        in: query
        required: false
        description: Returns submissions for only currently active enrollments
        schema:
          type: boolean
      - name: only_published_assignments
        in: query
        required: false
        description: Returns submissions for only published assignments
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/profile:
    get:
      summary: Get Users Profile
      description: "Returns user profile data, including user id, name, and profile pic. When requesting the profile for the user accessing the API, the user’s calendar feed URL and LTI user id will be returned as well. Returns a [Profile](#profile) object. ### [List avatar options](#method.profile.profile_pics) <a href=\"#method.profile.profile_pics\" id=\"method.profile.profile_pics\"></a> [ProfileController#profile\\_pics](https://github.com/instructure/canvas-lms/blob/master/app/controllers/profile_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/profile"
      operationId: get_profile
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id251
                required: *id252
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/avatars:
    get:
      summary: Get Users Avatars
      description: "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the ‘type’ field is ‘attachment’, the record will include all the normal attachment json fields; otherwise it will include only the ‘url’ and ‘display\\_name’ fields. Additionally, all records will include a ‘type’ field and a ‘token’ field. The following explains each field in more detail *   type “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. *   “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. *   “gravatar”|“attachment”|“no\\_pic” The type of avatar record, for categorization purposes. url The url of the avatar token A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client. display\\_name A textual description of the avatar record id *   ‘attachment’ type only the internal id of the attachment content-type *   ‘attachment’ type only the content-type of the attachment filename *   ‘attachment’ type only the filename of the attachment size *   ‘attachment’ type only the size of the attachment\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/avatars"
      operationId: get_avatars
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id253
                  required: *id254
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/page_views:
    get:
      summary: Get Users Page_Views
      description: "Return a paginated list of the user’s page view history in json format, similar to the available CSV download. Page views are returned in descending order, newest to oldest.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/page_views"
      operationId: get_page_views
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want page views.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want page views.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id255
                  required: *id256
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/custom_data(/*scope):
    put:
      summary: Put Users *Scope)
      description: "Store arbitrary user data as JSON. Arbitrary JSON data can be stored for a User. A typical scenario would be an external site/service that registers users in Canvas and wants to capture additional info about them. The part of the URL that follows `/custom_data/` defines the scope of the request, and it reflects the structure of the JSON data to be stored or retrieved. The value `self` may be used for `user_id` to store data associated with the calling user. In order to access another user’s custom data, you must be an account administrator with permission to manage users. A namespace parameter, `ns`, is used to prevent custom\\_data collisions between different apps. This parameter is required for all custom\\_data requests. A request with Content-Type multipart/form-data or Content-Type application/x-www-form-urlencoded can only be used to store strings. Example PUT with multipart/form-data data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data=555-1234' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"555-1234\" } ``` Subscopes (or, generated scopes) can also be specified by passing values to `data`\\[`subscope`]. Example PUT specifying subscopes: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data[waist]=32in' \\ -F 'data[inseam]=34in' \\ -F 'data[chest]=40in' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"chest\": \"40in\", \"waist\": \"32in\", \"inseam\": \"34in\" } } ``` Following such a request, subsets of the stored data to be retrieved directly from a subscope. Example [GET](#method.users.get_custom_data) from a generated scope ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"40in\" } ``` If you want to store more than just strings (i.e. numbers, arrays, hashes, true, false, and/or null), you must make a request with Content-Type application/json as in the following example. Example PUT with JSON data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -H 'Content-Type: application/json' \\ -X PUT \\ -d '{ \"ns\": \"com.my-organization.canvas-app\", \"data\": { \"a-number\": 6.02e23, \"a-bool\": true, \"a-string\": \"true\", \"a-hash\": {\"a\": {\"b\": \"ohai\"}}, \"an-array\": [1, \"two\", null, false] } }' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"a-number\": 6.02e+23, \"a-bool\": true, \"a-string\": \"true\", \"a-hash\": { \"a\": { \"b\": \"ohai\" } }, \"an-array\": [1, \"two\", null, false] } } ``` If the data is an Object (as it is in the above example), then subsets of the data can be accessed by including the object’s (possibly nested) keys in the scope of a GET request. Example [GET](#method.users.get_custom_data) with a generated scope: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"ohai\" } ``` On success, this endpoint returns an object containing the data that was stored. Responds with status code 200 if the scope already contained data, and it was overwritten by the data specified in the request. Responds with status code 201 if the scope was previously empty, and the data specified in the request was successfully stored there. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the `data` parameter is missing. Responds with status code 409 if the requested scope caused a conflict and data was not stored. This happens when storing data at the requested scope would cause data at an outer scope to be lost. e.g., if `/custom_data` was {“fashion\\_app”: {“hair”: “blonde”\\}}, but you tried to ‘PUT /custom\\_data/fashion\\_app/hair/style -F data=buzz\\`, then for the request to
        succeed,the value of `/custom_data/fashion_app/hair` would have to become a hash, and its old string value would be lost. In this situation, an error object is returned with the following format: ``` { \"message\": \"write conflict for custom_data hash\", \"conflict_scope\": \"fashion_app/hair\", \"type_at_conflict\": \"String\", \"value_at_conflict\": \"blonde\" } ```\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/custom_data(/*scope)"
      operationId: update_*scope)
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id257
              type: object
              properties:
                ns:
                  type: string
                  description: The namespace under which to store the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.
                data:
                  type: string
                  description: The data you want to store for the user, at the specified scope. If the data is composed of (possibly nested) JSON objects, scopes will be generated for the (nested) keys (see examples).
          application/x-www-form-urlencoded:
            schema: *id257
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Users *Scope)
      description: "Load custom user data. Arbitrary JSON data can be stored for a User. This API call retrieves that data for a (optional) given scope. See [Store Custom Data](#method.users.set_custom_data) for details and examples. On success, this endpoint returns an object containing the data that was requested. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the specified scope does not contain any data.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/custom_data(/*scope)"
      operationId: get_*scope)
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: ns
        in: query
        required: false
        description: The namespace from which to retrieve the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users *Scope)
      description: "Delete custom user data. Arbitrary JSON data can be stored for a User. This API call deletes that data for a given scope. Without a scope, all custom\\_data is deleted. See [Store Custom Data](#method.users.set_custom_data) for details and examples of storage and retrieval. As an example, we’ll store some data, then delete a subset of it. Example [PUT](#method.users.set_custom_data) with valid JSON data: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X PUT \\ -F 'ns=com.my-organization.canvas-app' \\ -F 'data[fruit][apple]=so tasty' \\ -F 'data[fruit][kiwi]=a bit sour' \\ -F 'data[veggies][root][onion]=tear-jerking' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\", \"kiwi\": \"a bit sour\" }, \"veggies\": { \"root\": { \"onion\": \"tear-jerking\" } } } } ``` Example DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \\ -X DELETE \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"a bit sour\" } ``` Example [GET](#method.users.get_custom_data) following the above DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\" }, \"veggies\": { \"root\": { \"onion\": \"tear-jerking\" } } } } ``` Note that hashes left empty after a DELETE will get removed from the custom\\_data store. For example, following the previous commands, if we delete /custom\\_data/veggies/root/onion, then the entire /custom\\_data/veggies scope will be removed. Example DELETE that empties a parent scope: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \\ -X DELETE \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": \"tear-jerking\" } ``` Example [GET](#method.users.get_custom_data) following the above DELETE: ``` curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\ -X GET \\ -F 'ns=com.my-organization.canvas-app' \\ -H 'Authorization: Bearer <token>' ``` Response: ``` { \"data\": { \"fruit\": { \"apple\": \"so tasty\" } } } ``` On success, this endpoint returns an object containing the data that was deleted. Responds with status code 400 if the namespace parameter, `ns`, is missing or invalid, or if the specified scope does not contain any data.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/custom_data(/*scope)"
      operationId: delete_*scope)
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: ns
        in: query
        required: false
        description: The namespace from which to delete the data. This should be something other Canvas API apps aren’t likely to use, such as a reverse DNS for your organization.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/course_nicknames:
    get:
      summary: Get Users Course_Nicknames
      description: "Returns all course nicknames you have set.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/course_nicknames"
      operationId: list_course_nicknames
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id258
                  required: *id259
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Course_Nicknames
      description: "Remove all stored course nicknames.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/course_nicknames"
      operationId: delete_course_nicknames
      tags:
      - Users
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/course_nicknames/{course_id}:
    get:
      summary: Get Users Course_Nicknames
      description: "Returns the nickname for a specific course.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/course_nicknames/:course_id"
      operationId: get_course_nicknames
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id258
                required: *id259
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Course_Nicknames
      description: "Set a nickname for the given course. This will replace the course’s name in output of API calls you make subsequently, as well as in selected places in the Canvas web user interface.\n\nRequired OAuth scope: url:PUT|/api/v1/users/self/course_nicknames/:course_id"
      operationId: update_course_nicknames
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id260
              type: object
              properties:
                nickname:
                  type: string
                  description: The nickname to set. It must be non-empty and shorter than 60 characters.
          application/x-www-form-urlencoded:
            schema: *id260
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id258
                required: *id259
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Course_Nicknames
      description: "Remove the nickname for the given course. Subsequent course API calls will return the actual name for the course.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/self/course_nicknames/:course_id"
      operationId: delete_course_nicknames
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id258
                required: *id259
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/reports:
    get:
      summary: Get Courses Reports
      description: "Returns a list of all available reports.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/reports"
      operationId: get_reports
      tags:
      - Quiz Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: includes_all_versions
        in: query
        required: false
        description: Whether to retrieve reports that consider all the submissions or only the most recent. Defaults to false, ignored for item_analysis reports.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id261
                  required: *id262
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Reports
      description: "Create and return a new report for this quiz. If a previously generated report matches the arguments and is still current (i.e. there have been no new submissions), it will be returned.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/reports"
      operationId: create_reports
      tags:
      - Quiz Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: quiz_report[includes_all_versions]
        in: query
        required: false
        description: Whether the report should consider all submissions or only the most recent. Defaults to false, ignored for item_analysis.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id263
              type: object
              properties:
                quiz_report[report_type]:
                  type: string
                  description: 'The type of report to be generated.Allowed values: student_analysis, item_analysis'
                include:
                  type: string
                  description: 'Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)Allowed values: file, progress'
          application/x-www-form-urlencoded:
            schema: *id263
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id261
                required: *id262
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}:
    get:
      summary: Get Courses Reports
      description: "Returns the data for a single quiz report.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id"
      operationId: get_reports
      tags:
      - Quiz Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include
        in: query
        required: false
        description: 'Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)Allowed values: file, progress'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id261
                required: *id262
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Reports
      description: "This API allows you to cancel a previous request you issued for a report to be generated. Or in the case of an already generated report, you’d like to remove it, perhaps to generate it another time with an updated version that provides new features. You must check the report’s generation status before attempting to use this interface. See the “workflow\\_state” property of the QuizReport’s Progress object for more information. Only when the progress reports itself in a “queued” state can the generation be aborted.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id"
      operationId: delete_reports
      tags:
      - Quiz Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_imports/{id}/errors:
    get:
      summary: Get Accounts Errors
      description: "Get Accounts Errors\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sis_imports/:id/errors"
      operationId: get_errors
      tags:
      - SIS Import Errors
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/sis_import_errors:
    get:
      summary: Get Accounts Sis_Import_Errors
      description: "Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days. Example: ``` curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\ -H \"Authorization: Bearer <token>\" ``` Example: ``` curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\ -H \"Authorization: Bearer <token>\" ```\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/sis_import_errors"
      operationId: get_sis_import_errors
      tags:
      - SIS Import Errors
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: failure
        in: query
        required: false
        description: If set, only shows errors on a sis import that would cause a failure.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id264
                  required: *id265
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/tabs:
    get:
      summary: Get Accounts Tabs
      description: "Get Accounts Tabs\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/tabs"
      operationId: get_tabs
      tags:
      - Tabs
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/tabs:
    get:
      summary: Get Courses Tabs
      description: "Get Courses Tabs\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/tabs"
      operationId: get_tabs
      tags:
      - Tabs
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/tabs:
    get:
      summary: Get Groups Tabs
      description: "Get Groups Tabs\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/tabs"
      operationId: get_tabs
      tags:
      - Tabs
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/tabs:
    get:
      summary: Get Users Tabs
      description: "Returns a paginated list of navigation tabs available in the current context.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/tabs"
      operationId: get_tabs
      tags:
      - Tabs
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“course_subject_tabs”: Optional flag to return the tabs associated with a canvas_for_elementary subject course’s home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context in a canvas_for_elementary-enabled account or sub-account.Allowed values: course_subject_tabs'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/tabs/{tab_id}:
    put:
      summary: Put Courses Tabs
      description: "Home and Settings tabs are not manageable, and can’t be hidden or moved Returns a tab object\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/tabs/:tab_id"
      operationId: update_tabs
      tags:
      - Tabs
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: tab_id
        in: path
        required: true
        description: The tab_id identifier
        schema:
          type: string
      - name: position
        in: query
        required: false
        description: The new position of the tab, 1-based
        schema:
          type: integer
      - name: hidden
        in: query
        required: false
        description: no description
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id266
                required: *id267
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/statistics:
    get:
      summary: Get Courses Statistics
      description: "This endpoint provides statistics for all quiz versions, or for a specific quiz version, in which case the output is guaranteed to represent the _latest_ and most current version of the quiz.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/statistics"
      operationId: get_statistics
      tags:
      - Quiz Statistics
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: all_versions
        in: query
        required: false
        description: Whether the statistics report should include all submissions attempts.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/course_pacing/{id}:
    get:
      summary: Get Courses Course_Pacing
      description: "Returns a course pace for the course and pace id provided\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/course_pacing/:id"
      operationId: get_course_pacing
      tags:
      - Course Pace
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the course
        schema:
          type: string
      - name: course_pace_id
        in: query
        required: false
        description: The id of the course_pace
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Course_Pacing
      description: "Returns the updated course pace\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/course_pacing/:id"
      operationId: update_course_pacing
      tags:
      - Course Pace
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: exclude_weekends
        in: query
        required: false
        description: Course pace dates excludes weekends if true
        schema:
          type: boolean
      - name: selected_days_to_skip
        in: query
        required: false
        description: ArrayCourse pace dates excludes weekends if true
        schema:
          type: string
      - name: hard_end_dates
        in: query
        required: false
        description: Course pace uess hard end dates if true
        schema:
          type: boolean
      - name: workflow_state
        in: query
        required: false
        description: The state of the course pace
        schema:
          type: string
      - name: course_pace_module_item_attributes[]
        in: query
        required: false
        description: Module Items attributes
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id268
              type: object
              properties:
                course_id:
                  type: string
                  description: The id of the course
                course_pace_id:
                  type: string
                  description: The id of the course pace
                end_date:
                  type: string
                  description: End date of the course pace
          application/x-www-form-urlencoded:
            schema: *id268
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Course_Pacing
      description: "Returns the updated course pace\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/course_pacing/:id"
      operationId: delete_course_pacing
      tags:
      - Course Pace
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the course
        schema:
          type: string
      - name: course_pace_id
        in: query
        required: false
        description: The id of the course_pace
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/course_pacing:
    post:
      summary: Post Courses Course_Pacing
      description: "Creates a new course pace with specified parameters.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/course_pacing"
      operationId: create_course_pacing
      tags:
      - Course Pace
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: end_date_context
        in: query
        required: false
        description: End date context (course, section, hupothetical)
        schema:
          type: string
      - name: start_date_context
        in: query
        required: false
        description: Start date context (course, section, hupothetical)
        schema:
          type: string
      - name: exclude_weekends
        in: query
        required: false
        description: Course pace dates excludes weekends if true
        schema:
          type: boolean
      - name: selected_days_to_skip
        in: query
        required: false
        description: ArrayCourse pace dates excludes weekends if true
        schema:
          type: string
      - name: hard_end_dates
        in: query
        required: false
        description: Course pace uess hard end dates if true
        schema:
          type: boolean
      - name: workflow_state
        in: query
        required: false
        description: The state of the course pace
        schema:
          type: string
      - name: course_pace_module_item_attributes[]
        in: query
        required: false
        description: Module Items attributes
        schema:
          type: string
      - name: context_id
        in: query
        required: false
        description: Pace Context ID
        schema:
          type: integer
      - name: context_type
        in: query
        required: false
        description: Pace Context Type (Course, Section, User)
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id269
              type: object
              properties:
                course_id:
                  type: string
                  description: The id of the course
                end_date:
                  type: string
                  description: End date of the course pace
                start_date:
                  type: string
                  description: Start date of the course pace
          application/x-www-form-urlencoded:
            schema: *id269
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/brand_variables:
    get:
      summary: List Brand_Variables
      description: "Will redirect to a static json file that has all of the brand variables used by this account. Even though this is a redirect, do not store the redirected url since if the account makes any changes it will redirect to a new url. Needs no authentication.\n\nRequired OAuth scope: url:GET|/api/v1/brand_variables"
      operationId: list_brand_variables
      tags:
      - Brand Configs
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/brand_variables:
    get:
      summary: Get Accounts Brand_Variables
      description: "Get Accounts Brand_Variables\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/brand_variables"
      operationId: get_brand_variables
      tags:
      - Brand Configs
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/brand_variables:
    get:
      summary: Get Courses Brand_Variables
      description: "Will redirect to a static json file that has all of the brand variables used by the provided context. Even though this is a redirect, do not store the redirected url since if the sub-account makes any changes it will redirect to a new url.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/brand_variables"
      operationId: get_brand_variables
      tags:
      - Brand Configs
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/accommodations:
    post:
      summary: Post V1 Accommodations
      description: "Apply accommodations at the **quiz level** for students in a specific assignment.\n\nRequired OAuth scope: url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/accommodations"
      operationId: create_accommodations
      tags:
      - New Quizzes Accommodations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: extra_time
        in: query
        required: false
        description: 'Amount of extra time in minutes granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).'
        schema:
          type: integer
      - name: extra_attempts
        in: query
        required: false
        description: Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.
        schema:
          type: integer
      - name: reduce_choices_enabled
        in: query
        required: false
        description: If ‘true’, removes one incorrect answer from multiple-choice questions with 4 or more options.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id270
              type: object
              properties:
                course_id:
                  type: string
                  description: The ID of the course where the quiz is located.
                assignment_id:
                  type: string
                  description: The ID of the assignment/quiz that needs accommodations.
                user_id:
                  type: string
                  description: The Canvas user ID of the student receiving accommodations.
          application/x-www-form-urlencoded:
            schema: *id270
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id271
                required: *id272
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/accommodations:
    post:
      summary: Post V1 Accommodations
      description: "Apply accommodations at the **course level** for students enrolled in a given course.\n\nRequired OAuth scope: url:POST|/api/quiz/v1/courses/:course_id/accommodations"
      operationId: create_accommodations
      tags:
      - New Quizzes Accommodations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: extra_time
        in: query
        required: false
        description: 'Amount of extra time in minutes granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).'
        schema:
          type: integer
      - name: apply_to_in_progress_quiz_sessions
        in: query
        required: false
        description: If ‘true’, applies the accommodation to currently in-progress quiz sessions.
        schema:
          type: boolean
      - name: reduce_choices_enabled
        in: query
        required: false
        description: If ‘true’, removes one incorrect answer from multiple-choice questions with 4 or more options.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id273
              type: object
              properties:
                course_id:
                  type: string
                  description: The ID of the course where accommodations should be applied.
                user_id:
                  type: string
                  description: The Canvas user ID of the student receiving accommodations.
          application/x-www-form-urlencoded:
            schema: *id273
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id271
                required: *id272
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/sis/accounts/{account_id}/assignments:
    get:
      summary: Get Accounts Assignments
      description: "Get Accounts Assignments\n\nRequired OAuth scope: url:GET|/api/sis/accounts/:account_id/assignments"
      operationId: get_assignments
      tags:
      - SIS Integration
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/sis/courses/{course_id}/assignments:
    get:
      summary: Get Courses Assignments
      description: "Retrieve a list of published assignments flagged as “post\\_to\\_sis”. See the Assignments API for more details on assignments. Assignment group and section information are included for convenience. Each section includes course information for the origin course and the cross-listed course, if applicable. The ‘origin\\_course\\` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the \\`origin\\_course\\` should be preferred when performing integration work. The \\`xlist\\_course\\` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details. The ‘override\\` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object’s keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides. restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include. ``` \"student_overrides\":: returns individual student override information ```\n\nRequired OAuth scope: url:GET|/api/sis/courses/:course_id/assignments"
      operationId: get_assignments
      tags:
      - SIS Integration
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: account_id
        in: query
        required: false
        description: The ID of the account to query.
        schema:
          type: integer
      - name: course_id
        in: query
        required: false
        description: The ID of the course to query.
        schema:
          type: integer
      - name: starts_before
        in: query
        required: false
        description: When searching on an account,
        schema:
          type: string
      - name: ends_after
        in: query
        required: false
        description: When searching on an account,
        schema:
          type: string
      - name: include
        in: query
        required: false
        description: 'Array of additionalAllowed values: student_overrides'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/sis/courses/{course_id}/disable_post_to_sis:
    put:
      summary: Put Courses Disable_Post_To_Sis
      description: "Disable all assignments flagged as “post\\_to\\_sis”, with the option of making it specific to a grading period, in a course. On success, the response will be 204 No Content with an empty body. On failure, the response will be 400 Bad Request with a body of a specific message. For disabling assignments in a specific grading period\n\nRequired OAuth scope: url:PUT|/api/sis/courses/:course_id/disable_post_to_sis"
      operationId: update_disable_post_to_sis
      tags:
      - SIS Integration
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The ID of the course.
        schema:
          type: integer
      - name: grading_period_id
        in: query
        required: false
        description: The ID of the grading period.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_objects/{media_object_id}/media_tracks:
    get:
      summary: Get Media_Objects Media_Tracks
      description: "Get Media_Objects Media_Tracks\n\nRequired OAuth scope: url:GET|/api/v1/media_objects/:media_object_id/media_tracks"
      operationId: get_media_tracks
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: media_object_id
        in: path
        required: true
        description: The media_object_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Media_Objects Media_Tracks
      description: "Put Media_Objects Media_Tracks\n\nRequired OAuth scope: url:PUT|/api/v1/media_objects/:media_object_id/media_tracks"
      operationId: update_media_tracks
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: media_object_id
        in: path
        required: true
        description: The media_object_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_attachments/{attachment_id}/media_tracks:
    get:
      summary: Get Media_Attachments Media_Tracks
      description: "List the media tracks associated with a media object or attachment\n\nRequired OAuth scope: url:GET|/api/v1/media_attachments/:attachment_id/media_tracks"
      operationId: get_media_tracks
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: attachment_id
        in: path
        required: true
        description: The attachment_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=contentAllowed values: content, webvtt_content, updated_at, created_at'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id274
                  required: *id275
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Media_Attachments Media_Tracks
      description: "Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.\n\nRequired OAuth scope: url:PUT|/api/v1/media_attachments/:attachment_id/media_tracks"
      operationId: update_media_tracks
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: attachment_id
        in: path
        required: true
        description: The attachment_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=contentAllowed values: content, webvtt_content, updated_at, created_at'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id274
                  required: *id275
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_objects:
    get:
      summary: List Media_Objects
      description: "List Media_Objects\n\nRequired OAuth scope: url:GET|/api/v1/media_objects"
      operationId: list_media_objects
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/media_objects:
    get:
      summary: Get Courses Media_Objects
      description: "Get Courses Media_Objects\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/media_objects"
      operationId: get_media_objects
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/media_objects:
    get:
      summary: Get Groups Media_Objects
      description: "Get Groups Media_Objects\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/media_objects"
      operationId: get_media_objects
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_attachments:
    get:
      summary: List Media_Attachments
      description: "List Media_Attachments\n\nRequired OAuth scope: url:GET|/api/v1/media_attachments"
      operationId: list_media_attachments
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/media_attachments:
    get:
      summary: Get Courses Media_Attachments
      description: "Get Courses Media_Attachments\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/media_attachments"
      operationId: get_media_attachments
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/media_attachments:
    get:
      summary: Get Groups Media_Attachments
      description: "Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/media_attachments"
      operationId: get_media_attachments
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'Field to sort on. Default is “title”titlesorts on user_entered_title if available, title if not.created_atsorts on the object’s creation time.Allowed values: title, created_at'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'Sort direction. Default is “asc”Allowed values: asc, desc'
        schema:
          type: string
      - name: exclude[]
        in: query
        required: false
        description: 'Array of data to exclude. By excluding “sources” and “tracks”, the api will not need to query kaltura, which greatly speeds up its response.sourcesDo not query kaltura for media_sourcestracksDo not query kaltura for media_tracksAllowed values: sources, tracks'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id276
                  required: *id277
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_objects/{media_object_id}:
    put:
      summary: Update Media_Objects
      description: "Update Media_Objects\n\nRequired OAuth scope: url:PUT|/api/v1/media_objects/:media_object_id"
      operationId: update_media_objects
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: media_object_id
        in: path
        required: true
        description: The media_object_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/media_attachments/{attachment_id}:
    put:
      summary: Update Media_Attachments
      description: "Updates the title of a media object.\n\nRequired OAuth scope: url:PUT|/api/v1/media_attachments/:attachment_id"
      operationId: update_media_attachments
      tags:
      - Media Objects
      security:
      - bearerAuth: []
      parameters:
      - name: attachment_id
        in: path
        required: true
        description: The attachment_id identifier
        schema:
          type: string
      - name: user_entered_title
        in: query
        required: false
        description: The new title.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/gradebook_history/days:
    get:
      summary: Get Courses Days
      description: "Returns a map of dates to grader/assignment groups\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/gradebook_history/days"
      operationId: get_days
      tags:
      - Gradebook History
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the contextual course for this API call
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id278
                  required: *id279
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/gradebook_history/{date}:
    get:
      summary: Get Courses Gradebook_History
      description: "Returns the graders who worked on this day, along with the assignments they worked on. More details can be obtained by selecting a grader and assignment and calling the ‘submissions’ api endpoint for a given date.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/gradebook_history/:date"
      operationId: get_gradebook_history
      tags:
      - Gradebook History
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: date
        in: path
        required: true
        description: The date identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the contextual course for this API call
        schema:
          type: string
      - name: date
        in: query
        required: false
        description: The date for which you would like to see detailed information
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id280
                  required: *id281
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions:
    get:
      summary: Get Courses Submissions
      description: "Gives a nested list of submission versions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/gradebook_history/:date/graders/:grader_id/assignments/:assignment_id/submissions"
      operationId: get_submissions
      tags:
      - Gradebook History
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: date
        in: path
        required: true
        description: The date identifier
        schema:
          type: string
      - name: grader_id
        in: path
        required: true
        description: The grader_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the contextual course for this API call
        schema:
          type: string
      - name: date
        in: query
        required: false
        description: The date for which you would like to see submissions
        schema:
          type: string
      - name: grader_id
        in: query
        required: false
        description: The ID of the grader for which you want to see submissions
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The ID of the assignment for which you want to see submissions
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id282
                  required: *id283
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/gradebook_history/feed:
    get:
      summary: Get Courses Feed
      description: "Gives a paginated, uncollated list of submission versions for all matching submissions in the context. This SubmissionVersion objects will not include the `new_grade` or `previous_grade` keys, only the `grade`; same for `graded_at` and `grader`.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/gradebook_history/feed"
      operationId: get_feed
      tags:
      - Gradebook History
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The id of the contextual course for this API call
        schema:
          type: string
      - name: assignment_id
        in: query
        required: false
        description: The ID of the assignment for which you want to see submissions. If absent, versions of submissions from any assignment in the course are included.
        schema:
          type: integer
      - name: user_id
        in: query
        required: false
        description: The ID of the user for which you want to see submissions. If absent, versions of submissions from any user in the course are included.
        schema:
          type: integer
      - name: ascending
        in: query
        required: false
        description: Returns submission versions in ascending date order (oldest first). If absent, returns submission versions in descending date order (newest first).
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id284
                  required: *id285
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_imports(/group/{learning_outcome_group_id}):
    post:
      summary: Post Accounts Group
      description: "Post Accounts Group\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/outcome_imports(/group/:learning_outcome_group_id)"
      operationId: create_group
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: learning_outcome_group_id
        in: path
        required: true
        description: The learning_outcome_group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_imports(/group/{learning_outcome_group_id}):
    post:
      summary: Post Courses Group
      description: "Import outcomes into Canvas. For more information on the format that’s expected here, please see the “Outcomes CSV” section in the API docs.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/outcome_imports(/group/:learning_outcome_group_id)"
      operationId: create_group
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: learning_outcome_group_id
        in: path
        required: true
        description: The learning_outcome_group_id identifier
        schema:
          type: string
      - name: import_type
        in: query
        required: false
        description: Choose the data format for reading outcome data. With a standard Canvas install, this option can only be ‘instructure_csv’, and if unprovided, will be assumed to be so. Can be part of the query string.
        schema:
          type: string
      - name: attachment
        in: query
        required: true
        description: "There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\ncurl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\ncurl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'"
        schema:
          type: string
      - name: extension
        in: query
        required: false
        description: Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id286
                required: *id287
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_imports/{id}:
    get:
      summary: Get Accounts Outcome_Imports
      description: "Get Accounts Outcome_Imports\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_imports/:id"
      operationId: get_outcome_imports
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_imports/{id}:
    get:
      summary: Get Courses Outcome_Imports
      description: "Get the status of an already created Outcome import. Pass ‘latest’ for the outcome import id for the latest import. ``` Examples: curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" ``` Returns an [OutcomeImport](#outcomeimport) object. ### [Get IDs of outcome groups created after successful import](#method.outcome_imports_api.created_group_ids) <a href=\"#method.outcome_imports_api.created_group_ids\" id=\"method.outcome_imports_api.created_group_ids\"></a> [OutcomeImportsApiController#created\\_group\\_ids](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_imports_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_imports/:id"
      operationId: get_outcome_imports
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id286
                required: *id287
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_imports/{id}/created_group_ids:
    get:
      summary: Get Accounts Created_Group_Ids
      description: "Get Accounts Created_Group_Ids\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_imports/:id/created_group_ids"
      operationId: get_created_group_ids
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_imports/{id}/created_group_ids:
    get:
      summary: Get Courses Created_Group_Ids
      description: "Get the IDs of the outcome groups created after a successful import. Pass ‘latest’ for the outcome import id for the latest import. ``` Examples: curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\ -H \"Authorization: Bearer <token>\" ```\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_imports/:id/created_group_ids"
      operationId: get_created_group_ids
      tags:
      - Outcome Imports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/lti_apps/launch_definitions:
    get:
      summary: Get Courses Launch_Definitions
      description: "Get Courses Launch_Definitions\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/lti_apps/launch_definitions"
      operationId: get_launch_definitions
      tags:
      - LTI Launch Definitions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/lti_apps/launch_definitions:
    get:
      summary: Get Accounts Launch_Definitions
      description: "List all tools available in this context for the given placements, in the form of Launch Definitions. Used primarily by the Canvas frontend. API users should consider using the External Tools API instead. This endpoint is cached for 10 minutes!\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/lti_apps/launch_definitions"
      operationId: get_launch_definitions
      tags:
      - LTI Launch Definitions
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: placements[Array]
        in: query
        required: false
        description: The placements to return launch definitions for. If not provided, an empty list will be returned.
        schema:
          type: string
      - name: only_visible[Boolean]
        in: query
        required: false
        description: If true, only return launch definitions that are visible to the current user. Defaults to true.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_period_sets:
    get:
      summary: Get Accounts Grading_Period_Sets
      description: "Returns the paginated list of grading period sets\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/grading_period_sets"
      operationId: get_grading_period_sets
      tags:
      - Grading Period Sets
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Grading_Period_Sets
      description: "Create and return a new grading period set\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/grading_period_sets"
      operationId: create_grading_period_sets
      tags:
      - Grading Period Sets
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: grading_period_set[weighted]
        in: query
        required: false
        description: A boolean to determine whether the grading periods in the set are weighted
        schema:
          type: boolean
      - name: grading_period_set[display_totals_for_all_grading_periods]
        in: query
        required: false
        description: A boolean to determine whether the totals for all grading periods in the set are displayed
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id288
              type: object
              properties:
                enrollment_term_ids[]:
                  type: string
                  description: A list of associated term ids for the grading period set
                grading_period_set[title]:
                  type: string
                  description: The title of the grading period set
          application/x-www-form-urlencoded:
            schema: *id288
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_period_sets/{id}:
    patch:
      summary: Patch Accounts Grading_Period_Sets
      description: "Update an existing grading period set\n\nRequired OAuth scope: url:PATCH|/api/v1/accounts/:account_id/grading_period_sets/:id"
      operationId: update_grading_period_sets
      tags:
      - Grading Period Sets
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: grading_period_set[][weighted]
        in: query
        required: false
        description: A boolean to determine whether the grading periods in the set are weighted
        schema:
          type: boolean
      - name: grading_period_set[][display_totals_for_all_grading_periods]
        in: query
        required: false
        description: A boolean to determine whether the totals for all grading periods in the set are displayed
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id289
              type: object
              properties:
                enrollment_term_ids[]:
                  type: string
                  description: A list of associated term ids for the grading period set
                grading_period_set[][title]:
                  type: string
                  description: The title of the grading period set
          application/x-www-form-urlencoded:
            schema: *id289
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Grading_Period_Sets
      description: "Delete Accounts Grading_Period_Sets\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/grading_period_sets/:id"
      operationId: delete_grading_period_sets
      tags:
      - Grading Period Sets
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/services/kaltura:
    get:
      summary: Get Services Kaltura
      description: "Return the config information for the Kaltura plugin in json format.\n\nRequired OAuth scope: url:GET|/api/v1/services/kaltura"
      operationId: list_kaltura
      tags:
      - Services
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/services/kaltura_session:
    post:
      summary: Post Services Kaltura_Session
      description: "Start a new Kaltura session, so that new media can be recorded and uploaded to this Canvas instance’s Kaltura instance.\n\nRequired OAuth scope: url:POST|/api/v1/services/kaltura_session"
      operationId: create_kaltura_session
      tags:
      - Services
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/grade_change/assignments/{assignment_id}:
    get:
      summary: Get Audit Assignments
      description: "List grade change events for a given assignment.\n\nRequired OAuth scope: url:GET|/api/v1/audit/grade_change/assignments/:assignment_id"
      operationId: get_assignments
      tags:
      - Grade Change Log
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id290
                  required: *id291
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/grade_change/courses/{course_id}:
    get:
      summary: Get Audit Courses
      description: "List grade change events for a given course.\n\nRequired OAuth scope: url:GET|/api/v1/audit/grade_change/courses/:course_id"
      operationId: get_courses
      tags:
      - Grade Change Log
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id290
                  required: *id291
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/grade_change/students/{student_id}:
    get:
      summary: Get Audit Students
      description: "List grade change events for a given student.\n\nRequired OAuth scope: url:GET|/api/v1/audit/grade_change/students/:student_id"
      operationId: get_students
      tags:
      - Grade Change Log
      security:
      - bearerAuth: []
      parameters:
      - name: student_id
        in: path
        required: true
        description: The student_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id290
                  required: *id291
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/grade_change/graders/{grader_id}:
    get:
      summary: Get Audit Graders
      description: "List grade change events for a given grader.\n\nRequired OAuth scope: url:GET|/api/v1/audit/grade_change/graders/:grader_id"
      operationId: get_graders
      tags:
      - Grade Change Log
      security:
      - bearerAuth: []
      parameters:
      - name: grader_id
        in: path
        required: true
        description: The grader_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id290
                  required: *id291
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/grade_change:
    get:
      summary: Get Audit Grade_Change
      description: "List grade change events satisfying all given parameters. Teachers may query for events in courses they teach. Queries without `course_id` require account administrator rights. At least one of `course_id`, `assignment_id`, `student_id`, or `grader_id` must be specified.\n\nRequired OAuth scope: url:GET|/api/v1/audit/grade_change"
      operationId: list_grade_change
      tags:
      - Grade Change Log
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: query
        required: false
        description: Restrict query to events in the specified course.
        schema:
          type: integer
      - name: assignment_id
        in: query
        required: false
        description: Restrict query to the given assignment. If “override” is given, query the course final grade override instead.
        schema:
          type: integer
      - name: student_id
        in: query
        required: false
        description: User id of a student to search grading events for.
        schema:
          type: integer
      - name: grader_id
        in: query
        required: false
        description: User id of a grader to search grading events for.
        schema:
          type: integer
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id290
                  required: *id291
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/files/quota:
    get:
      summary: Get Courses Quota
      description: "Get Courses Quota\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/files/quota"
      operationId: get_quota
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/files/quota:
    get:
      summary: Get Groups Quota
      description: "Get Groups Quota\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/files/quota"
      operationId: get_quota
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/files/quota:
    get:
      summary: Get Users Quota
      description: "Returns the total and used storage quota for the course, group, or user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/files/quota"
      operationId: get_quota
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/files:
    get:
      summary: Get Groups Files
      description: "Get Groups Files\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/files"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Files
      description: "Upload a file to the group. This API endpoint is the first step in uploading a file to a group. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a group can upload files to the group. By default, this is anybody participating in the group, or any admin over the group. ### [Preview processed html](#method.groups.preview_html) <a href=\"#method.groups.preview_html\" id=\"method.groups.preview_html\"></a> [GroupsController#preview\\_html](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/files"
      operationId: create_files
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{id}/files:
    get:
      summary: Get Folders Files
      description: "Returns the paginated list of files for the folder or course.\n\nRequired OAuth scope: url:GET|/api/v1/folders/:id/files"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: content_types[]
        in: query
        required: false
        description: Filter results by content-type. You can specify type/subtype pairs (e.g., ‘image/jpeg’), or simply types (e.g., ‘image’, which will match ‘image/gif’, ‘image/jpeg’, etc.).
        schema:
          type: string
      - name: exclude_content_types[]
        in: query
        required: false
        description: Exclude given content-types from your results. You can specify type/subtype pairs (e.g., ‘image/jpeg’), or simply types (e.g., ‘image’, which will match ‘image/gif’, ‘image/jpeg’, etc.).
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name of the files to match and return.
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“user”the user who uploaded the file or last edited its content“usage_rights”copyright and license information for the file (see UsageRights)Allowed values: user'
        schema:
          type: string
      - name: only[]
        in: query
        required: false
        description: Array of information to restrict to. Overrides include[]“names”only returns file name information
        schema:
          type: array
          items:
            type: string
      - name: sort
        in: query
        required: false
        description: 'Sort results by this field. Defaults to ‘name’. Note that ‘sort=userimpliesinclude[]=user.</p> Allowed values: name, size, created_at, updated_at, content_type, user`'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The sorting order. Defaults to ‘asc’.Allowed values: asc, desc'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id292
                  required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/files/{id}/public_url:
    get:
      summary: Get Files Public_Url
      description: "Determine the URL that should be used for inline preview of the file.\n\nRequired OAuth scope: url:GET|/api/v1/files/:id/public_url"
      operationId: get_public_url
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: submission_id
        in: query
        required: false
        description: The id of the submission the file is associated with. Provide this argument to gain access to a file that has been submitted to an assignment (Canvas will verify that the file belongs to the submission and the calling user has rights to view the submission).
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/files/{id}:
    get:
      summary: List Files
      description: "List Files\n\nRequired OAuth scope: url:GET|/api/v1/files/:id"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Files
      description: "Create Files\n\nRequired OAuth scope: url:POST|/api/v1/files/:id"
      operationId: create_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Files
      description: "Update some settings on the specified file\n\nRequired OAuth scope: url:PUT|/api/v1/files/:id"
      operationId: update_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The new display name of the file, with a limit of 255 characters.
        schema:
          type: string
      - name: parent_folder_id
        in: query
        required: false
        description: The id of the folder to move this file into. The new folder must be in the same context as the original parent folder. If the file is in a context without folders this does not apply.
        schema:
          type: string
      - name: on_duplicate
        in: query
        required: false
        description: 'If the file is moved to a folder containing a file with the same name, or renamed to a name matching an existing file, the API call will fail unless this parameter is supplied.“overwrite”Replace the existing file with the same name“rename”Add a qualifier to make the new filename uniqueAllowed values: overwrite, rename'
        schema:
          type: string
      - name: locked
        in: query
        required: false
        description: Flag the file as locked
        schema:
          type: boolean
      - name: hidden
        in: query
        required: false
        description: Flag the file as hidden
        schema:
          type: boolean
      - name: visibility_level
        in: query
        required: false
        description: Configure which roles can access this file
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id294
              type: object
              properties:
                lock_at:
                  type: string
                  description: The datetime to lock the file at
                unlock_at:
                  type: string
                  description: The datetime to unlock the file at
          application/x-www-form-urlencoded:
            schema: *id294
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Files
      description: "Remove the specified file. Unlike most other DELETE endpoints, using this endpoint will result in comprehensive, irretrievable destruction of the file. It should be used with the ‘replace\\` parameter set to true in cases where the file preview also needs to be destroyed (such as to remove files that violate privacy laws).\n\nRequired OAuth scope: url:DELETE|/api/v1/files/:id"
      operationId: delete_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: replace
        in: query
        required: false
        description: This action is irreversible. If replace is set to true the file contents will be replaced with a generic “file has been removed” file. This also destroys any previews that have been generated for the file. Must have manage files and become other users permissions
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/files/{id}:
    get:
      summary: Get Courses Files
      description: "Get Courses Files\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/files/:id"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/files/{id}:
    get:
      summary: Get Groups Files
      description: "Get Groups Files\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/files/:id"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/files/{id}:
    get:
      summary: Get Users Files
      description: "Returns the standard attachment json object\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/files/:id"
      operationId: get_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“user”the user who uploaded the file or last edited its content“usage_rights”copyright and license information for the file (see UsageRights)Allowed values: user'
        schema:
          type: string
      - name: replacement_chain_context_type
        in: query
        required: false
        description: When a user replaces a file during upload, Canvas keeps track of the “replacement chain.”Include this parameter if you wish Canvas to follow the replacement chain if the requested file was deleted and replaced by another.Must be set to ‘course’ or ‘account’. The “replacement_chain_context_id” parameter must also be included.
        schema:
          type: string
      - name: replacement_chain_context_id
        in: query
        required: false
        description: When a user replaces a file during upload, Canvas keeps track of the “replacement chain.”Include this parameter if you wish Canvas to follow the replacement chain if the requested file was deleted and replaced by another.Indicates the context ID Canvas should use when following the “replacement chain.” The “replacement_chain_context_type” parameter must also be included.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/files/file_ref/{migration_id}:
    get:
      summary: Get Courses File_Ref
      description: "Get information about a file from a course copy file reference\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/files/file_ref/:migration_id"
      operationId: get_file_ref
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: migration_id
        in: path
        required: true
        description: The migration_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/files/{id}/icon_metadata:
    get:
      summary: Get Files Icon_Metadata
      description: "Returns the icon maker file attachment metadata\n\nRequired OAuth scope: url:GET|/api/v1/files/:id/icon_metadata"
      operationId: get_icon_metadata
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/files/{id}/reset_verifier:
    post:
      summary: Post Files Reset_Verifier
      description: "Resets the link verifier. Any existing links to the file using the previous hard-coded “verifier” parameter will no longer automatically grant access. Must have manage files and become other users permissions\n\nRequired OAuth scope: url:POST|/api/v1/files/:id/reset_verifier"
      operationId: create_reset_verifier
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{id}/folders:
    get:
      summary: Get Folders Folders
      description: "Returns the paginated list of folders in the folder.\n\nRequired OAuth scope: url:GET|/api/v1/folders/:id/folders"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id295
                  required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/folders:
    get:
      summary: Get Courses Folders
      description: "Get Courses Folders\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/folders"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Folders
      description: "Post Courses Folders\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/folders"
      operationId: create_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/folders:
    get:
      summary: Get Users Folders
      description: "Get Users Folders\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/folders"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Folders
      description: "Post Users Folders\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/folders"
      operationId: create_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/folders:
    get:
      summary: Get Groups Folders
      description: "Returns the paginated list of all folders for the given context. This will be returned as a flat list containing all subfolders as well.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/folders"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id295
                  required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Folders
      description: "Post Groups Folders\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/folders"
      operationId: create_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/folders/by_path/*full_path:
    get:
      summary: Get Courses *Full_Path
      description: "Get Courses *Full_Path\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/folders/by_path/*full_path"
      operationId: get_*full_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/folders/by_path:
    get:
      summary: Get Courses By_Path
      description: "Get Courses By_Path\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/folders/by_path"
      operationId: get_by_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/folders/by_path/*full_path:
    get:
      summary: Get Users *Full_Path
      description: "Get Users *Full_Path\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/folders/by_path/*full_path"
      operationId: get_*full_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/folders/by_path:
    get:
      summary: Get Users By_Path
      description: "Get Users By_Path\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/folders/by_path"
      operationId: get_by_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/folders/by_path/*full_path:
    get:
      summary: Get Groups *Full_Path
      description: "Get Groups *Full_Path\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/folders/by_path/*full_path"
      operationId: get_*full_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/folders/by_path:
    get:
      summary: Get Groups By_Path
      description: "Given the full path to a folder, returns a list of all Folders in the path hierarchy, starting at the root folder, and ending at the requested folder. The given path is relative to the context’s root folder and does not include the root folder’s name (e.g., “course files”). If an empty path is given, the context’s root folder alone is returned. Otherwise, if no folder exists with the given full path, a Not Found error is returned.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/folders/by_path"
      operationId: get_by_path
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id295
                  required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/folders/{id}:
    get:
      summary: Get Courses Folders
      description: "Get Courses Folders\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/folders/:id"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/folders/{id}:
    get:
      summary: Get Users Folders
      description: "Get Users Folders\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/folders/:id"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/folders/{id}:
    get:
      summary: Get Groups Folders
      description: "Get Groups Folders\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/folders/:id"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{id}:
    get:
      summary: List Folders
      description: "Returns the details for a folder You can get the root folder from a context by using ‘root’ as the :id. For example, you could get the root folder for a course like:\n\nRequired OAuth scope: url:GET|/api/v1/folders/:id"
      operationId: get_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id295
                required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Folders
      description: "Updates a folder\n\nRequired OAuth scope: url:PUT|/api/v1/folders/:id"
      operationId: update_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The new name of the folder
        schema:
          type: string
      - name: parent_folder_id
        in: query
        required: false
        description: The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder.
        schema:
          type: string
      - name: locked
        in: query
        required: false
        description: Flag the folder as locked
        schema:
          type: boolean
      - name: hidden
        in: query
        required: false
        description: Flag the folder as hidden
        schema:
          type: boolean
      - name: position
        in: query
        required: false
        description: Set an explicit sort position for the folder
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id297
              type: object
              properties:
                lock_at:
                  type: string
                  description: The datetime to lock the folder at
                unlock_at:
                  type: string
                  description: The datetime to unlock the folder at
          application/x-www-form-urlencoded:
            schema: *id297
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id295
                required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Folders
      description: "Remove the specified folder. You can only delete empty folders unless you set the ‘force’ flag\n\nRequired OAuth scope: url:DELETE|/api/v1/folders/:id"
      operationId: delete_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: force
        in: query
        required: false
        description: Set to ‘true’ to allow deleting a non-empty folder
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{folder_id}/folders:
    post:
      summary: Post Folders Folders
      description: "Post Folders Folders\n\nRequired OAuth scope: url:POST|/api/v1/folders/:folder_id/folders"
      operationId: create_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: folder_id
        in: path
        required: true
        description: The folder_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/folders:
    post:
      summary: Post Accounts Folders
      description: "Creates a folder in the specified context\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/folders"
      operationId: create_folders
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: parent_folder_id
        in: query
        required: false
        description: The id of the folder to store the new folder in. An error will be returned if this does not correspond to an existing folder. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.
        schema:
          type: string
      - name: parent_folder_path
        in: query
        required: false
        description: The path of the folder to store the new folder in. The path separator is the forward slash ‘/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.
        schema:
          type: string
      - name: locked
        in: query
        required: false
        description: Flag the folder as locked
        schema:
          type: boolean
      - name: hidden
        in: query
        required: false
        description: Flag the folder as hidden
        schema:
          type: boolean
      - name: position
        in: query
        required: false
        description: Set an explicit sort position for the folder
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id298
              type: object
              properties:
                name:
                  type: string
                  description: The name of the folder
                lock_at:
                  type: string
                  description: The datetime to lock the folder at
                unlock_at:
                  type: string
                  description: The datetime to unlock the folder at
          application/x-www-form-urlencoded:
            schema: *id298
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id295
                required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{folder_id}/files:
    post:
      summary: Post Folders Files
      description: "Upload a file to a folder. This API endpoint is the first step in uploading a file. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow. Only those with the “Manage Files” permission on a course or group can upload files to a folder in that course or group. ### [Copy a file](#method.folders.copy_file) <a href=\"#method.folders.copy_file\" id=\"method.folders.copy_file\"></a> [FoldersController#copy\\_file](https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/folders/:folder_id/files"
      operationId: create_files
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: folder_id
        in: path
        required: true
        description: The folder_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{dest_folder_id}/copy_file:
    post:
      summary: Post Folders Copy_File
      description: "Copy a file from elsewhere in Canvas into a folder. Copying a file across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution.\n\nRequired OAuth scope: url:POST|/api/v1/folders/:dest_folder_id/copy_file"
      operationId: create_copy_file
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: dest_folder_id
        in: path
        required: true
        description: The dest_folder_id identifier
        schema:
          type: string
      - name: on_duplicate
        in: query
        required: false
        description: 'What to do if a file with the same name already exists at the destination. If such a file exists and this parameter is not given, the call will fail.“overwrite”Replace an existing file with the same name“rename”Add a qualifier to make the new filename uniqueAllowed values: overwrite, rename'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id299
              type: object
              properties:
                source_file_id:
                  type: string
                  description: The id of the source file
          application/x-www-form-urlencoded:
            schema: *id299
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id292
                required: *id293
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/folders/{dest_folder_id}/copy_folder:
    post:
      summary: Post Folders Copy_Folder
      description: "Copy a folder (and its contents) from elsewhere in Canvas into a folder. Copying a folder across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution. If the source and destination folders are in the same context, the source folder may not contain the destination folder. A folder will be renamed at its destination if another folder with the same name already exists.\n\nRequired OAuth scope: url:POST|/api/v1/folders/:dest_folder_id/copy_folder"
      operationId: create_copy_folder
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: dest_folder_id
        in: path
        required: true
        description: The dest_folder_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id300
              type: object
              properties:
                source_folder_id:
                  type: string
                  description: The id of the source folder
          application/x-www-form-urlencoded:
            schema: *id300
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id295
                required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/folders/media:
    get:
      summary: Get Courses Media
      description: "Get Courses Media\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/folders/media"
      operationId: get_media
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/folders/media:
    get:
      summary: Get Groups Media
      description: "Returns the details for a designated upload folder that the user has rights to upload to, and creates it if it doesn’t exist. If the current user does not have the permissions to manage files in the course or group, the folder will belong to the current user directly.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/folders/media"
      operationId: get_media
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id295
                required: *id296
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/usage_rights:
    put:
      summary: Put Courses Usage_Rights
      description: "Put Courses Usage_Rights\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/usage_rights"
      operationId: update_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Usage_Rights
      description: "Delete Courses Usage_Rights\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/usage_rights"
      operationId: delete_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/usage_rights:
    put:
      summary: Put Groups Usage_Rights
      description: "Put Groups Usage_Rights\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/usage_rights"
      operationId: update_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Usage_Rights
      description: "Delete Groups Usage_Rights\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/usage_rights"
      operationId: delete_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/usage_rights:
    put:
      summary: Put Users Usage_Rights
      description: "Sets copyright and license information for one or more files\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/usage_rights"
      operationId: update_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: folder_ids[]
        in: query
        required: false
        description: List of ids of folders to search for files to set usage rights for. Note that new files uploaded to these folders do not automatically inherit these rights.
        schema:
          type: string
      - name: publish
        in: query
        required: false
        description: Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to ‘true` to publish on save).
        schema:
          type: boolean
      - name: usage_rights[legal_copyright]
        in: query
        required: false
        description: The legal copyright line for the files
        schema:
          type: string
      - name: usage_rights[license]
        in: query
        required: false
        description: The license that applies to the files. See the List licenses endpoint for the supported license types.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id301
              type: object
              properties:
                file_ids[]:
                  type: string
                  description: List of ids of files to set usage rights for.
                usage_rights[use_justification]:
                  type: string
                  description: 'The intellectual property justification for using the files in CanvasAllowed values: own_copyright, used_by_permission, fair_use, public_domain, creative_commons'
          application/x-www-form-urlencoded:
            schema: *id301
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id302
                  required: *id303
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Usage_Rights
      description: "Removes copyright and license information associated with one or more files\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/usage_rights"
      operationId: delete_usage_rights
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: file_ids[]
        in: query
        required: false
        description: List of ids of files to remove associated usage rights from.
        schema:
          type: string
      - name: folder_ids[]
        in: query
        required: false
        description: List of ids of folders. Usage rights will be removed from all files in these folders.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_licenses:
    get:
      summary: Get Courses Content_Licenses
      description: "Get Courses Content_Licenses\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_licenses"
      operationId: get_content_licenses
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_licenses:
    get:
      summary: Get Groups Content_Licenses
      description: "Get Groups Content_Licenses\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_licenses"
      operationId: get_content_licenses
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_licenses:
    get:
      summary: Get Users Content_Licenses
      description: "A paginated list of licenses that can be applied Returns a list of [License](#license) objects.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_licenses"
      operationId: get_content_licenses
      tags:
      - Files
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id304
                  required: *id305
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/planner/items:
    get:
      summary: Get Planner Items
      description: "Get Planner Items\n\nRequired OAuth scope: url:GET|/api/v1/planner/items"
      operationId: list_items
      tags:
      - Planner
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/planner/items:
    get:
      summary: Get Users Items
      description: "Retrieve the paginated list of objects to be shown on the planner for the current user with the associated planner override to override an item’s visibility if set. Planner items for a student may also be retrieved by a linked observer. Use the path that accepts a user\\_id and supply the student’s id.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/planner/items"
      operationId: get_items
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: start_date
        in: query
        required: false
        description: 'Only return items starting from the given date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        description: 'Only return items up to the given date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: context_codes[]
        in: query
        required: false
        description: 'List of context codes of courses and/or groups whose items you want to see. If not specified, defaults to all contexts associated to the current user. Note that concluded courses will be ignored unless specified in the includes[] parameter. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42, group_123'
        schema:
          type: string
      - name: observed_user_id
        in: query
        required: false
        description: Return planner items for the given observed user. Must be accompanied by context_codes[]. The user making the request must be observing the observed user in all the courses specified by context_codes[].
        schema:
          type: string
      - name: filter
        in: query
        required: false
        description: 'Only return items that have new or unread activityAllowed values: new_activity'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/planner_notes:
    get:
      summary: List Planner_Notes
      description: "Retrieve the paginated list of planner notes Retrieve planner note for a user\n\nRequired OAuth scope: url:GET|/api/v1/planner_notes"
      operationId: list_planner_notes
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: start_date
        in: query
        required: false
        description: 'Only return notes with todo dates since the start_date (inclusive). No default. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        description: 'Only return notes with todo dates before the end_date (inclusive). No default. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date and start_date are both specified and equivalent, then only notes with todo dates on that day are returned.'
        schema:
          type: string
      - name: context_codes[]
        in: query
        required: false
        description: 'List of context codes of courses whose notes you want to see. If not specified, defaults to all contexts that the user belongs to. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42 Including a code matching the user’s own context code (e.g. user_1) will include notes that are not associated with any particular course.'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id306
                  required: *id307
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Planner_Notes
      description: "Create a planner note for the current user\n\nRequired OAuth scope: url:POST|/api/v1/planner_notes"
      operationId: create_planner_notes
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: title
        in: query
        required: false
        description: The title of the planner note.
        schema:
          type: string
      - name: details
        in: query
        required: false
        description: Text of the planner note.
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The ID of the course to associate with the planner note. The caller must be able to view the course in order to associate it with a planner note.
        schema:
          type: integer
      - name: linked_object_type
        in: query
        required: false
        description: 'The type of a learning object to link to this planner note. Must be used in conjunction wtih linked_object_id and course_id. Valid linked_object_type values are: ‘announcement’, ‘assignment’, ‘discussion_topic’, ‘wiki_page’, ‘quiz’'
        schema:
          type: string
      - name: linked_object_id
        in: query
        required: false
        description: The id of a learning object to link to this planner note. Must be used in conjunction with linked_object_type and course_id. The object must be in the same course as specified by course_id. If the title argument is not provided, the planner note will use the learning object’s title as its title. Only one planner note may be linked to a specific learning object.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id308
              type: object
              properties:
                todo_date:
                  type: string
                  description: 'The date where this planner note should appear in the planner. The value should be formatted as: yyyy-mm-dd.'
          application/x-www-form-urlencoded:
            schema: *id308
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id306
                required: *id307
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/planner_notes/{id}:
    get:
      summary: List Planner_Notes
      description: "Retrieve a planner note for the current user Returns a [PlannerNote](#plannernote) object. ### [Update a planner note](#method.planner_notes.update) <a href=\"#method.planner_notes.update\" id=\"method.planner_notes.update\"></a> [PlannerNotesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/planner_notes/:id"
      operationId: get_planner_notes
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id306
                required: *id307
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Planner_Notes
      description: "Update a planner note for the current user\n\nRequired OAuth scope: url:PUT|/api/v1/planner_notes/:id"
      operationId: update_planner_notes
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: The title of the planner note.
        schema:
          type: string
      - name: details
        in: query
        required: false
        description: Text of the planner note.
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The ID of the course to associate with the planner note. The caller must be able to view the course in order to associate it with a planner note. Use a null or empty value to remove a planner note from a course. Note that if the planner note is linked to a learning object, its course_id cannot be changed.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id309
              type: object
              properties:
                todo_date:
                  type: string
                  description: 'The date where this planner note should appear in the planner. The value should be formatted as: yyyy-mm-dd.'
          application/x-www-form-urlencoded:
            schema: *id309
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id306
                required: *id307
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Planner_Notes
      description: "Delete a planner note for the current user Returns a [PlannerNote](#plannernote) object. ### [List planner overrides](#method.planner_overrides.index) <a href=\"#method.planner_overrides.index\" id=\"method.planner_overrides.index\"></a> [PlannerOverridesController#index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\nRequired OAuth scope: url:DELETE|/api/v1/planner_notes/:id"
      operationId: delete_planner_notes
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id306
                required: *id307
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/planner/overrides:
    get:
      summary: Get Planner Overrides
      description: "Retrieve a planner override for the current user Returns a list of [PlannerOverride](#planneroverride) objects. ### [Show a planner override](#method.planner_overrides.show) <a href=\"#method.planner_overrides.show\" id=\"method.planner_overrides.show\"></a> [PlannerOverridesController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/planner/overrides"
      operationId: get_overrides
      tags:
      - Planner
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id310
                  required: *id311
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Planner Overrides
      description: "Create a planner override for the current user\n\nRequired OAuth scope: url:POST|/api/v1/planner/overrides"
      operationId: create_overrides
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: marked_complete
        in: query
        required: false
        description: If this is true, the item will show in the planner as completed
        schema:
          type: boolean
      - name: dismissed
        in: query
        required: false
        description: If this is true, the item will not show in the opportunities list
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id312
              type: object
              properties:
                plannable_type:
                  type: string
                  description: 'Type of the item that you are overriding in the plannerAllowed values: announcement, assignment, discussion_topic, quiz, wiki_page, planner_note, calendar_event, assessment_request, sub_assignment'
                plannable_id:
                  type: string
                  description: ID of the item that you are overriding in the planner
          application/x-www-form-urlencoded:
            schema: *id312
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id310
                required: *id311
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/planner/overrides/{id}:
    get:
      summary: Get Planner Overrides
      description: "Retrieve a planner override for the current user Returns a [PlannerOverride](#planneroverride) object. ### [Update a planner override](#method.planner_overrides.update) <a href=\"#method.planner_overrides.update\" id=\"method.planner_overrides.update\"></a> [PlannerOverridesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/planner/overrides/:id"
      operationId: get_overrides
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id310
                required: *id311
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Planner Overrides
      description: "Update a planner override’s visibilty for the current user\n\nRequired OAuth scope: url:PUT|/api/v1/planner/overrides/:id"
      operationId: update_overrides
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: marked_complete
        in: query
        required: false
        description: determines whether the planner item is marked as completed
        schema:
          type: string
      - name: dismissed
        in: query
        required: false
        description: determines whether the planner item shows in the opportunities list
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id310
                required: *id311
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Planner Overrides
      description: "Delete a planner override for the current user Returns a [PlannerOverride](#planneroverride) object.\n\nRequired OAuth scope: url:DELETE|/api/v1/planner/overrides/:id"
      operationId: delete_overrides
      tags:
      - Planner
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id310
                required: *id311
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}:
    get:
      summary: Get Courses Blueprint_Templates
      description: "Using ‘default’ as the template\\_id should suffice for the current implmentation (as there should be only one template per course). However, using specific template ids may become necessary in the future\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id"
      operationId: get_blueprint_templates
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id313
                required: *id314
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses:
    get:
      summary: Get Courses Associated_Courses
      description: "Returns a list of courses that are configured to receive updates from this blueprint\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/associated_courses"
      operationId: get_associated_courses
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations:
    put:
      summary: Put Courses Update_Associations
      description: "Send a list of course ids to add or remove new associations for the template. Cannot add courses that do not belong to the blueprint course’s account. Also cannot add other blueprint courses or courses that already have an association with another blueprint course. After associating new courses, [start a sync](#method.master_courses/master_templates.queue_migration) to populate their contents from the blueprint.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/blueprint_templates/:template_id/update_associations"
      operationId: update_update_associations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id315
              type: object
              properties:
                course_ids_to_add:
                  type: string
                  description: Courses to add as associated courses
                course_ids_to_remove:
                  type: string
                  description: Courses to remove as associated courses
          application/x-www-form-urlencoded:
            schema: *id315
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations:
    post:
      summary: Post Courses Migrations
      description: "Begins a migration to push recently updated content to all associated courses. Only one migration can be running at a time.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations"
      operationId: create_migrations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      - name: comment
        in: query
        required: false
        description: An optional comment to be included in the sync history.
        schema:
          type: string
      - name: send_notification
        in: query
        required: false
        description: Send a notification to the calling user when the sync completes.
        schema:
          type: boolean
      - name: copy_settings
        in: query
        required: false
        description: Whether course settings should be copied over to associated courses. Defaults to true for newly associated courses.
        schema:
          type: boolean
      - name: send_item_notifications
        in: query
        required: false
        description: By default, new-item notifications are suppressed in blueprint syncs. If this option is set, teachers and students may receive notifications for items such as announcements and assignments that are created in associated courses (subject to the usual notification settings). This option requires the Blueprint Item Notifications feature to be enabled.
        schema:
          type: boolean
      - name: publish_after_initial_sync
        in: query
        required: false
        description: If set, newly associated courses will be automatically published after the sync completes
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id316
                required: *id317
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Migrations
      description: "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.imports_index).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations"
      operationId: get_migrations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id316
                  required: *id317
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item:
    put:
      summary: Put Courses Restrict_Item
      description: "If a blueprint course object is restricted, editing will be limited for copies in associated courses.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/blueprint_templates/:template_id/restrict_item"
      operationId: update_restrict_item
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      - name: content_type
        in: query
        required: false
        description: String, “assignment”
        schema:
          type: string
      - name: content_id
        in: query
        required: false
        description: The ID of the object.
        schema:
          type: integer
      - name: restricted
        in: query
        required: false
        description: Whether to apply restrictions.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id318
              type: object
              properties:
                restrictions:
                  type: string
                  description: (Optional) If the object is restricted, this specifies a set of restrictions. If not specified, the course-level restrictions will be used. See Course API update documentation
          application/x-www-form-urlencoded:
            schema: *id318
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes:
    get:
      summary: Get Courses Unsynced_Changes
      description: "Retrieve a list of learning objects that have changed since the last blueprint sync operation. If no syncs have been completed, a ChangeRecord with a change\\_type of `initial_sync` is returned. Returns a list of [ChangeRecord](#changerecord) objects. ### [List blueprint migrations](#method.master_courses/master_templates.migrations_index) <a href=\"#method.master_courses-master_templates.migrations_index\" id=\"method.master_courses-master_templates.migrations_index\"></a> [MasterCourses::MasterTemplatesController#migrations\\_index](https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/unsynced_changes"
      operationId: get_unsynced_changes
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id319
                  required: *id320
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}:
    get:
      summary: Get Courses Migrations
      description: "Shows the status of a migration. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.imports_show).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id"
      operationId: get_migrations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id316
                required: *id317
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details:
    get:
      summary: Get Courses Details
      description: "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a blueprint course. See also [the associated course side](#method.master_courses/master_templates.import_details).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_templates/:template_id/migrations/:id/details"
      operationId: get_details
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: template_id
        in: path
        required: true
        description: The template_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id319
                  required: *id320
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_subscriptions:
    get:
      summary: Get Courses Blueprint_Subscriptions
      description: "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_subscriptions"
      operationId: get_blueprint_subscriptions
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id321
                  required: *id322
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations:
    get:
      summary: Get Courses Migrations
      description: "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also [the blueprint course side](#method.master_courses/master_templates.migrations_index). Use ‘default’ as the subscription\\_id to use the currently active blueprint subscription.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations"
      operationId: get_migrations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: subscription_id
        in: path
        required: true
        description: The subscription_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id316
                  required: *id317
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}:
    get:
      summary: Get Courses Migrations
      description: "Shows the status of an import into a course associated with a blueprint. See also [the blueprint course side](#method.master_courses/master_templates.migrations_show).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id"
      operationId: get_migrations
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: subscription_id
        in: path
        required: true
        description: The subscription_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id316
                required: *id317
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details:
    get:
      summary: Get Courses Details
      description: "Show the changes that were propagated to a course associated with a blueprint. See also [the blueprint course side](#method.master_courses/master_templates.migration_details).\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id/details"
      operationId: get_details
      tags:
      - Blueprint Courses
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: subscription_id
        in: path
        required: true
        description: The subscription_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id319
                  required: *id320
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/uuid_map:
    get:
      summary: List Uuid_Map
      description: "This endpoint returns a CSV file with the UUID mapping for the sandbox. The CSV has three columns: ``` * `type` - The object type * `original_uuid` - The UUID of an object from the template * `new_uuid` - The UUID of the corresponding object in the sandbox ```\n\nRequired OAuth scope: url:GET|/api/lti/uuid_map"
      operationId: get_uuid_map
      tags:
      - Sandboxes
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/notice-handlers/{context_external_tool_id}:
    get:
      summary: List Notice-Handlers
      description: "List all notice handlers for the tool\n\nRequired OAuth scope: url:GET|/api/lti/notice-handlers/:context_external_tool_id"
      operationId: get_notice-handlers
      tags:
      - Notice Handlers
      security:
      - bearerAuth: []
      parameters:
      - name: context_external_tool_id
        in: path
        required: true
        description: The context_external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id323
                required: *id324
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Notice-Handlers
      description: "Subscribe (set) or unsubscribe (remove) a notice handler for the tool\n\nRequired OAuth scope: url:PUT|/api/lti/notice-handlers/:context_external_tool_id"
      operationId: update_notice-handlers
      tags:
      - Notice Handlers
      security:
      - bearerAuth: []
      parameters:
      - name: context_external_tool_id
        in: path
        required: true
        description: The context_external_tool_id identifier
        schema:
          type: string
      - name: max_batch_size
        in: query
        required: false
        description: The maximum number of notices to include in a single batch
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id325
              type: object
              properties:
                notice_type:
                  type: string
                  description: The type of notice
                handler:
                  type: string
                  description: URL to receive the notice, or an empty string to unsubscribe
          application/x-www-form-urlencoded:
            schema: *id325
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id326
                required: *id327
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_standards:
    post:
      summary: Post Accounts Grading_Standards
      description: "Post Accounts Grading_Standards\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/grading_standards"
      operationId: create_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Grading_Standards
      description: "Returns the paginated list of grading standards for the given context that are visible to the user.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/grading_standards"
      operationId: get_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id328
                  required: *id329
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/grading_standards:
    post:
      summary: Post Courses Grading_Standards
      description: "Create a new grading standard\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/grading_standards"
      operationId: create_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: points_based
        in: query
        required: false
        description: Whether or not a grading scheme is points based. Defaults to false.
        schema:
          type: boolean
      - name: scaling_factor
        in: query
        required: true
        description: The factor by which to scale a percentage into a points based scheme grade. This is the maximum number of points possible in the grading scheme. Defaults to 1. Not required for percentage based grading schemes.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id330
              type: object
              properties:
                title:
                  type: string
                  description: The title for the Grading Standard.
                grading_scheme_entry[][name]:
                  type: string
                  description: The name for an entry value within a GradingStandard that describes the range of the value e.g. A-
                grading_scheme_entry[][value]:
                  type: string
                  description: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93
          application/x-www-form-urlencoded:
            schema: *id330
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id328
                required: *id329
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Grading_Standards
      description: "Get Courses Grading_Standards\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/grading_standards"
      operationId: get_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/grading_standards/{grading_standard_id}:
    get:
      summary: Get Courses Grading_Standards
      description: "Get Courses Grading_Standards\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/grading_standards/:grading_standard_id"
      operationId: get_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Grading_Standards
      description: "Put Courses Grading_Standards\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/grading_standards/:grading_standard_id"
      operationId: update_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Grading_Standards
      description: "Delete Courses Grading_Standards\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/grading_standards/:grading_standard_id"
      operationId: delete_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/grading_standards/{grading_standard_id}:
    get:
      summary: Get Accounts Grading_Standards
      description: "Returns a grading standard for the given context that is visible to the user.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id"
      operationId: get_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id328
                required: *id329
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Grading_Standards
      description: "Updates the grading standard with the given id If the grading standard has been used for grading, only the title can be updated. The data, points\\_based, and scaling\\_factor cannot be modified once the grading standard has been used to grade assignments.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id"
      operationId: update_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      - name: title
        in: query
        required: false
        description: The title for the Grading Standard
        schema:
          type: string
      - name: points_based
        in: query
        required: false
        description: Whether or not a grading scheme is points based. Defaults to false.
        schema:
          type: boolean
      - name: scaling_factor
        in: query
        required: true
        description: The factor by which to scale a percentage into a points based scheme grade. This is the maximum number of points possible in the grading scheme. Defaults to 1. Not required for percentage based grading schemes.
        schema:
          type: integer
      - name: grading_scheme_entry[][name]
        in: query
        required: false
        description: The name for an entry value within a GradingStandard that describes the range of the value e.g. A-
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id331
              type: object
              properties:
                grading_scheme_entry[][value]:
                  type: string
                  description: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93
          application/x-www-form-urlencoded:
            schema: *id331
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id328
                required: *id329
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Grading_Standards
      description: "Deletes the grading standard with the given id\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/grading_standards/:grading_standard_id"
      operationId: delete_grading_standards
      tags:
      - Grading Standards
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: grading_standard_id
        in: path
        required: true
        description: The grading_standard_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id328
                required: *id329
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/smartsearch:
    get:
      summary: Get Courses Smartsearch
      description: "Find course content using a meaning-based search\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/smartsearch"
      operationId: get_smartsearch
      tags:
      - Smart Search
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: q
        in: query
        required: false
        description: The search query
        schema:
          type: string
      - name: filter[]
        in: query
        required: false
        description: Types of objects to search. By default, all supported types are searched. Supported types include pages, assignments, announcements, and discussion_topics.
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Optional information to include with each search result:modulesAn array of module objects that the search result belongs to.statusThe published status for all results and the due_date for all assignments.Allowed values: status, modules'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id332
                  required: *id333
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/features:
    get:
      summary: Get Courses Features
      description: "Get Courses Features\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/features"
      operationId: get_features
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/features:
    get:
      summary: Get Accounts Features
      description: "Get Accounts Features\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/features"
      operationId: get_features
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/features:
    get:
      summary: Get Users Features
      description: "A paginated list of all features that apply to a given Account, Course, or User.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/features"
      operationId: get_features
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id334
                  required: *id335
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/features/enabled:
    get:
      summary: Get Courses Enabled
      description: "Get Courses Enabled\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/features/enabled"
      operationId: get_enabled
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/features/enabled:
    get:
      summary: Get Accounts Enabled
      description: "Get Accounts Enabled\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/features/enabled"
      operationId: get_enabled
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/features/enabled:
    get:
      summary: Get Users Enabled
      description: "A paginated list of all features that are enabled on a given Account, Course, or User. Only the feature names are returned.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/features/enabled"
      operationId: get_enabled
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/features/environment:
    get:
      summary: Get Features Environment
      description: "Return a hash of global feature options that pertain to the Canvas user interface. This is the same information supplied to the web interface as `ENV.FEATURES`.\n\nRequired OAuth scope: url:GET|/api/v1/features/environment"
      operationId: list_environment
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/features/flags/{feature}:
    get:
      summary: Get Courses Flags
      description: "Get Courses Flags\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/features/flags/:feature"
      operationId: get_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Flags
      description: "Put Courses Flags\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/features/flags/:feature"
      operationId: update_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses Flags
      description: "Delete Courses Flags\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/features/flags/:feature"
      operationId: delete_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/features/flags/{feature}:
    get:
      summary: Get Accounts Flags
      description: "Get Accounts Flags\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/features/flags/:feature"
      operationId: get_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Flags
      description: "Put Accounts Flags\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/features/flags/:feature"
      operationId: update_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Flags
      description: "Delete Accounts Flags\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/features/flags/:feature"
      operationId: delete_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/features/flags/{feature}:
    get:
      summary: Get Users Flags
      description: "Get the feature flag that applies to a given Account, Course, or User. The flag may be defined on the object, or it may be inherited from a parent account. You can look at the context\\_id and context\\_type of the returned object to determine which is the case. If these fields are missing, then the object is the global Canvas default.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/features/flags/:feature"
      operationId: get_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id336
                required: *id337
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Flags
      description: "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets a feature flag for the same feature in any state other than “allowed”.\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/features/flags/:feature"
      operationId: update_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      - name: state
        in: query
        required: false
        description: '“off”The feature is not available for the course, user, or account and sub-accounts.“allowed”(valid only on accounts) The feature is off in the account, but may be enabled in sub-accounts and courses by setting a feature flag on the sub-account or course.“on”The feature is turned on unconditionally for the user, course, or account and sub-accounts.Allowed values: off, allowed, on'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id336
                required: *id337
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Users Flags
      description: "Remove feature flag for a given Account, Course, or User. (Note that the flag must be defined on the Account, Course, or User directly.) The object will then inherit the feature flags from a higher account, if any exist. If this flag was ‘on’ or ‘off’, then lower-level account flags that were masked by this one will apply again.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/features/flags/:feature"
      operationId: delete_flags
      tags:
      - Feature Flags
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: feature
        in: path
        required: true
        description: The feature identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id336
                required: *id337
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/submissions/{id}/what_if_grades:
    put:
      summary: Put Submissions What_If_Grades
      description: "Enter a what if score for a submission and receive the calculated grades Grade calculation is a costly operation, so this API should be used sparingly\n\nRequired OAuth scope: url:PUT|/api/v1/submissions/:id/what_if_grades"
      operationId: update_what_if_grades
      tags:
      - What If Grades
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id338
              type: object
              properties:
                student_entered_score:
                  type: string
                  description: The score the student wants to test
          application/x-www-form-urlencoded:
            schema: *id338
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id339
                  required: *id340
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/what_if_grades/reset:
    put:
      summary: Put Courses Reset
      description: "Resets all what-if scores for a student in a course and recalculates grades. Returns a list of [Grades](#grades) objects.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/what_if_grades/reset"
      operationId: update_reset
      tags:
      - What If Grades
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id339
                  required: *id340
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/modules/{context_module_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get Courses Date_Details\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/modules/:context_module_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: context_module_id
        in: path
        required: true
        description: The context_module_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get Courses Date_Details\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Date_Details
      description: "Put Courses Date_Details\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/date_details"
      operationId: update_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get Courses Date_Details\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/quizzes/:quiz_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Date_Details
      description: "Put Courses Date_Details\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/quizzes/:quiz_id/date_details"
      operationId: update_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/discussion_topics/{discussion_topic_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get Courses Date_Details\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: discussion_topic_id
        in: path
        required: true
        description: The discussion_topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Date_Details
      description: "Put Courses Date_Details\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/discussion_topics/:discussion_topic_id/date_details"
      operationId: update_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: discussion_topic_id
        in: path
        required: true
        description: The discussion_topic_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/pages/{url_or_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get Courses Date_Details\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/pages/:url_or_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Date_Details
      description: "Put Courses Date_Details\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/pages/:url_or_id/date_details"
      operationId: update_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: url_or_id
        in: path
        required: true
        description: The url_or_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/files/{attachment_id}/date_details:
    get:
      summary: Get Courses Date_Details
      description: "Get a learning object’s date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item. Returns a [LearningObjectDates](#learningobjectdates) object. ### [Update a learning object's date information](#method.learning_object_dates.update) <a href=\"#method.learning_object_dates.update\" id=\"method.learning_object_dates.update\"></a> [LearningObjectDatesController#update](https://github.com/instructure/canvas-lms/blob/master/app/controllers/learning_object_dates_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/files/:attachment_id/date_details"
      operationId: get_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: attachment_id
        in: path
        required: true
        description: The attachment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id341
                  required: *id342
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Date_Details
      description: "Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides. Returns 204 No Content response code if successful.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/files/:attachment_id/date_details"
      operationId: update_date_details
      tags:
      - Learning Object Dates
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: attachment_id
        in: path
        required: true
        description: The attachment_id identifier
        schema:
          type: string
      - name: only_visible_to_overrides
        in: query
        required: false
        description: Whether the learning object is only assigned to students who are targeted by an override.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id343
              type: object
              properties:
                due_at:
                  type: string
                  description: The learning object’s due date. Not applicable for ungraded discussions, pages, and files.
                unlock_at:
                  type: string
                  description: The learning object’s unlock date. Must be before the due date if there is one.
                lock_at:
                  type: string
                  description: The learning object’s lock date. Must be after the due date if there is one.
                assignment_overrides[]:
                  type: string
                  description: 'List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object’s overrides. Keys for each override object can include: ‘id’, ‘title’, ‘due_at’, ‘unlock_at’, ‘lock_at’, ‘student_ids’, and ‘course_section_id’, ‘course_id’, ‘noop_id’, and ‘unassign_item’.'
          application/x-www-form-urlencoded:
            schema: *id343
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/group_categories:
    get:
      summary: Get Accounts Group_Categories
      description: "Get Accounts Group_Categories\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/group_categories"
      operationId: get_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Group_Categories
      description: "Post Accounts Group_Categories\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/group_categories"
      operationId: create_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/group_categories:
    get:
      summary: Get Courses Group_Categories
      description: "Returns a paginated list of group categories in a context. The list returned depends on the permissions of the current user and the specified collaboration state.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/group_categories"
      operationId: get_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: collaboration_state
        in: query
        required: false
        description: 'Filter group categories by their collaboration state:“all”: Return both collaborative and non-collaborative group categories“collaborative”: Return only collaborative group categories (default)“non_collaborative”: Return only non-collaborative group categories'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id344
                  required: *id345
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Group_Categories
      description: "Create a new group category\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/group_categories"
      operationId: create_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: non_collaborative
        in: query
        required: false
        description: Can only be set by users with the Differentiation Tag - Add permissionIf set to true, groups in this category will be only be visible to users with the Differentiation Tag - Manage permission.
        schema:
          type: boolean
      - name: self_signup
        in: query
        required: false
        description: 'Allow students to sign up for a group themselves (Course Only). valid values are:“enabled”allows students to self sign up for any group in course“restricted”allows students to self sign up only for groups in the same section null disallows self sign upAllowed values: enabled, restricted'
        schema:
          type: string
      - name: auto_leader
        in: query
        required: false
        description: 'Assigns group leaders automatically when generating and allocating students to groups Valid values are:“first”the first student to be allocated to a group is the leader“random”a random student from all members is chosen as the leaderAllowed values: first, random'
        schema:
          type: string
      - name: group_limit
        in: query
        required: false
        description: Limit the maximum number of users in each group (Course Only). Requires self signup.
        schema:
          type: integer
      - name: sis_group_category_id
        in: query
        required: false
        description: The unique SIS identifier.
        schema:
          type: string
      - name: create_group_count
        in: query
        required: false
        description: Create this number of groups (Course Only).
        schema:
          type: integer
      - name: split_group_count
        in: query
        required: false
        description: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with “enable_self_signup”. because the group assignment happens synchronously, it’s recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id346
              type: object
              properties:
                name:
                  type: string
                  description: Name of the group category
          application/x-www-form-urlencoded:
            schema: *id346
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id344
                required: *id345
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}:
    get:
      summary: List Group_Categories
      description: "Returns the data for a single group category, or a 401 if the caller doesn’t have the rights to see it.\n\nRequired OAuth scope: url:GET|/api/v1/group_categories/:group_category_id"
      operationId: get_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id344
                required: *id345
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Group_Categories
      description: "Modifies an existing group category.\n\nRequired OAuth scope: url:PUT|/api/v1/group_categories/:group_category_id"
      operationId: update_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: Name of the group category
        schema:
          type: string
      - name: self_signup
        in: query
        required: false
        description: 'Allow students to sign up for a group themselves (Course Only). Valid values are:“enabled”allows students to self sign up for any group in course“restricted”allows students to self sign up only for groups in the same section null disallows self sign upAllowed values: enabled, restricted'
        schema:
          type: string
      - name: auto_leader
        in: query
        required: false
        description: 'Assigns group leaders automatically when generating and allocating students to groups Valid values are:“first”the first student to be allocated to a group is the leader“random”a random student from all members is chosen as the leaderAllowed values: first, random'
        schema:
          type: string
      - name: group_limit
        in: query
        required: false
        description: Limit the maximum number of users in each group (Course Only). Requires self signup.
        schema:
          type: integer
      - name: sis_group_category_id
        in: query
        required: false
        description: The unique SIS identifier.
        schema:
          type: string
      - name: create_group_count
        in: query
        required: false
        description: Create this number of groups (Course Only).
        schema:
          type: integer
      - name: split_group_count
        in: query
        required: false
        description: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with “enable_self_signup”. because the group assignment happens synchronously, it’s recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id344
                required: *id345
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Group_Categories
      description: "Deletes a group category and all groups under it. Protected group categories can not be deleted, i.e. “communities” and “student\\_organized”.\n\nRequired OAuth scope: url:DELETE|/api/v1/group_categories/:group_category_id"
      operationId: delete_group_categories
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/group_categories/bulk_manage_differentiation_tag:
    post:
      summary: Post Courses Bulk_Manage_Differentiation_Tag
      description: "This API is only meant for Groups and GroupCategories where non\\_collaborative is true. Perform bulk operations on groups within a group category, or create a new group category along with the groups in one transaction. If creation of the GroupCategory or any Group fails, the entire operation will be rolled back.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/group_categories/bulk_manage_differentiation_tag"
      operationId: create_bulk_manage_differentiation_tag
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id347
              type: object
              properties:
                operations:
                  type: string
                  description: "A hash containing arrays of create/update/delete operations: {\"create\": [\n  { \"name\": \"New Group A\" },\n  { \"name\": \"New Group B\" }\n],\n\"update\": [\n  { \"id\": 123, \"name\": \"Updated Group Name A\" },\n  { \"id\": 456, \"name\": \"Updated Group Name B\" }\n],\n\"delete\": [\n  { \"id\": 789 },\n  { \"id\": 101 }\n]\n}"
                group_category:
                  type: string
                  description: "Attributes for the GroupCategory. May include:- id [Optional, Integer]: The ID of an existing GroupCategory.\n- name [Optional, String]: A new name for the GroupCategory. If provided with an ID, the category name will be updated."
          application/x-www-form-urlencoded:
            schema: *id347
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/group_categories/import_tags:
    post:
      summary: Post Courses Import_Tags
      description: "Create Differentiation Tags through a CSV import For more information on the format that’s expected here, please see the “Differentiation Tag CSV” section in the API docs.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/group_categories/import_tags"
      operationId: create_import_tags
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: attachment
        in: query
        required: true
        description: "There are two ways to post differentiation tag import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be tag data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/import_tags'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories_tags'"
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}/import:
    post:
      summary: Post Group_Categories Import
      description: "Create Groups in a Group Category through a CSV import For more information on the format that’s expected here, please see the “Group Category CSV” section in the API docs.\n\nRequired OAuth scope: url:POST|/api/v1/group_categories/:group_category_id/import"
      operationId: create_import
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      - name: attachment
        in: query
        required: true
        description: "There are two ways to post group category import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.‘attachment’ is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named ‘attachment’.Examples:curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/<category_id>/import'\nIf you decide to do a raw post, you can skip the ‘attachment’ argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the ‘extension’ argument.Examples:curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv <br>    -H \"Authorization: Bearer <token>\" <br>    'https://<canvas>/api/v1/group_categories/<category_id>/import'"
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}/groups:
    get:
      summary: Get Group_Categories Groups
      description: "Returns a paginated list of groups in a group category\n\nRequired OAuth scope: url:GET|/api/v1/group_categories/:group_category_id/groups"
      operationId: get_groups
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Group_Categories Groups
      description: "Creates a new group. Groups created using the “/api/v1/groups/” endpoint will be community groups.\n\nRequired OAuth scope: url:POST|/api/v1/group_categories/:group_category_id/groups"
      operationId: create_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the group
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: A description of the group
        schema:
          type: string
      - name: is_public
        in: query
        required: false
        description: whether the group is public (applies only to community groups)
        schema:
          type: boolean
      - name: join_level
        in: query
        required: false
        description: 'no descriptionAllowed values: parent_context_auto_join, parent_context_request, invitation_only'
        schema:
          type: string
      - name: storage_quota_mb
        in: query
        required: false
        description: The allowed file storage for the group, in megabytes. This parameter is ignored if the caller does not have the manage_storage_quotas permission.
        schema:
          type: integer
      - name: sis_group_id
        in: query
        required: false
        description: The sis ID of the group. Must have manage_sis permission to set.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id348
                required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}/export:
    get:
      summary: Get Group_Categories Export
      description: "Returns a csv file of users in format ready to import.\n\nRequired OAuth scope: url:GET|/api/v1/group_categories/:group_category_id/export"
      operationId: get_export
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}/users:
    get:
      summary: Get Group_Categories Users
      description: "Returns a paginated list of users in the group category.\n\nRequired OAuth scope: url:GET|/api/v1/group_categories/:group_category_id/users"
      operationId: get_users
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.
        schema:
          type: string
      - name: unassigned
        in: query
        required: false
        description: Set this value to true if you wish only to search unassigned users in the group category.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/group_categories/{group_category_id}/assign_unassigned_members:
    post:
      summary: Post Group_Categories Assign_Unassigned_Members
      description: "Assign all unassigned members as evenly as possible among the existing student groups.\n\nRequired OAuth scope: url:POST|/api/v1/group_categories/:group_category_id/assign_unassigned_members"
      operationId: create_assign_unassigned_members
      tags:
      - Group Categories
      security:
      - bearerAuth: []
      parameters:
      - name: group_category_id
        in: path
        required: true
        description: The group_category_id identifier
        schema:
          type: string
      - name: sync
        in: query
        required: false
        description: The assigning is done asynchronously by default. If you would like to override this and have the assigning done synchronously, set this value to true.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/reports:
    post:
      summary: Post V1 Reports
      description: "Generate a new report for this quiz. Returns a progress object that can be used to track the progress of the report generation.\n\nRequired OAuth scope: url:POST|/api/quiz/v1/courses/:course_id/quizzes/:assignment_id/reports"
      operationId: create_reports
      tags:
      - New Quizzes Reports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id350
              type: object
              properties:
                quiz_report[report_type]:
                  type: string
                  description: 'The type of report to be generated.Allowed values: student_analysis, item_analysis'
                quiz_report[format]:
                  type: string
                  description: 'The format of report to be generated.Allowed values: csv, json'
          application/x-www-form-urlencoded:
            schema: *id350
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id351
                required: *id352
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/search:
    get:
      summary: Get Accounts Search
      description: "Returns a list of up to 5 matching account domains Partial match on name / domain are supported\n\nRequired OAuth scope: url:GET|/api/v1/accounts/search"
      operationId: list_search
      tags:
      - Account Domain Lookups
      security:
      - bearerAuth: []
      parameters:
      - name: name
        in: query
        required: false
        description: campus name
        schema:
          type: string
      - name: domain
        in: query
        required: false
        description: no description
        schema:
          type: string
      - name: latitude
        in: query
        required: false
        description: no description
        schema:
          type: number
      - name: longitude
        in: query
        required: false
        description: no description
        schema:
          type: number
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/quizzes/{quiz_id}/extensions:
    post:
      summary: Post Courses Extensions
      description: "Post Courses Extensions\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/quizzes/:quiz_id/extensions"
      operationId: create_extensions
      tags:
      - Quiz Extensions
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: quiz_id
        in: path
        required: true
        description: The quiz_id identifier
        schema:
          type: string
      - name: quiz_extensions[][extra_attempts]
        in: query
        required: false
        description: Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.
        schema:
          type: integer
      - name: quiz_extensions[][extra_time]
        in: query
        required: false
        description: The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)
        schema:
          type: integer
      - name: quiz_extensions[][manually_unlocked]
        in: query
        required: false
        description: Allow the student to take the quiz even if it’s locked for everyone else.
        schema:
          type: boolean
      - name: quiz_extensions[][extend_from_now]
        in: query
        required: false
        description: The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)
        schema:
          type: integer
      - name: quiz_extensions[][extend_from_end_at]
        in: query
        required: false
        description: The number of minutes to extend the quiz beyond the quiz’s current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id353
              type: object
              properties:
                quiz_extensions[][user_id]:
                  type: string
                  description: The ID of the user we want to add quiz extensions for.
          application/x-www-form-urlencoded:
            schema: *id353
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/enrollments:
    get:
      summary: Get Courses Enrollments
      description: "Get Courses Enrollments\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/enrollments"
      operationId: get_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Enrollments
      description: "Post Courses Enrollments\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/enrollments"
      operationId: create_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/sections/{section_id}/enrollments:
    get:
      summary: Get Sections Enrollments
      description: "Get Sections Enrollments\n\nRequired OAuth scope: url:GET|/api/v1/sections/:section_id/enrollments"
      operationId: get_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Sections Enrollments
      description: "Create a new user enrollment for a course or section.\n\nRequired OAuth scope: url:POST|/api/v1/sections/:section_id/enrollments"
      operationId: create_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: section_id
        in: path
        required: true
        description: The section_id identifier
        schema:
          type: string
      - name: enrollment[role_id]
        in: query
        required: false
        description: Assigns a custom course-level role to the user.
        schema:
          type: integer
      - name: enrollment[enrollment_state]
        in: query
        required: true
        description: 'If set to ‘active,’ student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is ‘invited.’.If set to ‘inactive’, student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.Allowed values: active, invited, inactive'
        schema:
          type: string
      - name: enrollment[course_section_id]
        in: query
        required: false
        description: The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.
        schema:
          type: integer
      - name: enrollment[limit_privileges_to_course_section]
        in: query
        required: false
        description: If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id.For teachers and TAs, this includes grading privileges.Section-limited students will not see any users (including teachers and TAs) not enrolled in their sections.Users may have other enrollments that grant privileges to multiple sections in the same course.
        schema:
          type: boolean
      - name: enrollment[notify]
        in: query
        required: false
        description: If true, a notification will be sent to the enrolled user. Notifications are not sent by default.
        schema:
          type: boolean
      - name: enrollment[self_enrollment_code]
        in: query
        required: false
        description: If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be ‘self’. The enrollment_state will be set to ‘active’ and all other arguments will be ignored.
        schema:
          type: string
      - name: enrollment[self_enrolled]
        in: query
        required: false
        description: If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.
        schema:
          type: boolean
      - name: enrollment[associated_user_id]
        in: query
        required: false
        description: For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student’s enrollments (for example, as a parent), please use the User Observees API.
        schema:
          type: integer
      - name: enrollment[sis_user_id]
        in: query
        required: true
        description: Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        schema:
          type: string
      - name: enrollment[integration_id]
        in: query
        required: true
        description: Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        schema:
          type: string
      - name: root_account
        in: query
        required: false
        description: The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id354
              type: object
              properties:
                enrollment[start_at]:
                  type: string
                  description: The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
                enrollment[end_at]:
                  type: string
                  description: The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
                enrollment[user_id]:
                  type: string
                  description: The ID of the user to be enrolled in the course.
                enrollment[type]:
                  type: string
                  description: 'Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise ‘StudentEnrollment’ will be used.Allowed values: StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment'
                enrollment[role]:
                  type: string
                  description: Assigns a custom course-level role to the user.
          application/x-www-form-urlencoded:
            schema: *id354
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id355
                required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/enrollments:
    get:
      summary: Get Users Enrollments
      description: "Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user’s enrollments. This includes student, teacher, TA, and observer enrollments. If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately. note: Currently, only a root level admin user can return other users’ enrollments. A user can, however, return his/her own enrollments. Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state\\[] parameter is omitted.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/enrollments"
      operationId: get_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: type[]
        in: query
        required: false
        description: A list of enrollment types to return. Accepted values are ‘StudentEnrollment’, ‘TeacherEnrollment’, ‘TaEnrollment’, ‘DesignerEnrollment’, and ‘ObserverEnrollment.’ If omitted, all enrollment types are returned. This argument is ignored if ‘role` is given.
        schema:
          type: string
      - name: role[]
        in: query
        required: false
        description: A list of enrollment roles to return. Accepted values include course-level roles created by the Add Role API as well as the base enrollment types accepted by the ‘type` argument above.
        schema:
          type: string
      - name: state[]
        in: query
        required: false
        description: 'Filter by enrollment state. If omitted, ‘active’ and ‘invited’ enrollments are returned. The following synthetic states are supported only when querying a user’s enrollments (either via user_id argument or via user enrollments endpoint): current_and_invited, current_and_future, current_future_and_restricted, current_and_concludedAllowed values: active, invited, creation_pending, deleted, rejected, completed, inactive, current_and_invited, current_and_future, current_future_and_restricted, current_and_concluded'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include on the enrollment or user records. “avatar_url” and “group_ids” will be returned on the user record. If “current_points” is specified, the fields “current_points” and (if the caller has permissions to manage grades) “unposted_current_points” will be included in the “grades” hash for student enrollments.Allowed values: avatar_url, group_ids, locked, observed_users, can_be_removed, uuid, current_points'
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: Filter by user_id (only valid for course or section enrollment queries). If set to the current user’s id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.
        schema:
          type: string
      - name: grading_period_id
        in: query
        required: false
        description: Return grades for the given grading_period. If this parameter is not specified, the returned grades will be for the whole course.
        schema:
          type: integer
      - name: enrollment_term_id
        in: query
        required: false
        description: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with ‘sis_term_id:’.
        schema:
          type: integer
      - name: sis_account_id[]
        in: query
        required: false
        description: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        schema:
          type: string
      - name: sis_course_id[]
        in: query
        required: false
        description: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        schema:
          type: string
      - name: sis_section_id[]
        in: query
        required: false
        description: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        schema:
          type: string
      - name: sis_user_id[]
        in: query
        required: false
        description: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        schema:
          type: string
      - name: created_for_sis_id[]
        in: query
        required: false
        description: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id’s, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id355
                  required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/enrollments/{id}:
    get:
      summary: Get Accounts Enrollments
      description: "Get an Enrollment object by Enrollment ID\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/enrollments/:id"
      operationId: get_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The ID of the enrollment object
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id355
                required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/bulk_enrollment:
    post:
      summary: Post Accounts Bulk_Enrollment
      description: "Enrolls multiple users in one or more courses in a single operation.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/bulk_enrollment"
      operationId: create_bulk_enrollment
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: enrollment_type
        in: query
        required: false
        description: 'Enroll each user as a student, teacher, TA, observer, or designer. If no value is given, the type will be ‘StudentEnrollment’.Allowed values: StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id357
              type: object
              properties:
                user_ids[]:
                  type: string
                  description: The user IDs to enroll in the courses.
                course_ids[]:
                  type: string
                  description: The course IDs to enroll each user in.
          application/x-www-form-urlencoded:
            schema: *id357
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/enrollments/{id}:
    delete:
      summary: Delete Courses Enrollments
      description: "Conclude, deactivate, or delete an enrollment. If the `task` argument isn’t given, the enrollment will be concluded.\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/enrollments/:id"
      operationId: delete_enrollments
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: task
        in: query
        required: false
        description: 'The action to take on the enrollment. When inactive, a user will still appear in the course roster to admins, but be unable to participate. (“inactivate” and “deactivate” are equivalent tasks)Allowed values: conclude, delete, inactivate, deactivate'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id355
                required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/enrollments/{id}/accept:
    post:
      summary: Post Courses Accept
      description: "accepts a pending course invitation for the current user\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/enrollments/:id/accept"
      operationId: create_accept
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/enrollments/{id}/reject:
    post:
      summary: Post Courses Reject
      description: "rejects a pending course invitation for the current user\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/enrollments/:id/reject"
      operationId: create_reject
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/enrollments/{id}/reactivate:
    put:
      summary: Put Courses Reactivate
      description: "Activates an inactive enrollment\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/enrollments/:id/reactivate"
      operationId: update_reactivate
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id355
                required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/users/{user_id}/last_attended:
    put:
      summary: Put Courses Last_Attended
      description: "Add last attended date to student enrollment in course\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/users/:user_id/last_attended"
      operationId: update_last_attended
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id358
              type: object
              properties:
                date:
                  type: string
                  description: The last attended date of a student enrollment in a course.
          application/x-www-form-urlencoded:
            schema: *id358
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id355
                required: *id356
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/temporary_enrollment_status:
    get:
      summary: Get Users Temporary_Enrollment_Status
      description: "Returns a JSON Object containing the temporary enrollment status for a user.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/temporary_enrollment_status"
      operationId: get_temporary_enrollment_status
      tags:
      - Enrollments
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: account_id
        in: query
        required: false
        description: The ID of the account to check for temporary enrollment status. Defaults to the domain root account if not provided.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/live_assessments/{assessment_id}/results:
    post:
      summary: Post Courses Results
      description: "Creates live assessment results and adds them to a live assessment\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/live_assessments/:assessment_id/results"
      operationId: create_results
      tags:
      - LiveAssessments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assessment_id
        in: path
        required: true
        description: The assessment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Results
      description: "Returns a paginated list of live assessment results\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/live_assessments/:assessment_id/results"
      operationId: get_results
      tags:
      - LiveAssessments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assessment_id
        in: path
        required: true
        description: The assessment_id identifier
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: If set, restrict results to those for this user
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/live_assessments:
    post:
      summary: Post Courses Live_Assessments
      description: "Creates or finds an existing live assessment with the given key and aligns it with the linked outcome\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/live_assessments"
      operationId: create_live_assessments
      tags:
      - LiveAssessments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Live_Assessments
      description: "Returns a paginated list of live assessments.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/live_assessments"
      operationId: get_live_assessments
      tags:
      - LiveAssessments
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/self/groups:
    get:
      summary: Get Users Groups
      description: "Returns a paginated list of active groups for the current user.\n\nRequired OAuth scope: url:GET|/api/v1/users/self/groups"
      operationId: list_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: context_type
        in: query
        required: false
        description: 'Only include groups that are in this type of context.Allowed values: Account, Course'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: tabs'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id348
                  required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/groups:
    get:
      summary: Get Accounts Groups
      description: "Get Accounts Groups\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/groups"
      operationId: get_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/groups:
    get:
      summary: Get Courses Groups
      description: "Returns the paginated list of active groups in the given context that are visible to user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/groups"
      operationId: get_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: only_own_groups
        in: query
        required: false
        description: Will only include groups that the user belongs to if this is set
        schema:
          type: boolean
      - name: include[]
        in: query
        required: false
        description: '“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: tabs'
        schema:
          type: string
      - name: collaboration_state
        in: query
        required: false
        description: 'Filter groups by their collaboration state:“all”: Return both collaborative and non-collaborative groups“collaborative”: Return only collaborative groups (default)“non_collaborative”: Return only non-collaborative groups'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id348
                  required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/bulk_user_tags:
    get:
      summary: Get Courses Bulk_User_Tags
      description: "Returns a mapping of user IDs to arrays of non-collaborative group (tag) IDs for each user in the given course.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/bulk_user_tags"
      operationId: get_bulk_user_tags
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_id
        in: query
        required: false
        description: The ID of the course context (from the route).
        schema:
          type: integer
      - name: user_ids[]
        in: query
        required: false
        description: An array of user IDs to fetch tags for.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}:
    get:
      summary: List Groups
      description: "Returns the data for a single group, or a 401 if the caller doesn’t have the rights to see it.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id"
      operationId: get_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“permissions”: Include permissions the current user has for the group.“tabs”: Include the list of tabs configured for each group. See the List available tabs API for more information.Allowed values: permissions, tabs'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id348
                  required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Groups
      description: "Modifies an existing group. Note that to set an avatar image for the group, you must first upload the image file to the group, and the use the id in the response as the argument to this function. See the [File Upload Documentation](../basics/file.file_uploads) for details on the file upload workflow.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id"
      operationId: update_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: name
        in: query
        required: false
        description: The name of the group
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: A description of the group
        schema:
          type: string
      - name: is_public
        in: query
        required: false
        description: Whether the group is public (applies only to community groups). Currently you cannot set a group back to private once it has been made public.
        schema:
          type: boolean
      - name: join_level
        in: query
        required: false
        description: 'no descriptionAllowed values: parent_context_auto_join, parent_context_request, invitation_only'
        schema:
          type: string
      - name: avatar_id
        in: query
        required: false
        description: The id of the attachment previously uploaded to the group that you would like to use as the avatar image for this group.
        schema:
          type: integer
      - name: storage_quota_mb
        in: query
        required: false
        description: The allowed file storage for the group, in megabytes. This parameter is ignored if the caller does not have the manage_storage_quotas permission.
        schema:
          type: integer
      - name: members[]
        in: query
        required: false
        description: An array of user ids for users you would like in the group. Users not in the group will be sent invitations. Existing group members who aren’t in the list will be removed from the group.
        schema:
          type: string
      - name: sis_group_id
        in: query
        required: false
        description: The sis ID of the group. Must have manage_sis permission to set.
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id348
                required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups
      description: "Deletes a group and removes all members.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id"
      operationId: delete_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id348
                required: *id349
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups:
    post:
      summary: Create Groups
      description: "Create Groups\n\nRequired OAuth scope: url:POST|/api/v1/groups"
      operationId: create_groups
      tags:
      - Groups
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/invite:
    post:
      summary: Post Groups Invite
      description: "Sends an invitation to all supplied email addresses which will allow the receivers to join the group.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/invite"
      operationId: create_invite
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id359
              type: object
              properties:
                invitees[]:
                  type: string
                  description: An array of email addresses to be sent invitations.
          application/x-www-form-urlencoded:
            schema: *id359
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/users:
    get:
      summary: Get Groups Users
      description: "Returns a paginated list of users in the group.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/users"
      operationId: get_users
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: '“avatar_url”: Include users’ avatar_urls.Allowed values: avatar_url'
        schema:
          type: string
      - name: exclude_inactive
        in: query
        required: false
        description: Whether to filter out inactive users from the results. Defaults to false unless explicitly provided.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Users
      description: "Delete Groups Users\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/users"
      operationId: delete_users
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/preview_html:
    post:
      summary: Post Groups Preview_Html
      description: "Preview html content processed for this group\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/preview_html"
      operationId: create_preview_html
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: html
        in: query
        required: false
        description: The html content to process
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/activity_stream:
    get:
      summary: Get Groups Activity_Stream
      description: "Returns the current user’s group-specific activity stream, paginated. For full documentation, see the API documentation for the user activity stream, in the user api. ### [Group activity stream summary](#method.groups.activity_stream_summary) <a href=\"#method.groups.activity_stream_summary\" id=\"method.groups.activity_stream_summary\"></a> [GroupsController#activity\\_stream\\_summary](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/activity_stream"
      operationId: get_activity_stream
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/activity_stream/summary:
    get:
      summary: Get Groups Summary
      description: "Returns a summary of the current user’s group-specific activity stream. For full documentation, see the API documentation for the user activity stream summary, in the user api. ### [Permissions](#method.groups.permissions) <a href=\"#method.groups.permissions\" id=\"method.groups.permissions\"></a> [GroupsController#permissions](https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/activity_stream/summary"
      operationId: get_summary
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/permissions:
    get:
      summary: Get Groups Permissions
      description: "Returns permission information for the calling user in the given group. See also the [Account](../accounts#method.accounts.permissions) and [Course](../courses#method.courses.permissions) counterparts.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/permissions"
      operationId: get_permissions
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: permissions[]
        in: query
        required: false
        description: List of permissions to check against the authenticated user. Permission names are documented in the List assignable permissions endpoint.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/memberships:
    get:
      summary: Get Groups Memberships
      description: "A paginated list of the members of a group.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/memberships"
      operationId: get_memberships
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: filter_states[]
        in: query
        required: false
        description: 'Only list memberships with the given workflow_states. By default it will return all memberships.Allowed values: accepted, invited, requested'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id360
                  required: *id361
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Memberships
      description: "Join, or request to join, a group, depending on the join\\_level of the group. If the membership or join request already exists, then it is simply returned. For differentiation tags, you can bulk add users using one of two methods: 1. Provide an array of user IDs via the ‘members\\[]\\` parameter. 2. Use the course-wide option with the following parameters: * ‘all\\_in\\_group\\_course\\` \\[Boolean]: If set to true, the endpoint will add every currently enrolled student (from the course context) to the differentiation tag. * ‘exclude\\_user\\_ids\\[]\\` \\[Integer]: When using \\`all\\_in\\_group\\_course\\`, you can optionally exclude specific users by providing their IDs in this parameter. In this context, these parameters only apply to differentiation tag memberships.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/memberships"
      operationId: create_memberships
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        description: The ID of the user for individual membership creation.
        schema:
          type: string
      - name: members[]
        in: query
        required: false
        description: Bulk add multiple users to a differentiation tag.
        schema:
          type: integer
      - name: all_in_group_course
        in: query
        required: false
        description: If true, add all enrolled students from the course.
        schema:
          type: boolean
      - name: exclude_user_ids[]
        in: query
        required: false
        description: An array of user IDs to exclude when using all_in_group_course.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/memberships/{membership_id}:
    get:
      summary: Get Groups Memberships
      description: "Get Groups Memberships\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/memberships/:membership_id"
      operationId: get_memberships
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: membership_id
        in: path
        required: true
        description: The membership_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Memberships
      description: "Put Groups Memberships\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/memberships/:membership_id"
      operationId: update_memberships
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: membership_id
        in: path
        required: true
        description: The membership_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Memberships
      description: "Delete Groups Memberships\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/memberships/:membership_id"
      operationId: delete_memberships
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: membership_id
        in: path
        required: true
        description: The membership_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/users/{user_id}:
    get:
      summary: Get Groups Users
      description: "Returns the group membership with the given membership id or user id.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/users/:user_id"
      operationId: get_users
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id360
                required: *id361
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Users
      description: "Accept a membership request, or add/remove moderator rights.\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/users/:user_id"
      operationId: update_users
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: workflow_state
        in: query
        required: false
        description: 'Currently, the only allowed value is “accepted”Allowed values: accepted'
        schema:
          type: string
      - name: moderator
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id360
                required: *id361
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Groups Users
      description: "Leave a group if you are allowed to leave (some groups, such as sets of course groups created by teachers, cannot be left). You may also use ‘self’ in place of a membership\\_id.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/users/:user_id"
      operationId: delete_users
      tags:
      - Groups
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues:
    get:
      summary: Get Accounts Migration_Issues
      description: "Get Accounts Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues:
    get:
      summary: Get Courses Migration_Issues
      description: "Get Courses Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues:
    get:
      summary: Get Groups Migration_Issues
      description: "Get Groups Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues:
    get:
      summary: Get Users Migration_Issues
      description: "Returns paginated migration issues\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id362
                  required: *id363
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}:
    get:
      summary: Get Accounts Migration_Issues
      description: "Get Accounts Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Migration_Issues
      description: "Put Accounts Migration_Issues\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: update_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}:
    get:
      summary: Get Courses Migration_Issues
      description: "Get Courses Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Migration_Issues
      description: "Put Courses Migration_Issues\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: update_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}:
    get:
      summary: Get Groups Migration_Issues
      description: "Get Groups Migration_Issues\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Migration_Issues
      description: "Put Groups Migration_Issues\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: update_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}:
    get:
      summary: Get Users Migration_Issues
      description: "Returns data on an individual migration issue\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: get_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id362
                required: *id363
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Migration_Issues
      description: "Update the workflow\\_state of a migration issue\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/content_migrations/:content_migration_id/migration_issues/:id"
      operationId: update_migration_issues
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: content_migration_id
        in: path
        required: true
        description: The content_migration_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id364
              type: object
              properties:
                workflow_state:
                  type: string
                  description: 'Set the workflow_state of the issue.Allowed values: active, resolved'
          application/x-www-form-urlencoded:
            schema: *id364
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id362
                required: *id363
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations:
    get:
      summary: Get Accounts Content_Migrations
      description: "Get Accounts Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Content_Migrations
      description: "Post Accounts Content_Migrations\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/content_migrations"
      operationId: create_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations:
    get:
      summary: Get Courses Content_Migrations
      description: "Get Courses Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Content_Migrations
      description: "Post Courses Content_Migrations\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/content_migrations"
      operationId: create_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations:
    get:
      summary: Get Groups Content_Migrations
      description: "Get Groups Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups Content_Migrations
      description: "Post Groups Content_Migrations\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/content_migrations"
      operationId: create_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations:
    get:
      summary: Get Users Content_Migrations
      description: "Returns paginated content migrations\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Users Content_Migrations
      description: "Create a content migration. If the migration requires a file to be uploaded the actual processing of the file will start once the file upload process is completed. File uploading works as described in the [File Upload Documentation](../basics/file.file_uploads) except that the values are set on a **pre\\_attachment** sub-hash. For migrations that don’t require a file to be uploaded, like course copy, the processing will begin as soon as the migration is created. You can use the [Progress API](../progress#method.progress.show) to track the progress of the migration. The migration’s progress is linked to with the _progress\\_url_ value. The two general workflows are: If no file upload is needed: 1. POST to create 2. Use the [Progress](../progress#method.progress.show) specified in _progress\\_url_ to monitor progress For file uploading: 1. POST to create with file info in **pre\\_attachment** 2. Do [file upload processing](../basics/file.file_uploads) using the data in the **pre\\_attachment** data 3. [GET](#method.content_migrations.show) the ContentMigration 4. Use the [Progress](../progress#method.progress.show) specified in _progress\\_url_ to monitor progress ``` (required if doing .zip file upload) ```\n\nRequired OAuth scope: url:POST|/api/v1/users/:user_id/content_migrations"
      operationId: create_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: pre_attachment[name]
        in: query
        required: true
        description: Required if uploading a file. This is the first step in uploading a file to the content migration. See the File Upload Documentation for details on the file upload workflow.
        schema:
          type: string
      - name: pre_attachment[*]
        in: query
        required: false
        description: Other file upload properties, See File Upload Documentation
        schema:
          type: string
      - name: settings[file_url]
        in: query
        required: false
        description: A URL to download the file from. Must not require authentication.
        schema:
          type: string
      - name: settings[content_export_id]
        in: query
        required: false
        description: The id of a ContentExport to import. This allows you to import content previously exported from Canvas without needing to download and re-upload it.
        schema:
          type: string
      - name: settings[source_course_id]
        in: query
        required: true
        description: The course to copy from for a course copy migration. (required if doing course copy)
        schema:
          type: string
      - name: settings[folder_id]
        in: query
        required: false
        description: The folder to unzip the .zip file into for a zip_file_import.
        schema:
          type: string
      - name: settings[overwrite_quizzes]
        in: query
        required: false
        description: Whether to overwrite quizzes with the same identifiers between content packages.
        schema:
          type: boolean
      - name: settings[question_bank_id]
        in: query
        required: false
        description: The existing question bank ID to import questions into if not specified in the content package.
        schema:
          type: integer
      - name: settings[question_bank_name]
        in: query
        required: false
        description: The question bank to import questions into if not specified in the content package, if both bank id and name are set, id will take precedence.
        schema:
          type: string
      - name: settings[insert_into_module_id]
        in: query
        required: false
        description: The id of a module in the target course. This will add all imported items (that can be added to a module) to the given module.
        schema:
          type: integer
      - name: settings[insert_into_module_type]
        in: query
        required: false
        description: 'If provided (and insert_into_module_id is supplied), only add objects of the specified type to the module.Allowed values: assignment, discussion_topic, file, page, quiz'
        schema:
          type: string
      - name: settings[insert_into_module_position]
        in: query
        required: false
        description: The (1-based) position to insert the imported items into the course (if insert_into_module_id is supplied). If this parameter is omitted, items will be added to the end of the module.
        schema:
          type: integer
      - name: settings[move_to_assignment_group_id]
        in: query
        required: false
        description: The id of an assignment group in the target course. If provided, all imported assignments will be moved to the given assignment group.
        schema:
          type: integer
      - name: settings[import_blueprint_settings]
        in: query
        required: false
        description: Import the “use as blueprint course” setting as well as the list of locked items from the source course or package. The destination course must not be associated with an existing blueprint course and cannot have any student or observer enrollments.
        schema:
          type: boolean
      - name: date_shift_options[shift_dates]
        in: query
        required: false
        description: Whether to shift dates in the copied course
        schema:
          type: boolean
      - name: date_shift_options[day_substitutions][X]
        in: query
        required: false
        description: Move anything scheduled for day ‘X’ to the specified day. (0-Sunday, 1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)
        schema:
          type: integer
      - name: date_shift_options[remove_dates]
        in: query
        required: false
        description: Whether to remove dates in the copied course. Cannot be used in conjunction with shift_dates.
        schema:
          type: boolean
      - name: selective_import
        in: query
        required: false
        description: If set, perform a selective import instead of importing all content. The migration will identify the contents of the package and then stop in the waiting_for_select workflow state. At this point, use the List items endpoint to enumerate the contents of the package, identifying the copy parameters for the desired content. Then call the Update endpoint and provide these copy parameters to start the import.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id365
              type: object
              properties:
                migration_type:
                  type: string
                  description: 'The type of the migration. Use the Migrator endpoint to see all available migrators. Default allowed values: canvas_cartridge_importer, common_cartridge_importer, course_copy_importer, zip_file_importer, qti_converter, moodle_converter'
                settings[importer_skips]:
                  type: string
                  description: 'Set of importers to skip, even if otherwise selected by migration settings.Allowed values: all_course_settings, visibility_settings'
                date_shift_options[old_start_date]:
                  type: string
                  description: The original start date of the source content/course
                date_shift_options[old_end_date]:
                  type: string
                  description: The original end date of the source content/course
                date_shift_options[new_start_date]:
                  type: string
                  description: The new start date for the content/course
                date_shift_options[new_end_date]:
                  type: string
                  description: The new end date for the source content/course
                select:
                  type: string
                  description: 'For course_copy_importer migrations, this parameter allows you to select the objects to copy without using the selective_import argument and waiting_for_select state as is required for uploaded imports (though that workflow is also supported for course copy migrations). The keys are object types like ‘files’, ‘folders’, ‘pages’, etc. The value for each key is a list of object ids. An id can be an integer or a string. Multiple object types can be selected in the same call.Allowed values: folders, files, attachments, quizzes, assignments, announcements, calendar_events, discussion_topics, modules, module_items, pages, rubrics'
              required:
              - select
          application/x-www-form-urlencoded:
            schema: *id365
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations/{id}:
    get:
      summary: Get Accounts Content_Migrations
      description: "Get Accounts Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations/:id"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Content_Migrations
      description: "Put Accounts Content_Migrations\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/content_migrations/:id"
      operationId: update_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/{id}:
    get:
      summary: Get Courses Content_Migrations
      description: "Get Courses Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/:id"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Content_Migrations
      description: "Put Courses Content_Migrations\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/content_migrations/:id"
      operationId: update_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations/{id}:
    get:
      summary: Get Groups Content_Migrations
      description: "Get Groups Content_Migrations\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations/:id"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Groups Content_Migrations
      description: "Put Groups Content_Migrations\n\nRequired OAuth scope: url:PUT|/api/v1/groups/:group_id/content_migrations/:id"
      operationId: update_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations/{id}:
    get:
      summary: Get Users Content_Migrations
      description: "Returns data on an individual content migration\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations/:id"
      operationId: get_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Users Content_Migrations
      description: "Update a content migration. Takes same arguments as [create](#method.content_migrations.create) except that you can’t change the migration type. However, changing most settings after the migration process has started will not do anything. Generally updating the content migration will be used when there is a file upload problem, or when importing content selectively. If the first upload has a problem you can supply new _pre\\_attachment_ values to start the process again. Returns a [ContentMigration](#contentmigration) object. ### [List Migration Systems](#method.content_migrations.available_migrators) <a href=\"#method.content_migrations.available_migrators\" id=\"method.content_migrations.available_migrators\"></a> [ContentMigrationsController#available\\_migrators](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb)\n\nRequired OAuth scope: url:PUT|/api/v1/users/:user_id/content_migrations/:id"
      operationId: update_content_migrations
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations/migrators:
    get:
      summary: Get Accounts Migrators
      description: "Get Accounts Migrators\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations/migrators"
      operationId: get_migrators
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/migrators:
    get:
      summary: Get Courses Migrators
      description: "Get Courses Migrators\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/migrators"
      operationId: get_migrators
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations/migrators:
    get:
      summary: Get Groups Migrators
      description: "Get Groups Migrators\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations/migrators"
      operationId: get_migrators
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations/migrators:
    get:
      summary: Get Users Migrators
      description: "Lists the currently available migration types. These values may change. Returns a list of [Migrator](#migrator) objects. ### [List items for selective import](#method.content_migrations.content_list) <a href=\"#method.content_migrations.content_list\" id=\"method.content_migrations.content_list\"></a> [ContentMigrationsController#content\\_list](https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations/migrators"
      operationId: get_migrators
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id366
                  required: *id367
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/content_migrations/{id}/selective_data:
    get:
      summary: Get Accounts Selective_Data
      description: "Get Accounts Selective_Data\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/content_migrations/:id/selective_data"
      operationId: get_selective_data
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/{id}/selective_data:
    get:
      summary: Get Courses Selective_Data
      description: "Get Courses Selective_Data\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/:id/selective_data"
      operationId: get_selective_data
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/content_migrations/{id}/selective_data:
    get:
      summary: Get Groups Selective_Data
      description: "Get Groups Selective_Data\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/content_migrations/:id/selective_data"
      operationId: get_selective_data
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/content_migrations/{id}/selective_data:
    get:
      summary: Get Users Selective_Data
      description: "Enumerates the content available for selective import in a tree structure. Each node provides a `property` copy argument that can be supplied to the [Update endpoint](#method.content_migrations.update) to selectively copy the content associated with that tree node and its children. Each node may also provide a `sub_items_url` or an array of `sub_items` which you can use to obtain copy parameters for a subset of the resources in a given node. If no `type` is sent you will get a list of the top-level sections in the content. It will look something like this: ``` [{ \"type\": \"course_settings\", \"property\": \"copy[all_course_settings]\", \"title\": \"Course Settings\" }, { \"type\": \"context_modules\", \"property\": \"copy[all_context_modules]\", \"title\": \"Modules\", \"count\": 5, \"sub_items_url\": \"http://example.com/api/v1/courses/22/content_migrations/77/selective_data?type=context_modules\" }, { \"type\": \"assignments\", \"property\": \"copy[all_assignments]\", \"title\": \"Assignments\", \"count\": 2, \"sub_items_url\": \"http://localhost:3000/api/v1/courses/22/content_migrations/77/selective_data?type=assignments\" }] ``` When a `type` is provided, nodes may be further divided via `sub_items`. For example, using type=assignments results in a node for each assignment group and a sub\\_item for each assignment, like this: ``` [{ \"type\": \"assignment_groups\", \"title\": \"An Assignment Group\", \"property\": \"copy[assignment_groups][id_i855cf145e5acc7435e1bf1c6e2126e5f]\", \"sub_items\": [{ \"type\": \"assignments\", \"title\": \"Assignment 1\", \"property\": \"copy[assignments][id_i2102a7fa93b29226774949298626719d]\" }, { \"type\": \"assignments\", \"title\": \"Assignment 2\", \"property\": \"copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]\" }] }] ``` To import the items corresponding to a particular tree node, use the `property` as a parameter to the [Update endpoint](#method.content_migrations.update) and assign a value of 1, for example: ``` copy[assignments][id_i310cba275dc3f4aa8a3306bbbe380979]=1 ``` You can include multiple copy parameters to selectively import multiple items or groups of items.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/content_migrations/:id/selective_data"
      operationId: get_selective_data
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: type
        in: query
        required: false
        description: 'The type of content to enumerate.Allowed values: context_modules, assignments, quizzes, assessment_question_banks, discussion_topics, wiki_pages, context_external_tools, tool_profiles, announcements, calendar_events, rubrics, groups, learning_outcomes, attachments'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/content_migrations/{id}/asset_id_mapping:
    get:
      summary: Get Courses Asset_Id_Mapping
      description: "Given a complete course copy or blueprint import content migration, return a mapping of asset ids from the source course to the destination course that were copied in this migration or an earlier one with the same course pair and migration\\_type (course copy or blueprint). The returned object’s keys are asset types as they appear in API URLs (`announcements`, `assignments`, `discussion_topics`, `files`, `module_items`, `modules`, `pages`, and `quizzes`). The values are a mapping from id in source course to id in destination course for objects of this type.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/content_migrations/:id/asset_id_mapping"
      operationId: get_asset_id_mapping
      tags:
      - Content Migrations
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/block_editor_templates:
    get:
      summary: Get Courses Block_Editor_Templates
      description: "A list of the block templates available to the current user.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/block_editor_templates"
      operationId: get_block_editor_templates
      tags:
      - BlockEditorTemplate
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: sort
        in: query
        required: false
        description: 'Sort results by this field.Allowed values: name, created_at, updated_at'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: 'The sorting order. Defaults to ‘asc’.Allowed values: asc, desc'
        schema:
          type: string
      - name: drafts
        in: query
        required: false
        description: If true, include draft templates. If false or omitted only published templates will be returned.
        schema:
          type: boolean
      - name: type[]
        in: query
        required: false
        description: 'What type of templates should be returned.Allowed values: page, section, block'
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'no descriptionAllowed values: node_tree, thumbnail'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id368
                  required: *id369
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/epub_exports:
    get:
      summary: List Epub_Exports
      description: "A paginated list of all courses a user is actively participating in, and the latest ePub export associated with the user & course. Returns a list of [CourseEpubExport](#courseepubexport) objects. ### [Create ePub Export](#method.epub_exports.create) <a href=\"#method.epub_exports.create\" id=\"method.epub_exports.create\"></a> [EpubExportsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/epub_exports"
      operationId: list_epub_exports
      tags:
      - ePub Exports
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id370
                  required: *id371
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/epub_exports:
    post:
      summary: Post Courses Epub_Exports
      description: "Begin an ePub export for a course. You can use the [Progress API](../progress#method.progress.show) to track the progress of the export. The export’s progress is linked to with the _progress\\_url_ value. When the export completes, use the [Show content export](#method.epub_exports.show) endpoint to retrieve a download URL for the exported content. Returns an [EpubExport](#epubexport) object. ### [Show ePub export](#method.epub_exports.show) <a href=\"#method.epub_exports.show\" id=\"method.epub_exports.show\"></a> [EpubExportsController#show](https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/epub_exports"
      operationId: create_epub_exports
      tags:
      - ePub Exports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id372
                required: *id373
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/epub_exports/{id}:
    get:
      summary: Get Courses Epub_Exports
      description: "Get information about a single ePub export. Returns an [EpubExport](#epubexport) object.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/epub_exports/:id"
      operationId: get_epub_exports
      tags:
      - ePub Exports
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id372
                required: *id373
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/calendar_events:
    get:
      summary: List Calendar_Events
      description: "Retrieve the paginated list of calendar events or assignments for the current user\n\nRequired OAuth scope: url:GET|/api/v1/calendar_events"
      operationId: list_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: type
        in: query
        required: false
        description: 'Defaults to “event”Allowed values: event, assignment, sub_assignment'
        schema:
          type: string
      - name: start_date
        in: query
        required: false
        description: 'Only return events since the start_date (inclusive). Defaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        description: 'Only return events before the end_date (inclusive). Defaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date is the same as start_date, then only events on that day are returned.'
        schema:
          type: string
      - name: undated
        in: query
        required: false
        description: Defaults to false (dated events only). If true, only return undated events and ignore start_date and end_date.
        schema:
          type: boolean
      - name: all_events
        in: query
        required: false
        description: Defaults to false (uses start_date, end_date, and undated criteria). If true, all events are returned, ignoring start_date, end_date, and undated criteria.
        schema:
          type: boolean
      - name: context_codes[]
        in: query
        required: false
        description: 'List of context codes of courses, groups, users, or accounts whose events you want to see. If not specified, defaults to the current user (i.e personal calendar, no course/group events). Limited to 10 context codes, additional ones are ignored. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42'
        schema:
          type: string
      - name: excludes[]
        in: query
        required: false
        description: Array of attributes to exclude. Possible values are “description”, “child_events” and “assignment”
        schema:
          type: array
          items:
            type: string
      - name: includes[]
        in: query
        required: false
        description: Array of optional attributes to include. Possible values are “web_conference” and “series_natural_language”
        schema:
          type: array
          items:
            type: string
      - name: important_dates
        in: query
        required: false
        description: Defaults to false. If true, only events with important dates set to true will be returned.
        schema:
          type: boolean
      - name: blackout_date
        in: query
        required: false
        description: Defaults to false. If true, only events with blackout date set to true will be returned.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id374
                  required: *id375
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Calendar_Events
      description: "Create and return a new calendar event\n\nRequired OAuth scope: url:POST|/api/v1/calendar_events"
      operationId: create_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: calendar_event[title]
        in: query
        required: false
        description: Short title for the calendar event.
        schema:
          type: string
      - name: calendar_event[description]
        in: query
        required: false
        description: Longer HTML description of the event.
        schema:
          type: string
      - name: calendar_event[location_name]
        in: query
        required: false
        description: Location name of the event.
        schema:
          type: string
      - name: calendar_event[location_address]
        in: query
        required: false
        description: Location address
        schema:
          type: string
      - name: calendar_event[time_zone_edited]
        in: query
        required: false
        description: Time zone of the user editing the event. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: calendar_event[all_day]
        in: query
        required: false
        description: When true event is considered to span the whole day and times are ignored.
        schema:
          type: boolean
      - name: calendar_event[child_event_data][X][context_code]
        in: query
        required: false
        description: Context code(s) corresponding to the section-level start and end time(s).
        schema:
          type: string
      - name: calendar_event[duplicate][frequency]
        in: query
        required: false
        description: 'Defaults to “weekly”. The frequency at which to duplicate the eventAllowed values: daily, weekly, monthly'
        schema:
          type: string
      - name: calendar_event[duplicate][append_iterator]
        in: query
        required: false
        description: Defaults to false. If set to ‘true`, an increasing counter number will be appended to the event title when the event is duplicated. (e.g. Event 1, Event 2, Event 3, etc)
        schema:
          type: boolean
      - name: calendar_event[rrule]
        in: query
        required: false
        description: The recurrence rule to create a series of recurring events. Its value is the iCalendar RRULE defining how the event repeats. Unending series not supported.
        schema:
          type: string
      - name: calendar_event[blackout_date]
        in: query
        required: false
        description: If the blackout_date is true, this event represents a holiday or some other special day that does not count in course pacing.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id376
              type: object
              properties:
                calendar_event[context_code]:
                  type: string
                  description: Context code of the course, group, user, or account whose calendar this event should be added to.
                calendar_event[start_at]:
                  type: string
                  description: Start date/time of the event.
                calendar_event[end_at]:
                  type: string
                  description: End date/time of the event.
                calendar_event[child_event_data][X][start_at]:
                  type: string
                  description: Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code
                calendar_event[child_event_data][X][end_at]:
                  type: string
                  description: Section-level end time(s) if this is a course event.
                calendar_event[duplicate][count]:
                  type: string
                  description: Number of times to copy/duplicate the event. Count cannot exceed 200.
                calendar_event[duplicate][interval]:
                  type: string
                  description: Defaults to 1 if duplicate ‘count` is set. The interval between the duplicated events.
          application/x-www-form-urlencoded:
            schema: *id376
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/calendar_events:
    get:
      summary: Get Users Calendar_Events
      description: "Retrieve the paginated list of calendar events or assignments for the specified user. To view calendar events for a user other than yourself, you must either be an observer of that user or an administrator.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/calendar_events"
      operationId: get_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: type
        in: query
        required: false
        description: 'Defaults to “event”Allowed values: event, assignment'
        schema:
          type: string
      - name: start_date
        in: query
        required: false
        description: 'Only return events since the start_date (inclusive). Defaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.'
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        description: 'Only return events before the end_date (inclusive). Defaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date is the same as start_date, then only events on that day are returned.'
        schema:
          type: string
      - name: undated
        in: query
        required: false
        description: Defaults to false (dated events only). If true, only return undated events and ignore start_date and end_date.
        schema:
          type: boolean
      - name: all_events
        in: query
        required: false
        description: Defaults to false (uses start_date, end_date, and undated criteria). If true, all events are returned, ignoring start_date, end_date, and undated criteria.
        schema:
          type: boolean
      - name: context_codes[]
        in: query
        required: false
        description: 'List of context codes of courses, groups, users, or accounts whose events you want to see. If not specified, defaults to the current user (i.e personal calendar, no course/group events). Limited to 10 context codes, additional ones are ignored. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42'
        schema:
          type: string
      - name: excludes[]
        in: query
        required: false
        description: Array of attributes to exclude. Possible values are “description”, “child_events” and “assignment”
        schema:
          type: array
          items:
            type: string
      - name: submission_types[]
        in: query
        required: false
        description: When type is “assignment”, specifies the allowable submission types for returned assignments. Ignored if type is not “assignment” or if exclude_submission_types is provided.
        schema:
          type: array
          items:
            type: string
      - name: exclude_submission_types[]
        in: query
        required: false
        description: When type is “assignment”, specifies the submission types to be excluded from the returned assignments. Ignored if type is not “assignment”.
        schema:
          type: array
          items:
            type: string
      - name: includes[]
        in: query
        required: false
        description: Array of optional attributes to include. Possible values are “web_conference” and “series_natural_language”
        schema:
          type: array
          items:
            type: string
      - name: important_dates
        in: query
        required: false
        description: Defaults to false If true, only events with important dates set to true will be returned.
        schema:
          type: boolean
      - name: blackout_date
        in: query
        required: false
        description: Defaults to false If true, only events with blackout date set to true will be returned.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id374
                  required: *id375
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/calendar_events/{id}:
    get:
      summary: List Calendar_Events
      description: "Returns detailed information about a specific calendar event or assignment. Returns a [CalendarEvent](#calendarevent) object. ### [Reserve a time slot](#method.calendar_events_api.reserve) <a href=\"#method.calendar_events_api.reserve\" id=\"method.calendar_events_api.reserve\"></a> [CalendarEventsApiController#reserve](https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/calendar_events/:id"
      operationId: get_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id374
                required: *id375
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Calendar_Events
      description: "Update and return a calendar event\n\nRequired OAuth scope: url:PUT|/api/v1/calendar_events/:id"
      operationId: update_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: calendar_event[context_code]
        in: query
        required: false
        description: Context code of the course, group, user, or account to move this event to. Scheduler appointments and events with section-specific times cannot be moved between calendars.
        schema:
          type: string
      - name: calendar_event[title]
        in: query
        required: false
        description: Short title for the calendar event.
        schema:
          type: string
      - name: calendar_event[description]
        in: query
        required: false
        description: Longer HTML description of the event.
        schema:
          type: string
      - name: calendar_event[location_name]
        in: query
        required: false
        description: Location name of the event.
        schema:
          type: string
      - name: calendar_event[location_address]
        in: query
        required: false
        description: Location address
        schema:
          type: string
      - name: calendar_event[time_zone_edited]
        in: query
        required: false
        description: Time zone of the user editing the event. Allowed time zones are IANA time zones or friendlier Ruby on Rails time zones.
        schema:
          type: string
      - name: calendar_event[all_day]
        in: query
        required: false
        description: When true event is considered to span the whole day and times are ignored.
        schema:
          type: boolean
      - name: calendar_event[child_event_data][X][context_code]
        in: query
        required: false
        description: Context code(s) corresponding to the section-level start and end time(s).
        schema:
          type: string
      - name: calendar_event[rrule]
        in: query
        required: false
        description: Valid if the event whose ID is in the URL is part of a series. This defines the shape of the recurring event series after it’s updated. Its value is the iCalendar RRULE. Unending series are not supported.
        schema:
          type: string
      - name: which
        in: query
        required: false
        description: 'Valid if the event whose ID is in the URL is part of a series. Update just the event whose ID is in in the URL, all events in the series, or the given event and all those following. Some updates may create a new series. For example, changing the start time of this and all following events from the middle of a series.Allowed values: one, all, following'
        schema:
          type: string
      - name: calendar_event[blackout_date]
        in: query
        required: false
        description: If the blackout_date is true, this event represents a holiday or some other special day that does not count in course pacing.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id377
              type: object
              properties:
                calendar_event[start_at]:
                  type: string
                  description: Start date/time of the event.
                calendar_event[end_at]:
                  type: string
                  description: End date/time of the event.
                calendar_event[child_event_data][X][start_at]:
                  type: string
                  description: Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code
                calendar_event[child_event_data][X][end_at]:
                  type: string
                  description: Section-level end time(s) if this is a course event.
          application/x-www-form-urlencoded:
            schema: *id377
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Calendar_Events
      description: "Delete an event from the calendar and return the deleted event\n\nRequired OAuth scope: url:DELETE|/api/v1/calendar_events/:id"
      operationId: delete_calendar_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: cancel_reason
        in: query
        required: false
        description: Reason for deleting/canceling the event.
        schema:
          type: string
      - name: which
        in: query
        required: false
        description: 'Valid if the event whose ID is in the URL is part of a series. Delete just the event whose ID is in in the URL, all events in the series, or the given event and all those following.Allowed values: one, all, following'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/calendar_events/{id}/reservations:
    post:
      summary: Post Calendar_Events Reservations
      description: "Post Calendar_Events Reservations\n\nRequired OAuth scope: url:POST|/api/v1/calendar_events/:id/reservations"
      operationId: create_reservations
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/calendar_events/{id}/reservations/{participant_id}:
    post:
      summary: Post Calendar_Events Reservations
      description: "Reserves a particular time slot and return the new reservation\n\nRequired OAuth scope: url:POST|/api/v1/calendar_events/:id/reservations/:participant_id"
      operationId: create_reservations
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        description: The participant_id identifier
        schema:
          type: string
      - name: participant_id
        in: query
        required: false
        description: User or group id for whom you are making the reservation (depends on the participant type). Defaults to the current user (or user’s candidate group).
        schema:
          type: string
      - name: comments
        in: query
        required: false
        description: Comments to associate with this reservation
        schema:
          type: string
      - name: cancel_existing
        in: query
        required: false
        description: Defaults to false. If true, cancel any previous reservation(s) for this participant and appointment group.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/calendar_events/save_enabled_account_calendars:
    post:
      summary: Post Calendar_Events Save_Enabled_Account_Calendars
      description: "Creates and updates the enabled\\_account\\_calendars and mark\\_feature\\_as\\_seen user preferences\n\nRequired OAuth scope: url:POST|/api/v1/calendar_events/save_enabled_account_calendars"
      operationId: create_save_enabled_account_calendars
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: mark_feature_as_seen
        in: query
        required: false
        description: Flag to mark account calendars feature as seen
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id378
              type: object
              properties:
                enabled_account_calendars[]:
                  type: string
                  description: An array of account Ids to remember in the calendars list of the user
          application/x-www-form-urlencoded:
            schema: *id378
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/calendar_events/timetable:
    post:
      summary: Post Courses Timetable
      description: "Creates and updates “timetable” events for a course. Can automaticaly generate a series of calendar events based on simple schedules (e.g. “Monday and Wednesday at 2:00pm” ) Existing timetable events for the course and course sections will be updated if they still are part of the timetable. Otherwise, they will be deleted.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/calendar_events/timetable"
      operationId: create_timetable
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: timetables[course_section_id][][weekdays]
        in: query
        required: false
        description: A comma-separated list of abbreviated weekdays (Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)
        schema:
          type: string
      - name: timetables[course_section_id][][start_time]
        in: query
        required: false
        description: Time to start each event at (e.g. “9:00 am”)
        schema:
          type: string
      - name: timetables[course_section_id][][end_time]
        in: query
        required: false
        description: Time to end each event at (e.g. “9:00 am”)
        schema:
          type: string
      - name: timetables[course_section_id][][location_name]
        in: query
        required: false
        description: A location name to set for each event
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id379
              type: object
              properties:
                timetables[course_section_id][]:
                  type: string
                  description: An array of timetable objects for the course section specified by course_section_id. If course_section_id is set to “all”, events will be created for the entire course.
          application/x-www-form-urlencoded:
            schema: *id379
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Timetable
      description: "Returns the last timetable set by the [Set a course timetable](#method.calendar_events_api.set_course_timetable) endpoint ### [Create or update events directly for a course timetable](#method.calendar_events_api.set_course_timetable_events) <a href=\"#method.calendar_events_api.set_course_timetable_events\" id=\"method.calendar_events_api.set_course_timetable_events\"></a> [CalendarEventsApiController#set\\_course\\_timetable\\_events](https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/calendar_events/timetable"
      operationId: get_timetable
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/calendar_events/timetable_events:
    post:
      summary: Post Courses Timetable_Events
      description: "Creates and updates “timetable” events for a course or course section. Similar to [setting a course timetable](#method.calendar_events_api.set_course_timetable), but instead of generating a list of events based on a timetable schedule, this endpoint expects a complete list of events.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/calendar_events/timetable_events"
      operationId: create_timetable_events
      tags:
      - Calendar Events
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: course_section_id
        in: query
        required: false
        description: Events will be created for the course section specified by course_section_id. If not present, events will be created for the entire course.
        schema:
          type: string
      - name: events[][location_name]
        in: query
        required: false
        description: Location name for the event
        schema:
          type: string
      - name: events[][code]
        in: query
        required: false
        description: A unique identifier that can be used to update the event at a later time If one is not specified, an identifier will be generated based on the start and end times
        schema:
          type: string
      - name: events[][title]
        in: query
        required: false
        description: Title for the meeting. If not present, will default to the associated course’s name
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id380
              type: object
              properties:
                events[]:
                  type: string
                  description: An array of event objects to use.
                events[][start_at]:
                  type: string
                  description: Start time for the event
                events[][end_at]:
                  type: string
                  description: End time for the event
          application/x-www-form-urlencoded:
            schema: *id380
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/course/courses/{course_id}:
    get:
      summary: Get Audit Courses
      description: "List course change events for a given course.\n\nRequired OAuth scope: url:GET|/api/v1/audit/course/courses/:course_id"
      operationId: get_courses
      tags:
      - Course Audit log
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id381
                  required: *id382
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/audit/course/accounts/{account_id}:
    get:
      summary: Get Audit Accounts
      description: "List course change events for a given account.\n\nRequired OAuth scope: url:GET|/api/v1/audit/course/accounts/:account_id"
      operationId: get_accounts
      tags:
      - Course Audit log
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range from which you want events.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range from which you want events.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id381
                  required: *id382
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report:
    post:
      summary: Post Assignments Originality_Report
      description: "Create a new OriginalityReport for the specified file\n\nRequired OAuth scope: url:POST|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report"
      operationId: create_originality_report
      tags:
      - Originality Reports
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      - name: originality_report[file_id]
        in: query
        required: true
        description: The id of the file being given an originality score. Required if creating a report associated with a file.
        schema:
          type: integer
      - name: originality_report[originality_report_url]
        in: query
        required: false
        description: The URL where the originality report for the specified file may be found.
        schema:
          type: string
      - name: originality_report[originality_report_file_id]
        in: query
        required: false
        description: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        schema:
          type: integer
      - name: originality_report[tool_setting][resource_type_code]
        in: query
        required: false
        description: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type ‘basic-lti-launch-request’ in the specified resource handler rather than using the originality_report_url.
        schema:
          type: string
      - name: originality_report[tool_setting][resource_url]
        in: query
        required: false
        description: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler’s message “path” value (See ‘resource_type_code) unless it is specified. If this parameter is used a resource_type_code` must also be specified.
        schema:
          type: string
      - name: originality_report[workflow_state]
        in: query
        required: false
        description: May be set to “pending”, “error”, or “scored”. If an originality score is provided a workflow state of “scored” will be inferred.
        schema:
          type: string
      - name: originality_report[error_message]
        in: query
        required: false
        description: A message describing the error. If set, the “workflow_state” will be set to “error.”
        schema:
          type: string
      - name: originality_report[attempt]
        in: query
        required: true
        description: If no ‘file_idis given, and no file is required for the assignment (that is, the assignment allows an online text entry), this parameter may be given to clarify which attempt number the report is for (in the case of resubmissions). If this field is omitted and nofile_id` is given, the report will be created (or updated, if it exists) for the first submission attempt with no associated file.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id383
              type: object
              properties:
                originality_report[originality_score]:
                  type: string
                  description: A number between 0 and 100 representing the measure of the specified file’s originality.
          application/x-www-form-urlencoded:
            schema: *id383
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id384
                required: *id385
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}:
    put:
      summary: Put Assignments Originality_Report
      description: "Put Assignments Originality_Report\n\nRequired OAuth scope: url:PUT|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id"
      operationId: update_originality_report
      tags:
      - Originality Reports
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Assignments Originality_Report
      description: "Get Assignments Originality_Report\n\nRequired OAuth scope: url:GET|/api/lti/assignments/:assignment_id/submissions/:submission_id/originality_report/:id"
      operationId: get_originality_report
      tags:
      - Originality Reports
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: submission_id
        in: path
        required: true
        description: The submission_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/assignments/{assignment_id}/files/{file_id}/originality_report:
    put:
      summary: Put Assignments Originality_Report
      description: "Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.\n\nRequired OAuth scope: url:PUT|/api/lti/assignments/:assignment_id/files/:file_id/originality_report"
      operationId: update_originality_report
      tags:
      - Originality Reports
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: file_id
        in: path
        required: true
        description: The file_id identifier
        schema:
          type: string
      - name: originality_report[originality_report_url]
        in: query
        required: false
        description: The URL where the originality report for the specified file may be found.
        schema:
          type: string
      - name: originality_report[originality_report_file_id]
        in: query
        required: false
        description: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        schema:
          type: integer
      - name: originality_report[tool_setting][resource_type_code]
        in: query
        required: false
        description: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type ‘basic-lti-launch-request’ in the specified resource handler rather than using the originality_report_url.
        schema:
          type: string
      - name: originality_report[tool_setting][resource_url]
        in: query
        required: false
        description: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler’s message “path” value (See ‘resource_type_code) unless it is specified. If this parameter is used a resource_type_code` must also be specified.
        schema:
          type: string
      - name: originality_report[workflow_state]
        in: query
        required: false
        description: May be set to “pending”, “error”, or “scored”. If an originality score is provided a workflow state of “scored” will be inferred.
        schema:
          type: string
      - name: originality_report[error_message]
        in: query
        required: false
        description: A message describing the error. If set, the “workflow_state” will be set to “error.”
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id386
              type: object
              properties:
                originality_report[originality_score]:
                  type: string
                  description: A number between 0 and 100 representing the measure of the specified file’s originality.
          application/x-www-form-urlencoded:
            schema: *id386
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id384
                required: *id385
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Assignments Originality_Report
      description: "Get a single originality report Returns an [OriginalityReport](#originalityreport) object. ### Appendixes #### Appendix: Originality Report UI Locations <a href=\"#originalityreportuilocations-appendix\" id=\"originalityreportuilocations-appendix\"></a>\n\nRequired OAuth scope: url:GET|/api/lti/assignments/:assignment_id/files/:file_id/originality_report"
      operationId: get_originality_report
      tags:
      - Originality Reports
      security:
      - bearerAuth: []
      parameters:
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: file_id
        in: path
        required: true
        description: The file_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id384
                required: *id385
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/csp_settings:
    get:
      summary: Get Courses Csp_Settings
      description: "Get Courses Csp_Settings\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/csp_settings"
      operationId: get_csp_settings
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses Csp_Settings
      description: "Put Courses Csp_Settings\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/csp_settings"
      operationId: update_csp_settings
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/csp_settings:
    get:
      summary: Get Accounts Csp_Settings
      description: "Update multiple modules in an account.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/csp_settings"
      operationId: get_csp_settings
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts Csp_Settings
      description: "Either explicitly sets CSP to be on or off for courses and sub-accounts, or clear the explicit settings to default to those set by a parent account Note: If “inherited” and “settings\\_locked” are both true for this account or course, then the CSP setting cannot be modified.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/csp_settings"
      operationId: update_csp_settings
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id387
              type: object
              properties:
                status:
                  type: string
                  description: 'If set to “enabled” for an account, CSP will be enabled for all its courses and sub-accounts (that have not explicitly enabled or disabled it), using the allowed domains set on this account. If set to “disabled”, CSP will be disabled for this account or course and for all sub-accounts that have not explicitly re-enabled it. If set to “inherited”, this account or course will reset to the default state where CSP settings are inherited from the first parent account to have them explicitly set.Allowed values: enabled, disabled, inherited'
          application/x-www-form-urlencoded:
            schema: *id387
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/csp_settings/lock:
    put:
      summary: Put Accounts Lock
      description: "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. “inherited” is false).\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/csp_settings/lock"
      operationId: update_lock
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id388
              type: object
              properties:
                settings_locked:
                  type: string
                  description: Whether sub-accounts and courses will be prevented from overriding settings inherited from this account.
          application/x-www-form-urlencoded:
            schema: *id388
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/csp_settings/domains:
    post:
      summary: Post Accounts Domains
      description: "Adds an allowed domain for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/csp_settings/domains"
      operationId: create_domains
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id389
              type: object
              properties:
                domain:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id389
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Domains
      description: "Removes an allowed domain from the current account.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/csp_settings/domains"
      operationId: delete_domains
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: domain
        in: query
        required: false
        description: no description
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/csp_settings/domains/batch_create:
    post:
      summary: Post Accounts Batch_Create
      description: "Adds multiple allowed domains for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/csp_settings/domains/batch_create"
      operationId: create_batch_create
      tags:
      - Content Security Policy Settings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id390
              type: object
              properties:
                domains:
                  type: string
                  description: no description
          application/x-www-form-urlencoded:
            schema: *id390
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/comm_messages:
    get:
      summary: List Comm_Messages
      description: "Retrieve a paginated list of messages sent to a user.\n\nRequired OAuth scope: url:GET|/api/v1/comm_messages"
      operationId: list_comm_messages
      tags:
      - CommMessages
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: query
        required: false
        description: The user id for whom you want to retrieve CommMessages
        schema:
          type: string
      - name: start_time
        in: query
        required: false
        description: The beginning of the time range you want to retrieve message from. Up to a year prior to the current date is available.
        schema:
          type: string
      - name: end_time
        in: query
        required: false
        description: The end of the time range you want to retrieve messages for. Up to a year prior to the current date is available.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id391
                  required: *id392
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_results:
    get:
      summary: Get Courses Outcome_Results
      description: "Gets the outcome results for users and outcomes in the specified context. used in sLMGB\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_results"
      operationId: get_outcome_results
      tags:
      - Outcome Results
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: user_ids[]
        in: query
        required: false
        description: If specified, only the users whose ids are given will be included in the results. SIS ids can be used, prefixed by “sis_user_id:”. It is an error to specify an id for a user who is not a student in the context.
        schema:
          type: integer
      - name: outcome_ids[]
        in: query
        required: false
        description: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        schema:
          type: integer
      - name: include[]
        in: query
        required: false
        description: String, “alignments”
        schema:
          type: string
      - name: include_hidden
        in: query
        required: false
        description: If true, results that are hidden from the learning mastery gradebook and student rollup scores will be included
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assign_outcome_order:
    post:
      summary: Post Courses Assign_Outcome_Order
      description: "Saves the ordering of outcomes in LMGB for a user ### [Get outcome result rollups](#method.outcome_results.rollups) <a href=\"#method.outcome_results.rollups\" id=\"method.outcome_results.rollups\"></a> [OutcomeResultsController#rollups](https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_results_controller.rb)\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assign_outcome_order"
      operationId: create_assign_outcome_order
      tags:
      - Outcome Results
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_rollups:
    get:
      summary: Get Courses Outcome_Rollups
      description: "Gets the outcome rollups for the users and outcomes in the specified context.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_rollups"
      operationId: get_outcome_rollups
      tags:
      - Outcome Results
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: aggregate
        in: query
        required: false
        description: 'If specified, instead of returning one rollup for each user, all the user rollups will be combined into one rollup for the course that will contain the average (or median, see below) rollup score for each outcome.Allowed values: course'
        schema:
          type: string
      - name: aggregate_stat
        in: query
        required: false
        description: 'If aggregate rollups requested, then this value determines what statistic is used for the aggregate. Defaults to “mean” if this value is not specified.Allowed values: mean, median'
        schema:
          type: string
      - name: user_ids[]
        in: query
        required: false
        description: If specified, only the users whose ids are given will be included in the results or used in an aggregate result. it is an error to specify an id for a user who is not a student in the context
        schema:
          type: integer
      - name: outcome_ids[]
        in: query
        required: false
        description: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        schema:
          type: integer
      - name: include[]
        in: query
        required: false
        description: String, “courses”
        schema:
          type: string
      - name: exclude[]
        in: query
        required: false
        description: 'Specify additional values to exclude. “missing_user_rollups” excludes rollups for users without results.Allowed values: missing_user_rollups'
        schema:
          type: string
      - name: sort_by
        in: query
        required: false
        description: 'If specified, sorts outcome result rollups. “student” sorting will sort by a user’s sortable name. “outcome” sorting will sort by the given outcome’s rollup score. The latter requires specifying the “sort_outcome_id” parameter. By default, the sort order is ascending.Allowed values: student, outcome'
        schema:
          type: string
      - name: sort_outcome_id
        in: query
        required: false
        description: If outcome sorting requested, then this determines which outcome to use for rollup score sorting.
        schema:
          type: integer
      - name: sort_order
        in: query
        required: false
        description: 'If sorting requested, then this allows changing the default sort order of ascending to descending.Allowed values: asc, desc'
        schema:
          type: string
      - name: add_defaults
        in: query
        required: false
        description: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the rollup. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        schema:
          type: boolean
      - name: contributing_scores
        in: query
        required: false
        description: If contributing scores are requested, then each individual outcome score will also include all graded artifacts that contributed to the outcome score
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/logins:
    get:
      summary: Get Accounts Logins
      description: "Get Accounts Logins\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/logins"
      operationId: get_logins
      tags:
      - Logins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts Logins
      description: "Create a new login for an existing user in the given account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/logins"
      operationId: create_logins
      tags:
      - Logins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: login[password]
        in: query
        required: false
        description: The new login’s password.
        schema:
          type: string
      - name: login[sis_user_id]
        in: query
        required: false
        description: SIS ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account.
        schema:
          type: string
      - name: login[integration_id]
        in: query
        required: false
        description: Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account. The Integration ID is a secondary identifier useful for more complex SIS integrations.
        schema:
          type: string
      - name: login[authentication_provider_id]
        in: query
        required: false
        description: The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider).
        schema:
          type: string
      - name: login[declared_user_type]
        in: query
        required: false
        description: "The declared intention of the user type. This can be set, but does not change any Canvas functionality with respect to their access. A user can still be a teacher, admin, student, etc. in any particular context without regard to this setting. This can be used for administrative purposes for integrations to be able to more easily identify why the user was created. Valid values are:* administrative\n* observer\n* staff\n* student\n* student_other\n* teacher"
        schema:
          type: string
      - name: user[existing_user_id]
        in: query
        required: false
        description: A Canvas User ID to identify a user in a trusted account (alternative to ‘id, existing_sis_user_id, or existing_integration_id`). This parameter is not available in OSS Canvas.
        schema:
          type: string
      - name: user[existing_integration_id]
        in: query
        required: false
        description: An Integration ID to identify a user in a trusted account (alternative to ‘id, existing_user_id, or existing_sis_user_id`). This parameter is not available in OSS Canvas.
        schema:
          type: string
      - name: user[existing_sis_user_id]
        in: query
        required: false
        description: An SIS User ID to identify a user in a trusted account (alternative to ‘id, existing_integration_id, or existing_user_id`). This parameter is not available in OSS Canvas.
        schema:
          type: string
      - name: user[trusted_account]
        in: query
        required: true
        description: The domain of the account to search for the user. This field is required when identifying a user in a trusted account. This parameter is not available in OSS Canvas.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id393
              type: object
              properties:
                user[id]:
                  type: string
                  description: The ID of the user to create the login for.
                login[unique_id]:
                  type: string
                  description: The unique ID for the new login.
          application/x-www-form-urlencoded:
            schema: *id393
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/logins:
    get:
      summary: Get Users Logins
      description: "Given a user ID, return a paginated list of that user’s logins for the given account.\n\nRequired OAuth scope: url:GET|/api/v1/users/:user_id/logins"
      operationId: get_logins
      tags:
      - Logins
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/reset_password:
    post:
      summary: Post Users Reset_Password
      description: "Given a user email, generate a nonce and email it to the user\n\nRequired OAuth scope: url:POST|/api/v1/users/reset_password"
      operationId: create_reset_password
      tags:
      - Logins
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/logins/{id}:
    put:
      summary: Put Accounts Logins
      description: "Update an existing login for a user in the given account.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/logins/:id"
      operationId: update_logins
      tags:
      - Logins
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: login[unique_id]
        in: query
        required: false
        description: The new unique ID for the login.
        schema:
          type: string
      - name: login[password]
        in: query
        required: false
        description: The new password for the login. Admins can only set a password for another user if the “Password setting by admins” account setting is enabled.
        schema:
          type: string
      - name: login[old_password]
        in: query
        required: true
        description: The prior password for the login. Required if the caller is changing their own password.
        schema:
          type: string
      - name: login[sis_user_id]
        in: query
        required: false
        description: SIS ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account.
        schema:
          type: string
      - name: login[integration_id]
        in: query
        required: false
        description: Integration ID for the login. To set this parameter, the caller must be able to manage SIS permissions on the account. The Integration ID is a secondary identifier useful for more complex SIS integrations.
        schema:
          type: string
      - name: login[authentication_provider_id]
        in: query
        required: false
        description: The authentication provider this login is associated with. Logins associated with a specific provider can only be used with that provider. Legacy providers (LDAP, CAS, SAML) will search for logins associated with them, or unassociated logins. New providers will only search for logins explicitly associated with them. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider). To unassociate from a known provider, specify null or an empty string.
        schema:
          type: string
      - name: login[workflow_state]
        in: query
        required: false
        description: 'Used to suspend or re-activate a login.Allowed values: active, suspended'
        schema:
          type: string
      - name: login[declared_user_type]
        in: query
        required: false
        description: "The declared intention of the user type. This can be set, but does not change any Canvas functionality with respect to their access. A user can still be a teacher, admin, student, etc. in any particular context without regard to this setting. This can be used for administrative purposes for integrations to be able to more easily identify why the user was created. Valid values are:* administrative\n* observer\n* staff\n* student\n* student_other\n* teacher"
        schema:
          type: string
      - name: override_sis_stickiness
        in: query
        required: false
        description: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/users/{user_id}/logins/{id}:
    delete:
      summary: Delete Users Logins
      description: "Delete an existing login.\n\nRequired OAuth scope: url:DELETE|/api/v1/users/:user_id/logins/:id"
      operationId: delete_logins
      tags:
      - Logins
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: The user_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/appointment_groups:
    get:
      summary: List Appointment_Groups
      description: "Retrieve the paginated list of appointment groups that can be reserved or managed by the current user.\n\nRequired OAuth scope: url:GET|/api/v1/appointment_groups"
      operationId: list_appointment_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: scope
        in: query
        required: false
        description: 'Defaults to “reservable”Allowed values: reservable, manageable'
        schema:
          type: string
      - name: context_codes[]
        in: query
        required: false
        description: Array of context codes used to limit returned results.
        schema:
          type: string
      - name: include_past_appointments
        in: query
        required: false
        description: Defaults to false. If true, includes past appointment groups
        schema:
          type: boolean
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include.“appointments”calendar event time slots for this appointment group“child_events”reservations of those time slots“participant_count”number of reservations“reserved_times”the event id, start time and end time of reservations the current user has made)“all_context_codes”all context codes associated with this appointment groupAllowed values: appointments, child_events, participant_count, reserved_times, all_context_codes'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create Appointment_Groups
      description: "Create and return a new appointment group. If new\\_appointments are specified, the response will return a new\\_appointments array (same format as appointments array, see “List appointment groups” action)\n\nRequired OAuth scope: url:POST|/api/v1/appointment_groups"
      operationId: create_appointment_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: appointment_group[sub_context_codes][]
        in: query
        required: false
        description: Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be “Group” instead of “User”.
        schema:
          type: string
      - name: appointment_group[description]
        in: query
        required: false
        description: Longer text description of the appointment group.
        schema:
          type: string
      - name: appointment_group[location_name]
        in: query
        required: false
        description: Location name of the appointment group.
        schema:
          type: string
      - name: appointment_group[location_address]
        in: query
        required: false
        description: Location address.
        schema:
          type: string
      - name: appointment_group[publish]
        in: query
        required: false
        description: Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false.
        schema:
          type: boolean
      - name: appointment_group[participants_per_appointment]
        in: query
        required: false
        description: Maximum number of participants that may register for each time slot. Defaults to null (no limit).
        schema:
          type: integer
      - name: appointment_group[min_appointments_per_participant]
        in: query
        required: false
        description: Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots.
        schema:
          type: integer
      - name: appointment_group[max_appointments_per_participant]
        in: query
        required: false
        description: Maximum number of time slots a user may register for.
        schema:
          type: integer
      - name: appointment_group[new_appointments][X][]
        in: query
        required: false
        description: Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request.
        schema:
          type: string
      - name: appointment_group[participant_visibility]
        in: query
        required: false
        description: '“private”participants cannot see who has signed up for a particular time slot“protected”participants can see who has signed up. Defaults to “private”.Allowed values: private, protected'
        schema:
          type: string
      - name: appointment_group[allow_observer_signup]
        in: query
        required: false
        description: Whether observer users can sign-up for an appointment. Defaults to false.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id394
              type: object
              properties:
                appointment_group[context_codes][]:
                  type: string
                  description: Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group.
                appointment_group[title]:
                  type: string
                  description: Short title for the appointment group.
          application/x-www-form-urlencoded:
            schema: *id394
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/appointment_groups/{id}:
    get:
      summary: List Appointment_Groups
      description: "Returns information for a single appointment group\n\nRequired OAuth scope: url:GET|/api/v1/appointment_groups/:id"
      operationId: get_appointment_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: include[]
        in: query
        required: false
        description: 'Array of additional information to include. See include[] argument of “List appointment groups” action.“child_events”reservations of time slots time slots“appointments”will always be returned“all_context_codes”all context codes associated with this appointment groupAllowed values: child_events, appointments, all_context_codes'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update Appointment_Groups
      description: "Update and return an appointment group. If new\\_appointments are specified, the response will return a new\\_appointments array (same format as appointments array, see “List appointment groups” action).\n\nRequired OAuth scope: url:PUT|/api/v1/appointment_groups/:id"
      operationId: update_appointment_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: appointment_group[sub_context_codes][]
        in: query
        required: false
        description: Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be “Group” instead of “User”.
        schema:
          type: string
      - name: appointment_group[title]
        in: query
        required: false
        description: Short title for the appointment group.
        schema:
          type: string
      - name: appointment_group[description]
        in: query
        required: false
        description: Longer text description of the appointment group.
        schema:
          type: string
      - name: appointment_group[location_name]
        in: query
        required: false
        description: Location name of the appointment group.
        schema:
          type: string
      - name: appointment_group[location_address]
        in: query
        required: false
        description: Location address.
        schema:
          type: string
      - name: appointment_group[publish]
        in: query
        required: false
        description: Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false.
        schema:
          type: boolean
      - name: appointment_group[participants_per_appointment]
        in: query
        required: false
        description: Maximum number of participants that may register for each time slot. Defaults to null (no limit).
        schema:
          type: integer
      - name: appointment_group[min_appointments_per_participant]
        in: query
        required: false
        description: Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots.
        schema:
          type: integer
      - name: appointment_group[max_appointments_per_participant]
        in: query
        required: false
        description: Maximum number of time slots a user may register for.
        schema:
          type: integer
      - name: appointment_group[new_appointments][X][]
        in: query
        required: false
        description: Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request.
        schema:
          type: string
      - name: appointment_group[participant_visibility]
        in: query
        required: false
        description: '“private”participants cannot see who has signed up for a particular time slot“protected”participants can see who has signed up. Defaults to “private”.Allowed values: private, protected'
        schema:
          type: string
      - name: appointment_group[allow_observer_signup]
        in: query
        required: false
        description: Whether observer users can sign-up for an appointment.
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema: &id395
              type: object
              properties:
                appointment_group[context_codes][]:
                  type: string
                  description: Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group.
          application/x-www-form-urlencoded:
            schema: *id395
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Appointment_Groups
      description: "Delete an appointment group (and associated time slots and reservations) and return the deleted group\n\nRequired OAuth scope: url:DELETE|/api/v1/appointment_groups/:id"
      operationId: delete_appointment_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: cancel_reason
        in: query
        required: false
        description: Reason for deleting/canceling the appointment group.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/appointment_groups/{id}/users:
    get:
      summary: Get Appointment_Groups Users
      description: "A paginated list of users that are (or may be) participating in this appointment group. Refer to the Users API for the response fields. Returns no results for appointment groups with the “Group” participant\\_type.\n\nRequired OAuth scope: url:GET|/api/v1/appointment_groups/:id/users"
      operationId: get_users
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: registration_status
        in: query
        required: false
        description: 'Limits results to the a given participation status, defaults to “all”Allowed values: all, registered, registered'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/appointment_groups/{id}/groups:
    get:
      summary: Get Appointment_Groups Groups
      description: "A paginated list of student groups that are (or may be) participating in this appointment group. Refer to the Groups API for the response fields. Returns no results for appointment groups with the “User” participant\\_type.\n\nRequired OAuth scope: url:GET|/api/v1/appointment_groups/:id/groups"
      operationId: get_groups
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: registration_status
        in: query
        required: false
        description: 'Limits results to the a given participation status, defaults to “all”Allowed values: all, registered, registered'
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/appointment_groups/next_appointment:
    get:
      summary: Get Appointment_Groups Next_Appointment
      description: "Return the next appointment available to sign up for. The appointment is returned in a one-element array. If no future appointments are available, an empty array is returned.\n\nRequired OAuth scope: url:GET|/api/v1/appointment_groups/next_appointment"
      operationId: list_next_appointment
      tags:
      - Appointment Groups
      security:
      - bearerAuth: []
      parameters:
      - name: appointment_group_ids[]
        in: query
        required: false
        description: List of ids of appointment groups to search.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_choices:
    get:
      summary: Get Polls Poll_Choices
      description: "Returns the paginated list of PollChoices in this poll.\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_choices"
      operationId: get_poll_choices
      tags:
      - PollChoices
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Polls Poll_Choices
      description: "Create a new poll choice for this poll\n\nRequired OAuth scope: url:POST|/api/v1/polls/:poll_id/poll_choices"
      operationId: create_poll_choices
      tags:
      - PollChoices
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: poll_choices[][is_correct]
        in: query
        required: false
        description: Whether this poll choice is considered correct or not. Defaults to false.
        schema:
          type: boolean
      - name: poll_choices[][position]
        in: query
        required: false
        description: The order this poll choice should be returned in the context it’s sibling poll choices.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id396
              type: object
              properties:
                poll_choices[][text]:
                  type: string
                  description: The descriptive text of the poll choice.
          application/x-www-form-urlencoded:
            schema: *id396
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/polls/{poll_id}/poll_choices/{id}:
    get:
      summary: Get Polls Poll_Choices
      description: "Returns the poll choice with the given id\n\nRequired OAuth scope: url:GET|/api/v1/polls/:poll_id/poll_choices/:id"
      operationId: get_poll_choices
      tags:
      - PollChoices
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Polls Poll_Choices
      description: "Update an existing poll choice for this poll\n\nRequired OAuth scope: url:PUT|/api/v1/polls/:poll_id/poll_choices/:id"
      operationId: update_poll_choices
      tags:
      - PollChoices
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      - name: poll_choices[][is_correct]
        in: query
        required: false
        description: Whether this poll choice is considered correct or not. Defaults to false.
        schema:
          type: boolean
      - name: poll_choices[][position]
        in: query
        required: false
        description: The order this poll choice should be returned in the context it’s sibling poll choices.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: &id397
              type: object
              properties:
                poll_choices[][text]:
                  type: string
                  description: The descriptive text of the poll choice.
          application/x-www-form-urlencoded:
            schema: *id397
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Polls Poll_Choices
      description: "Delete Polls Poll_Choices\n\nRequired OAuth scope: url:DELETE|/api/v1/polls/:poll_id/poll_choices/:id"
      operationId: delete_poll_choices
      tags:
      - PollChoices
      security:
      - bearerAuth: []
      parameters:
      - name: poll_id
        in: path
        required: true
        description: The poll_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/outcome_proficiency:
    post:
      summary: Post Accounts Outcome_Proficiency
      description: "Post Accounts Outcome_Proficiency\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/outcome_proficiency"
      operationId: create_outcome_proficiency
      tags:
      - Proficiency Ratings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Accounts Outcome_Proficiency
      description: "Get Accounts Outcome_Proficiency\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/outcome_proficiency"
      operationId: get_outcome_proficiency
      tags:
      - Proficiency Ratings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/outcome_proficiency:
    post:
      summary: Post Courses Outcome_Proficiency
      description: "Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/outcome_proficiency"
      operationId: create_outcome_proficiency
      tags:
      - Proficiency Ratings
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: ratings[][description]
        in: query
        required: false
        description: The description of the rating level.
        schema:
          type: string
      - name: ratings[][points]
        in: query
        required: false
        description: The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.
        schema:
          type: integer
      - name: ratings[][mastery]
        in: query
        required: false
        description: Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.
        schema:
          type: integer
      - name: ratings[][color]
        in: query
        required: false
        description: The color associated with the rating level. Should be a hex color code like ‘00FFFF’.
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id398
                required: *id399
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      summary: Get Courses Outcome_Proficiency
      description: "Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found. ``` Examples: curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\ -H 'Authorization: Bearer <token>' ``` Returns a [Proficiency](#proficiency) object.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/outcome_proficiency"
      operationId: get_outcome_proficiency
      tags:
      - Proficiency Ratings
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id398
                required: *id399
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_tools:
    get:
      summary: Get Courses External_Tools
      description: "Get Courses External_Tools\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/external_tools"
      operationId: get_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses External_Tools
      description: "Post Courses External_Tools\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/external_tools"
      operationId: create_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/external_tools:
    get:
      summary: Get Accounts External_Tools
      description: "Get Accounts External_Tools\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/external_tools"
      operationId: get_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Accounts External_Tools
      description: "Create an external tool in the specified course/account. The created tool will be returned, see the “show” endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard. See the \\<a href=“file.lti\\_dev\\_key\\_config.html#placements-params”>Placements Documentation\\</a> for more information on what placements are available, the possible fields, and their accepted values.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/external_tools"
      operationId: create_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: A description of the tool
        schema:
          type: string
      - name: url
        in: query
        required: false
        description: The url to match links against. Either “url” or “domain” should be set, not both.
        schema:
          type: string
      - name: domain
        in: query
        required: false
        description: The domain to match links against. Either “url” or “domain” should be set, not both.
        schema:
          type: string
      - name: icon_url
        in: query
        required: false
        description: The url of the icon to show for this tool
        schema:
          type: string
      - name: text
        in: query
        required: false
        description: The default text to show for this tool
        schema:
          type: string
      - name: custom_fields[field_name]
        in: query
        required: false
        description: Custom fields that will be sent to the tool consumer; can be used multiple times
        schema:
          type: string
      - name: is_rce_favorite
        in: query
        required: false
        description: (Deprecated in favor of Mark tool to RCE Favorites and Unmark tool from RCE Favorites) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.
        schema:
          type: boolean
      - name: config_type
        in: query
        required: false
        description: 'Configuration can be passed in as Common Cartridge XML instead of using query parameters. If this value is “by_url” or “by_xml” then an XML configuration will be expected in either the “config_xml” or “config_url” parameter. Note that the name parameter overrides the tool name provided in the XML.Allowed values: by_url, by_xml'
        schema:
          type: string
      - name: config_xml
        in: query
        required: true
        description: XML tool configuration, as specified in the Common Cartridge XML specification. This is required if “config_type” is set to “by_xml”
        schema:
          type: string
      - name: config_url
        in: query
        required: true
        description: URL where the server can retrieve an XML tool configuration, as specified in the Common Cartridge XML specification. This is required if “config_type” is set to “by_url”
        schema:
          type: string
      - name: not_selectable
        in: query
        required: false
        description: 'Default: false. If set to true, and if resource_selection is set to false, the tool won’t show up in the external tool selection UI in modules and assignments'
        schema:
          type: boolean
      - name: oauth_compliant
        in: query
        required: false
        description: 'Default: false, if set to true LTI query params will not be copied to the post body.'
        schema:
          type: boolean
      - name: unified_tool_id
        in: query
        required: false
        description: The unique identifier for the tool in LearnPlatform
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id400
              type: object
              properties:
                client_id:
                  type: string
                  description: The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored
                name:
                  type: string
                  description: The name of the tool
                privacy_level:
                  type: string
                  description: 'How much user information to send to the external tool.Allowed values: anonymous, name_only, email_only, public'
                consumer_key:
                  type: string
                  description: The consumer key for the external tool
                shared_secret:
                  type: string
                  description: The shared secret with the external tool
                <placement_name>[<placement_configuration_key>]:
                  type: string
                  description: Set the \ value for a specific placement.
          application/x-www-form-urlencoded:
            schema: *id400
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id401
                required: *id402
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/external_tools:
    get:
      summary: Get Groups External_Tools
      description: "Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/external_tools"
      operationId: get_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: search_term
        in: query
        required: false
        description: The partial name of the tools to match and return.
        schema:
          type: string
      - name: selectable
        in: query
        required: false
        description: If true, then only tools that are meant to be selectable are returned.
        schema:
          type: boolean
      - name: include_parents
        in: query
        required: false
        description: If true, then include tools installed in all accounts above the current context
        schema:
          type: boolean
      - name: placement
        in: query
        required: false
        description: The placement type to filter by.Return all tools at the current context as well as all tools from the parent, and filter the tools list to only those with a placement of ‘editor_button’
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id401
                  required: *id402
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_tools/sessionless_launch:
    get:
      summary: Get Courses Sessionless_Launch
      description: "Get Courses Sessionless_Launch\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/external_tools/sessionless_launch"
      operationId: get_sessionless_launch
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/external_tools/sessionless_launch:
    get:
      summary: Get Accounts Sessionless_Launch
      description: "Returns a sessionless launch url for an external tool. Prefers the resource\\_link\\_lookup\\_uuid, but defaults to the other passed ``` parameters id, url, and launch_type ``` NOTE: Either the resource\\_link\\_lookup\\_uuid, id, or url must be provided unless launch\\_type is assessment or module\\_item.\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/external_tools/sessionless_launch"
      operationId: get_sessionless_launch
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: query
        required: false
        description: The external id of the tool to launch.
        schema:
          type: string
      - name: url
        in: query
        required: false
        description: The LTI launch url for the external tool.
        schema:
          type: string
      - name: assignment_id
        in: query
        required: true
        description: The assignment id for an assignment launch. Required if launch_type is set to “assessment”.
        schema:
          type: string
      - name: module_item_id
        in: query
        required: true
        description: The assignment id for a module item launch. Required if launch_type is set to “module_item”.
        schema:
          type: string
      - name: launch_type
        in: query
        required: false
        description: 'The type of launch to perform on the external tool. Placement names (eg. “course_navigation”) can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.Allowed values: assessment, module_item'
        schema:
          type: string
      - name: resource_link_lookup_uuid
        in: query
        required: false
        description: The identifier to lookup a resource link.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_tools/{external_tool_id}:
    get:
      summary: Get Courses External_Tools
      description: "Get Courses External_Tools\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/external_tools/:external_tool_id"
      operationId: get_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Courses External_Tools
      description: "Put Courses External_Tools\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/external_tools/:external_tool_id"
      operationId: update_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Courses External_Tools
      description: "Delete Courses External_Tools\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/external_tools/:external_tool_id"
      operationId: delete_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/external_tools/{external_tool_id}:
    get:
      summary: Get Accounts External_Tools
      description: "Returns the specified external tool. Returns a [ContextExternalTool](#contextexternaltool) object. ### [Create an external tool](#method.external_tools.create) <a href=\"#method.external_tools.create\" id=\"method.external_tools.create\"></a> [ExternalToolsController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/accounts/:account_id/external_tools/:external_tool_id"
      operationId: get_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id401
                required: *id402
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Put Accounts External_Tools
      description: "Update the specified external tool. Uses same parameters as create. Returns the updated tool. NOTE: Any updates made to LTI 1.3 tools with this API will be overridden if any changes are made to the tool’s associated LTI Registration/Developer Key configuration. In almost all cases, changes should be made to the tool’s associated LTI Registration configuration, not individual tools.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/external_tools/:external_tool_id"
      operationId: update_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id401
                required: *id402
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts External_Tools
      description: "Remove the specified external tool\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/external_tools/:external_tool_id"
      operationId: delete_external_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: external_tool_id
        in: path
        required: true
        description: The external_tool_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id401
                required: *id402
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/external_tools/rce_favorites/{id}:
    post:
      summary: Post Accounts Rce_Favorites
      description: "Mark the specified editor\\_button external tool as a favorite in the RCE editor for courses in the given account and its subaccounts (if the subaccounts haven’t set their own RCE Favorites). This places the tool in a preferred location in the RCE. Cannot mark more than 2 tools as RCE Favorites.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/external_tools/rce_favorites/:id"
      operationId: create_rce_favorites
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Rce_Favorites
      description: "Unmark the specified external tool as a favorite in the RCE editor for the given account. The tool will remain available but will no longer appear in the preferred favorites location.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/external_tools/rce_favorites/:id"
      operationId: delete_rce_favorites
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/external_tools/top_nav_favorites/{id}:
    post:
      summary: Post Accounts Top_Nav_Favorites
      description: "Adds a dedicated button in Top Navigation for the specified tool for the given account. Cannot set more than 2 top\\_navigation Favorites.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id"
      operationId: create_top_nav_favorites
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Accounts Top_Nav_Favorites
      description: "Removes the dedicated button in Top Navigation for the specified tool for the given account.\n\nRequired OAuth scope: url:DELETE|/api/v1/accounts/:account_id/external_tools/top_nav_favorites/:id"
      operationId: delete_top_nav_favorites
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/external_tools/visible_course_nav_tools:
    get:
      summary: Get External_Tools Visible_Course_Nav_Tools
      description: "Get a list of external tools with the course\\_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation. The response format is the same as for List external tools, but with additional context\\_id and context\\_name fields on each element in the array.\n\nRequired OAuth scope: url:GET|/api/v1/external_tools/visible_course_nav_tools"
      operationId: list_visible_course_nav_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: context_codes[]
        in: query
        required: false
        description: List of context_codes to retrieve visible course nav tools for (for example, course_123). Only courses are presently supported.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_tools/visible_course_nav_tools:
    get:
      summary: Get Courses Visible_Course_Nav_Tools
      description: "Get a list of external tools with the course\\_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation. The response format is the same as Get visible course navigation tools.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/external_tools/visible_course_nav_tools"
      operationId: get_visible_course_nav_tools
      tags:
      - External Tools
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_feeds:
    get:
      summary: Get Courses External_Feeds
      description: "Get Courses External_Feeds\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/external_feeds"
      operationId: get_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses External_Feeds
      description: "Post Courses External_Feeds\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/external_feeds"
      operationId: create_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/external_feeds:
    get:
      summary: Get Groups External_Feeds
      description: "Returns the paginated list of External Feeds this course or group.\n\nRequired OAuth scope: url:GET|/api/v1/groups/:group_id/external_feeds"
      operationId: get_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $schema: http://json-schema.org/schema#
                  type: object
                  properties: *id403
                  required: *id404
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Groups External_Feeds
      description: "Create a new external feed for the course or group.\n\nRequired OAuth scope: url:POST|/api/v1/groups/:group_id/external_feeds"
      operationId: create_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: header_match
        in: query
        required: false
        description: If given, only feed entries that contain this string in their title will be imported
        schema:
          type: boolean
      - name: verbosity
        in: query
        required: false
        description: 'Defaults to “full”Allowed values: full, truncate, link_only'
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id405
              type: object
              properties:
                url:
                  type: string
                  description: The url to the external rss or atom feed
          application/x-www-form-urlencoded:
            schema: *id405
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id403
                required: *id404
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/external_feeds/{external_feed_id}:
    delete:
      summary: Delete Courses External_Feeds
      description: "Delete Courses External_Feeds\n\nRequired OAuth scope: url:DELETE|/api/v1/courses/:course_id/external_feeds/:external_feed_id"
      operationId: delete_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: external_feed_id
        in: path
        required: true
        description: The external_feed_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/groups/{group_id}/external_feeds/{external_feed_id}:
    delete:
      summary: Delete Groups External_Feeds
      description: "Deletes the external feed.\n\nRequired OAuth scope: url:DELETE|/api/v1/groups/:group_id/external_feeds/:external_feed_id"
      operationId: delete_external_feeds
      tags:
      - Announcement External Feeds
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: external_feed_id
        in: path
        required: true
        description: The external_feed_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id403
                required: *id404
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/shared_brand_configs:
    post:
      summary: Post Accounts Shared_Brand_Configs
      description: "Create a SharedBrandConfig, which will give the given brand\\_config a name and make it available to other users of this account.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/shared_brand_configs"
      operationId: create_shared_brand_configs
      tags:
      - Shared Brand Configs
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id406
              type: object
              properties:
                shared_brand_config[name]:
                  type: string
                  description: Name to share this BrandConfig (theme) as.
                shared_brand_config[brand_config_md5]:
                  type: string
                  description: MD5 of brand_config to share
          application/x-www-form-urlencoded:
            schema: *id406
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id407
                required: *id408
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/shared_brand_configs/{id}:
    put:
      summary: Put Accounts Shared_Brand_Configs
      description: "Update the specified shared\\_brand\\_config with a new name or to point to a new brand\\_config. Uses same parameters as create.\n\nRequired OAuth scope: url:PUT|/api/v1/accounts/:account_id/shared_brand_configs/:id"
      operationId: update_shared_brand_configs
      tags:
      - Shared Brand Configs
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id407
                required: *id408
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/shared_brand_configs/{id}:
    delete:
      summary: Delete Shared_Brand_Configs
      description: "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in your account will see it as an option to pick from.\n\nRequired OAuth scope: url:DELETE|/api/v1/shared_brand_configs/:id"
      operationId: delete_shared_brand_configs
      tags:
      - Shared Brand Configs
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id407
                required: *id408
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/accounts/{account_id}/developer_keys/{developer_key_id}/developer_key_account_bindings:
    post:
      summary: Post Accounts Developer_Key_Account_Bindings
      description: "Create a new Developer Key Account Binding. The developer key specified in the request URL must be available in the requested account or the requested account’s account chain. If the binding already exists for the specified account/key combination it will be updated.\n\nRequired OAuth scope: url:POST|/api/v1/accounts/:account_id/developer_keys/:developer_key_id/developer_key_account_bindings"
      operationId: create_developer_key_account_bindings
      tags:
      - Developer Key Account Bindings
      security:
      - bearerAuth: []
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account_id identifier
        schema:
          type: string
      - name: developer_key_id
        in: path
        required: true
        description: The developer_key_id identifier
        schema:
          type: string
      - name: workflow_state
        in: query
        required: false
        description: The workflow state for the binding. Must be one of “on”, “off”, or “allow”. Defaults to “off”.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/error_reports:
    post:
      summary: Create Error_Reports
      description: "Create a new error report documenting an experienced problem Performs the same action as when a user uses the “help -> report a problem” dialog.\n\nRequired OAuth scope: url:POST|/api/v1/error_reports"
      operationId: create_error_reports
      tags:
      - Error Reports
      security:
      - bearerAuth: []
      parameters:
      - name: error[url]
        in: query
        required: false
        description: URL from which the report was issued
        schema:
          type: string
      - name: error[email]
        in: query
        required: false
        description: Email address for the reporting user
        schema:
          type: string
      - name: error[comments]
        in: query
        required: false
        description: The long version of the story from the user one what they experienced
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id409
              type: object
              properties:
                error[subject]:
                  type: string
                  description: The summary of the problem
                error[http_env]:
                  type: string
                  description: A collection of metadata about the users’ environment. If not provided, canvas will collect it based on information found in the request. (Doesn’t have to be HTTPENV info, could be anything JSON object that can be serialized as a hash, a mobile app might include relevant metadata for itself)
          application/x-www-form-urlencoded:
            schema: *id409
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/courses/{course_id}/names_and_roles:
    get:
      summary: Get Courses Names_And_Roles
      description: "Return active NamesAndRoleMemberships in the given course.\n\nRequired OAuth scope: url:GET|/api/lti/courses/:course_id/names_and_roles"
      operationId: get_names_and_roles
      tags:
      - Names and Role
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: rlid
        in: query
        required: false
        description: If specified only NamesAndRoleMemberships with access to the LTI link references by this ‘rlidwill be included. Also causes the member array to be included for each returned NamesAndRoleMembership. If therole` parameter is also present, it will be ’and-ed’ together with this parameter
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: If specified only NamesAndRoleMemberships having this role in the given Course will be included. Value must be a fully-qualified LTI/LIS role URN. If the ‘rlid` parameter is also present, it will be ’and-ed’ together with this parameter
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id410
                required: *id411
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/lti/groups/{group_id}/names_and_roles:
    get:
      summary: Get Groups Names_And_Roles
      description: "Return active NamesAndRoleMemberships in the given group.\n\nRequired OAuth scope: url:GET|/api/lti/groups/:group_id/names_and_roles"
      operationId: get_names_and_roles
      tags:
      - Names and Role
      security:
      - bearerAuth: []
      parameters:
      - name: group_id
        in: path
        required: true
        description: The group_id identifier
        schema:
          type: string
      - name: rlid
        in: query
        required: false
        description: If specified only NamesAndRoleMemberships with access to the LTI link references by this ‘rlid` will be included. Also causes the member array to be included for each returned NamesAndRoleMembership. If the role parameter is also present, it will be ’and-ed’ together with this parameter
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: If specified only NamesAndRoleMemberships having this role in the given Group will be included. Value must be a fully-qualified LTI/LIS role URN. Further, only purl.imsglobal.org/vocab/lis/v2/membership#Member and purl.imsglobal.org/vocab/lis/v2/membership#Manager are supported. If the ‘rlid` parameter is also present, it will be ’and-ed’ together with this parameter
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: May be used to limit the number of NamesAndRoleMemberships returned in a page. Defaults to 50.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/schema#
                type: object
                properties: *id410
                required: *id411
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students:
    get:
      summary: Get Courses Moderated_Students
      description: "Returns a paginated list of students selected for moderation Returns a list of [User](../users#user) objects. ### [Select students for moderation](#method.moderation_set.create) <a href=\"#method.moderation_set.create\" id=\"method.moderation_set.create\"></a> [ModerationSetController#create](https://github.com/instructure/canvas-lms/blob/master/app/controllers/moderation_set_controller.rb)\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students"
      operationId: get_moderated_students
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Post Courses Moderated_Students
      description: "Returns an array of users that were selected for moderation\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/moderated_students"
      operationId: create_moderated_students
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id412
              type: object
              properties:
                student_ids[]:
                  type: string
                  description: user ids for students to select for moderation
          application/x-www-form-urlencoded:
            schema: *id412
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select:
    put:
      summary: Put Courses Bulk_Select
      description: "Choose which provisional grades will be received by associated students for an assignment. The caller must be the final grader for the assignment or an admin with :select\\_final\\_grade rights.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/bulk_select"
      operationId: update_bulk_select
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status:
    get:
      summary: Get Courses Status
      description: "Tell whether the student’s submission needs one or more provisional grades.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/status"
      operationId: get_status
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: student_id
        in: query
        required: false
        description: The id of the student to show the status for
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select:
    put:
      summary: Put Courses Select
      description: "Choose which provisional grade the student should receive for a submission. The caller must be the final grader for the assignment or an admin with :select\\_final\\_grade rights.\n\nRequired OAuth scope: url:PUT|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/:provisional_grade_id/select"
      operationId: update_select
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: provisional_grade_id
        in: path
        required: true
        description: The provisional_grade_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish:
    post:
      summary: Post Courses Publish
      description: "Publish the selected provisional grade for all submissions to an assignment. Use the “Select provisional grade” endpoint to choose which provisional grade to publish for a particular submission. Students not in the moderation set will have their one and only provisional grade published. WARNING: This is irreversible. This will overwrite existing grades in the gradebook.\n\nRequired OAuth scope: url:POST|/api/v1/courses/:course_id/assignments/:assignment_id/provisional_grades/publish"
      operationId: create_publish
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status:
    get:
      summary: Get Courses Status
      description: "Determine whether or not the student’s submission needs one or more provisional grades.\n\nRequired OAuth scope: url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/anonymous_provisional_grades/status"
      operationId: get_status
      tags:
      - Moderated Grading
      security:
      - bearerAuth: []
      parameters:
      - name: course_id
        in: path
        required: true
        description: The course_id identifier
        schema:
          type: string
      - name: assignment_id
        in: path
        required: true
        description: The assignment_id identifier
        schema:
          type: string
      - name: anonymous_id
        in: query
        required: false
        description: The id of the student to show the status for
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
